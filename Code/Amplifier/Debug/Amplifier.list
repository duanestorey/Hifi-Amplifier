
Amplifier.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dfec  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  0800e1dc  0800e1dc  0001e1dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000084  0800e474  0800e474  0001e474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000118  0800e4f8  0800e4f8  0001e4f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e610  0800e610  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800e610  0800e610  0001e610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e618  0800e618  0001e618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800e61c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002da8  200001ec  0800e808  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002f94  0800e808  00022f94  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00039030  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007a19  00000000  00000000  00059245  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002208  00000000  00000000  00060c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001fb8  00000000  00000000  00062e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024eef  00000000  00000000  00064e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c49b  00000000  00000000  00089d0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bbb6d  00000000  00000000  000b61aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00171d17  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ab10  00000000  00000000  00171d68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	200001ec 	.word	0x200001ec
 800020c:	00000000 	.word	0x00000000
 8000210:	0800e1c4 	.word	0x0800e1c4

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	200001f0 	.word	0x200001f0
 800022c:	0800e1c4 	.word	0x0800e1c4

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <selfrel_offset31>:
 8000240:	6803      	ldr	r3, [r0, #0]
 8000242:	005a      	lsls	r2, r3, #1
 8000244:	bf4c      	ite	mi
 8000246:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800024a:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 800024e:	4418      	add	r0, r3
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop

08000254 <search_EIT_table>:
 8000254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000258:	b339      	cbz	r1, 80002aa <search_EIT_table+0x56>
 800025a:	1e4f      	subs	r7, r1, #1
 800025c:	4604      	mov	r4, r0
 800025e:	4615      	mov	r5, r2
 8000260:	463e      	mov	r6, r7
 8000262:	f04f 0800 	mov.w	r8, #0
 8000266:	eb08 0106 	add.w	r1, r8, r6
 800026a:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 800026e:	1049      	asrs	r1, r1, #1
 8000270:	eb04 09c1 	add.w	r9, r4, r1, lsl #3
 8000274:	4648      	mov	r0, r9
 8000276:	f7ff ffe3 	bl	8000240 <selfrel_offset31>
 800027a:	4603      	mov	r3, r0
 800027c:	00c8      	lsls	r0, r1, #3
 800027e:	3008      	adds	r0, #8
 8000280:	428f      	cmp	r7, r1
 8000282:	4420      	add	r0, r4
 8000284:	d00b      	beq.n	800029e <search_EIT_table+0x4a>
 8000286:	42ab      	cmp	r3, r5
 8000288:	d80b      	bhi.n	80002a2 <search_EIT_table+0x4e>
 800028a:	f7ff ffd9 	bl	8000240 <selfrel_offset31>
 800028e:	3801      	subs	r0, #1
 8000290:	42a8      	cmp	r0, r5
 8000292:	f101 0801 	add.w	r8, r1, #1
 8000296:	d3e6      	bcc.n	8000266 <search_EIT_table+0x12>
 8000298:	4648      	mov	r0, r9
 800029a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800029e:	42ab      	cmp	r3, r5
 80002a0:	d9fa      	bls.n	8000298 <search_EIT_table+0x44>
 80002a2:	4588      	cmp	r8, r1
 80002a4:	d001      	beq.n	80002aa <search_EIT_table+0x56>
 80002a6:	1e4e      	subs	r6, r1, #1
 80002a8:	e7dd      	b.n	8000266 <search_EIT_table+0x12>
 80002aa:	f04f 0900 	mov.w	r9, #0
 80002ae:	4648      	mov	r0, r9
 80002b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080002b4 <__gnu_unwind_get_pr_addr>:
 80002b4:	2801      	cmp	r0, #1
 80002b6:	d007      	beq.n	80002c8 <__gnu_unwind_get_pr_addr+0x14>
 80002b8:	2802      	cmp	r0, #2
 80002ba:	d007      	beq.n	80002cc <__gnu_unwind_get_pr_addr+0x18>
 80002bc:	4b04      	ldr	r3, [pc, #16]	; (80002d0 <__gnu_unwind_get_pr_addr+0x1c>)
 80002be:	2800      	cmp	r0, #0
 80002c0:	bf0c      	ite	eq
 80002c2:	4618      	moveq	r0, r3
 80002c4:	2000      	movne	r0, #0
 80002c6:	4770      	bx	lr
 80002c8:	4802      	ldr	r0, [pc, #8]	; (80002d4 <__gnu_unwind_get_pr_addr+0x20>)
 80002ca:	4770      	bx	lr
 80002cc:	4802      	ldr	r0, [pc, #8]	; (80002d8 <__gnu_unwind_get_pr_addr+0x24>)
 80002ce:	4770      	bx	lr
 80002d0:	080009a5 	.word	0x080009a5
 80002d4:	080009a9 	.word	0x080009a9
 80002d8:	080009ad 	.word	0x080009ad

080002dc <get_eit_entry>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	4b24      	ldr	r3, [pc, #144]	; (8000370 <get_eit_entry+0x94>)
 80002e0:	4604      	mov	r4, r0
 80002e2:	b083      	sub	sp, #12
 80002e4:	1e8d      	subs	r5, r1, #2
 80002e6:	b33b      	cbz	r3, 8000338 <get_eit_entry+0x5c>
 80002e8:	4628      	mov	r0, r5
 80002ea:	a901      	add	r1, sp, #4
 80002ec:	f3af 8000 	nop.w
 80002f0:	b1e8      	cbz	r0, 800032e <get_eit_entry+0x52>
 80002f2:	9901      	ldr	r1, [sp, #4]
 80002f4:	462a      	mov	r2, r5
 80002f6:	f7ff ffad 	bl	8000254 <search_EIT_table>
 80002fa:	4601      	mov	r1, r0
 80002fc:	b1b8      	cbz	r0, 800032e <get_eit_entry+0x52>
 80002fe:	f7ff ff9f 	bl	8000240 <selfrel_offset31>
 8000302:	684b      	ldr	r3, [r1, #4]
 8000304:	64a0      	str	r0, [r4, #72]	; 0x48
 8000306:	2b01      	cmp	r3, #1
 8000308:	d02e      	beq.n	8000368 <get_eit_entry+0x8c>
 800030a:	2b00      	cmp	r3, #0
 800030c:	db27      	blt.n	800035e <get_eit_entry+0x82>
 800030e:	1d08      	adds	r0, r1, #4
 8000310:	f7ff ff96 	bl	8000240 <selfrel_offset31>
 8000314:	2300      	movs	r3, #0
 8000316:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 800031a:	6803      	ldr	r3, [r0, #0]
 800031c:	2b00      	cmp	r3, #0
 800031e:	db12      	blt.n	8000346 <get_eit_entry+0x6a>
 8000320:	f7ff ff8e 	bl	8000240 <selfrel_offset31>
 8000324:	4603      	mov	r3, r0
 8000326:	2000      	movs	r0, #0
 8000328:	6123      	str	r3, [r4, #16]
 800032a:	b003      	add	sp, #12
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	2300      	movs	r3, #0
 8000330:	2009      	movs	r0, #9
 8000332:	6123      	str	r3, [r4, #16]
 8000334:	b003      	add	sp, #12
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	4b0e      	ldr	r3, [pc, #56]	; (8000374 <get_eit_entry+0x98>)
 800033a:	490f      	ldr	r1, [pc, #60]	; (8000378 <get_eit_entry+0x9c>)
 800033c:	4618      	mov	r0, r3
 800033e:	1ac9      	subs	r1, r1, r3
 8000340:	10c9      	asrs	r1, r1, #3
 8000342:	9101      	str	r1, [sp, #4]
 8000344:	e7d6      	b.n	80002f4 <get_eit_entry+0x18>
 8000346:	f3c3 6003 	ubfx	r0, r3, #24, #4
 800034a:	f7ff ffb3 	bl	80002b4 <__gnu_unwind_get_pr_addr>
 800034e:	2800      	cmp	r0, #0
 8000350:	4603      	mov	r3, r0
 8000352:	bf14      	ite	ne
 8000354:	2000      	movne	r0, #0
 8000356:	2009      	moveq	r0, #9
 8000358:	6123      	str	r3, [r4, #16]
 800035a:	b003      	add	sp, #12
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	2301      	movs	r3, #1
 8000360:	1d08      	adds	r0, r1, #4
 8000362:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 8000366:	e7d8      	b.n	800031a <get_eit_entry+0x3e>
 8000368:	2300      	movs	r3, #0
 800036a:	2005      	movs	r0, #5
 800036c:	6123      	str	r3, [r4, #16]
 800036e:	e7dc      	b.n	800032a <get_eit_entry+0x4e>
 8000370:	00000000 	.word	0x00000000
 8000374:	0800e4f8 	.word	0x0800e4f8
 8000378:	0800e610 	.word	0x0800e610

0800037c <restore_non_core_regs>:
 800037c:	6803      	ldr	r3, [r0, #0]
 800037e:	b510      	push	{r4, lr}
 8000380:	07da      	lsls	r2, r3, #31
 8000382:	4604      	mov	r4, r0
 8000384:	d406      	bmi.n	8000394 <restore_non_core_regs+0x18>
 8000386:	079b      	lsls	r3, r3, #30
 8000388:	f100 0048 	add.w	r0, r0, #72	; 0x48
 800038c:	d509      	bpl.n	80003a2 <restore_non_core_regs+0x26>
 800038e:	f000 fc5d 	bl	8000c4c <__gnu_Unwind_Restore_VFP_D>
 8000392:	6823      	ldr	r3, [r4, #0]
 8000394:	0759      	lsls	r1, r3, #29
 8000396:	d509      	bpl.n	80003ac <restore_non_core_regs+0x30>
 8000398:	071a      	lsls	r2, r3, #28
 800039a:	d50e      	bpl.n	80003ba <restore_non_core_regs+0x3e>
 800039c:	06db      	lsls	r3, r3, #27
 800039e:	d513      	bpl.n	80003c8 <restore_non_core_regs+0x4c>
 80003a0:	bd10      	pop	{r4, pc}
 80003a2:	f000 fc4b 	bl	8000c3c <__gnu_Unwind_Restore_VFP>
 80003a6:	6823      	ldr	r3, [r4, #0]
 80003a8:	0759      	lsls	r1, r3, #29
 80003aa:	d4f5      	bmi.n	8000398 <restore_non_core_regs+0x1c>
 80003ac:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80003b0:	f000 fc54 	bl	8000c5c <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80003b4:	6823      	ldr	r3, [r4, #0]
 80003b6:	071a      	lsls	r2, r3, #28
 80003b8:	d4f0      	bmi.n	800039c <restore_non_core_regs+0x20>
 80003ba:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 80003be:	f000 fc55 	bl	8000c6c <__gnu_Unwind_Restore_WMMXD>
 80003c2:	6823      	ldr	r3, [r4, #0]
 80003c4:	06db      	lsls	r3, r3, #27
 80003c6:	d4eb      	bmi.n	80003a0 <restore_non_core_regs+0x24>
 80003c8:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 80003cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80003d0:	f000 bc90 	b.w	8000cf4 <__gnu_Unwind_Restore_WMMXC>

080003d4 <__gnu_unwind_24bit.constprop.0>:
 80003d4:	2009      	movs	r0, #9
 80003d6:	4770      	bx	lr

080003d8 <_Unwind_decode_typeinfo_ptr.constprop.0>:
 80003d8:	4603      	mov	r3, r0
 80003da:	6800      	ldr	r0, [r0, #0]
 80003dc:	b100      	cbz	r0, 80003e0 <_Unwind_decode_typeinfo_ptr.constprop.0+0x8>
 80003de:	4418      	add	r0, r3
 80003e0:	4770      	bx	lr
 80003e2:	bf00      	nop

080003e4 <_Unwind_DebugHook>:
 80003e4:	4770      	bx	lr
 80003e6:	bf00      	nop

080003e8 <unwind_phase2>:
 80003e8:	b570      	push	{r4, r5, r6, lr}
 80003ea:	4604      	mov	r4, r0
 80003ec:	460e      	mov	r6, r1
 80003ee:	4620      	mov	r0, r4
 80003f0:	6c31      	ldr	r1, [r6, #64]	; 0x40
 80003f2:	f7ff ff73 	bl	80002dc <get_eit_entry>
 80003f6:	4605      	mov	r5, r0
 80003f8:	b998      	cbnz	r0, 8000422 <unwind_phase2+0x3a>
 80003fa:	f8d6 c040 	ldr.w	ip, [r6, #64]	; 0x40
 80003fe:	4632      	mov	r2, r6
 8000400:	4621      	mov	r1, r4
 8000402:	2001      	movs	r0, #1
 8000404:	6923      	ldr	r3, [r4, #16]
 8000406:	f8c4 c014 	str.w	ip, [r4, #20]
 800040a:	4798      	blx	r3
 800040c:	2808      	cmp	r0, #8
 800040e:	d0ee      	beq.n	80003ee <unwind_phase2+0x6>
 8000410:	2807      	cmp	r0, #7
 8000412:	d106      	bne.n	8000422 <unwind_phase2+0x3a>
 8000414:	4628      	mov	r0, r5
 8000416:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8000418:	f7ff ffe4 	bl	80003e4 <_Unwind_DebugHook>
 800041c:	1d30      	adds	r0, r6, #4
 800041e:	f000 fc01 	bl	8000c24 <__restore_core_regs>
 8000422:	f00d fd2c 	bl	800de7e <abort>
 8000426:	bf00      	nop

08000428 <unwind_phase2_forced>:
 8000428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800042c:	f04f 0a00 	mov.w	sl, #0
 8000430:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8000434:	f10d 0e0c 	add.w	lr, sp, #12
 8000438:	f101 0c04 	add.w	ip, r1, #4
 800043c:	68c7      	ldr	r7, [r0, #12]
 800043e:	f8d0 8018 	ldr.w	r8, [r0, #24]
 8000442:	4606      	mov	r6, r0
 8000444:	4614      	mov	r4, r2
 8000446:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800044a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800044e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000452:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000456:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800045a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800045e:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8000462:	ad02      	add	r5, sp, #8
 8000464:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8000468:	f8c5 a000 	str.w	sl, [r5]
 800046c:	e021      	b.n	80004b2 <unwind_phase2_forced+0x8a>
 800046e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8000470:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000474:	4629      	mov	r1, r5
 8000476:	6173      	str	r3, [r6, #20]
 8000478:	a87a      	add	r0, sp, #488	; 0x1e8
 800047a:	f00d fd4f 	bl	800df1c <memcpy>
 800047e:	4631      	mov	r1, r6
 8000480:	4650      	mov	r0, sl
 8000482:	6933      	ldr	r3, [r6, #16]
 8000484:	aa7a      	add	r2, sp, #488	; 0x1e8
 8000486:	4798      	blx	r3
 8000488:	9c88      	ldr	r4, [sp, #544]	; 0x220
 800048a:	4682      	mov	sl, r0
 800048c:	646c      	str	r4, [r5, #68]	; 0x44
 800048e:	4633      	mov	r3, r6
 8000490:	4632      	mov	r2, r6
 8000492:	4649      	mov	r1, r9
 8000494:	2001      	movs	r0, #1
 8000496:	e9cd 5800 	strd	r5, r8, [sp]
 800049a:	47b8      	blx	r7
 800049c:	4604      	mov	r4, r0
 800049e:	b9f0      	cbnz	r0, 80004de <unwind_phase2_forced+0xb6>
 80004a0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80004a4:	4628      	mov	r0, r5
 80004a6:	a97a      	add	r1, sp, #488	; 0x1e8
 80004a8:	f00d fd38 	bl	800df1c <memcpy>
 80004ac:	f1ba 0f08 	cmp.w	sl, #8
 80004b0:	d11b      	bne.n	80004ea <unwind_phase2_forced+0xc2>
 80004b2:	4630      	mov	r0, r6
 80004b4:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80004b6:	f7ff ff11 	bl	80002dc <get_eit_entry>
 80004ba:	f104 0909 	add.w	r9, r4, #9
 80004be:	fa5f fa89 	uxtb.w	sl, r9
 80004c2:	4604      	mov	r4, r0
 80004c4:	2800      	cmp	r0, #0
 80004c6:	d0d2      	beq.n	800046e <unwind_phase2_forced+0x46>
 80004c8:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 80004ca:	4633      	mov	r3, r6
 80004cc:	6469      	str	r1, [r5, #68]	; 0x44
 80004ce:	4632      	mov	r2, r6
 80004d0:	2001      	movs	r0, #1
 80004d2:	e9cd 5800 	strd	r5, r8, [sp]
 80004d6:	f04a 0110 	orr.w	r1, sl, #16
 80004da:	47b8      	blx	r7
 80004dc:	b100      	cbz	r0, 80004e0 <unwind_phase2_forced+0xb8>
 80004de:	2409      	movs	r4, #9
 80004e0:	4620      	mov	r0, r4
 80004e2:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1ba 0f07 	cmp.w	sl, #7
 80004ee:	d1f6      	bne.n	80004de <unwind_phase2_forced+0xb6>
 80004f0:	4620      	mov	r0, r4
 80004f2:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80004f4:	f7ff ff76 	bl	80003e4 <_Unwind_DebugHook>
 80004f8:	a803      	add	r0, sp, #12
 80004fa:	f000 fb93 	bl	8000c24 <__restore_core_regs>
 80004fe:	bf00      	nop

08000500 <_Unwind_GetCFA>:
 8000500:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8000502:	4770      	bx	lr

08000504 <__gnu_Unwind_RaiseException>:
 8000504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000506:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800050a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800050c:	b0f9      	sub	sp, #484	; 0x1e4
 800050e:	640b      	str	r3, [r1, #64]	; 0x40
 8000510:	ac01      	add	r4, sp, #4
 8000512:	f101 0c04 	add.w	ip, r1, #4
 8000516:	460e      	mov	r6, r1
 8000518:	4605      	mov	r5, r0
 800051a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800051e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000520:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000524:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000526:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800052a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800052c:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8000530:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000534:	9700      	str	r7, [sp, #0]
 8000536:	e006      	b.n	8000546 <__gnu_Unwind_RaiseException+0x42>
 8000538:	466a      	mov	r2, sp
 800053a:	4629      	mov	r1, r5
 800053c:	692b      	ldr	r3, [r5, #16]
 800053e:	4798      	blx	r3
 8000540:	2808      	cmp	r0, #8
 8000542:	4604      	mov	r4, r0
 8000544:	d108      	bne.n	8000558 <__gnu_Unwind_RaiseException+0x54>
 8000546:	4628      	mov	r0, r5
 8000548:	9910      	ldr	r1, [sp, #64]	; 0x40
 800054a:	f7ff fec7 	bl	80002dc <get_eit_entry>
 800054e:	2800      	cmp	r0, #0
 8000550:	d0f2      	beq.n	8000538 <__gnu_Unwind_RaiseException+0x34>
 8000552:	2009      	movs	r0, #9
 8000554:	b079      	add	sp, #484	; 0x1e4
 8000556:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000558:	4668      	mov	r0, sp
 800055a:	f7ff ff0f 	bl	800037c <restore_non_core_regs>
 800055e:	2c06      	cmp	r4, #6
 8000560:	d1f7      	bne.n	8000552 <__gnu_Unwind_RaiseException+0x4e>
 8000562:	4631      	mov	r1, r6
 8000564:	4628      	mov	r0, r5
 8000566:	f7ff ff3f 	bl	80003e8 <unwind_phase2>
 800056a:	bf00      	nop

0800056c <__gnu_Unwind_ForcedUnwind>:
 800056c:	b410      	push	{r4}
 800056e:	4614      	mov	r4, r2
 8000570:	6184      	str	r4, [r0, #24]
 8000572:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8000574:	60c1      	str	r1, [r0, #12]
 8000576:	2200      	movs	r2, #0
 8000578:	641c      	str	r4, [r3, #64]	; 0x40
 800057a:	4619      	mov	r1, r3
 800057c:	bc10      	pop	{r4}
 800057e:	e753      	b.n	8000428 <unwind_phase2_forced>

08000580 <__gnu_Unwind_Resume>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	6943      	ldr	r3, [r0, #20]
 8000584:	68c6      	ldr	r6, [r0, #12]
 8000586:	640b      	str	r3, [r1, #64]	; 0x40
 8000588:	b9ae      	cbnz	r6, 80005b6 <__gnu_Unwind_Resume+0x36>
 800058a:	460a      	mov	r2, r1
 800058c:	6903      	ldr	r3, [r0, #16]
 800058e:	4604      	mov	r4, r0
 8000590:	460d      	mov	r5, r1
 8000592:	4601      	mov	r1, r0
 8000594:	2002      	movs	r0, #2
 8000596:	4798      	blx	r3
 8000598:	2807      	cmp	r0, #7
 800059a:	d005      	beq.n	80005a8 <__gnu_Unwind_Resume+0x28>
 800059c:	2808      	cmp	r0, #8
 800059e:	d10f      	bne.n	80005c0 <__gnu_Unwind_Resume+0x40>
 80005a0:	4629      	mov	r1, r5
 80005a2:	4620      	mov	r0, r4
 80005a4:	f7ff ff20 	bl	80003e8 <unwind_phase2>
 80005a8:	4630      	mov	r0, r6
 80005aa:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80005ac:	f7ff ff1a 	bl	80003e4 <_Unwind_DebugHook>
 80005b0:	1d28      	adds	r0, r5, #4
 80005b2:	f000 fb37 	bl	8000c24 <__restore_core_regs>
 80005b6:	2201      	movs	r2, #1
 80005b8:	f7ff ff36 	bl	8000428 <unwind_phase2_forced>
 80005bc:	f00d fc5f 	bl	800de7e <abort>
 80005c0:	f00d fc5d 	bl	800de7e <abort>

080005c4 <__gnu_Unwind_Resume_or_Rethrow>:
 80005c4:	68c2      	ldr	r2, [r0, #12]
 80005c6:	b12a      	cbz	r2, 80005d4 <__gnu_Unwind_Resume_or_Rethrow+0x10>
 80005c8:	f8d1 c03c 	ldr.w	ip, [r1, #60]	; 0x3c
 80005cc:	2200      	movs	r2, #0
 80005ce:	f8c1 c040 	str.w	ip, [r1, #64]	; 0x40
 80005d2:	e729      	b.n	8000428 <unwind_phase2_forced>
 80005d4:	e796      	b.n	8000504 <__gnu_Unwind_RaiseException>
 80005d6:	bf00      	nop

080005d8 <_Unwind_Complete>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <_Unwind_DeleteException>:
 80005dc:	6883      	ldr	r3, [r0, #8]
 80005de:	4601      	mov	r1, r0
 80005e0:	b10b      	cbz	r3, 80005e6 <_Unwind_DeleteException+0xa>
 80005e2:	2001      	movs	r0, #1
 80005e4:	4718      	bx	r3
 80005e6:	4770      	bx	lr

080005e8 <_Unwind_VRS_Get>:
 80005e8:	2901      	cmp	r1, #1
 80005ea:	d012      	beq.n	8000612 <_Unwind_VRS_Get+0x2a>
 80005ec:	d809      	bhi.n	8000602 <_Unwind_VRS_Get+0x1a>
 80005ee:	b973      	cbnz	r3, 800060e <_Unwind_VRS_Get+0x26>
 80005f0:	2a0f      	cmp	r2, #15
 80005f2:	d80c      	bhi.n	800060e <_Unwind_VRS_Get+0x26>
 80005f4:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80005f8:	6842      	ldr	r2, [r0, #4]
 80005fa:	4618      	mov	r0, r3
 80005fc:	9b00      	ldr	r3, [sp, #0]
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	4770      	bx	lr
 8000602:	3903      	subs	r1, #3
 8000604:	2901      	cmp	r1, #1
 8000606:	bf94      	ite	ls
 8000608:	2001      	movls	r0, #1
 800060a:	2002      	movhi	r0, #2
 800060c:	4770      	bx	lr
 800060e:	2002      	movs	r0, #2
 8000610:	4770      	bx	lr
 8000612:	4608      	mov	r0, r1
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop

08000618 <_Unwind_GetGR>:
 8000618:	2300      	movs	r3, #0
 800061a:	b500      	push	{lr}
 800061c:	b085      	sub	sp, #20
 800061e:	460a      	mov	r2, r1
 8000620:	a903      	add	r1, sp, #12
 8000622:	9100      	str	r1, [sp, #0]
 8000624:	4619      	mov	r1, r3
 8000626:	f7ff ffdf 	bl	80005e8 <_Unwind_VRS_Get>
 800062a:	9803      	ldr	r0, [sp, #12]
 800062c:	b005      	add	sp, #20
 800062e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000632:	bf00      	nop

08000634 <_Unwind_VRS_Set>:
 8000634:	2901      	cmp	r1, #1
 8000636:	d012      	beq.n	800065e <_Unwind_VRS_Set+0x2a>
 8000638:	d809      	bhi.n	800064e <_Unwind_VRS_Set+0x1a>
 800063a:	b973      	cbnz	r3, 800065a <_Unwind_VRS_Set+0x26>
 800063c:	2a0f      	cmp	r2, #15
 800063e:	d80c      	bhi.n	800065a <_Unwind_VRS_Set+0x26>
 8000640:	9900      	ldr	r1, [sp, #0]
 8000642:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000646:	6809      	ldr	r1, [r1, #0]
 8000648:	4618      	mov	r0, r3
 800064a:	6051      	str	r1, [r2, #4]
 800064c:	4770      	bx	lr
 800064e:	3903      	subs	r1, #3
 8000650:	2901      	cmp	r1, #1
 8000652:	bf94      	ite	ls
 8000654:	2001      	movls	r0, #1
 8000656:	2002      	movhi	r0, #2
 8000658:	4770      	bx	lr
 800065a:	2002      	movs	r0, #2
 800065c:	4770      	bx	lr
 800065e:	4608      	mov	r0, r1
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop

08000664 <_Unwind_SetGR>:
 8000664:	2300      	movs	r3, #0
 8000666:	b510      	push	{r4, lr}
 8000668:	b084      	sub	sp, #16
 800066a:	ac03      	add	r4, sp, #12
 800066c:	9203      	str	r2, [sp, #12]
 800066e:	9400      	str	r4, [sp, #0]
 8000670:	460a      	mov	r2, r1
 8000672:	4619      	mov	r1, r3
 8000674:	f7ff ffde 	bl	8000634 <_Unwind_VRS_Set>
 8000678:	b004      	add	sp, #16
 800067a:	bd10      	pop	{r4, pc}

0800067c <__gnu_Unwind_Backtrace>:
 800067c:	b570      	push	{r4, r5, r6, lr}
 800067e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8000682:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8000684:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 8000688:	6413      	str	r3, [r2, #64]	; 0x40
 800068a:	f10d 0e5c 	add.w	lr, sp, #92	; 0x5c
 800068e:	f102 0c04 	add.w	ip, r2, #4
 8000692:	4605      	mov	r5, r0
 8000694:	460c      	mov	r4, r1
 8000696:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800069a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800069e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80006a2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80006a6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80006aa:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80006ae:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80006b2:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 80006b6:	9616      	str	r6, [sp, #88]	; 0x58
 80006b8:	e012      	b.n	80006e0 <__gnu_Unwind_Backtrace+0x64>
 80006ba:	210c      	movs	r1, #12
 80006bc:	a816      	add	r0, sp, #88	; 0x58
 80006be:	466a      	mov	r2, sp
 80006c0:	f7ff ffd0 	bl	8000664 <_Unwind_SetGR>
 80006c4:	4621      	mov	r1, r4
 80006c6:	a816      	add	r0, sp, #88	; 0x58
 80006c8:	47a8      	blx	r5
 80006ca:	b978      	cbnz	r0, 80006ec <__gnu_Unwind_Backtrace+0x70>
 80006cc:	4669      	mov	r1, sp
 80006ce:	2008      	movs	r0, #8
 80006d0:	9b04      	ldr	r3, [sp, #16]
 80006d2:	aa16      	add	r2, sp, #88	; 0x58
 80006d4:	4798      	blx	r3
 80006d6:	2805      	cmp	r0, #5
 80006d8:	4606      	mov	r6, r0
 80006da:	d008      	beq.n	80006ee <__gnu_Unwind_Backtrace+0x72>
 80006dc:	2809      	cmp	r0, #9
 80006de:	d005      	beq.n	80006ec <__gnu_Unwind_Backtrace+0x70>
 80006e0:	4668      	mov	r0, sp
 80006e2:	9926      	ldr	r1, [sp, #152]	; 0x98
 80006e4:	f7ff fdfa 	bl	80002dc <get_eit_entry>
 80006e8:	2800      	cmp	r0, #0
 80006ea:	d0e6      	beq.n	80006ba <__gnu_Unwind_Backtrace+0x3e>
 80006ec:	2609      	movs	r6, #9
 80006ee:	a816      	add	r0, sp, #88	; 0x58
 80006f0:	f7ff fe44 	bl	800037c <restore_non_core_regs>
 80006f4:	4630      	mov	r0, r6
 80006f6:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
 80006fa:	bd70      	pop	{r4, r5, r6, pc}

080006fc <__gnu_unwind_pr_common>:
 80006fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000700:	461e      	mov	r6, r3
 8000702:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 8000704:	b089      	sub	sp, #36	; 0x24
 8000706:	f854 3b04 	ldr.w	r3, [r4], #4
 800070a:	460d      	mov	r5, r1
 800070c:	4617      	mov	r7, r2
 800070e:	f000 0803 	and.w	r8, r0, #3
 8000712:	9406      	str	r4, [sp, #24]
 8000714:	2e00      	cmp	r6, #0
 8000716:	d079      	beq.n	800080c <__gnu_unwind_pr_common+0x110>
 8000718:	2202      	movs	r2, #2
 800071a:	f88d 201c 	strb.w	r2, [sp, #28]
 800071e:	0c1a      	lsrs	r2, r3, #16
 8000720:	f88d 201d 	strb.w	r2, [sp, #29]
 8000724:	041b      	lsls	r3, r3, #16
 8000726:	b2d2      	uxtb	r2, r2
 8000728:	9305      	str	r3, [sp, #20]
 800072a:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 800072e:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000730:	f1b8 0f02 	cmp.w	r8, #2
 8000734:	bf08      	it	eq
 8000736:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8000738:	f013 0301 	ands.w	r3, r3, #1
 800073c:	d00c      	beq.n	8000758 <__gnu_unwind_pr_common+0x5c>
 800073e:	4638      	mov	r0, r7
 8000740:	a905      	add	r1, sp, #20
 8000742:	f000 fb71 	bl	8000e28 <__gnu_unwind_execute>
 8000746:	b918      	cbnz	r0, 8000750 <__gnu_unwind_pr_common+0x54>
 8000748:	2008      	movs	r0, #8
 800074a:	b009      	add	sp, #36	; 0x24
 800074c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000750:	2009      	movs	r0, #9
 8000752:	b009      	add	sp, #36	; 0x24
 8000754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000758:	f8d4 a000 	ldr.w	sl, [r4]
 800075c:	f1ba 0f00 	cmp.w	sl, #0
 8000760:	d0ed      	beq.n	800073e <__gnu_unwind_pr_common+0x42>
 8000762:	9301      	str	r3, [sp, #4]
 8000764:	f000 0308 	and.w	r3, r0, #8
 8000768:	9302      	str	r3, [sp, #8]
 800076a:	2e02      	cmp	r6, #2
 800076c:	d04a      	beq.n	8000804 <__gnu_unwind_pr_common+0x108>
 800076e:	f8b4 a000 	ldrh.w	sl, [r4]
 8000772:	f8b4 9002 	ldrh.w	r9, [r4, #2]
 8000776:	3404      	adds	r4, #4
 8000778:	6caa      	ldr	r2, [r5, #72]	; 0x48
 800077a:	210f      	movs	r1, #15
 800077c:	4638      	mov	r0, r7
 800077e:	f029 0b01 	bic.w	fp, r9, #1
 8000782:	4493      	add	fp, r2
 8000784:	f7ff ff48 	bl	8000618 <_Unwind_GetGR>
 8000788:	4583      	cmp	fp, r0
 800078a:	d839      	bhi.n	8000800 <__gnu_unwind_pr_common+0x104>
 800078c:	f02a 0201 	bic.w	r2, sl, #1
 8000790:	445a      	add	r2, fp
 8000792:	4282      	cmp	r2, r0
 8000794:	bf94      	ite	ls
 8000796:	2000      	movls	r0, #0
 8000798:	2001      	movhi	r0, #1
 800079a:	ea4f 0349 	mov.w	r3, r9, lsl #1
 800079e:	f003 0302 	and.w	r3, r3, #2
 80007a2:	f00a 0a01 	and.w	sl, sl, #1
 80007a6:	ea43 030a 	orr.w	r3, r3, sl
 80007aa:	2b01      	cmp	r3, #1
 80007ac:	d049      	beq.n	8000842 <__gnu_unwind_pr_common+0x146>
 80007ae:	2b02      	cmp	r3, #2
 80007b0:	d032      	beq.n	8000818 <__gnu_unwind_pr_common+0x11c>
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d1cc      	bne.n	8000750 <__gnu_unwind_pr_common+0x54>
 80007b6:	f1b8 0f00 	cmp.w	r8, #0
 80007ba:	d002      	beq.n	80007c2 <__gnu_unwind_pr_common+0xc6>
 80007bc:	2800      	cmp	r0, #0
 80007be:	f040 80ce 	bne.w	800095e <__gnu_unwind_pr_common+0x262>
 80007c2:	3404      	adds	r4, #4
 80007c4:	f8d4 a000 	ldr.w	sl, [r4]
 80007c8:	f1ba 0f00 	cmp.w	sl, #0
 80007cc:	d1cd      	bne.n	800076a <__gnu_unwind_pr_common+0x6e>
 80007ce:	4638      	mov	r0, r7
 80007d0:	a905      	add	r1, sp, #20
 80007d2:	f000 fb29 	bl	8000e28 <__gnu_unwind_execute>
 80007d6:	2800      	cmp	r0, #0
 80007d8:	d1ba      	bne.n	8000750 <__gnu_unwind_pr_common+0x54>
 80007da:	9b01      	ldr	r3, [sp, #4]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d0b3      	beq.n	8000748 <__gnu_unwind_pr_common+0x4c>
 80007e0:	210f      	movs	r1, #15
 80007e2:	4638      	mov	r0, r7
 80007e4:	f7ff ff18 	bl	8000618 <_Unwind_GetGR>
 80007e8:	210e      	movs	r1, #14
 80007ea:	4602      	mov	r2, r0
 80007ec:	4638      	mov	r0, r7
 80007ee:	f7ff ff39 	bl	8000664 <_Unwind_SetGR>
 80007f2:	4638      	mov	r0, r7
 80007f4:	210f      	movs	r1, #15
 80007f6:	4a6a      	ldr	r2, [pc, #424]	; (80009a0 <__gnu_unwind_pr_common+0x2a4>)
 80007f8:	f7ff ff34 	bl	8000664 <_Unwind_SetGR>
 80007fc:	2007      	movs	r0, #7
 80007fe:	e7a8      	b.n	8000752 <__gnu_unwind_pr_common+0x56>
 8000800:	2000      	movs	r0, #0
 8000802:	e7ca      	b.n	800079a <__gnu_unwind_pr_common+0x9e>
 8000804:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8000808:	3408      	adds	r4, #8
 800080a:	e7b5      	b.n	8000778 <__gnu_unwind_pr_common+0x7c>
 800080c:	021b      	lsls	r3, r3, #8
 800080e:	9305      	str	r3, [sp, #20]
 8000810:	2303      	movs	r3, #3
 8000812:	f8ad 301c 	strh.w	r3, [sp, #28]
 8000816:	e78a      	b.n	800072e <__gnu_unwind_pr_common+0x32>
 8000818:	6823      	ldr	r3, [r4, #0]
 800081a:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 800081e:	f1b8 0f00 	cmp.w	r8, #0
 8000822:	d145      	bne.n	80008b0 <__gnu_unwind_pr_common+0x1b4>
 8000824:	b128      	cbz	r0, 8000832 <__gnu_unwind_pr_common+0x136>
 8000826:	9a02      	ldr	r2, [sp, #8]
 8000828:	2a00      	cmp	r2, #0
 800082a:	d05c      	beq.n	80008e6 <__gnu_unwind_pr_common+0x1ea>
 800082c:	f1bb 0f00 	cmp.w	fp, #0
 8000830:	d074      	beq.n	800091c <__gnu_unwind_pr_common+0x220>
 8000832:	2b00      	cmp	r3, #0
 8000834:	da00      	bge.n	8000838 <__gnu_unwind_pr_common+0x13c>
 8000836:	3404      	adds	r4, #4
 8000838:	f10b 0b01 	add.w	fp, fp, #1
 800083c:	eb04 048b 	add.w	r4, r4, fp, lsl #2
 8000840:	e7c0      	b.n	80007c4 <__gnu_unwind_pr_common+0xc8>
 8000842:	f1b8 0f00 	cmp.w	r8, #0
 8000846:	d119      	bne.n	800087c <__gnu_unwind_pr_common+0x180>
 8000848:	b1b0      	cbz	r0, 8000878 <__gnu_unwind_pr_common+0x17c>
 800084a:	6863      	ldr	r3, [r4, #4]
 800084c:	6822      	ldr	r2, [r4, #0]
 800084e:	1c99      	adds	r1, r3, #2
 8000850:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8000854:	f43f af7c 	beq.w	8000750 <__gnu_unwind_pr_common+0x54>
 8000858:	f105 0158 	add.w	r1, r5, #88	; 0x58
 800085c:	3301      	adds	r3, #1
 800085e:	9104      	str	r1, [sp, #16]
 8000860:	f000 8091 	beq.w	8000986 <__gnu_unwind_pr_common+0x28a>
 8000864:	1d20      	adds	r0, r4, #4
 8000866:	f7ff fdb7 	bl	80003d8 <_Unwind_decode_typeinfo_ptr.constprop.0>
 800086a:	ab04      	add	r3, sp, #16
 800086c:	4601      	mov	r1, r0
 800086e:	4628      	mov	r0, r5
 8000870:	f3af 8000 	nop.w
 8000874:	2800      	cmp	r0, #0
 8000876:	d15c      	bne.n	8000932 <__gnu_unwind_pr_common+0x236>
 8000878:	3408      	adds	r4, #8
 800087a:	e7a3      	b.n	80007c4 <__gnu_unwind_pr_common+0xc8>
 800087c:	210d      	movs	r1, #13
 800087e:	4638      	mov	r0, r7
 8000880:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8000884:	f7ff fec8 	bl	8000618 <_Unwind_GetGR>
 8000888:	4581      	cmp	r9, r0
 800088a:	d1f5      	bne.n	8000878 <__gnu_unwind_pr_common+0x17c>
 800088c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800088e:	429c      	cmp	r4, r3
 8000890:	d1f2      	bne.n	8000878 <__gnu_unwind_pr_common+0x17c>
 8000892:	4620      	mov	r0, r4
 8000894:	f7ff fcd4 	bl	8000240 <selfrel_offset31>
 8000898:	210f      	movs	r1, #15
 800089a:	4602      	mov	r2, r0
 800089c:	4638      	mov	r0, r7
 800089e:	f7ff fee1 	bl	8000664 <_Unwind_SetGR>
 80008a2:	4638      	mov	r0, r7
 80008a4:	462a      	mov	r2, r5
 80008a6:	2100      	movs	r1, #0
 80008a8:	f7ff fedc 	bl	8000664 <_Unwind_SetGR>
 80008ac:	2007      	movs	r0, #7
 80008ae:	e750      	b.n	8000752 <__gnu_unwind_pr_common+0x56>
 80008b0:	210d      	movs	r1, #13
 80008b2:	4638      	mov	r0, r7
 80008b4:	f8d5 9020 	ldr.w	r9, [r5, #32]
 80008b8:	f7ff feae 	bl	8000618 <_Unwind_GetGR>
 80008bc:	4581      	cmp	r9, r0
 80008be:	d001      	beq.n	80008c4 <__gnu_unwind_pr_common+0x1c8>
 80008c0:	6823      	ldr	r3, [r4, #0]
 80008c2:	e7b6      	b.n	8000832 <__gnu_unwind_pr_common+0x136>
 80008c4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80008c6:	429c      	cmp	r4, r3
 80008c8:	d1fa      	bne.n	80008c0 <__gnu_unwind_pr_common+0x1c4>
 80008ca:	2304      	movs	r3, #4
 80008cc:	2200      	movs	r2, #0
 80008ce:	e9c5 230b 	strd	r2, r3, [r5, #44]	; 0x2c
 80008d2:	18e3      	adds	r3, r4, r3
 80008d4:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
 80008d8:	636b      	str	r3, [r5, #52]	; 0x34
 80008da:	6823      	ldr	r3, [r4, #0]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	db5a      	blt.n	8000996 <__gnu_unwind_pr_common+0x29a>
 80008e0:	2301      	movs	r3, #1
 80008e2:	9301      	str	r3, [sp, #4]
 80008e4:	e7a8      	b.n	8000838 <__gnu_unwind_pr_common+0x13c>
 80008e6:	f105 0358 	add.w	r3, r5, #88	; 0x58
 80008ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80008ee:	4691      	mov	r9, r2
 80008f0:	46b0      	mov	r8, r6
 80008f2:	f104 0a04 	add.w	sl, r4, #4
 80008f6:	461e      	mov	r6, r3
 80008f8:	e00e      	b.n	8000918 <__gnu_unwind_pr_common+0x21c>
 80008fa:	4650      	mov	r0, sl
 80008fc:	9604      	str	r6, [sp, #16]
 80008fe:	f7ff fd6b 	bl	80003d8 <_Unwind_decode_typeinfo_ptr.constprop.0>
 8000902:	2200      	movs	r2, #0
 8000904:	4601      	mov	r1, r0
 8000906:	ab04      	add	r3, sp, #16
 8000908:	4628      	mov	r0, r5
 800090a:	f109 0901 	add.w	r9, r9, #1
 800090e:	f10a 0a04 	add.w	sl, sl, #4
 8000912:	f3af 8000 	nop.w
 8000916:	b9e8      	cbnz	r0, 8000954 <__gnu_unwind_pr_common+0x258>
 8000918:	45d9      	cmp	r9, fp
 800091a:	d1ee      	bne.n	80008fa <__gnu_unwind_pr_common+0x1fe>
 800091c:	210d      	movs	r1, #13
 800091e:	4638      	mov	r0, r7
 8000920:	f7ff fe7a 	bl	8000618 <_Unwind_GetGR>
 8000924:	4603      	mov	r3, r0
 8000926:	9a04      	ldr	r2, [sp, #16]
 8000928:	2006      	movs	r0, #6
 800092a:	e9c5 2409 	strd	r2, r4, [r5, #36]	; 0x24
 800092e:	622b      	str	r3, [r5, #32]
 8000930:	e70f      	b.n	8000752 <__gnu_unwind_pr_common+0x56>
 8000932:	4681      	mov	r9, r0
 8000934:	210d      	movs	r1, #13
 8000936:	4638      	mov	r0, r7
 8000938:	f7ff fe6e 	bl	8000618 <_Unwind_GetGR>
 800093c:	f1b9 0f02 	cmp.w	r9, #2
 8000940:	6228      	str	r0, [r5, #32]
 8000942:	d125      	bne.n	8000990 <__gnu_unwind_pr_common+0x294>
 8000944:	462b      	mov	r3, r5
 8000946:	9a04      	ldr	r2, [sp, #16]
 8000948:	f843 2f2c 	str.w	r2, [r3, #44]!
 800094c:	626b      	str	r3, [r5, #36]	; 0x24
 800094e:	2006      	movs	r0, #6
 8000950:	62ac      	str	r4, [r5, #40]	; 0x28
 8000952:	e6fe      	b.n	8000752 <__gnu_unwind_pr_common+0x56>
 8000954:	4646      	mov	r6, r8
 8000956:	6823      	ldr	r3, [r4, #0]
 8000958:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800095c:	e769      	b.n	8000832 <__gnu_unwind_pr_common+0x136>
 800095e:	4620      	mov	r0, r4
 8000960:	f7ff fc6e 	bl	8000240 <selfrel_offset31>
 8000964:	4602      	mov	r2, r0
 8000966:	3404      	adds	r4, #4
 8000968:	63ac      	str	r4, [r5, #56]	; 0x38
 800096a:	4628      	mov	r0, r5
 800096c:	4614      	mov	r4, r2
 800096e:	f3af 8000 	nop.w
 8000972:	2800      	cmp	r0, #0
 8000974:	f43f aeec 	beq.w	8000750 <__gnu_unwind_pr_common+0x54>
 8000978:	4638      	mov	r0, r7
 800097a:	4622      	mov	r2, r4
 800097c:	210f      	movs	r1, #15
 800097e:	f7ff fe71 	bl	8000664 <_Unwind_SetGR>
 8000982:	2007      	movs	r0, #7
 8000984:	e6e5      	b.n	8000752 <__gnu_unwind_pr_common+0x56>
 8000986:	210d      	movs	r1, #13
 8000988:	4638      	mov	r0, r7
 800098a:	f7ff fe45 	bl	8000618 <_Unwind_GetGR>
 800098e:	6228      	str	r0, [r5, #32]
 8000990:	9b04      	ldr	r3, [sp, #16]
 8000992:	626b      	str	r3, [r5, #36]	; 0x24
 8000994:	e7db      	b.n	800094e <__gnu_unwind_pr_common+0x252>
 8000996:	f10b 0001 	add.w	r0, fp, #1
 800099a:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800099e:	e779      	b.n	8000894 <__gnu_unwind_pr_common+0x198>
 80009a0:	00000000 	.word	0x00000000

080009a4 <__aeabi_unwind_cpp_pr0>:
 80009a4:	2300      	movs	r3, #0
 80009a6:	e6a9      	b.n	80006fc <__gnu_unwind_pr_common>

080009a8 <__aeabi_unwind_cpp_pr1>:
 80009a8:	2301      	movs	r3, #1
 80009aa:	e6a7      	b.n	80006fc <__gnu_unwind_pr_common>

080009ac <__aeabi_unwind_cpp_pr2>:
 80009ac:	2302      	movs	r3, #2
 80009ae:	e6a5      	b.n	80006fc <__gnu_unwind_pr_common>

080009b0 <_Unwind_VRS_Pop>:
 80009b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80009b4:	4606      	mov	r6, r0
 80009b6:	4615      	mov	r5, r2
 80009b8:	461c      	mov	r4, r3
 80009ba:	b0c3      	sub	sp, #268	; 0x10c
 80009bc:	2904      	cmp	r1, #4
 80009be:	f200 80b8 	bhi.w	8000b32 <_Unwind_VRS_Pop+0x182>
 80009c2:	e8df f001 	tbb	[pc, r1]
 80009c6:	569c      	.short	0x569c
 80009c8:	2db6      	.short	0x2db6
 80009ca:	03          	.byte	0x03
 80009cb:	00          	.byte	0x00
 80009cc:	2c00      	cmp	r4, #0
 80009ce:	f040 80b0 	bne.w	8000b32 <_Unwind_VRS_Pop+0x182>
 80009d2:	2a10      	cmp	r2, #16
 80009d4:	f200 80ad 	bhi.w	8000b32 <_Unwind_VRS_Pop+0x182>
 80009d8:	6803      	ldr	r3, [r0, #0]
 80009da:	06d8      	lsls	r0, r3, #27
 80009dc:	f100 80f1 	bmi.w	8000bc2 <_Unwind_VRS_Pop+0x212>
 80009e0:	af20      	add	r7, sp, #128	; 0x80
 80009e2:	4638      	mov	r0, r7
 80009e4:	f000 f990 	bl	8000d08 <__gnu_Unwind_Save_WMMXC>
 80009e8:	2401      	movs	r4, #1
 80009ea:	4638      	mov	r0, r7
 80009ec:	2300      	movs	r3, #0
 80009ee:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 80009f0:	fa04 f203 	lsl.w	r2, r4, r3
 80009f4:	422a      	tst	r2, r5
 80009f6:	f103 0301 	add.w	r3, r3, #1
 80009fa:	d005      	beq.n	8000a08 <_Unwind_VRS_Pop+0x58>
 80009fc:	460a      	mov	r2, r1
 80009fe:	f852 cb04 	ldr.w	ip, [r2], #4
 8000a02:	4611      	mov	r1, r2
 8000a04:	f8c0 c000 	str.w	ip, [r0]
 8000a08:	2b04      	cmp	r3, #4
 8000a0a:	f100 0004 	add.w	r0, r0, #4
 8000a0e:	d1ef      	bne.n	80009f0 <_Unwind_VRS_Pop+0x40>
 8000a10:	4638      	mov	r0, r7
 8000a12:	63b1      	str	r1, [r6, #56]	; 0x38
 8000a14:	f000 f96e 	bl	8000cf4 <__gnu_Unwind_Restore_WMMXC>
 8000a18:	2000      	movs	r0, #0
 8000a1a:	b043      	add	sp, #268	; 0x10c
 8000a1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000a20:	2c03      	cmp	r4, #3
 8000a22:	f040 8086 	bne.w	8000b32 <_Unwind_VRS_Pop+0x182>
 8000a26:	b294      	uxth	r4, r2
 8000a28:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 8000a2c:	2b10      	cmp	r3, #16
 8000a2e:	ea4f 4512 	mov.w	r5, r2, lsr #16
 8000a32:	d87e      	bhi.n	8000b32 <_Unwind_VRS_Pop+0x182>
 8000a34:	6803      	ldr	r3, [r0, #0]
 8000a36:	071f      	lsls	r7, r3, #28
 8000a38:	f100 80cb 	bmi.w	8000bd2 <_Unwind_VRS_Pop+0x222>
 8000a3c:	af20      	add	r7, sp, #128	; 0x80
 8000a3e:	4638      	mov	r0, r7
 8000a40:	f000 f936 	bl	8000cb0 <__gnu_Unwind_Save_WMMXD>
 8000a44:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8000a46:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
 8000a4a:	b154      	cbz	r4, 8000a62 <_Unwind_VRS_Pop+0xb2>
 8000a4c:	460b      	mov	r3, r1
 8000a4e:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8000a52:	1ad0      	subs	r0, r2, r3
 8000a54:	00e4      	lsls	r4, r4, #3
 8000a56:	581d      	ldr	r5, [r3, r0]
 8000a58:	f843 5b04 	str.w	r5, [r3], #4
 8000a5c:	428b      	cmp	r3, r1
 8000a5e:	d1fa      	bne.n	8000a56 <_Unwind_VRS_Pop+0xa6>
 8000a60:	4422      	add	r2, r4
 8000a62:	4638      	mov	r0, r7
 8000a64:	63b2      	str	r2, [r6, #56]	; 0x38
 8000a66:	f000 f901 	bl	8000c6c <__gnu_Unwind_Restore_WMMXD>
 8000a6a:	2000      	movs	r0, #0
 8000a6c:	b043      	add	sp, #268	; 0x10c
 8000a6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000a72:	2c01      	cmp	r4, #1
 8000a74:	ea4f 4812 	mov.w	r8, r2, lsr #16
 8000a78:	b295      	uxth	r5, r2
 8000a7a:	d056      	beq.n	8000b2a <_Unwind_VRS_Pop+0x17a>
 8000a7c:	2c05      	cmp	r4, #5
 8000a7e:	d158      	bne.n	8000b32 <_Unwind_VRS_Pop+0x182>
 8000a80:	eb08 0905 	add.w	r9, r8, r5
 8000a84:	f1b9 0f20 	cmp.w	r9, #32
 8000a88:	d853      	bhi.n	8000b32 <_Unwind_VRS_Pop+0x182>
 8000a8a:	f1b8 0f0f 	cmp.w	r8, #15
 8000a8e:	d973      	bls.n	8000b78 <_Unwind_VRS_Pop+0x1c8>
 8000a90:	46a9      	mov	r9, r5
 8000a92:	2d00      	cmp	r5, #0
 8000a94:	f040 8084 	bne.w	8000ba0 <_Unwind_VRS_Pop+0x1f0>
 8000a98:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000a9a:	b365      	cbz	r5, 8000af6 <_Unwind_VRS_Pop+0x146>
 8000a9c:	af20      	add	r7, sp, #128	; 0x80
 8000a9e:	f04f 0900 	mov.w	r9, #0
 8000aa2:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 8000aa6:	3f04      	subs	r7, #4
 8000aa8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8000aac:	f853 1b04 	ldr.w	r1, [r3], #4
 8000ab0:	42ab      	cmp	r3, r5
 8000ab2:	f847 1f04 	str.w	r1, [r7, #4]!
 8000ab6:	d1f9      	bne.n	8000aac <_Unwind_VRS_Pop+0xfc>
 8000ab8:	f1b9 0f00 	cmp.w	r9, #0
 8000abc:	d00f      	beq.n	8000ade <_Unwind_VRS_Pop+0x12e>
 8000abe:	466f      	mov	r7, sp
 8000ac0:	4641      	mov	r1, r8
 8000ac2:	2910      	cmp	r1, #16
 8000ac4:	bf38      	it	cc
 8000ac6:	2110      	movcc	r1, #16
 8000ac8:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8000acc:	3984      	subs	r1, #132	; 0x84
 8000ace:	eb03 05c9 	add.w	r5, r3, r9, lsl #3
 8000ad2:	f853 0b04 	ldr.w	r0, [r3], #4
 8000ad6:	42ab      	cmp	r3, r5
 8000ad8:	f841 0f04 	str.w	r0, [r1, #4]!
 8000adc:	d1f9      	bne.n	8000ad2 <_Unwind_VRS_Pop+0x122>
 8000ade:	2c01      	cmp	r4, #1
 8000ae0:	d07f      	beq.n	8000be2 <_Unwind_VRS_Pop+0x232>
 8000ae2:	f1b8 0f0f 	cmp.w	r8, #15
 8000ae6:	63b5      	str	r5, [r6, #56]	; 0x38
 8000ae8:	d942      	bls.n	8000b70 <_Unwind_VRS_Pop+0x1c0>
 8000aea:	f1b9 0f00 	cmp.w	r9, #0
 8000aee:	d002      	beq.n	8000af6 <_Unwind_VRS_Pop+0x146>
 8000af0:	4668      	mov	r0, sp
 8000af2:	f000 f8b3 	bl	8000c5c <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000af6:	2000      	movs	r0, #0
 8000af8:	b043      	add	sp, #268	; 0x10c
 8000afa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000afe:	b9c4      	cbnz	r4, 8000b32 <_Unwind_VRS_Pop+0x182>
 8000b00:	4623      	mov	r3, r4
 8000b02:	2401      	movs	r4, #1
 8000b04:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8000b06:	1d37      	adds	r7, r6, #4
 8000b08:	b2a8      	uxth	r0, r5
 8000b0a:	fa04 f103 	lsl.w	r1, r4, r3
 8000b0e:	4201      	tst	r1, r0
 8000b10:	bf1c      	itt	ne
 8000b12:	f852 1b04 	ldrne.w	r1, [r2], #4
 8000b16:	f847 1023 	strne.w	r1, [r7, r3, lsl #2]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	2b10      	cmp	r3, #16
 8000b1e:	d1f4      	bne.n	8000b0a <_Unwind_VRS_Pop+0x15a>
 8000b20:	f415 5000 	ands.w	r0, r5, #8192	; 0x2000
 8000b24:	d1e7      	bne.n	8000af6 <_Unwind_VRS_Pop+0x146>
 8000b26:	63b2      	str	r2, [r6, #56]	; 0x38
 8000b28:	e004      	b.n	8000b34 <_Unwind_VRS_Pop+0x184>
 8000b2a:	eb08 0305 	add.w	r3, r8, r5
 8000b2e:	2b10      	cmp	r3, #16
 8000b30:	d903      	bls.n	8000b3a <_Unwind_VRS_Pop+0x18a>
 8000b32:	2002      	movs	r0, #2
 8000b34:	b043      	add	sp, #268	; 0x10c
 8000b36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000b3a:	f1b8 0f0f 	cmp.w	r8, #15
 8000b3e:	d8f8      	bhi.n	8000b32 <_Unwind_VRS_Pop+0x182>
 8000b40:	6833      	ldr	r3, [r6, #0]
 8000b42:	07da      	lsls	r2, r3, #31
 8000b44:	d506      	bpl.n	8000b54 <_Unwind_VRS_Pop+0x1a4>
 8000b46:	4630      	mov	r0, r6
 8000b48:	f023 0303 	bic.w	r3, r3, #3
 8000b4c:	f840 3b48 	str.w	r3, [r0], #72
 8000b50:	f000 f878 	bl	8000c44 <__gnu_Unwind_Save_VFP>
 8000b54:	af20      	add	r7, sp, #128	; 0x80
 8000b56:	4638      	mov	r0, r7
 8000b58:	f000 f874 	bl	8000c44 <__gnu_Unwind_Save_VFP>
 8000b5c:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000b5e:	2d00      	cmp	r5, #0
 8000b60:	d19d      	bne.n	8000a9e <_Unwind_VRS_Pop+0xee>
 8000b62:	461d      	mov	r5, r3
 8000b64:	3504      	adds	r5, #4
 8000b66:	4638      	mov	r0, r7
 8000b68:	63b5      	str	r5, [r6, #56]	; 0x38
 8000b6a:	f000 f867 	bl	8000c3c <__gnu_Unwind_Restore_VFP>
 8000b6e:	e7c2      	b.n	8000af6 <_Unwind_VRS_Pop+0x146>
 8000b70:	a820      	add	r0, sp, #128	; 0x80
 8000b72:	f000 f86b 	bl	8000c4c <__gnu_Unwind_Restore_VFP_D>
 8000b76:	e7b8      	b.n	8000aea <_Unwind_VRS_Pop+0x13a>
 8000b78:	f1b9 0f10 	cmp.w	r9, #16
 8000b7c:	d93f      	bls.n	8000bfe <_Unwind_VRS_Pop+0x24e>
 8000b7e:	f1a9 0910 	sub.w	r9, r9, #16
 8000b82:	6833      	ldr	r3, [r6, #0]
 8000b84:	07d9      	lsls	r1, r3, #31
 8000b86:	d508      	bpl.n	8000b9a <_Unwind_VRS_Pop+0x1ea>
 8000b88:	4630      	mov	r0, r6
 8000b8a:	f023 0301 	bic.w	r3, r3, #1
 8000b8e:	f043 0302 	orr.w	r3, r3, #2
 8000b92:	f840 3b48 	str.w	r3, [r0], #72
 8000b96:	f000 f85d 	bl	8000c54 <__gnu_Unwind_Save_VFP_D>
 8000b9a:	f1b9 0f00 	cmp.w	r9, #0
 8000b9e:	d031      	beq.n	8000c04 <_Unwind_VRS_Pop+0x254>
 8000ba0:	6833      	ldr	r3, [r6, #0]
 8000ba2:	075a      	lsls	r2, r3, #29
 8000ba4:	d41f      	bmi.n	8000be6 <_Unwind_VRS_Pop+0x236>
 8000ba6:	f1b8 0f0f 	cmp.w	r8, #15
 8000baa:	d924      	bls.n	8000bf6 <_Unwind_VRS_Pop+0x246>
 8000bac:	466f      	mov	r7, sp
 8000bae:	f1c8 0510 	rsb	r5, r8, #16
 8000bb2:	4638      	mov	r0, r7
 8000bb4:	f000 f856 	bl	8000c64 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000bb8:	2d00      	cmp	r5, #0
 8000bba:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000bbc:	dd80      	ble.n	8000ac0 <_Unwind_VRS_Pop+0x110>
 8000bbe:	af20      	add	r7, sp, #128	; 0x80
 8000bc0:	e76f      	b.n	8000aa2 <_Unwind_VRS_Pop+0xf2>
 8000bc2:	f023 0310 	bic.w	r3, r3, #16
 8000bc6:	6033      	str	r3, [r6, #0]
 8000bc8:	f506 70e8 	add.w	r0, r6, #464	; 0x1d0
 8000bcc:	f000 f89c 	bl	8000d08 <__gnu_Unwind_Save_WMMXC>
 8000bd0:	e706      	b.n	80009e0 <_Unwind_VRS_Pop+0x30>
 8000bd2:	f023 0308 	bic.w	r3, r3, #8
 8000bd6:	6003      	str	r3, [r0, #0]
 8000bd8:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 8000bdc:	f000 f868 	bl	8000cb0 <__gnu_Unwind_Save_WMMXD>
 8000be0:	e72c      	b.n	8000a3c <_Unwind_VRS_Pop+0x8c>
 8000be2:	af20      	add	r7, sp, #128	; 0x80
 8000be4:	e7be      	b.n	8000b64 <_Unwind_VRS_Pop+0x1b4>
 8000be6:	4630      	mov	r0, r6
 8000be8:	f023 0304 	bic.w	r3, r3, #4
 8000bec:	f840 3bd0 	str.w	r3, [r0], #208
 8000bf0:	f000 f838 	bl	8000c64 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000bf4:	e7d7      	b.n	8000ba6 <_Unwind_VRS_Pop+0x1f6>
 8000bf6:	a820      	add	r0, sp, #128	; 0x80
 8000bf8:	f000 f82c 	bl	8000c54 <__gnu_Unwind_Save_VFP_D>
 8000bfc:	e7d6      	b.n	8000bac <_Unwind_VRS_Pop+0x1fc>
 8000bfe:	f04f 0900 	mov.w	r9, #0
 8000c02:	e7be      	b.n	8000b82 <_Unwind_VRS_Pop+0x1d2>
 8000c04:	f1b8 0f0f 	cmp.w	r8, #15
 8000c08:	f63f af46 	bhi.w	8000a98 <_Unwind_VRS_Pop+0xe8>
 8000c0c:	af20      	add	r7, sp, #128	; 0x80
 8000c0e:	4638      	mov	r0, r7
 8000c10:	f000 f820 	bl	8000c54 <__gnu_Unwind_Save_VFP_D>
 8000c14:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000c16:	2d00      	cmp	r5, #0
 8000c18:	f47f af41 	bne.w	8000a9e <_Unwind_VRS_Pop+0xee>
 8000c1c:	4638      	mov	r0, r7
 8000c1e:	f000 f815 	bl	8000c4c <__gnu_Unwind_Restore_VFP_D>
 8000c22:	e768      	b.n	8000af6 <_Unwind_VRS_Pop+0x146>

08000c24 <__restore_core_regs>:
 8000c24:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8000c28:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8000c2c:	469c      	mov	ip, r3
 8000c2e:	46a6      	mov	lr, r4
 8000c30:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8000c34:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8000c38:	46e5      	mov	sp, ip
 8000c3a:	bd00      	pop	{pc}

08000c3c <__gnu_Unwind_Restore_VFP>:
 8000c3c:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop

08000c44 <__gnu_Unwind_Save_VFP>:
 8000c44:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <__gnu_Unwind_Restore_VFP_D>:
 8000c4c:	ec90 0b20 	vldmia	r0, {d0-d15}
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop

08000c54 <__gnu_Unwind_Save_VFP_D>:
 8000c54:	ec80 0b20 	vstmia	r0, {d0-d15}
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8000c5c:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop

08000c64 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8000c64:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop

08000c6c <__gnu_Unwind_Restore_WMMXD>:
 8000c6c:	ecf0 0102 	ldfe	f0, [r0], #8
 8000c70:	ecf0 1102 	ldfe	f1, [r0], #8
 8000c74:	ecf0 2102 	ldfe	f2, [r0], #8
 8000c78:	ecf0 3102 	ldfe	f3, [r0], #8
 8000c7c:	ecf0 4102 	ldfe	f4, [r0], #8
 8000c80:	ecf0 5102 	ldfe	f5, [r0], #8
 8000c84:	ecf0 6102 	ldfe	f6, [r0], #8
 8000c88:	ecf0 7102 	ldfe	f7, [r0], #8
 8000c8c:	ecf0 8102 	ldfp	f0, [r0], #8
 8000c90:	ecf0 9102 	ldfp	f1, [r0], #8
 8000c94:	ecf0 a102 	ldfp	f2, [r0], #8
 8000c98:	ecf0 b102 	ldfp	f3, [r0], #8
 8000c9c:	ecf0 c102 	ldfp	f4, [r0], #8
 8000ca0:	ecf0 d102 	ldfp	f5, [r0], #8
 8000ca4:	ecf0 e102 	ldfp	f6, [r0], #8
 8000ca8:	ecf0 f102 	ldfp	f7, [r0], #8
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop

08000cb0 <__gnu_Unwind_Save_WMMXD>:
 8000cb0:	ece0 0102 	stfe	f0, [r0], #8
 8000cb4:	ece0 1102 	stfe	f1, [r0], #8
 8000cb8:	ece0 2102 	stfe	f2, [r0], #8
 8000cbc:	ece0 3102 	stfe	f3, [r0], #8
 8000cc0:	ece0 4102 	stfe	f4, [r0], #8
 8000cc4:	ece0 5102 	stfe	f5, [r0], #8
 8000cc8:	ece0 6102 	stfe	f6, [r0], #8
 8000ccc:	ece0 7102 	stfe	f7, [r0], #8
 8000cd0:	ece0 8102 	stfp	f0, [r0], #8
 8000cd4:	ece0 9102 	stfp	f1, [r0], #8
 8000cd8:	ece0 a102 	stfp	f2, [r0], #8
 8000cdc:	ece0 b102 	stfp	f3, [r0], #8
 8000ce0:	ece0 c102 	stfp	f4, [r0], #8
 8000ce4:	ece0 d102 	stfp	f5, [r0], #8
 8000ce8:	ece0 e102 	stfp	f6, [r0], #8
 8000cec:	ece0 f102 	stfp	f7, [r0], #8
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop

08000cf4 <__gnu_Unwind_Restore_WMMXC>:
 8000cf4:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8000cf8:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8000cfc:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8000d00:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop

08000d08 <__gnu_Unwind_Save_WMMXC>:
 8000d08:	fca0 8101 	stc2	1, cr8, [r0], #4
 8000d0c:	fca0 9101 	stc2	1, cr9, [r0], #4
 8000d10:	fca0 a101 	stc2	1, cr10, [r0], #4
 8000d14:	fca0 b101 	stc2	1, cr11, [r0], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop

08000d1c <_Unwind_RaiseException>:
 8000d1c:	46ec      	mov	ip, sp
 8000d1e:	b500      	push	{lr}
 8000d20:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000d24:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000d28:	f04f 0300 	mov.w	r3, #0
 8000d2c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000d30:	a901      	add	r1, sp, #4
 8000d32:	f7ff fbe7 	bl	8000504 <__gnu_Unwind_RaiseException>
 8000d36:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000d3a:	b012      	add	sp, #72	; 0x48
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop

08000d40 <_Unwind_Resume>:
 8000d40:	46ec      	mov	ip, sp
 8000d42:	b500      	push	{lr}
 8000d44:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000d48:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000d4c:	f04f 0300 	mov.w	r3, #0
 8000d50:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000d54:	a901      	add	r1, sp, #4
 8000d56:	f7ff fc13 	bl	8000580 <__gnu_Unwind_Resume>
 8000d5a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000d5e:	b012      	add	sp, #72	; 0x48
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop

08000d64 <_Unwind_Resume_or_Rethrow>:
 8000d64:	46ec      	mov	ip, sp
 8000d66:	b500      	push	{lr}
 8000d68:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000d6c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000d78:	a901      	add	r1, sp, #4
 8000d7a:	f7ff fc23 	bl	80005c4 <__gnu_Unwind_Resume_or_Rethrow>
 8000d7e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000d82:	b012      	add	sp, #72	; 0x48
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop

08000d88 <_Unwind_ForcedUnwind>:
 8000d88:	46ec      	mov	ip, sp
 8000d8a:	b500      	push	{lr}
 8000d8c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000d90:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000d94:	f04f 0300 	mov.w	r3, #0
 8000d98:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000d9c:	ab01      	add	r3, sp, #4
 8000d9e:	f7ff fbe5 	bl	800056c <__gnu_Unwind_ForcedUnwind>
 8000da2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000da6:	b012      	add	sp, #72	; 0x48
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop

08000dac <_Unwind_Backtrace>:
 8000dac:	46ec      	mov	ip, sp
 8000dae:	b500      	push	{lr}
 8000db0:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000db4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000db8:	f04f 0300 	mov.w	r3, #0
 8000dbc:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000dc0:	aa01      	add	r2, sp, #4
 8000dc2:	f7ff fc5b 	bl	800067c <__gnu_Unwind_Backtrace>
 8000dc6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000dca:	b012      	add	sp, #72	; 0x48
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop

08000dd0 <next_unwind_byte>:
 8000dd0:	7a02      	ldrb	r2, [r0, #8]
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	b97a      	cbnz	r2, 8000df6 <next_unwind_byte+0x26>
 8000dd6:	7a42      	ldrb	r2, [r0, #9]
 8000dd8:	b1a2      	cbz	r2, 8000e04 <next_unwind_byte+0x34>
 8000dda:	f04f 0c03 	mov.w	ip, #3
 8000dde:	6841      	ldr	r1, [r0, #4]
 8000de0:	3a01      	subs	r2, #1
 8000de2:	7242      	strb	r2, [r0, #9]
 8000de4:	6808      	ldr	r0, [r1, #0]
 8000de6:	1d0a      	adds	r2, r1, #4
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	0202      	lsls	r2, r0, #8
 8000dec:	f883 c008 	strb.w	ip, [r3, #8]
 8000df0:	0e00      	lsrs	r0, r0, #24
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	4770      	bx	lr
 8000df6:	6800      	ldr	r0, [r0, #0]
 8000df8:	3a01      	subs	r2, #1
 8000dfa:	721a      	strb	r2, [r3, #8]
 8000dfc:	0202      	lsls	r2, r0, #8
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	0e00      	lsrs	r0, r0, #24
 8000e02:	4770      	bx	lr
 8000e04:	20b0      	movs	r0, #176	; 0xb0
 8000e06:	4770      	bx	lr

08000e08 <_Unwind_GetGR.constprop.0>:
 8000e08:	2300      	movs	r3, #0
 8000e0a:	b500      	push	{lr}
 8000e0c:	b085      	sub	sp, #20
 8000e0e:	a903      	add	r1, sp, #12
 8000e10:	9100      	str	r1, [sp, #0]
 8000e12:	220c      	movs	r2, #12
 8000e14:	4619      	mov	r1, r3
 8000e16:	f7ff fbe7 	bl	80005e8 <_Unwind_VRS_Get>
 8000e1a:	9803      	ldr	r0, [sp, #12]
 8000e1c:	b005      	add	sp, #20
 8000e1e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e22:	bf00      	nop

08000e24 <unwind_UCB_from_context>:
 8000e24:	e7f0      	b.n	8000e08 <_Unwind_GetGR.constprop.0>
 8000e26:	bf00      	nop

08000e28 <__gnu_unwind_execute>:
 8000e28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e2c:	f04f 0800 	mov.w	r8, #0
 8000e30:	4605      	mov	r5, r0
 8000e32:	460e      	mov	r6, r1
 8000e34:	b085      	sub	sp, #20
 8000e36:	4630      	mov	r0, r6
 8000e38:	f7ff ffca 	bl	8000dd0 <next_unwind_byte>
 8000e3c:	28b0      	cmp	r0, #176	; 0xb0
 8000e3e:	4604      	mov	r4, r0
 8000e40:	f000 80ba 	beq.w	8000fb8 <__gnu_unwind_execute+0x190>
 8000e44:	0607      	lsls	r7, r0, #24
 8000e46:	d520      	bpl.n	8000e8a <__gnu_unwind_execute+0x62>
 8000e48:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8000e4c:	2b80      	cmp	r3, #128	; 0x80
 8000e4e:	d04d      	beq.n	8000eec <__gnu_unwind_execute+0xc4>
 8000e50:	2b90      	cmp	r3, #144	; 0x90
 8000e52:	d036      	beq.n	8000ec2 <__gnu_unwind_execute+0x9a>
 8000e54:	2ba0      	cmp	r3, #160	; 0xa0
 8000e56:	d060      	beq.n	8000f1a <__gnu_unwind_execute+0xf2>
 8000e58:	2bb0      	cmp	r3, #176	; 0xb0
 8000e5a:	d073      	beq.n	8000f44 <__gnu_unwind_execute+0x11c>
 8000e5c:	2bc0      	cmp	r3, #192	; 0xc0
 8000e5e:	f000 808a 	beq.w	8000f76 <__gnu_unwind_execute+0x14e>
 8000e62:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8000e66:	2bd0      	cmp	r3, #208	; 0xd0
 8000e68:	d10b      	bne.n	8000e82 <__gnu_unwind_execute+0x5a>
 8000e6a:	f000 0207 	and.w	r2, r0, #7
 8000e6e:	3201      	adds	r2, #1
 8000e70:	2305      	movs	r3, #5
 8000e72:	2101      	movs	r1, #1
 8000e74:	4628      	mov	r0, r5
 8000e76:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000e7a:	f7ff fd99 	bl	80009b0 <_Unwind_VRS_Pop>
 8000e7e:	2800      	cmp	r0, #0
 8000e80:	d0d9      	beq.n	8000e36 <__gnu_unwind_execute+0xe>
 8000e82:	2009      	movs	r0, #9
 8000e84:	b005      	add	sp, #20
 8000e86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000e8a:	0083      	lsls	r3, r0, #2
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	1d1f      	adds	r7, r3, #4
 8000e90:	2300      	movs	r3, #0
 8000e92:	f10d 090c 	add.w	r9, sp, #12
 8000e96:	4619      	mov	r1, r3
 8000e98:	220d      	movs	r2, #13
 8000e9a:	4628      	mov	r0, r5
 8000e9c:	f8cd 9000 	str.w	r9, [sp]
 8000ea0:	f7ff fba2 	bl	80005e8 <_Unwind_VRS_Get>
 8000ea4:	9b03      	ldr	r3, [sp, #12]
 8000ea6:	0660      	lsls	r0, r4, #25
 8000ea8:	bf4c      	ite	mi
 8000eaa:	1bdf      	submi	r7, r3, r7
 8000eac:	18ff      	addpl	r7, r7, r3
 8000eae:	2300      	movs	r3, #0
 8000eb0:	220d      	movs	r2, #13
 8000eb2:	4628      	mov	r0, r5
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	f8cd 9000 	str.w	r9, [sp]
 8000eba:	9703      	str	r7, [sp, #12]
 8000ebc:	f7ff fbba 	bl	8000634 <_Unwind_VRS_Set>
 8000ec0:	e7b9      	b.n	8000e36 <__gnu_unwind_execute+0xe>
 8000ec2:	f000 030d 	and.w	r3, r0, #13
 8000ec6:	2b0d      	cmp	r3, #13
 8000ec8:	d0db      	beq.n	8000e82 <__gnu_unwind_execute+0x5a>
 8000eca:	2300      	movs	r3, #0
 8000ecc:	af03      	add	r7, sp, #12
 8000ece:	4619      	mov	r1, r3
 8000ed0:	f000 020f 	and.w	r2, r0, #15
 8000ed4:	9700      	str	r7, [sp, #0]
 8000ed6:	4628      	mov	r0, r5
 8000ed8:	f7ff fb86 	bl	80005e8 <_Unwind_VRS_Get>
 8000edc:	2300      	movs	r3, #0
 8000ede:	220d      	movs	r2, #13
 8000ee0:	4628      	mov	r0, r5
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	9700      	str	r7, [sp, #0]
 8000ee6:	f7ff fba5 	bl	8000634 <_Unwind_VRS_Set>
 8000eea:	e7a4      	b.n	8000e36 <__gnu_unwind_execute+0xe>
 8000eec:	4630      	mov	r0, r6
 8000eee:	f7ff ff6f 	bl	8000dd0 <next_unwind_byte>
 8000ef2:	0224      	lsls	r4, r4, #8
 8000ef4:	4320      	orrs	r0, r4
 8000ef6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8000efa:	d0c2      	beq.n	8000e82 <__gnu_unwind_execute+0x5a>
 8000efc:	2300      	movs	r3, #0
 8000efe:	0104      	lsls	r4, r0, #4
 8000f00:	4619      	mov	r1, r3
 8000f02:	4628      	mov	r0, r5
 8000f04:	b2a2      	uxth	r2, r4
 8000f06:	f7ff fd53 	bl	80009b0 <_Unwind_VRS_Pop>
 8000f0a:	2800      	cmp	r0, #0
 8000f0c:	d1b9      	bne.n	8000e82 <__gnu_unwind_execute+0x5a>
 8000f0e:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8000f12:	bf18      	it	ne
 8000f14:	f04f 0801 	movne.w	r8, #1
 8000f18:	e78d      	b.n	8000e36 <__gnu_unwind_execute+0xe>
 8000f1a:	43c3      	mvns	r3, r0
 8000f1c:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8000f20:	f003 0307 	and.w	r3, r3, #7
 8000f24:	411a      	asrs	r2, r3
 8000f26:	2300      	movs	r3, #0
 8000f28:	0701      	lsls	r1, r0, #28
 8000f2a:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8000f2e:	bf48      	it	mi
 8000f30:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8000f34:	4628      	mov	r0, r5
 8000f36:	4619      	mov	r1, r3
 8000f38:	f7ff fd3a 	bl	80009b0 <_Unwind_VRS_Pop>
 8000f3c:	2800      	cmp	r0, #0
 8000f3e:	f43f af7a 	beq.w	8000e36 <__gnu_unwind_execute+0xe>
 8000f42:	e79e      	b.n	8000e82 <__gnu_unwind_execute+0x5a>
 8000f44:	28b1      	cmp	r0, #177	; 0xb1
 8000f46:	d03c      	beq.n	8000fc2 <__gnu_unwind_execute+0x19a>
 8000f48:	28b2      	cmp	r0, #178	; 0xb2
 8000f4a:	f000 80b0 	beq.w	80010ae <__gnu_unwind_execute+0x286>
 8000f4e:	28b3      	cmp	r0, #179	; 0xb3
 8000f50:	d04a      	beq.n	8000fe8 <__gnu_unwind_execute+0x1c0>
 8000f52:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8000f56:	2bb4      	cmp	r3, #180	; 0xb4
 8000f58:	d093      	beq.n	8000e82 <__gnu_unwind_execute+0x5a>
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	f000 0207 	and.w	r2, r0, #7
 8000f60:	441a      	add	r2, r3
 8000f62:	4628      	mov	r0, r5
 8000f64:	4619      	mov	r1, r3
 8000f66:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000f6a:	f7ff fd21 	bl	80009b0 <_Unwind_VRS_Pop>
 8000f6e:	2800      	cmp	r0, #0
 8000f70:	f43f af61 	beq.w	8000e36 <__gnu_unwind_execute+0xe>
 8000f74:	e785      	b.n	8000e82 <__gnu_unwind_execute+0x5a>
 8000f76:	28c6      	cmp	r0, #198	; 0xc6
 8000f78:	d04f      	beq.n	800101a <__gnu_unwind_execute+0x1f2>
 8000f7a:	28c7      	cmp	r0, #199	; 0xc7
 8000f7c:	d061      	beq.n	8001042 <__gnu_unwind_execute+0x21a>
 8000f7e:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8000f82:	2bc0      	cmp	r3, #192	; 0xc0
 8000f84:	d070      	beq.n	8001068 <__gnu_unwind_execute+0x240>
 8000f86:	28c8      	cmp	r0, #200	; 0xc8
 8000f88:	d07c      	beq.n	8001084 <__gnu_unwind_execute+0x25c>
 8000f8a:	28c9      	cmp	r0, #201	; 0xc9
 8000f8c:	f47f af79 	bne.w	8000e82 <__gnu_unwind_execute+0x5a>
 8000f90:	4630      	mov	r0, r6
 8000f92:	f7ff ff1d 	bl	8000dd0 <next_unwind_byte>
 8000f96:	2305      	movs	r3, #5
 8000f98:	4602      	mov	r2, r0
 8000f9a:	2101      	movs	r1, #1
 8000f9c:	4628      	mov	r0, r5
 8000f9e:	0314      	lsls	r4, r2, #12
 8000fa0:	f002 020f 	and.w	r2, r2, #15
 8000fa4:	f404 2470 	and.w	r4, r4, #983040	; 0xf0000
 8000fa8:	440a      	add	r2, r1
 8000faa:	4322      	orrs	r2, r4
 8000fac:	f7ff fd00 	bl	80009b0 <_Unwind_VRS_Pop>
 8000fb0:	2800      	cmp	r0, #0
 8000fb2:	f43f af40 	beq.w	8000e36 <__gnu_unwind_execute+0xe>
 8000fb6:	e764      	b.n	8000e82 <__gnu_unwind_execute+0x5a>
 8000fb8:	f1b8 0f00 	cmp.w	r8, #0
 8000fbc:	d01c      	beq.n	8000ff8 <__gnu_unwind_execute+0x1d0>
 8000fbe:	2000      	movs	r0, #0
 8000fc0:	e760      	b.n	8000e84 <__gnu_unwind_execute+0x5c>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	f7ff ff04 	bl	8000dd0 <next_unwind_byte>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	2800      	cmp	r0, #0
 8000fcc:	f43f af59 	beq.w	8000e82 <__gnu_unwind_execute+0x5a>
 8000fd0:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8000fd4:	f47f af55 	bne.w	8000e82 <__gnu_unwind_execute+0x5a>
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4628      	mov	r0, r5
 8000fdc:	f7ff fce8 	bl	80009b0 <_Unwind_VRS_Pop>
 8000fe0:	2800      	cmp	r0, #0
 8000fe2:	f43f af28 	beq.w	8000e36 <__gnu_unwind_execute+0xe>
 8000fe6:	e74c      	b.n	8000e82 <__gnu_unwind_execute+0x5a>
 8000fe8:	4630      	mov	r0, r6
 8000fea:	f7ff fef1 	bl	8000dd0 <next_unwind_byte>
 8000fee:	2301      	movs	r3, #1
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4628      	mov	r0, r5
 8000ff6:	e7d2      	b.n	8000f9e <__gnu_unwind_execute+0x176>
 8000ff8:	ac03      	add	r4, sp, #12
 8000ffa:	4643      	mov	r3, r8
 8000ffc:	220e      	movs	r2, #14
 8000ffe:	4641      	mov	r1, r8
 8001000:	4628      	mov	r0, r5
 8001002:	9400      	str	r4, [sp, #0]
 8001004:	f7ff faf0 	bl	80005e8 <_Unwind_VRS_Get>
 8001008:	4643      	mov	r3, r8
 800100a:	220f      	movs	r2, #15
 800100c:	4628      	mov	r0, r5
 800100e:	4641      	mov	r1, r8
 8001010:	9400      	str	r4, [sp, #0]
 8001012:	f7ff fb0f 	bl	8000634 <_Unwind_VRS_Set>
 8001016:	4640      	mov	r0, r8
 8001018:	e734      	b.n	8000e84 <__gnu_unwind_execute+0x5c>
 800101a:	4630      	mov	r0, r6
 800101c:	f7ff fed8 	bl	8000dd0 <next_unwind_byte>
 8001020:	4602      	mov	r2, r0
 8001022:	2303      	movs	r3, #3
 8001024:	0314      	lsls	r4, r2, #12
 8001026:	f002 020f 	and.w	r2, r2, #15
 800102a:	f404 2470 	and.w	r4, r4, #983040	; 0xf0000
 800102e:	3201      	adds	r2, #1
 8001030:	4628      	mov	r0, r5
 8001032:	4619      	mov	r1, r3
 8001034:	4322      	orrs	r2, r4
 8001036:	f7ff fcbb 	bl	80009b0 <_Unwind_VRS_Pop>
 800103a:	2800      	cmp	r0, #0
 800103c:	f43f aefb 	beq.w	8000e36 <__gnu_unwind_execute+0xe>
 8001040:	e71f      	b.n	8000e82 <__gnu_unwind_execute+0x5a>
 8001042:	4630      	mov	r0, r6
 8001044:	f7ff fec4 	bl	8000dd0 <next_unwind_byte>
 8001048:	4602      	mov	r2, r0
 800104a:	2800      	cmp	r0, #0
 800104c:	f43f af19 	beq.w	8000e82 <__gnu_unwind_execute+0x5a>
 8001050:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001054:	f47f af15 	bne.w	8000e82 <__gnu_unwind_execute+0x5a>
 8001058:	2104      	movs	r1, #4
 800105a:	4628      	mov	r0, r5
 800105c:	f7ff fca8 	bl	80009b0 <_Unwind_VRS_Pop>
 8001060:	2800      	cmp	r0, #0
 8001062:	f43f aee8 	beq.w	8000e36 <__gnu_unwind_execute+0xe>
 8001066:	e70c      	b.n	8000e82 <__gnu_unwind_execute+0x5a>
 8001068:	2303      	movs	r3, #3
 800106a:	f000 020f 	and.w	r2, r0, #15
 800106e:	3201      	adds	r2, #1
 8001070:	4628      	mov	r0, r5
 8001072:	4619      	mov	r1, r3
 8001074:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8001078:	f7ff fc9a 	bl	80009b0 <_Unwind_VRS_Pop>
 800107c:	2800      	cmp	r0, #0
 800107e:	f43f aeda 	beq.w	8000e36 <__gnu_unwind_execute+0xe>
 8001082:	e6fe      	b.n	8000e82 <__gnu_unwind_execute+0x5a>
 8001084:	4630      	mov	r0, r6
 8001086:	f7ff fea3 	bl	8000dd0 <next_unwind_byte>
 800108a:	4602      	mov	r2, r0
 800108c:	2101      	movs	r1, #1
 800108e:	f002 04f0 	and.w	r4, r2, #240	; 0xf0
 8001092:	f002 020f 	and.w	r2, r2, #15
 8001096:	3410      	adds	r4, #16
 8001098:	440a      	add	r2, r1
 800109a:	2305      	movs	r3, #5
 800109c:	4628      	mov	r0, r5
 800109e:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
 80010a2:	f7ff fc85 	bl	80009b0 <_Unwind_VRS_Pop>
 80010a6:	2800      	cmp	r0, #0
 80010a8:	f43f aec5 	beq.w	8000e36 <__gnu_unwind_execute+0xe>
 80010ac:	e6e9      	b.n	8000e82 <__gnu_unwind_execute+0x5a>
 80010ae:	2300      	movs	r3, #0
 80010b0:	f10d 090c 	add.w	r9, sp, #12
 80010b4:	220d      	movs	r2, #13
 80010b6:	4619      	mov	r1, r3
 80010b8:	4628      	mov	r0, r5
 80010ba:	f8cd 9000 	str.w	r9, [sp]
 80010be:	f7ff fa93 	bl	80005e8 <_Unwind_VRS_Get>
 80010c2:	4630      	mov	r0, r6
 80010c4:	f7ff fe84 	bl	8000dd0 <next_unwind_byte>
 80010c8:	0602      	lsls	r2, r0, #24
 80010ca:	f04f 0402 	mov.w	r4, #2
 80010ce:	d50c      	bpl.n	80010ea <__gnu_unwind_execute+0x2c2>
 80010d0:	9b03      	ldr	r3, [sp, #12]
 80010d2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80010d6:	40a0      	lsls	r0, r4
 80010d8:	4418      	add	r0, r3
 80010da:	9003      	str	r0, [sp, #12]
 80010dc:	4630      	mov	r0, r6
 80010de:	f7ff fe77 	bl	8000dd0 <next_unwind_byte>
 80010e2:	0603      	lsls	r3, r0, #24
 80010e4:	f104 0407 	add.w	r4, r4, #7
 80010e8:	d4f2      	bmi.n	80010d0 <__gnu_unwind_execute+0x2a8>
 80010ea:	9b03      	ldr	r3, [sp, #12]
 80010ec:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 80010f0:	40a2      	lsls	r2, r4
 80010f2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80010f6:	441a      	add	r2, r3
 80010f8:	2300      	movs	r3, #0
 80010fa:	9203      	str	r2, [sp, #12]
 80010fc:	4628      	mov	r0, r5
 80010fe:	220d      	movs	r2, #13
 8001100:	4619      	mov	r1, r3
 8001102:	f8cd 9000 	str.w	r9, [sp]
 8001106:	f7ff fa95 	bl	8000634 <_Unwind_VRS_Set>
 800110a:	e694      	b.n	8000e36 <__gnu_unwind_execute+0xe>

0800110c <__gnu_unwind_frame>:
 800110c:	460b      	mov	r3, r1
 800110e:	f04f 0c03 	mov.w	ip, #3
 8001112:	b500      	push	{lr}
 8001114:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8001116:	4618      	mov	r0, r3
 8001118:	6853      	ldr	r3, [r2, #4]
 800111a:	b085      	sub	sp, #20
 800111c:	3208      	adds	r2, #8
 800111e:	9202      	str	r2, [sp, #8]
 8001120:	a901      	add	r1, sp, #4
 8001122:	0e1a      	lsrs	r2, r3, #24
 8001124:	021b      	lsls	r3, r3, #8
 8001126:	f88d c00c 	strb.w	ip, [sp, #12]
 800112a:	9301      	str	r3, [sp, #4]
 800112c:	f88d 200d 	strb.w	r2, [sp, #13]
 8001130:	f7ff fe7a 	bl	8000e28 <__gnu_unwind_execute>
 8001134:	b005      	add	sp, #20
 8001136:	f85d fb04 	ldr.w	pc, [sp], #4
 800113a:	bf00      	nop

0800113c <_Unwind_GetRegionStart>:
 800113c:	b508      	push	{r3, lr}
 800113e:	f7ff fe71 	bl	8000e24 <unwind_UCB_from_context>
 8001142:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8001144:	bd08      	pop	{r3, pc}
 8001146:	bf00      	nop

08001148 <_Unwind_GetLanguageSpecificData>:
 8001148:	b508      	push	{r3, lr}
 800114a:	f7ff fe6b 	bl	8000e24 <unwind_UCB_from_context>
 800114e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8001150:	79c3      	ldrb	r3, [r0, #7]
 8001152:	3302      	adds	r3, #2
 8001154:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001158:	bd08      	pop	{r3, pc}
 800115a:	bf00      	nop

0800115c <_ZN3LED6setPinEt>:
public:
	LED();
	LED( GPIO_TypeDef*, uint16_t pin );
	virtual ~LED();

	void setPin( uint16_t pin ) { mPin = pin; }
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	460b      	mov	r3, r1
 8001166:	807b      	strh	r3, [r7, #2]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	887a      	ldrh	r2, [r7, #2]
 800116c:	811a      	strh	r2, [r3, #8]
 800116e:	bf00      	nop
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	bc80      	pop	{r7}
 8001176:	4770      	bx	lr

08001178 <_ZN3LED7setPortEP12GPIO_TypeDef>:
	void setPort( GPIO_TypeDef* port ) { mPort = port; }
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6039      	str	r1, [r7, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	683a      	ldr	r2, [r7, #0]
 8001186:	605a      	str	r2, [r3, #4]
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	bc80      	pop	{r7}
 8001190:	4770      	bx	lr

08001192 <_ZN3LED13setPortAndPinEP12GPIO_TypeDeft>:
	void setPortAndPin( GPIO_TypeDef* port, uint16_t pin ) { setPin( pin ); setPort( port ); }
 8001192:	b580      	push	{r7, lr}
 8001194:	b084      	sub	sp, #16
 8001196:	af00      	add	r7, sp, #0
 8001198:	60f8      	str	r0, [r7, #12]
 800119a:	60b9      	str	r1, [r7, #8]
 800119c:	4613      	mov	r3, r2
 800119e:	80fb      	strh	r3, [r7, #6]
 80011a0:	88fb      	ldrh	r3, [r7, #6]
 80011a2:	4619      	mov	r1, r3
 80011a4:	68f8      	ldr	r0, [r7, #12]
 80011a6:	f7ff ffd9 	bl	800115c <_ZN3LED6setPinEt>
 80011aa:	68b9      	ldr	r1, [r7, #8]
 80011ac:	68f8      	ldr	r0, [r7, #12]
 80011ae:	f7ff ffe3 	bl	8001178 <_ZN3LED7setPortEP12GPIO_TypeDef>
 80011b2:	bf00      	nop
 80011b4:	3710      	adds	r7, #16
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
	...

080011bc <_ZN3I2CC1Ev>:
	I2C_HandleTypeDef mI2C;
private:
	uint8_t mBuffer[16] = {0};

public:
	I2C() {}
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	4a07      	ldr	r2, [pc, #28]	; (80011e4 <_ZN3I2CC1Ev+0x28>)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	3358      	adds	r3, #88	; 0x58
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	609a      	str	r2, [r3, #8]
 80011d6:	60da      	str	r2, [r3, #12]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	4618      	mov	r0, r3
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	bc80      	pop	{r7}
 80011e2:	4770      	bx	lr
 80011e4:	0800e330 	.word	0x0800e330

080011e8 <_ZN3I2C10setBusDataE17I2C_HandleTypeDef>:
	I2C( I2C_HandleTypeDef bus );
	virtual ~I2C();

	void setBusData( I2C_HandleTypeDef bus ) { mI2C = bus; }
 80011e8:	b084      	sub	sp, #16
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b082      	sub	sp, #8
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
 80011f2:	f107 0014 	add.w	r0, r7, #20
 80011f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	3304      	adds	r3, #4
 80011fe:	f107 0114 	add.w	r1, r7, #20
 8001202:	2254      	movs	r2, #84	; 0x54
 8001204:	4618      	mov	r0, r3
 8001206:	f00c fe89 	bl	800df1c <memcpy>
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001214:	b004      	add	sp, #16
 8001216:	4770      	bx	lr

08001218 <_ZN9AmplifierC1Ev>:
#include "main.h"
#include "cmsis_os.h"
#include "I2CDevice.h"
#include "DACPCM1681.h"

Amplifier::Amplifier() : mDAC( 0 ) {
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	4a12      	ldr	r2, [pc, #72]	; (800126c <_ZN9AmplifierC1Ev+0x54>)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	3304      	adds	r3, #4
 800122a:	4618      	mov	r0, r3
 800122c:	f000 fd2a 	bl	8001c84 <_ZN2UIC1Ev>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3308      	adds	r3, #8
 8001234:	4618      	mov	r0, r3
 8001236:	f000 fae5 	bl	8001804 <_ZN7DisplayC1Ev>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	3310      	adds	r3, #16
 800123e:	4618      	mov	r0, r3
 8001240:	f000 fcc6 	bl	8001bd0 <_ZN3LEDC1Ev>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	3320      	adds	r3, #32
 8001248:	4618      	mov	r0, r3
 800124a:	f000 fcc1 	bl	8001bd0 <_ZN3LEDC1Ev>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	3330      	adds	r3, #48	; 0x30
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff ffb2 	bl	80011bc <_ZN3I2CC1Ev>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2200      	movs	r2, #0
 800125c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	// TODO Auto-generated constructor stub
}
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4618      	mov	r0, r3
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	0800e27c 	.word	0x0800e27c

08001270 <_ZN9AmplifierD1Ev>:

Amplifier::~Amplifier() {
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	4a10      	ldr	r2, [pc, #64]	; (80012bc <_ZN9AmplifierD1Ev+0x4c>)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	3330      	adds	r3, #48	; 0x30
 8001282:	4618      	mov	r0, r3
 8001284:	f000 fb62 	bl	800194c <_ZN3I2CD1Ev>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	3320      	adds	r3, #32
 800128c:	4618      	mov	r0, r3
 800128e:	f000 fcb7 	bl	8001c00 <_ZN3LEDD1Ev>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	3310      	adds	r3, #16
 8001296:	4618      	mov	r0, r3
 8001298:	f000 fcb2 	bl	8001c00 <_ZN3LEDD1Ev>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3308      	adds	r3, #8
 80012a0:	4618      	mov	r0, r3
 80012a2:	f000 fac1 	bl	8001828 <_ZN7DisplayD1Ev>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	3304      	adds	r3, #4
 80012aa:	4618      	mov	r0, r3
 80012ac:	f000 fcfa 	bl	8001ca4 <_ZN2UID1Ev>
	// TODO Auto-generated destructor stub
}
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	4618      	mov	r0, r3
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	0800e27c 	.word	0x0800e27c

080012c0 <_ZN9AmplifierD0Ev>:
Amplifier::~Amplifier() {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
}
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f7ff ffd1 	bl	8001270 <_ZN9AmplifierD1Ev>
 80012ce:	219c      	movs	r1, #156	; 0x9c
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f00c fd26 	bl	800dd22 <_ZdlPvj>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4618      	mov	r0, r3
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <_ZN9Amplifier10initializeE17I2C_HandleTypeDef>:

void
Amplifier::initialize( I2C_HandleTypeDef bus ) {
 80012e0:	b084      	sub	sp, #16
 80012e2:	b5b0      	push	{r4, r5, r7, lr}
 80012e4:	b094      	sub	sp, #80	; 0x50
 80012e6:	af12      	add	r7, sp, #72	; 0x48
 80012e8:	6078      	str	r0, [r7, #4]
 80012ea:	f107 001c 	add.w	r0, r7, #28
 80012ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	mDolbyLED.setPortAndPin( LED_MUTE_GPIO_Port, LED_MUTE_Pin );
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	3310      	adds	r3, #16
 80012f6:	2208      	movs	r2, #8
 80012f8:	4916      	ldr	r1, [pc, #88]	; (8001354 <_ZN9Amplifier10initializeE17I2C_HandleTypeDef+0x74>)
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff ff49 	bl	8001192 <_ZN3LED13setPortAndPinEP12GPIO_TypeDeft>

	// Take the I2C bus info and configure our internal I2C bus class
	mBusI2C.setBusData( bus );
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8001306:	4668      	mov	r0, sp
 8001308:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800130c:	2248      	movs	r2, #72	; 0x48
 800130e:	4619      	mov	r1, r3
 8001310:	f00c fe04 	bl	800df1c <memcpy>
 8001314:	f107 031c 	add.w	r3, r7, #28
 8001318:	cb0e      	ldmia	r3, {r1, r2, r3}
 800131a:	4620      	mov	r0, r4
 800131c:	f7ff ff64 	bl	80011e8 <_ZN3I2C10setBusDataE17I2C_HandleTypeDef>

	mDAC = new DAC_PCM1681( mBusI2C.makeDevice( 0 ) );
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	3330      	adds	r3, #48	; 0x30
 8001324:	2100      	movs	r1, #0
 8001326:	4618      	mov	r0, r3
 8001328:	f000 fb92 	bl	8001a50 <_ZN3I2C10makeDeviceEh>
 800132c:	4605      	mov	r5, r0
 800132e:	2010      	movs	r0, #16
 8001330:	f00c fcf9 	bl	800dd26 <_Znwj>
 8001334:	4603      	mov	r3, r0
 8001336:	461c      	mov	r4, r3
 8001338:	4629      	mov	r1, r5
 800133a:	4620      	mov	r0, r4
 800133c:	f000 f918 	bl	8001570 <_ZN11DAC_PCM1681C1EP10I2C_Device>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f8c3 4098 	str.w	r4, [r3, #152]	; 0x98
}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001350:	b004      	add	sp, #16
 8001352:	4770      	bx	lr
 8001354:	40011000 	.word	0x40011000

08001358 <_ZN9Amplifier3runEv>:

void Amplifier::run() {
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
	for(;;) {
		osDelay(1);
 8001360:	2001      	movs	r0, #1
 8001362:	f009 fc9d 	bl	800aca0 <osDelay>
		  /*Configure GPIO pin Output Level */
		  HAL_GPIO_WritePin(LED_MUTE_GPIO_Port, LED_MUTE_Pin, GPIO_PIN_SET );
 8001366:	2201      	movs	r2, #1
 8001368:	2108      	movs	r1, #8
 800136a:	480f      	ldr	r0, [pc, #60]	; (80013a8 <_ZN9Amplifier3runEv+0x50>)
 800136c:	f001 fe18 	bl	8002fa0 <HAL_GPIO_WritePin>

		  osDelay( 200 );
 8001370:	20c8      	movs	r0, #200	; 0xc8
 8001372:	f009 fc95 	bl	800aca0 <osDelay>

		  /*Configure GPIO pin Output Level */
		  HAL_GPIO_WritePin(LED_MUTE_GPIO_Port, LED_MUTE_Pin, GPIO_PIN_RESET);
 8001376:	2200      	movs	r2, #0
 8001378:	2108      	movs	r1, #8
 800137a:	480b      	ldr	r0, [pc, #44]	; (80013a8 <_ZN9Amplifier3runEv+0x50>)
 800137c:	f001 fe10 	bl	8002fa0 <HAL_GPIO_WritePin>

		  osDelay( 200 );
 8001380:	20c8      	movs	r0, #200	; 0xc8
 8001382:	f009 fc8d 	bl	800aca0 <osDelay>

		  /*Configure GPIO pin Output Level */
		  HAL_GPIO_WritePin(LED_DOLBY_GPIO_Port, LED_DOLBY_Pin, GPIO_PIN_SET );
 8001386:	2201      	movs	r2, #1
 8001388:	2102      	movs	r1, #2
 800138a:	4808      	ldr	r0, [pc, #32]	; (80013ac <_ZN9Amplifier3runEv+0x54>)
 800138c:	f001 fe08 	bl	8002fa0 <HAL_GPIO_WritePin>

		  osDelay( 200 );
 8001390:	20c8      	movs	r0, #200	; 0xc8
 8001392:	f009 fc85 	bl	800aca0 <osDelay>

		  /*Configure GPIO pin Output Level */
		  HAL_GPIO_WritePin(LED_DOLBY_GPIO_Port, LED_DOLBY_Pin, GPIO_PIN_RESET);
 8001396:	2200      	movs	r2, #0
 8001398:	2102      	movs	r1, #2
 800139a:	4804      	ldr	r0, [pc, #16]	; (80013ac <_ZN9Amplifier3runEv+0x54>)
 800139c:	f001 fe00 	bl	8002fa0 <HAL_GPIO_WritePin>

		  osDelay( 200 );
 80013a0:	20c8      	movs	r0, #200	; 0xc8
 80013a2:	f009 fc7d 	bl	800aca0 <osDelay>
		osDelay(1);
 80013a6:	e7db      	b.n	8001360 <_ZN9Amplifier3runEv+0x8>
 80013a8:	40011000 	.word	0x40011000
 80013ac:	40010800 	.word	0x40010800

080013b0 <_ZN6DAC_IC9isEnabledEv>:

	// the name for this DAC
	virtual std::string name() = 0;
	virtual void init() = 0;

	virtual bool isEnabled() { return true; }
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	2301      	movs	r3, #1
 80013ba:	4618      	mov	r0, r3
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	bc80      	pop	{r7}
 80013c2:	4770      	bx	lr

080013c4 <_ZN6DAC_IC6enableEb>:
	virtual void enable( bool state ) {};
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	460b      	mov	r3, r1
 80013ce:	70fb      	strb	r3, [r7, #3]
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bc80      	pop	{r7}
 80013d8:	4770      	bx	lr

080013da <_ZN6DAC_IC14supportsFormatEh>:
	virtual bool supportsFormat( uint8_t format ) { return false; }
 80013da:	b480      	push	{r7}
 80013dc:	b083      	sub	sp, #12
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
 80013e2:	460b      	mov	r3, r1
 80013e4:	70fb      	strb	r3, [r7, #3]
 80013e6:	2300      	movs	r3, #0
 80013e8:	4618      	mov	r0, r3
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bc80      	pop	{r7}
 80013f0:	4770      	bx	lr

080013f2 <_ZN6DAC_IC14supportsVolumeEv>:
	virtual bool supportsVolume() { return false; }
 80013f2:	b480      	push	{r7}
 80013f4:	b083      	sub	sp, #12
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
 80013fa:	2300      	movs	r3, #0
 80013fc:	4618      	mov	r0, r3
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	bc80      	pop	{r7}
 8001404:	4770      	bx	lr

08001406 <_ZN6DAC_IC12supportsMuteEv>:
	virtual bool supportsMute() { return false; }
 8001406:	b480      	push	{r7}
 8001408:	b083      	sub	sp, #12
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
 800140e:	2300      	movs	r3, #0
 8001410:	4618      	mov	r0, r3
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	bc80      	pop	{r7}
 8001418:	4770      	bx	lr

0800141a <_ZN6DAC_IC8channelsEv>:
	virtual int channels() { return 0; }
 800141a:	b480      	push	{r7}
 800141c:	b083      	sub	sp, #12
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
 8001422:	2300      	movs	r3, #0
 8001424:	4618      	mov	r0, r3
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	bc80      	pop	{r7}
 800142c:	4770      	bx	lr

0800142e <_ZN6DAC_IC16setChannelVolumeEii>:

	// volume is 0 to 63, where 0 is lowest and 63 is highest
	virtual void setChannelVolume( int channel, int volume ) {}
 800142e:	b480      	push	{r7}
 8001430:	b085      	sub	sp, #20
 8001432:	af00      	add	r7, sp, #0
 8001434:	60f8      	str	r0, [r7, #12]
 8001436:	60b9      	str	r1, [r7, #8]
 8001438:	607a      	str	r2, [r7, #4]
 800143a:	bf00      	nop
 800143c:	3714      	adds	r7, #20
 800143e:	46bd      	mov	sp, r7
 8001440:	bc80      	pop	{r7}
 8001442:	4770      	bx	lr

08001444 <_ZN6DAC_IC9setVolumeEi>:

	// sets the volume on all channels
	virtual void setVolume( int volume ) {};
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr

08001458 <_ZN6DAC_IC11muteChannelEib>:

	virtual void muteChannel( int channel, bool enable ) {}
 8001458:	b480      	push	{r7}
 800145a:	b085      	sub	sp, #20
 800145c:	af00      	add	r7, sp, #0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	4613      	mov	r3, r2
 8001464:	71fb      	strb	r3, [r7, #7]
 8001466:	bf00      	nop
 8001468:	3714      	adds	r7, #20
 800146a:	46bd      	mov	sp, r7
 800146c:	bc80      	pop	{r7}
 800146e:	4770      	bx	lr

08001470 <_ZN6DAC_IC4muteEb>:
	virtual void mute( bool enable ) {}
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	460b      	mov	r3, r1
 800147a:	70fb      	strb	r3, [r7, #3]
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	bc80      	pop	{r7}
 8001484:	4770      	bx	lr

08001486 <_ZN6DAC_IC9setFormatEh>:

	virtual void setFormat( uint8_t format ) {};
 8001486:	b480      	push	{r7}
 8001488:	b083      	sub	sp, #12
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
 800148e:	460b      	mov	r3, r1
 8001490:	70fb      	strb	r3, [r7, #3]
 8001492:	bf00      	nop
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	bc80      	pop	{r7}
 800149a:	4770      	bx	lr

0800149c <_ZN6DAC_ICC1Ev>:
 *      Author: duane
 */

#include "DAC.h"

DAC_IC::DAC_IC() {
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	4a04      	ldr	r2, [pc, #16]	; (80014b8 <_ZN6DAC_ICC1Ev+0x1c>)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4618      	mov	r0, r3
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bc80      	pop	{r7}
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	0800e294 	.word	0x0800e294

080014bc <_ZN6DAC_ICD1Ev>:

DAC_IC::~DAC_IC() {
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	4a04      	ldr	r2, [pc, #16]	; (80014d8 <_ZN6DAC_ICD1Ev+0x1c>)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4618      	mov	r0, r3
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bc80      	pop	{r7}
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	0800e294 	.word	0x0800e294

080014dc <_ZN11DAC_PCM16819isEnabledEv>:
	DAC_PCM1681( I2C_Device *device );
	virtual ~DAC_PCM1681();

	virtual void init();

	virtual bool isEnabled() { return mEnabled; }
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	7b5b      	ldrb	r3, [r3, #13]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	bf14      	ite	ne
 80014ec:	2301      	movne	r3, #1
 80014ee:	2300      	moveq	r3, #0
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	4618      	mov	r0, r3
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bc80      	pop	{r7}
 80014fa:	4770      	bx	lr

080014fc <_ZN11DAC_PCM168114supportsVolumeEv>:
	virtual void enable( bool state );

	virtual bool supportsFormat( uint8_t format );
	virtual bool supportsVolume() { return true; }
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	2301      	movs	r3, #1
 8001506:	4618      	mov	r0, r3
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	bc80      	pop	{r7}
 800150e:	4770      	bx	lr

08001510 <_ZN11DAC_PCM168112supportsMuteEv>:
	virtual bool supportsMute() { return true; }
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	2301      	movs	r3, #1
 800151a:	4618      	mov	r0, r3
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	bc80      	pop	{r7}
 8001522:	4770      	bx	lr

08001524 <_ZN11DAC_PCM16818channelsEv>:
	virtual int channels() { return 8; }
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	2308      	movs	r3, #8
 800152e:	4618      	mov	r0, r3
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr

08001538 <_ZN11DAC_PCM16814nameB5cxx11Ev>:

	virtual std::string name() { return "PCM1681"; }
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
 8001542:	f107 030c 	add.w	r3, r7, #12
 8001546:	4618      	mov	r0, r3
 8001548:	f00c fc01 	bl	800dd4e <_ZNSaIcEC1Ev>
 800154c:	f107 030c 	add.w	r3, r7, #12
 8001550:	461a      	mov	r2, r3
 8001552:	4906      	ldr	r1, [pc, #24]	; (800156c <_ZN11DAC_PCM16814nameB5cxx11Ev+0x34>)
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f00c fc57 	bl	800de08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800155a:	f107 030c 	add.w	r3, r7, #12
 800155e:	4618      	mov	r0, r3
 8001560:	f00c fbf6 	bl	800dd50 <_ZNSaIcED1Ev>
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	3710      	adds	r7, #16
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	0800e1dc 	.word	0x0800e1dc

08001570 <_ZN11DAC_PCM1681C1EP10I2C_Device>:
#define PCM1681_REG_MUTE	7
#define PCM1681_REG_ENABLE	8
#define PCM1681_REG_FORMAT	9
#define PCM1681_REG_DAMS	13

DAC_PCM1681::DAC_PCM1681( I2C_Device *device ) : mDevice( device ), mEnabled( true ) {
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff ff8d 	bl	800149c <_ZN6DAC_ICC1Ev>
 8001582:	4a08      	ldr	r2, [pc, #32]	; (80015a4 <_ZN11DAC_PCM1681C1EP10I2C_Device+0x34>)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	683a      	ldr	r2, [r7, #0]
 800158c:	609a      	str	r2, [r3, #8]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2201      	movs	r2, #1
 8001592:	735a      	strb	r2, [r3, #13]
	// TODO Auto-generated constructor stub
	mMuteStatus = 0;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	731a      	strb	r2, [r3, #12]
}
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4618      	mov	r0, r3
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	0800e2d8 	.word	0x0800e2d8

080015a8 <_ZN11DAC_PCM1681D1Ev>:

DAC_PCM1681::~DAC_PCM1681() {
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	4a05      	ldr	r2, [pc, #20]	; (80015c8 <_ZN11DAC_PCM1681D1Ev+0x20>)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff ff7f 	bl	80014bc <_ZN6DAC_ICD1Ev>
	// TODO Auto-generated destructor stub
}
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4618      	mov	r0, r3
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	0800e2d8 	.word	0x0800e2d8

080015cc <_ZN11DAC_PCM1681D0Ev>:
DAC_PCM1681::~DAC_PCM1681() {
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
}
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f7ff ffe7 	bl	80015a8 <_ZN11DAC_PCM1681D1Ev>
 80015da:	2110      	movs	r1, #16
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f00c fba0 	bl	800dd22 <_ZdlPvj>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4618      	mov	r0, r3
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <_ZN11DAC_PCM16816enableEb>:

void
DAC_PCM1681::enable( bool state ) {
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	460b      	mov	r3, r1
 80015f6:	70fb      	strb	r3, [r7, #3]
	if ( state ) {
 80015f8:	78fb      	ldrb	r3, [r7, #3]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d00a      	beq.n	8001614 <_ZN11DAC_PCM16816enableEb+0x28>
		mDevice->writeRegister( PCM1681_REG_ENABLE, 0 );
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6898      	ldr	r0, [r3, #8]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	3314      	adds	r3, #20
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2200      	movs	r2, #0
 800160e:	2108      	movs	r1, #8
 8001610:	4798      	blx	r3
 8001612:	e009      	b.n	8001628 <_ZN11DAC_PCM16816enableEb+0x3c>
	} else {
		mDevice->writeRegister( PCM1681_REG_ENABLE, 0xff );
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6898      	ldr	r0, [r3, #8]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	3314      	adds	r3, #20
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	22ff      	movs	r2, #255	; 0xff
 8001624:	2108      	movs	r1, #8
 8001626:	4798      	blx	r3
	}

	mEnabled = state;
 8001628:	78fa      	ldrb	r2, [r7, #3]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	735a      	strb	r2, [r3, #13]
}
 800162e:	bf00      	nop
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <_ZN11DAC_PCM168114supportsFormatEh>:

bool
DAC_PCM1681::supportsFormat( uint8_t format ) {
 8001636:	b480      	push	{r7}
 8001638:	b083      	sub	sp, #12
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
 800163e:	460b      	mov	r3, r1
 8001640:	70fb      	strb	r3, [r7, #3]
	return ( format == DAC_IC::FORMAT_SONY || format == DAC_IC::FORMAT_I2S );
 8001642:	78fb      	ldrb	r3, [r7, #3]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d002      	beq.n	800164e <_ZN11DAC_PCM168114supportsFormatEh+0x18>
 8001648:	78fb      	ldrb	r3, [r7, #3]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d101      	bne.n	8001652 <_ZN11DAC_PCM168114supportsFormatEh+0x1c>
 800164e:	2301      	movs	r3, #1
 8001650:	e000      	b.n	8001654 <_ZN11DAC_PCM168114supportsFormatEh+0x1e>
 8001652:	2300      	movs	r3, #0
}
 8001654:	4618      	mov	r0, r3
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	bc80      	pop	{r7}
 800165c:	4770      	bx	lr

0800165e <_ZN11DAC_PCM16819setFormatEh>:

void
DAC_PCM1681::setFormat( uint8_t format ) {
 800165e:	b580      	push	{r7, lr}
 8001660:	b084      	sub	sp, #16
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
 8001666:	460b      	mov	r3, r1
 8001668:	70fb      	strb	r3, [r7, #3]
	uint8_t value = 0;
 800166a:	2300      	movs	r3, #0
 800166c:	73fb      	strb	r3, [r7, #15]
	if ( format == FORMAT_SONY ) {
 800166e:	78fb      	ldrb	r3, [r7, #3]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d102      	bne.n	800167a <_ZN11DAC_PCM16819setFormatEh+0x1c>
		value = 5;
 8001674:	2305      	movs	r3, #5
 8001676:	73fb      	strb	r3, [r7, #15]
 8001678:	e004      	b.n	8001684 <_ZN11DAC_PCM16819setFormatEh+0x26>
	} else if ( format == FORMAT_I2S ) {
 800167a:	78fb      	ldrb	r3, [r7, #3]
 800167c:	2b01      	cmp	r3, #1
 800167e:	d101      	bne.n	8001684 <_ZN11DAC_PCM16819setFormatEh+0x26>
		value = 4;
 8001680:	2304      	movs	r3, #4
 8001682:	73fb      	strb	r3, [r7, #15]
	}

	mDevice->writeRegister( PCM1681_REG_FORMAT, value );
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6898      	ldr	r0, [r3, #8]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	3314      	adds	r3, #20
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	7bfa      	ldrb	r2, [r7, #15]
 8001694:	2109      	movs	r1, #9
 8001696:	4798      	blx	r3
}
 8001698:	bf00      	nop
 800169a:	3710      	adds	r7, #16
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <_ZN11DAC_PCM16814initEv>:

void
DAC_PCM1681::init() {
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
	// do setup

	// set digital attenuation range of 0-63db in 0.5db increments
	mDevice->writeRegister( PCM1681_REG_DAMS, 0 );
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6898      	ldr	r0, [r3, #8]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	3314      	adds	r3, #20
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2200      	movs	r2, #0
 80016b8:	210d      	movs	r1, #13
 80016ba:	4798      	blx	r3
}
 80016bc:	bf00      	nop
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <_ZN11DAC_PCM168116setChannelVolumeEii>:

void
DAC_PCM1681::setChannelVolume( int channel, int volume ) {
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
	uint8_t reg = 0;
 80016d0:	2300      	movs	r3, #0
 80016d2:	75fb      	strb	r3, [r7, #23]
	switch( channel ) {
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	2b05      	cmp	r3, #5
 80016d8:	d820      	bhi.n	800171c <_ZN11DAC_PCM168116setChannelVolumeEii+0x58>
 80016da:	a201      	add	r2, pc, #4	; (adr r2, 80016e0 <_ZN11DAC_PCM168116setChannelVolumeEii+0x1c>)
 80016dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016e0:	080016f9 	.word	0x080016f9
 80016e4:	080016ff 	.word	0x080016ff
 80016e8:	08001705 	.word	0x08001705
 80016ec:	0800170b 	.word	0x0800170b
 80016f0:	08001711 	.word	0x08001711
 80016f4:	08001717 	.word	0x08001717
		case FRONT_LEFT:
			reg = 1;
 80016f8:	2301      	movs	r3, #1
 80016fa:	75fb      	strb	r3, [r7, #23]
			break;
 80016fc:	e00e      	b.n	800171c <_ZN11DAC_PCM168116setChannelVolumeEii+0x58>
		case FRONT_RIGHT:
			reg = 2;
 80016fe:	2302      	movs	r3, #2
 8001700:	75fb      	strb	r3, [r7, #23]
			break;
 8001702:	e00b      	b.n	800171c <_ZN11DAC_PCM168116setChannelVolumeEii+0x58>
		case REAR_LEFT:
			reg = 3;
 8001704:	2303      	movs	r3, #3
 8001706:	75fb      	strb	r3, [r7, #23]
			break;
 8001708:	e008      	b.n	800171c <_ZN11DAC_PCM168116setChannelVolumeEii+0x58>
		case REAR_RIGHT:
			reg = 4;
 800170a:	2304      	movs	r3, #4
 800170c:	75fb      	strb	r3, [r7, #23]
			break;
 800170e:	e005      	b.n	800171c <_ZN11DAC_PCM168116setChannelVolumeEii+0x58>
		case CENTER:
			reg = 5;
 8001710:	2305      	movs	r3, #5
 8001712:	75fb      	strb	r3, [r7, #23]
			break;
 8001714:	e002      	b.n	800171c <_ZN11DAC_PCM168116setChannelVolumeEii+0x58>
		case SUBWOOFER:
			reg = 6;
 8001716:	2306      	movs	r3, #6
 8001718:	75fb      	strb	r3, [r7, #23]
			break;
 800171a:	bf00      	nop
	}

	// Clamp the volume to the upper limit
	if ( volume > 127 ) {
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2b7f      	cmp	r3, #127	; 0x7f
 8001720:	dd01      	ble.n	8001726 <_ZN11DAC_PCM168116setChannelVolumeEii+0x62>
		volume = 127;
 8001722:	237f      	movs	r3, #127	; 0x7f
 8001724:	607b      	str	r3, [r7, #4]
	}

	uint8_t volumeLevel = volume + 128;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	b2db      	uxtb	r3, r3
 800172a:	3b80      	subs	r3, #128	; 0x80
 800172c:	75bb      	strb	r3, [r7, #22]
	mDevice->writeRegister( reg, volumeLevel );
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	6898      	ldr	r0, [r3, #8]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	3314      	adds	r3, #20
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	7dba      	ldrb	r2, [r7, #22]
 800173e:	7df9      	ldrb	r1, [r7, #23]
 8001740:	4798      	blx	r3
}
 8001742:	bf00      	nop
 8001744:	3718      	adds	r7, #24
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop

0800174c <_ZN11DAC_PCM16819setVolumeEi>:

void
DAC_PCM1681::setVolume( int volume ) {
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]

}
 8001756:	bf00      	nop
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	bc80      	pop	{r7}
 800175e:	4770      	bx	lr

08001760 <_ZN11DAC_PCM168111muteChannelEib>:

void
DAC_PCM1681::muteChannel( int channel, bool enable ) {
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	4613      	mov	r3, r2
 800176c:	71fb      	strb	r3, [r7, #7]
	uint8_t mask =  ( 1 << ( channel ) );
 800176e:	2201      	movs	r2, #1
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	75fb      	strb	r3, [r7, #23]
	if ( enable ) {
 8001778:	79fb      	ldrb	r3, [r7, #7]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d007      	beq.n	800178e <_ZN11DAC_PCM168111muteChannelEib+0x2e>
		// enable the bit representing this channel
		mMuteStatus = mMuteStatus & mask;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	7b1a      	ldrb	r2, [r3, #12]
 8001782:	7dfb      	ldrb	r3, [r7, #23]
 8001784:	4013      	ands	r3, r2
 8001786:	b2da      	uxtb	r2, r3
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	731a      	strb	r2, [r3, #12]
 800178c:	e00b      	b.n	80017a6 <_ZN11DAC_PCM168111muteChannelEib+0x46>
	} else {
		// disable the bit representing the channel
		mMuteStatus = mMuteStatus & ~mask;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	7b1b      	ldrb	r3, [r3, #12]
 8001792:	b25a      	sxtb	r2, r3
 8001794:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001798:	43db      	mvns	r3, r3
 800179a:	b25b      	sxtb	r3, r3
 800179c:	4013      	ands	r3, r2
 800179e:	b25b      	sxtb	r3, r3
 80017a0:	b2da      	uxtb	r2, r3
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	731a      	strb	r2, [r3, #12]
	}

	mDevice->writeRegister( PCM1681_REG_MUTE, mMuteStatus );
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	6898      	ldr	r0, [r3, #8]
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	3314      	adds	r3, #20
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	68fa      	ldr	r2, [r7, #12]
 80017b6:	7b12      	ldrb	r2, [r2, #12]
 80017b8:	2107      	movs	r1, #7
 80017ba:	4798      	blx	r3
}
 80017bc:	bf00      	nop
 80017be:	3718      	adds	r7, #24
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <_ZN11DAC_PCM16814muteEb>:

void
DAC_PCM1681::mute( bool enable ) {
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	460b      	mov	r3, r1
 80017ce:	70fb      	strb	r3, [r7, #3]
	 if ( enable ) {
 80017d0:	78fb      	ldrb	r3, [r7, #3]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d003      	beq.n	80017de <_ZN11DAC_PCM16814muteEb+0x1a>
		 mMuteStatus = 0xff;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	22ff      	movs	r2, #255	; 0xff
 80017da:	731a      	strb	r2, [r3, #12]
 80017dc:	e002      	b.n	80017e4 <_ZN11DAC_PCM16814muteEb+0x20>
	 } else {
		 mMuteStatus = 0;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2200      	movs	r2, #0
 80017e2:	731a      	strb	r2, [r3, #12]
	 }

	 mDevice->writeRegister( PCM1681_REG_MUTE, mMuteStatus );
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6898      	ldr	r0, [r3, #8]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	3314      	adds	r3, #20
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	7b12      	ldrb	r2, [r2, #12]
 80017f6:	2107      	movs	r1, #7
 80017f8:	4798      	blx	r3
}
 80017fa:	bf00      	nop
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
	...

08001804 <_ZN7DisplayC1Ev>:

#include "Display.h"
#include "main.h"
#include "cmsis_os.h"

Display::Display() : mShouldUpdate( true ) {
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	4a05      	ldr	r2, [pc, #20]	; (8001824 <_ZN7DisplayC1Ev+0x20>)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2201      	movs	r2, #1
 8001816:	711a      	strb	r2, [r3, #4]
	// TODO Auto-generated constructor stub

}
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	4618      	mov	r0, r3
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	bc80      	pop	{r7}
 8001822:	4770      	bx	lr
 8001824:	0800e31c 	.word	0x0800e31c

08001828 <_ZN7DisplayD1Ev>:

Display::~Display() {
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	4a04      	ldr	r2, [pc, #16]	; (8001844 <_ZN7DisplayD1Ev+0x1c>)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4618      	mov	r0, r3
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	bc80      	pop	{r7}
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	0800e31c 	.word	0x0800e31c

08001848 <_ZN7DisplayD0Ev>:
Display::~Display() {
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
}
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f7ff ffe9 	bl	8001828 <_ZN7DisplayD1Ev>
 8001856:	2108      	movs	r1, #8
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f00c fa62 	bl	800dd22 <_ZdlPvj>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4618      	mov	r0, r3
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <_ZN7Display3runEv>:
Display::update() {
	mShouldUpdate = true;
}

void
Display::run() {
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
	for(;;) {
		// Check to see if we need to update the display
		if ( mShouldUpdate ) {
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	791b      	ldrb	r3, [r3, #4]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d002      	beq.n	800187e <_ZN7Display3runEv+0x16>

			// Clear the update for the next time
			mShouldUpdate = false;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2200      	movs	r2, #0
 800187c:	711a      	strb	r2, [r3, #4]
		}

		osDelay( 5 );
 800187e:	2005      	movs	r0, #5
 8001880:	f009 fa0e 	bl	800aca0 <osDelay>
		if ( mShouldUpdate ) {
 8001884:	e7f4      	b.n	8001870 <_ZN7Display3runEv+0x8>
	...

08001888 <_ZN3I2CC1ERKS_>:
class I2C {
 8001888:	b590      	push	{r4, r7, lr}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
 8001892:	4a0c      	ldr	r2, [pc, #48]	; (80018c4 <_ZN3I2CC1ERKS_+0x3c>)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	1d10      	adds	r0, r2, #4
 800189e:	3304      	adds	r3, #4
 80018a0:	2254      	movs	r2, #84	; 0x54
 80018a2:	4619      	mov	r1, r3
 80018a4:	f00c fb3a 	bl	800df1c <memcpy>
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	f102 0458 	add.w	r4, r2, #88	; 0x58
 80018b0:	3358      	adds	r3, #88	; 0x58
 80018b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	4618      	mov	r0, r3
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd90      	pop	{r4, r7, pc}
 80018c2:	bf00      	nop
 80018c4:	0800e330 	.word	0x0800e330

080018c8 <_ZN10I2C_DeviceC1E3I2Ch>:
	I2C mBus;
	I2C_ADDR mAddr;
public:
	I2C_Device( I2C bus ) : mBus( bus ), mAddr( 0 ) {}
	I2C_Device( I2C_ADDR addr );
	I2C_Device( I2C bus, I2C_ADDR addr ) : mBus( bus), mAddr( addr ) {}
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	4613      	mov	r3, r2
 80018d4:	71fb      	strb	r3, [r7, #7]
 80018d6:	4a09      	ldr	r2, [pc, #36]	; (80018fc <_ZN10I2C_DeviceC1E3I2Ch+0x34>)
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	3304      	adds	r3, #4
 80018e0:	68b9      	ldr	r1, [r7, #8]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff ffd0 	bl	8001888 <_ZN3I2CC1ERKS_>
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	79fa      	ldrb	r2, [r7, #7]
 80018ec:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	4618      	mov	r0, r3
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	0800e340 	.word	0x0800e340

08001900 <_ZN3I2CC1E17I2C_HandleTypeDef>:

#include "I2C.h"
#include "I2CDevice.h"
#include <memory>

I2C::I2C( I2C_HandleTypeDef bus ) : mI2C( bus ) {
 8001900:	b084      	sub	sp, #16
 8001902:	b580      	push	{r7, lr}
 8001904:	b082      	sub	sp, #8
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
 800190a:	f107 0014 	add.w	r0, r7, #20
 800190e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001912:	4a0d      	ldr	r2, [pc, #52]	; (8001948 <_ZN3I2CC1E17I2C_HandleTypeDef+0x48>)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	3304      	adds	r3, #4
 800191c:	f107 0114 	add.w	r1, r7, #20
 8001920:	2254      	movs	r2, #84	; 0x54
 8001922:	4618      	mov	r0, r3
 8001924:	f00c fafa 	bl	800df1c <memcpy>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	3358      	adds	r3, #88	; 0x58
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	609a      	str	r2, [r3, #8]
 8001934:	60da      	str	r2, [r3, #12]
	// TODO Auto-generated constructor stub

}
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4618      	mov	r0, r3
 800193a:	3708      	adds	r7, #8
 800193c:	46bd      	mov	sp, r7
 800193e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001942:	b004      	add	sp, #16
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	0800e330 	.word	0x0800e330

0800194c <_ZN3I2CD1Ev>:

I2C::~I2C() {
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	4a04      	ldr	r2, [pc, #16]	; (8001968 <_ZN3I2CD1Ev+0x1c>)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4618      	mov	r0, r3
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	bc80      	pop	{r7}
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	0800e330 	.word	0x0800e330

0800196c <_ZN3I2CD0Ev>:
I2C::~I2C() {
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
}
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f7ff ffe9 	bl	800194c <_ZN3I2CD1Ev>
 800197a:	2168      	movs	r1, #104	; 0x68
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f00c f9d0 	bl	800dd22 <_ZdlPvj>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4618      	mov	r0, r3
 8001986:	3708      	adds	r7, #8
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}

0800198c <_ZN3I2C8readByteEh>:

uint8_t
I2C::readByte( I2C_ADDR addr ) {
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af02      	add	r7, sp, #8
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	460b      	mov	r3, r1
 8001996:	70fb      	strb	r3, [r7, #3]
	int ret = HAL_I2C_Master_Receive( &mI2C, addr, mBuffer, 1, HAL_MAX_DELAY );
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	1d18      	adds	r0, r3, #4
 800199c:	78fb      	ldrb	r3, [r7, #3]
 800199e:	b299      	uxth	r1, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f103 0258 	add.w	r2, r3, #88	; 0x58
 80019a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019aa:	9300      	str	r3, [sp, #0]
 80019ac:	2301      	movs	r3, #1
 80019ae:	f001 fd51 	bl	8003454 <HAL_I2C_Master_Receive>
 80019b2:	4603      	mov	r3, r0
 80019b4:	60fb      	str	r3, [r7, #12]
	if ( ret == HAL_OK ) {
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d103      	bne.n	80019c4 <_ZN3I2C8readByteEh+0x38>
		return mBuffer[ 0 ];
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80019c2:	e000      	b.n	80019c6 <_ZN3I2C8readByteEh+0x3a>
	} else {
		return 0;
 80019c4:	2300      	movs	r3, #0
	}
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <_ZN3I2C9writeByteEhh>:

bool
I2C::writeByte( I2C_ADDR addr, uint8_t data ) {
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b086      	sub	sp, #24
 80019d2:	af02      	add	r7, sp, #8
 80019d4:	6078      	str	r0, [r7, #4]
 80019d6:	460b      	mov	r3, r1
 80019d8:	70fb      	strb	r3, [r7, #3]
 80019da:	4613      	mov	r3, r2
 80019dc:	70bb      	strb	r3, [r7, #2]
	int ret = HAL_I2C_Master_Transmit( &mI2C, addr, &data, 1, HAL_MAX_DELAY );
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	1d18      	adds	r0, r3, #4
 80019e2:	78fb      	ldrb	r3, [r7, #3]
 80019e4:	b299      	uxth	r1, r3
 80019e6:	1cba      	adds	r2, r7, #2
 80019e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019ec:	9300      	str	r3, [sp, #0]
 80019ee:	2301      	movs	r3, #1
 80019f0:	f001 fc32 	bl	8003258 <HAL_I2C_Master_Transmit>
 80019f4:	4603      	mov	r3, r0
 80019f6:	60fb      	str	r3, [r7, #12]
	return ( ret == HAL_OK );
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	bf0c      	ite	eq
 80019fe:	2301      	moveq	r3, #1
 8001a00:	2300      	movne	r3, #0
 8001a02:	b2db      	uxtb	r3, r3
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3710      	adds	r7, #16
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <_ZN3I2C9writeDataEhPhh>:

bool
I2C::writeData( I2C_ADDR addr, uint8_t *data, uint8_t size ) {
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b088      	sub	sp, #32
 8001a10:	af02      	add	r7, sp, #8
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	607a      	str	r2, [r7, #4]
 8001a16:	461a      	mov	r2, r3
 8001a18:	460b      	mov	r3, r1
 8001a1a:	72fb      	strb	r3, [r7, #11]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	72bb      	strb	r3, [r7, #10]
	int ret = HAL_I2C_Master_Transmit( &mI2C, addr, data, size, HAL_MAX_DELAY );
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	1d18      	adds	r0, r3, #4
 8001a24:	7afb      	ldrb	r3, [r7, #11]
 8001a26:	b299      	uxth	r1, r3
 8001a28:	7abb      	ldrb	r3, [r7, #10]
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a30:	9200      	str	r2, [sp, #0]
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	f001 fc10 	bl	8003258 <HAL_I2C_Master_Transmit>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	617b      	str	r3, [r7, #20]
	return ( ret == HAL_OK );
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	bf0c      	ite	eq
 8001a42:	2301      	moveq	r3, #1
 8001a44:	2300      	movne	r3, #0
 8001a46:	b2db      	uxtb	r3, r3
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3718      	adds	r7, #24
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <_ZN3I2C10makeDeviceEh>:

I2C_Device *
I2C::makeDevice( I2C_ADDR addr ) {
 8001a50:	b5b0      	push	{r4, r5, r7, lr}
 8001a52:	b0ae      	sub	sp, #184	; 0xb8
 8001a54:	af12      	add	r7, sp, #72	; 0x48
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	460b      	mov	r3, r1
 8001a5a:	70fb      	strb	r3, [r7, #3]
	return new I2C_Device( mI2C, addr );
 8001a5c:	687c      	ldr	r4, [r7, #4]
 8001a5e:	f107 0508 	add.w	r5, r7, #8
 8001a62:	4668      	mov	r0, sp
 8001a64:	f104 0310 	add.w	r3, r4, #16
 8001a68:	2248      	movs	r2, #72	; 0x48
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	f00c fa56 	bl	800df1c <memcpy>
 8001a70:	1d23      	adds	r3, r4, #4
 8001a72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a74:	4628      	mov	r0, r5
 8001a76:	f7ff ff43 	bl	8001900 <_ZN3I2CC1E17I2C_HandleTypeDef>
 8001a7a:	f107 0408 	add.w	r4, r7, #8
 8001a7e:	2070      	movs	r0, #112	; 0x70
 8001a80:	f00c f951 	bl	800dd26 <_Znwj>
 8001a84:	4603      	mov	r3, r0
 8001a86:	461d      	mov	r5, r3
 8001a88:	78fb      	ldrb	r3, [r7, #3]
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	4621      	mov	r1, r4
 8001a8e:	4628      	mov	r0, r5
 8001a90:	f7ff ff1a 	bl	80018c8 <_ZN10I2C_DeviceC1E3I2Ch>
 8001a94:	f107 0308 	add.w	r3, r7, #8
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff ff57 	bl	800194c <_ZN3I2CD1Ev>
 8001a9e:	462b      	mov	r3, r5
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3770      	adds	r7, #112	; 0x70
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bdb0      	pop	{r4, r5, r7, pc}

08001aa8 <_ZN10I2C_Device7setAddrEh>:

	virtual ~I2C_Device();

	virtual void setAddr( I2C_ADDR addr ) { mAddr = addr; }
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	70fb      	strb	r3, [r7, #3]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	78fa      	ldrb	r2, [r7, #3]
 8001ab8:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8001abc:	bf00      	nop
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bc80      	pop	{r7}
 8001ac4:	4770      	bx	lr
	...

08001ac8 <_ZN10I2C_DeviceD1Ev>:
I2C_Device::I2C_Device( I2C_ADDR addr ) : mAddr( addr ) {
	// TODO Auto-generated constructor stub

}

I2C_Device::~I2C_Device() {
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	4a06      	ldr	r2, [pc, #24]	; (8001aec <_ZN10I2C_DeviceD1Ev+0x24>)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	3304      	adds	r3, #4
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff ff36 	bl	800194c <_ZN3I2CD1Ev>
	// TODO Auto-generated destructor stub
}
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	0800e340 	.word	0x0800e340

08001af0 <_ZN10I2C_DeviceD0Ev>:
I2C_Device::~I2C_Device() {
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
}
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f7ff ffe5 	bl	8001ac8 <_ZN10I2C_DeviceD1Ev>
 8001afe:	2170      	movs	r1, #112	; 0x70
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f00c f90e 	bl	800dd22 <_ZdlPvj>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3708      	adds	r7, #8
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <_ZN10I2C_Device9writeByteEh>:

bool
I2C_Device::writeByte( uint8_t data ) {
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	460b      	mov	r3, r1
 8001b1a:	70fb      	strb	r3, [r7, #3]
	return mBus.writeByte( mAddr, data );
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	1d18      	adds	r0, r3, #4
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8001b26:	78fa      	ldrb	r2, [r7, #3]
 8001b28:	4619      	mov	r1, r3
 8001b2a:	f7ff ff50 	bl	80019ce <_ZN3I2C9writeByteEhh>
 8001b2e:	4603      	mov	r3, r0
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <_ZN10I2C_Device13writeRegisterEhh>:

bool
I2C_Device::writeRegister( uint8_t reg, uint8_t value ) {
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	460b      	mov	r3, r1
 8001b42:	70fb      	strb	r3, [r7, #3]
 8001b44:	4613      	mov	r3, r2
 8001b46:	70bb      	strb	r3, [r7, #2]
	uint8_t buf[2];
	buf[0] = reg;
 8001b48:	78fb      	ldrb	r3, [r7, #3]
 8001b4a:	733b      	strb	r3, [r7, #12]
	buf[1] = value;
 8001b4c:	78bb      	ldrb	r3, [r7, #2]
 8001b4e:	737b      	strb	r3, [r7, #13]

	return mBus.writeData( mAddr, buf, 2 );
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	1d18      	adds	r0, r3, #4
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f893 106c 	ldrb.w	r1, [r3, #108]	; 0x6c
 8001b5a:	f107 020c 	add.w	r2, r7, #12
 8001b5e:	2302      	movs	r3, #2
 8001b60:	f7ff ff54 	bl	8001a0c <_ZN3I2C9writeDataEhPhh>
 8001b64:	4603      	mov	r3, r0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <_ZN10I2C_Device8readByteEv>:


uint8_t
I2C_Device::readByte() {
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b082      	sub	sp, #8
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
	return mBus.readByte( mAddr );
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	1d1a      	adds	r2, r3, #4
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8001b80:	4619      	mov	r1, r3
 8001b82:	4610      	mov	r0, r2
 8001b84:	f7ff ff02 	bl	800198c <_ZN3I2C8readByteEh>
 8001b88:	4603      	mov	r3, r0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <_ZN3LED6enableEv>:

	virtual void enable() { setState( true ); }
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b082      	sub	sp, #8
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	3310      	adds	r3, #16
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2101      	movs	r1, #1
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	4798      	blx	r3
 8001ba8:	bf00      	nop
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <_ZN3LED7disableEv>:
	virtual void disable() { setState( false ); }
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	3310      	adds	r3, #16
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	4798      	blx	r3
 8001bc6:	bf00      	nop
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
	...

08001bd0 <_ZN3LEDC1Ev>:
 */

#include "LED.h"
#include "main.h"

LED::LED() : mPort( 0 ), mPin( 0 ), mCurrentState( 0 ) {
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	4a08      	ldr	r2, [pc, #32]	; (8001bfc <_ZN3LEDC1Ev+0x2c>)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	601a      	str	r2, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	605a      	str	r2, [r3, #4]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2200      	movs	r2, #0
 8001be8:	811a      	strh	r2, [r3, #8]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	60da      	str	r2, [r3, #12]
	// TODO Auto-generated constructor stub

}
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bc80      	pop	{r7}
 8001bfa:	4770      	bx	lr
 8001bfc:	0800e360 	.word	0x0800e360

08001c00 <_ZN3LEDD1Ev>:

LED::LED( GPIO_TypeDef* port, uint16_t pin ) : mPort( port ), mPin( pin ), mCurrentState( 0 ) {

}

LED::~LED() {
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	4a04      	ldr	r2, [pc, #16]	; (8001c1c <_ZN3LEDD1Ev+0x1c>)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4618      	mov	r0, r3
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bc80      	pop	{r7}
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	0800e360 	.word	0x0800e360

08001c20 <_ZN3LEDD0Ev>:
LED::~LED() {
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
}
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f7ff ffe9 	bl	8001c00 <_ZN3LEDD1Ev>
 8001c2e:	2110      	movs	r1, #16
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f00c f876 	bl	800dd22 <_ZdlPvj>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <_ZN3LED8setStateEb>:

void
LED::setState( bool enable ) {
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	460b      	mov	r3, r1
 8001c4a:	70fb      	strb	r3, [r7, #3]
	if ( enable ) {
 8001c4c:	78fb      	ldrb	r3, [r7, #3]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d008      	beq.n	8001c64 <_ZN3LED8setStateEb+0x24>
		HAL_GPIO_WritePin( mPort, mPin, GPIO_PIN_SET );
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6858      	ldr	r0, [r3, #4]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	891b      	ldrh	r3, [r3, #8]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	f001 f99f 	bl	8002fa0 <HAL_GPIO_WritePin>
 8001c62:	e007      	b.n	8001c74 <_ZN3LED8setStateEb+0x34>
	} else {
		HAL_GPIO_WritePin( mPort, mPin, GPIO_PIN_RESET );
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6858      	ldr	r0, [r3, #4]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	891b      	ldrh	r3, [r3, #8]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	4619      	mov	r1, r3
 8001c70:	f001 f996 	bl	8002fa0 <HAL_GPIO_WritePin>
	}

	mCurrentState = enable;
 8001c74:	78fa      	ldrb	r2, [r7, #3]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	60da      	str	r2, [r3, #12]
}
 8001c7a:	bf00      	nop
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
	...

08001c84 <_ZN2UIC1Ev>:

#include "UI.h"
#include "main.h"
#include "cmsis_os.h"

UI::UI() {
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	4a04      	ldr	r2, [pc, #16]	; (8001ca0 <_ZN2UIC1Ev+0x1c>)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4618      	mov	r0, r3
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bc80      	pop	{r7}
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	0800e37c 	.word	0x0800e37c

08001ca4 <_ZN2UID1Ev>:

UI::~UI() {
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	4a04      	ldr	r2, [pc, #16]	; (8001cc0 <_ZN2UID1Ev+0x1c>)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bc80      	pop	{r7}
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	0800e37c 	.word	0x0800e37c

08001cc4 <_ZN2UID0Ev>:
UI::~UI() {
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
}
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f7ff ffe9 	bl	8001ca4 <_ZN2UID1Ev>
 8001cd2:	2104      	movs	r1, #4
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f00c f824 	bl	800dd22 <_ZdlPvj>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <_ZN2UI3runEv>:

void UI::run() {
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
	for(;;) {
		osDelay(1);
 8001cec:	2001      	movs	r0, #1
 8001cee:	f008 ffd7 	bl	800aca0 <osDelay>
 8001cf2:	e7fb      	b.n	8001cec <_ZN2UI3runEv+0x8>

08001cf4 <_ZN9Amplifier5getUIEv>:
	DAC_IC *mDAC;
public:
	Amplifier();
	virtual ~Amplifier();

	UI &getUI() { return mUI; }
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	3304      	adds	r3, #4
 8001d00:	4618      	mov	r0, r3
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bc80      	pop	{r7}
 8001d08:	4770      	bx	lr

08001d0a <_ZN9Amplifier10getDisplayEv>:
	Display &getDisplay() { return mDisplay; }
 8001d0a:	b480      	push	{r7}
 8001d0c:	b083      	sub	sp, #12
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	3308      	adds	r3, #8
 8001d16:	4618      	mov	r0, r3
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bc80      	pop	{r7}
 8001d1e:	4770      	bx	lr

08001d20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d20:	b590      	push	{r4, r7, lr}
 8001d22:	b093      	sub	sp, #76	; 0x4c
 8001d24:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d26:	f000 fe37 	bl	8002998 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d2a:	f000 f85d 	bl	8001de8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d2e:	f000 fa5d 	bl	80021ec <_ZL12MX_GPIO_Initv>
  MX_SPI1_Init();
 8001d32:	f000 f8f9 	bl	8001f28 <_ZL12MX_SPI1_Initv>
  MX_SPI2_Init();
 8001d36:	f000 f933 	bl	8001fa0 <_ZL12MX_SPI2_Initv>
  MX_TIM3_Init();
 8001d3a:	f000 f96d 	bl	8002018 <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 8001d3e:	f000 f9c9 	bl	80020d4 <_ZL12MX_TIM4_Initv>
  MX_USART3_UART_Init();
 8001d42:	f000 fa25 	bl	8002190 <_ZL19MX_USART3_UART_Initv>
  MX_I2C1_Init();
 8001d46:	f000 f8bb 	bl	8001ec0 <_ZL12MX_I2C1_Initv>
  /* USER CODE BEGIN 2 */

  // The main amplifier class

  amplifier.initialize( hi2c1 );
 8001d4a:	4c19      	ldr	r4, [pc, #100]	; (8001db0 <main+0x90>)
 8001d4c:	4668      	mov	r0, sp
 8001d4e:	f104 030c 	add.w	r3, r4, #12
 8001d52:	2248      	movs	r2, #72	; 0x48
 8001d54:	4619      	mov	r1, r3
 8001d56:	f00c f8e1 	bl	800df1c <memcpy>
 8001d5a:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001d5e:	4815      	ldr	r0, [pc, #84]	; (8001db4 <main+0x94>)
 8001d60:	f7ff fabe 	bl	80012e0 <_ZN9Amplifier10initializeE17I2C_HandleTypeDef>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001d64:	f008 fe8c 	bl	800aa80 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001d68:	4a13      	ldr	r2, [pc, #76]	; (8001db8 <main+0x98>)
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	4813      	ldr	r0, [pc, #76]	; (8001dbc <main+0x9c>)
 8001d6e:	f008 feed 	bl	800ab4c <osThreadNew>
 8001d72:	4603      	mov	r3, r0
 8001d74:	4a12      	ldr	r2, [pc, #72]	; (8001dc0 <main+0xa0>)
 8001d76:	6013      	str	r3, [r2, #0]

  /* creation of display */
  displayHandle = osThreadNew(startDisplay, NULL, &display_attributes);
 8001d78:	4a12      	ldr	r2, [pc, #72]	; (8001dc4 <main+0xa4>)
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	4812      	ldr	r0, [pc, #72]	; (8001dc8 <main+0xa8>)
 8001d7e:	f008 fee5 	bl	800ab4c <osThreadNew>
 8001d82:	4603      	mov	r3, r0
 8001d84:	4a11      	ldr	r2, [pc, #68]	; (8001dcc <main+0xac>)
 8001d86:	6013      	str	r3, [r2, #0]

  /* creation of audio */
  audioHandle = osThreadNew(startAudio, NULL, &audio_attributes);
 8001d88:	4a11      	ldr	r2, [pc, #68]	; (8001dd0 <main+0xb0>)
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	4811      	ldr	r0, [pc, #68]	; (8001dd4 <main+0xb4>)
 8001d8e:	f008 fedd 	bl	800ab4c <osThreadNew>
 8001d92:	4603      	mov	r3, r0
 8001d94:	4a10      	ldr	r2, [pc, #64]	; (8001dd8 <main+0xb8>)
 8001d96:	6013      	str	r3, [r2, #0]

  /* creation of UI */
  UIHandle = osThreadNew(startUI, NULL, &UI_attributes);
 8001d98:	4a10      	ldr	r2, [pc, #64]	; (8001ddc <main+0xbc>)
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	4810      	ldr	r0, [pc, #64]	; (8001de0 <main+0xc0>)
 8001d9e:	f008 fed5 	bl	800ab4c <osThreadNew>
 8001da2:	4603      	mov	r3, r0
 8001da4:	4a0f      	ldr	r2, [pc, #60]	; (8001de4 <main+0xc4>)
 8001da6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001da8:	f008 fe9c 	bl	800aae4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001dac:	e7fe      	b.n	8001dac <main+0x8c>
 8001dae:	bf00      	nop
 8001db0:	20000208 	.word	0x20000208
 8001db4:	200003f0 	.word	0x200003f0
 8001db8:	0800e388 	.word	0x0800e388
 8001dbc:	08002385 	.word	0x08002385
 8001dc0:	200003e0 	.word	0x200003e0
 8001dc4:	0800e3ac 	.word	0x0800e3ac
 8001dc8:	080023a5 	.word	0x080023a5
 8001dcc:	200003e4 	.word	0x200003e4
 8001dd0:	0800e3d0 	.word	0x0800e3d0
 8001dd4:	080023cd 	.word	0x080023cd
 8001dd8:	200003e8 	.word	0x200003e8
 8001ddc:	0800e3f4 	.word	0x0800e3f4
 8001de0:	080023dd 	.word	0x080023dd
 8001de4:	200003ec 	.word	0x200003ec

08001de8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b096      	sub	sp, #88	; 0x58
 8001dec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001df2:	2228      	movs	r2, #40	; 0x28
 8001df4:	2100      	movs	r1, #0
 8001df6:	4618      	mov	r0, r3
 8001df8:	f00c f89e 	bl	800df38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001dfc:	f107 031c 	add.w	r3, r7, #28
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	605a      	str	r2, [r3, #4]
 8001e06:	609a      	str	r2, [r3, #8]
 8001e08:	60da      	str	r2, [r3, #12]
 8001e0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e0c:	1d3b      	adds	r3, r7, #4
 8001e0e:	2200      	movs	r2, #0
 8001e10:	601a      	str	r2, [r3, #0]
 8001e12:	605a      	str	r2, [r3, #4]
 8001e14:	609a      	str	r2, [r3, #8]
 8001e16:	60da      	str	r2, [r3, #12]
 8001e18:	611a      	str	r2, [r3, #16]
 8001e1a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e24:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001e26:	2300      	movs	r3, #0
 8001e28:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e2e:	2302      	movs	r3, #2
 8001e30:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e36:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 8001e38:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001e3c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e3e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e42:	4618      	mov	r0, r3
 8001e44:	f003 fd56 	bl	80058f4 <HAL_RCC_OscConfig>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	bf14      	ite	ne
 8001e4e:	2301      	movne	r3, #1
 8001e50:	2300      	moveq	r3, #0
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <_Z18SystemClock_Configv+0x74>
  {
    Error_Handler();
 8001e58:	f000 fad4 	bl	8002404 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e5c:	230f      	movs	r3, #15
 8001e5e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e60:	2302      	movs	r3, #2
 8001e62:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e64:	2300      	movs	r3, #0
 8001e66:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e6c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001e72:	f107 031c 	add.w	r3, r7, #28
 8001e76:	2101      	movs	r1, #1
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f003 ffbd 	bl	8005df8 <HAL_RCC_ClockConfig>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	bf14      	ite	ne
 8001e84:	2301      	movne	r3, #1
 8001e86:	2300      	moveq	r3, #0
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <_Z18SystemClock_Configv+0xaa>
  {
    Error_Handler();
 8001e8e:	f000 fab9 	bl	8002404 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001e92:	2310      	movs	r3, #16
 8001e94:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001e96:	2300      	movs	r3, #0
 8001e98:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e9a:	1d3b      	adds	r3, r7, #4
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f004 f945 	bl	800612c <HAL_RCCEx_PeriphCLKConfig>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	bf14      	ite	ne
 8001ea8:	2301      	movne	r3, #1
 8001eaa:	2300      	moveq	r3, #0
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <_Z18SystemClock_Configv+0xce>
  {
    Error_Handler();
 8001eb2:	f000 faa7 	bl	8002404 <Error_Handler>
  }
}
 8001eb6:	bf00      	nop
 8001eb8:	3758      	adds	r7, #88	; 0x58
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
	...

08001ec0 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ec4:	4b15      	ldr	r3, [pc, #84]	; (8001f1c <_ZL12MX_I2C1_Initv+0x5c>)
 8001ec6:	4a16      	ldr	r2, [pc, #88]	; (8001f20 <_ZL12MX_I2C1_Initv+0x60>)
 8001ec8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001eca:	4b14      	ldr	r3, [pc, #80]	; (8001f1c <_ZL12MX_I2C1_Initv+0x5c>)
 8001ecc:	4a15      	ldr	r2, [pc, #84]	; (8001f24 <_ZL12MX_I2C1_Initv+0x64>)
 8001ece:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ed0:	4b12      	ldr	r3, [pc, #72]	; (8001f1c <_ZL12MX_I2C1_Initv+0x5c>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001ed6:	4b11      	ldr	r3, [pc, #68]	; (8001f1c <_ZL12MX_I2C1_Initv+0x5c>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001edc:	4b0f      	ldr	r3, [pc, #60]	; (8001f1c <_ZL12MX_I2C1_Initv+0x5c>)
 8001ede:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ee2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ee4:	4b0d      	ldr	r3, [pc, #52]	; (8001f1c <_ZL12MX_I2C1_Initv+0x5c>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001eea:	4b0c      	ldr	r3, [pc, #48]	; (8001f1c <_ZL12MX_I2C1_Initv+0x5c>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ef0:	4b0a      	ldr	r3, [pc, #40]	; (8001f1c <_ZL12MX_I2C1_Initv+0x5c>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ef6:	4b09      	ldr	r3, [pc, #36]	; (8001f1c <_ZL12MX_I2C1_Initv+0x5c>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001efc:	4807      	ldr	r0, [pc, #28]	; (8001f1c <_ZL12MX_I2C1_Initv+0x5c>)
 8001efe:	f001 f867 	bl	8002fd0 <HAL_I2C_Init>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	bf14      	ite	ne
 8001f08:	2301      	movne	r3, #1
 8001f0a:	2300      	moveq	r3, #0
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8001f12:	f000 fa77 	bl	8002404 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f16:	bf00      	nop
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	20000208 	.word	0x20000208
 8001f20:	40005400 	.word	0x40005400
 8001f24:	000186a0 	.word	0x000186a0

08001f28 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001f2c:	4b1a      	ldr	r3, [pc, #104]	; (8001f98 <_ZL12MX_SPI1_Initv+0x70>)
 8001f2e:	4a1b      	ldr	r2, [pc, #108]	; (8001f9c <_ZL12MX_SPI1_Initv+0x74>)
 8001f30:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f32:	4b19      	ldr	r3, [pc, #100]	; (8001f98 <_ZL12MX_SPI1_Initv+0x70>)
 8001f34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f38:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f3a:	4b17      	ldr	r3, [pc, #92]	; (8001f98 <_ZL12MX_SPI1_Initv+0x70>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f40:	4b15      	ldr	r3, [pc, #84]	; (8001f98 <_ZL12MX_SPI1_Initv+0x70>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f46:	4b14      	ldr	r3, [pc, #80]	; (8001f98 <_ZL12MX_SPI1_Initv+0x70>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f4c:	4b12      	ldr	r3, [pc, #72]	; (8001f98 <_ZL12MX_SPI1_Initv+0x70>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f52:	4b11      	ldr	r3, [pc, #68]	; (8001f98 <_ZL12MX_SPI1_Initv+0x70>)
 8001f54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f58:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001f5a:	4b0f      	ldr	r3, [pc, #60]	; (8001f98 <_ZL12MX_SPI1_Initv+0x70>)
 8001f5c:	2208      	movs	r2, #8
 8001f5e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f60:	4b0d      	ldr	r3, [pc, #52]	; (8001f98 <_ZL12MX_SPI1_Initv+0x70>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f66:	4b0c      	ldr	r3, [pc, #48]	; (8001f98 <_ZL12MX_SPI1_Initv+0x70>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f6c:	4b0a      	ldr	r3, [pc, #40]	; (8001f98 <_ZL12MX_SPI1_Initv+0x70>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001f72:	4b09      	ldr	r3, [pc, #36]	; (8001f98 <_ZL12MX_SPI1_Initv+0x70>)
 8001f74:	220a      	movs	r2, #10
 8001f76:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f78:	4807      	ldr	r0, [pc, #28]	; (8001f98 <_ZL12MX_SPI1_Initv+0x70>)
 8001f7a:	f004 f98d 	bl	8006298 <HAL_SPI_Init>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	bf14      	ite	ne
 8001f84:	2301      	movne	r3, #1
 8001f86:	2300      	moveq	r3, #0
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 8001f8e:	f000 fa39 	bl	8002404 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f92:	bf00      	nop
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	2000025c 	.word	0x2000025c
 8001f9c:	40013000 	.word	0x40013000

08001fa0 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001fa4:	4b1a      	ldr	r3, [pc, #104]	; (8002010 <_ZL12MX_SPI2_Initv+0x70>)
 8001fa6:	4a1b      	ldr	r2, [pc, #108]	; (8002014 <_ZL12MX_SPI2_Initv+0x74>)
 8001fa8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001faa:	4b19      	ldr	r3, [pc, #100]	; (8002010 <_ZL12MX_SPI2_Initv+0x70>)
 8001fac:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001fb0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001fb2:	4b17      	ldr	r3, [pc, #92]	; (8002010 <_ZL12MX_SPI2_Initv+0x70>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fb8:	4b15      	ldr	r3, [pc, #84]	; (8002010 <_ZL12MX_SPI2_Initv+0x70>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fbe:	4b14      	ldr	r3, [pc, #80]	; (8002010 <_ZL12MX_SPI2_Initv+0x70>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fc4:	4b12      	ldr	r3, [pc, #72]	; (8002010 <_ZL12MX_SPI2_Initv+0x70>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001fca:	4b11      	ldr	r3, [pc, #68]	; (8002010 <_ZL12MX_SPI2_Initv+0x70>)
 8001fcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fd0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001fd2:	4b0f      	ldr	r3, [pc, #60]	; (8002010 <_ZL12MX_SPI2_Initv+0x70>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fd8:	4b0d      	ldr	r3, [pc, #52]	; (8002010 <_ZL12MX_SPI2_Initv+0x70>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fde:	4b0c      	ldr	r3, [pc, #48]	; (8002010 <_ZL12MX_SPI2_Initv+0x70>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fe4:	4b0a      	ldr	r3, [pc, #40]	; (8002010 <_ZL12MX_SPI2_Initv+0x70>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001fea:	4b09      	ldr	r3, [pc, #36]	; (8002010 <_ZL12MX_SPI2_Initv+0x70>)
 8001fec:	220a      	movs	r2, #10
 8001fee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001ff0:	4807      	ldr	r0, [pc, #28]	; (8002010 <_ZL12MX_SPI2_Initv+0x70>)
 8001ff2:	f004 f951 	bl	8006298 <HAL_SPI_Init>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	bf14      	ite	ne
 8001ffc:	2301      	movne	r3, #1
 8001ffe:	2300      	moveq	r3, #0
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <_ZL12MX_SPI2_Initv+0x6a>
  {
    Error_Handler();
 8002006:	f000 f9fd 	bl	8002404 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800200a:	bf00      	nop
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	200002b4 	.word	0x200002b4
 8002014:	40003800 	.word	0x40003800

08002018 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b08c      	sub	sp, #48	; 0x30
 800201c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800201e:	f107 030c 	add.w	r3, r7, #12
 8002022:	2224      	movs	r2, #36	; 0x24
 8002024:	2100      	movs	r1, #0
 8002026:	4618      	mov	r0, r3
 8002028:	f00b ff86 	bl	800df38 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800202c:	1d3b      	adds	r3, r7, #4
 800202e:	2200      	movs	r2, #0
 8002030:	601a      	str	r2, [r3, #0]
 8002032:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002034:	4b25      	ldr	r3, [pc, #148]	; (80020cc <_ZL12MX_TIM3_Initv+0xb4>)
 8002036:	4a26      	ldr	r2, [pc, #152]	; (80020d0 <_ZL12MX_TIM3_Initv+0xb8>)
 8002038:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800203a:	4b24      	ldr	r3, [pc, #144]	; (80020cc <_ZL12MX_TIM3_Initv+0xb4>)
 800203c:	2200      	movs	r2, #0
 800203e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002040:	4b22      	ldr	r3, [pc, #136]	; (80020cc <_ZL12MX_TIM3_Initv+0xb4>)
 8002042:	2200      	movs	r2, #0
 8002044:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002046:	4b21      	ldr	r3, [pc, #132]	; (80020cc <_ZL12MX_TIM3_Initv+0xb4>)
 8002048:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800204c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800204e:	4b1f      	ldr	r3, [pc, #124]	; (80020cc <_ZL12MX_TIM3_Initv+0xb4>)
 8002050:	2200      	movs	r2, #0
 8002052:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002054:	4b1d      	ldr	r3, [pc, #116]	; (80020cc <_ZL12MX_TIM3_Initv+0xb4>)
 8002056:	2200      	movs	r2, #0
 8002058:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800205a:	2301      	movs	r3, #1
 800205c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800205e:	2300      	movs	r3, #0
 8002060:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002062:	2301      	movs	r3, #1
 8002064:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002066:	2300      	movs	r3, #0
 8002068:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800206a:	2300      	movs	r3, #0
 800206c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800206e:	2300      	movs	r3, #0
 8002070:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002072:	2301      	movs	r3, #1
 8002074:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002076:	2300      	movs	r3, #0
 8002078:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800207a:	2300      	movs	r3, #0
 800207c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800207e:	f107 030c 	add.w	r3, r7, #12
 8002082:	4619      	mov	r1, r3
 8002084:	4811      	ldr	r0, [pc, #68]	; (80020cc <_ZL12MX_TIM3_Initv+0xb4>)
 8002086:	f004 f98b 	bl	80063a0 <HAL_TIM_Encoder_Init>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	bf14      	ite	ne
 8002090:	2301      	movne	r3, #1
 8002092:	2300      	moveq	r3, #0
 8002094:	b2db      	uxtb	r3, r3
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <_ZL12MX_TIM3_Initv+0x86>
  {
    Error_Handler();
 800209a:	f000 f9b3 	bl	8002404 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800209e:	2300      	movs	r3, #0
 80020a0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020a2:	2300      	movs	r3, #0
 80020a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80020a6:	1d3b      	adds	r3, r7, #4
 80020a8:	4619      	mov	r1, r3
 80020aa:	4808      	ldr	r0, [pc, #32]	; (80020cc <_ZL12MX_TIM3_Initv+0xb4>)
 80020ac:	f004 fa94 	bl	80065d8 <HAL_TIMEx_MasterConfigSynchronization>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	bf14      	ite	ne
 80020b6:	2301      	movne	r3, #1
 80020b8:	2300      	moveq	r3, #0
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <_ZL12MX_TIM3_Initv+0xac>
  {
    Error_Handler();
 80020c0:	f000 f9a0 	bl	8002404 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80020c4:	bf00      	nop
 80020c6:	3730      	adds	r7, #48	; 0x30
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	2000030c 	.word	0x2000030c
 80020d0:	40000400 	.word	0x40000400

080020d4 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b08c      	sub	sp, #48	; 0x30
 80020d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80020da:	f107 030c 	add.w	r3, r7, #12
 80020de:	2224      	movs	r2, #36	; 0x24
 80020e0:	2100      	movs	r1, #0
 80020e2:	4618      	mov	r0, r3
 80020e4:	f00b ff28 	bl	800df38 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020e8:	1d3b      	adds	r3, r7, #4
 80020ea:	2200      	movs	r2, #0
 80020ec:	601a      	str	r2, [r3, #0]
 80020ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80020f0:	4b25      	ldr	r3, [pc, #148]	; (8002188 <_ZL12MX_TIM4_Initv+0xb4>)
 80020f2:	4a26      	ldr	r2, [pc, #152]	; (800218c <_ZL12MX_TIM4_Initv+0xb8>)
 80020f4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80020f6:	4b24      	ldr	r3, [pc, #144]	; (8002188 <_ZL12MX_TIM4_Initv+0xb4>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020fc:	4b22      	ldr	r3, [pc, #136]	; (8002188 <_ZL12MX_TIM4_Initv+0xb4>)
 80020fe:	2200      	movs	r2, #0
 8002100:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002102:	4b21      	ldr	r3, [pc, #132]	; (8002188 <_ZL12MX_TIM4_Initv+0xb4>)
 8002104:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002108:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800210a:	4b1f      	ldr	r3, [pc, #124]	; (8002188 <_ZL12MX_TIM4_Initv+0xb4>)
 800210c:	2200      	movs	r2, #0
 800210e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002110:	4b1d      	ldr	r3, [pc, #116]	; (8002188 <_ZL12MX_TIM4_Initv+0xb4>)
 8002112:	2200      	movs	r2, #0
 8002114:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002116:	2301      	movs	r3, #1
 8002118:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800211a:	2300      	movs	r3, #0
 800211c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800211e:	2301      	movs	r3, #1
 8002120:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002122:	2300      	movs	r3, #0
 8002124:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002126:	2300      	movs	r3, #0
 8002128:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800212a:	2300      	movs	r3, #0
 800212c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800212e:	2301      	movs	r3, #1
 8002130:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002132:	2300      	movs	r3, #0
 8002134:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002136:	2300      	movs	r3, #0
 8002138:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800213a:	f107 030c 	add.w	r3, r7, #12
 800213e:	4619      	mov	r1, r3
 8002140:	4811      	ldr	r0, [pc, #68]	; (8002188 <_ZL12MX_TIM4_Initv+0xb4>)
 8002142:	f004 f92d 	bl	80063a0 <HAL_TIM_Encoder_Init>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	bf14      	ite	ne
 800214c:	2301      	movne	r3, #1
 800214e:	2300      	moveq	r3, #0
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <_ZL12MX_TIM4_Initv+0x86>
  {
    Error_Handler();
 8002156:	f000 f955 	bl	8002404 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800215a:	2300      	movs	r3, #0
 800215c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800215e:	2300      	movs	r3, #0
 8002160:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002162:	1d3b      	adds	r3, r7, #4
 8002164:	4619      	mov	r1, r3
 8002166:	4808      	ldr	r0, [pc, #32]	; (8002188 <_ZL12MX_TIM4_Initv+0xb4>)
 8002168:	f004 fa36 	bl	80065d8 <HAL_TIMEx_MasterConfigSynchronization>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	bf14      	ite	ne
 8002172:	2301      	movne	r3, #1
 8002174:	2300      	moveq	r3, #0
 8002176:	b2db      	uxtb	r3, r3
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <_ZL12MX_TIM4_Initv+0xac>
  {
    Error_Handler();
 800217c:	f000 f942 	bl	8002404 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002180:	bf00      	nop
 8002182:	3730      	adds	r7, #48	; 0x30
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	20000354 	.word	0x20000354
 800218c:	40000800 	.word	0x40000800

08002190 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002194:	4b13      	ldr	r3, [pc, #76]	; (80021e4 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002196:	4a14      	ldr	r2, [pc, #80]	; (80021e8 <_ZL19MX_USART3_UART_Initv+0x58>)
 8002198:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800219a:	4b12      	ldr	r3, [pc, #72]	; (80021e4 <_ZL19MX_USART3_UART_Initv+0x54>)
 800219c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021a0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80021a2:	4b10      	ldr	r3, [pc, #64]	; (80021e4 <_ZL19MX_USART3_UART_Initv+0x54>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80021a8:	4b0e      	ldr	r3, [pc, #56]	; (80021e4 <_ZL19MX_USART3_UART_Initv+0x54>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80021ae:	4b0d      	ldr	r3, [pc, #52]	; (80021e4 <_ZL19MX_USART3_UART_Initv+0x54>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80021b4:	4b0b      	ldr	r3, [pc, #44]	; (80021e4 <_ZL19MX_USART3_UART_Initv+0x54>)
 80021b6:	220c      	movs	r2, #12
 80021b8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021ba:	4b0a      	ldr	r3, [pc, #40]	; (80021e4 <_ZL19MX_USART3_UART_Initv+0x54>)
 80021bc:	2200      	movs	r2, #0
 80021be:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80021c0:	4b08      	ldr	r3, [pc, #32]	; (80021e4 <_ZL19MX_USART3_UART_Initv+0x54>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80021c6:	4807      	ldr	r0, [pc, #28]	; (80021e4 <_ZL19MX_USART3_UART_Initv+0x54>)
 80021c8:	f004 fa72 	bl	80066b0 <HAL_UART_Init>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	bf14      	ite	ne
 80021d2:	2301      	movne	r3, #1
 80021d4:	2300      	moveq	r3, #0
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 80021dc:	f000 f912 	bl	8002404 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80021e0:	bf00      	nop
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	2000039c 	.word	0x2000039c
 80021e8:	40004800 	.word	0x40004800

080021ec <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b08a      	sub	sp, #40	; 0x28
 80021f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f2:	f107 0318 	add.w	r3, r7, #24
 80021f6:	2200      	movs	r2, #0
 80021f8:	601a      	str	r2, [r3, #0]
 80021fa:	605a      	str	r2, [r3, #4]
 80021fc:	609a      	str	r2, [r3, #8]
 80021fe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002200:	4b5a      	ldr	r3, [pc, #360]	; (800236c <_ZL12MX_GPIO_Initv+0x180>)
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	4a59      	ldr	r2, [pc, #356]	; (800236c <_ZL12MX_GPIO_Initv+0x180>)
 8002206:	f043 0310 	orr.w	r3, r3, #16
 800220a:	6193      	str	r3, [r2, #24]
 800220c:	4b57      	ldr	r3, [pc, #348]	; (800236c <_ZL12MX_GPIO_Initv+0x180>)
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	f003 0310 	and.w	r3, r3, #16
 8002214:	617b      	str	r3, [r7, #20]
 8002216:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002218:	4b54      	ldr	r3, [pc, #336]	; (800236c <_ZL12MX_GPIO_Initv+0x180>)
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	4a53      	ldr	r2, [pc, #332]	; (800236c <_ZL12MX_GPIO_Initv+0x180>)
 800221e:	f043 0304 	orr.w	r3, r3, #4
 8002222:	6193      	str	r3, [r2, #24]
 8002224:	4b51      	ldr	r3, [pc, #324]	; (800236c <_ZL12MX_GPIO_Initv+0x180>)
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	f003 0304 	and.w	r3, r3, #4
 800222c:	613b      	str	r3, [r7, #16]
 800222e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002230:	4b4e      	ldr	r3, [pc, #312]	; (800236c <_ZL12MX_GPIO_Initv+0x180>)
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	4a4d      	ldr	r2, [pc, #308]	; (800236c <_ZL12MX_GPIO_Initv+0x180>)
 8002236:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800223a:	6193      	str	r3, [r2, #24]
 800223c:	4b4b      	ldr	r3, [pc, #300]	; (800236c <_ZL12MX_GPIO_Initv+0x180>)
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002244:	60fb      	str	r3, [r7, #12]
 8002246:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002248:	4b48      	ldr	r3, [pc, #288]	; (800236c <_ZL12MX_GPIO_Initv+0x180>)
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	4a47      	ldr	r2, [pc, #284]	; (800236c <_ZL12MX_GPIO_Initv+0x180>)
 800224e:	f043 0308 	orr.w	r3, r3, #8
 8002252:	6193      	str	r3, [r2, #24]
 8002254:	4b45      	ldr	r3, [pc, #276]	; (800236c <_ZL12MX_GPIO_Initv+0x180>)
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	f003 0308 	and.w	r3, r3, #8
 800225c:	60bb      	str	r3, [r7, #8]
 800225e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002260:	4b42      	ldr	r3, [pc, #264]	; (800236c <_ZL12MX_GPIO_Initv+0x180>)
 8002262:	699b      	ldr	r3, [r3, #24]
 8002264:	4a41      	ldr	r2, [pc, #260]	; (800236c <_ZL12MX_GPIO_Initv+0x180>)
 8002266:	f043 0320 	orr.w	r3, r3, #32
 800226a:	6193      	str	r3, [r2, #24]
 800226c:	4b3f      	ldr	r3, [pc, #252]	; (800236c <_ZL12MX_GPIO_Initv+0x180>)
 800226e:	699b      	ldr	r3, [r3, #24]
 8002270:	f003 0320 	and.w	r3, r3, #32
 8002274:	607b      	str	r3, [r7, #4]
 8002276:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_MUTE_GPIO_Port, LED_MUTE_Pin, GPIO_PIN_RESET);
 8002278:	2200      	movs	r2, #0
 800227a:	2108      	movs	r1, #8
 800227c:	483c      	ldr	r0, [pc, #240]	; (8002370 <_ZL12MX_GPIO_Initv+0x184>)
 800227e:	f000 fe8f 	bl	8002fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_PCM_Pin|LED_DOLBY_Pin|GPIO_PIN_2|LED_MUTEA3_Pin
 8002282:	2200      	movs	r2, #0
 8002284:	211f      	movs	r1, #31
 8002286:	483b      	ldr	r0, [pc, #236]	; (8002374 <_ZL12MX_GPIO_Initv+0x188>)
 8002288:	f000 fe8a 	bl	8002fa0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_INPUT_1_Pin|LED_INPUT_2_Pin|LED_INPUT_3_Pin|LED_INPUT_4_Pin
 800228c:	2200      	movs	r2, #0
 800228e:	f44f 413c 	mov.w	r1, #48128	; 0xbc00
 8002292:	4839      	ldr	r0, [pc, #228]	; (8002378 <_ZL12MX_GPIO_Initv+0x18c>)
 8002294:	f000 fe84 	bl	8002fa0 <HAL_GPIO_WritePin>
                          |LED_POWER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_5CH_Pin|LED_RUN_Pin, GPIO_PIN_RESET);
 8002298:	2200      	movs	r2, #0
 800229a:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800229e:	4837      	ldr	r0, [pc, #220]	; (800237c <_ZL12MX_GPIO_Initv+0x190>)
 80022a0:	f000 fe7e 	bl	8002fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_MUTE_Pin */
  GPIO_InitStruct.Pin = LED_MUTE_Pin;
 80022a4:	2308      	movs	r3, #8
 80022a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022a8:	2301      	movs	r3, #1
 80022aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ac:	2300      	movs	r3, #0
 80022ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b0:	2302      	movs	r3, #2
 80022b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LED_MUTE_GPIO_Port, &GPIO_InitStruct);
 80022b4:	f107 0318 	add.w	r3, r7, #24
 80022b8:	4619      	mov	r1, r3
 80022ba:	482d      	ldr	r0, [pc, #180]	; (8002370 <_ZL12MX_GPIO_Initv+0x184>)
 80022bc:	f000 fcdc 	bl	8002c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_PCM_Pin LED_DOLBY_Pin PA2 LED_MUTEA3_Pin
                           PA4 */
  GPIO_InitStruct.Pin = LED_PCM_Pin|LED_DOLBY_Pin|GPIO_PIN_2|LED_MUTEA3_Pin
 80022c0:	231f      	movs	r3, #31
 80022c2:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022c4:	2301      	movs	r3, #1
 80022c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c8:	2300      	movs	r3, #0
 80022ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022cc:	2302      	movs	r3, #2
 80022ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022d0:	f107 0318 	add.w	r3, r7, #24
 80022d4:	4619      	mov	r1, r3
 80022d6:	4827      	ldr	r0, [pc, #156]	; (8002374 <_ZL12MX_GPIO_Initv+0x188>)
 80022d8:	f000 fcce 	bl	8002c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : SETTING_BATTERY_Pin */
  GPIO_InitStruct.Pin = SETTING_BATTERY_Pin;
 80022dc:	2310      	movs	r3, #16
 80022de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022e0:	2300      	movs	r3, #0
 80022e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e4:	2300      	movs	r3, #0
 80022e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SETTING_BATTERY_GPIO_Port, &GPIO_InitStruct);
 80022e8:	f107 0318 	add.w	r3, r7, #24
 80022ec:	4619      	mov	r1, r3
 80022ee:	4820      	ldr	r0, [pc, #128]	; (8002370 <_ZL12MX_GPIO_Initv+0x184>)
 80022f0:	f000 fcc2 	bl	8002c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_INPUT_1_Pin LED_INPUT_2_Pin LED_INPUT_3_Pin LED_INPUT_4_Pin
                           LED_POWER_Pin */
  GPIO_InitStruct.Pin = LED_INPUT_1_Pin|LED_INPUT_2_Pin|LED_INPUT_3_Pin|LED_INPUT_4_Pin
 80022f4:	f44f 433c 	mov.w	r3, #48128	; 0xbc00
 80022f8:	61bb      	str	r3, [r7, #24]
                          |LED_POWER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022fa:	2301      	movs	r3, #1
 80022fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fe:	2300      	movs	r3, #0
 8002300:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002302:	2302      	movs	r3, #2
 8002304:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002306:	f107 0318 	add.w	r3, r7, #24
 800230a:	4619      	mov	r1, r3
 800230c:	481a      	ldr	r0, [pc, #104]	; (8002378 <_ZL12MX_GPIO_Initv+0x18c>)
 800230e:	f000 fcb3 	bl	8002c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_POWER_Pin */
  GPIO_InitStruct.Pin = BUTTON_POWER_Pin;
 8002312:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002316:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002318:	2300      	movs	r3, #0
 800231a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231c:	2300      	movs	r3, #0
 800231e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUTTON_POWER_GPIO_Port, &GPIO_InitStruct);
 8002320:	f107 0318 	add.w	r3, r7, #24
 8002324:	4619      	mov	r1, r3
 8002326:	4814      	ldr	r0, [pc, #80]	; (8002378 <_ZL12MX_GPIO_Initv+0x18c>)
 8002328:	f000 fca6 	bl	8002c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_5CH_Pin LED_RUN_Pin */
  GPIO_InitStruct.Pin = LED_5CH_Pin|LED_RUN_Pin;
 800232c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002330:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002332:	2301      	movs	r3, #1
 8002334:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002336:	2300      	movs	r3, #0
 8002338:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800233a:	2302      	movs	r3, #2
 800233c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800233e:	f107 0318 	add.w	r3, r7, #24
 8002342:	4619      	mov	r1, r3
 8002344:	480d      	ldr	r0, [pc, #52]	; (800237c <_ZL12MX_GPIO_Initv+0x190>)
 8002346:	f000 fc97 	bl	8002c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_INPUT_Pin */
  GPIO_InitStruct.Pin = BUTTON_INPUT_Pin;
 800234a:	2308      	movs	r3, #8
 800234c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800234e:	2300      	movs	r3, #0
 8002350:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002352:	2300      	movs	r3, #0
 8002354:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUTTON_INPUT_GPIO_Port, &GPIO_InitStruct);
 8002356:	f107 0318 	add.w	r3, r7, #24
 800235a:	4619      	mov	r1, r3
 800235c:	4808      	ldr	r0, [pc, #32]	; (8002380 <_ZL12MX_GPIO_Initv+0x194>)
 800235e:	f000 fc8b 	bl	8002c78 <HAL_GPIO_Init>

}
 8002362:	bf00      	nop
 8002364:	3728      	adds	r7, #40	; 0x28
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	40021000 	.word	0x40021000
 8002370:	40011000 	.word	0x40011000
 8002374:	40010800 	.word	0x40010800
 8002378:	40011800 	.word	0x40011800
 800237c:	40010c00 	.word	0x40010c00
 8002380:	40011400 	.word	0x40011400

08002384 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800238c:	f00b f84e 	bl	800d42c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  amplifier.run();
 8002390:	4803      	ldr	r0, [pc, #12]	; (80023a0 <_Z16StartDefaultTaskPv+0x1c>)
 8002392:	f7fe ffe1 	bl	8001358 <_ZN9Amplifier3runEv>
  /* USER CODE END 5 */
}
 8002396:	bf00      	nop
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	200003f0 	.word	0x200003f0

080023a4 <_Z12startDisplayPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startDisplay */
void startDisplay(void *argument)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startDisplay */
  /* Infinite loop */
  amplifier.getDisplay().run();
 80023ac:	4806      	ldr	r0, [pc, #24]	; (80023c8 <_Z12startDisplayPv+0x24>)
 80023ae:	f7ff fcac 	bl	8001d0a <_ZN9Amplifier10getDisplayEv>
 80023b2:	4603      	mov	r3, r0
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	3208      	adds	r2, #8
 80023b8:	6812      	ldr	r2, [r2, #0]
 80023ba:	4618      	mov	r0, r3
 80023bc:	4790      	blx	r2
  /* USER CODE END startDisplay */
}
 80023be:	bf00      	nop
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	200003f0 	.word	0x200003f0

080023cc <_Z10startAudioPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startAudio */
void startAudio(void *argument)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startAudio */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80023d4:	2001      	movs	r0, #1
 80023d6:	f008 fc63 	bl	800aca0 <osDelay>
 80023da:	e7fb      	b.n	80023d4 <_Z10startAudioPv+0x8>

080023dc <_Z7startUIPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startUI */
void startUI(void *argument)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startUI */
  /* Infinite loop */
	amplifier.getUI().run();
 80023e4:	4806      	ldr	r0, [pc, #24]	; (8002400 <_Z7startUIPv+0x24>)
 80023e6:	f7ff fc85 	bl	8001cf4 <_ZN9Amplifier5getUIEv>
 80023ea:	4603      	mov	r3, r0
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	3208      	adds	r2, #8
 80023f0:	6812      	ldr	r2, [r2, #0]
 80023f2:	4618      	mov	r0, r3
 80023f4:	4790      	blx	r2
  /* USER CODE END startUI */
}
 80023f6:	bf00      	nop
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	200003f0 	.word	0x200003f0

08002404 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002408:	b672      	cpsid	i
}
 800240a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800240c:	e7fe      	b.n	800240c <Error_Handler+0x8>
	...

08002410 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d10c      	bne.n	800243a <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002426:	4293      	cmp	r3, r2
 8002428:	d107      	bne.n	800243a <_Z41__static_initialization_and_destruction_0ii+0x2a>
Amplifier amplifier;
 800242a:	4806      	ldr	r0, [pc, #24]	; (8002444 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 800242c:	f7fe fef4 	bl	8001218 <_ZN9AmplifierC1Ev>
 8002430:	4a05      	ldr	r2, [pc, #20]	; (8002448 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8002432:	4906      	ldr	r1, [pc, #24]	; (800244c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8002434:	4803      	ldr	r0, [pc, #12]	; (8002444 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8002436:	f00b fc6f 	bl	800dd18 <__aeabi_atexit>
}
 800243a:	bf00      	nop
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	200003f0 	.word	0x200003f0
 8002448:	20000000 	.word	0x20000000
 800244c:	08001271 	.word	0x08001271

08002450 <_GLOBAL__sub_I_hi2c1>:
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
 8002454:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002458:	2001      	movs	r0, #1
 800245a:	f7ff ffd9 	bl	8002410 <_Z41__static_initialization_and_destruction_0ii>
 800245e:	bd80      	pop	{r7, pc}

08002460 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002466:	4b18      	ldr	r3, [pc, #96]	; (80024c8 <HAL_MspInit+0x68>)
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	4a17      	ldr	r2, [pc, #92]	; (80024c8 <HAL_MspInit+0x68>)
 800246c:	f043 0301 	orr.w	r3, r3, #1
 8002470:	6193      	str	r3, [r2, #24]
 8002472:	4b15      	ldr	r3, [pc, #84]	; (80024c8 <HAL_MspInit+0x68>)
 8002474:	699b      	ldr	r3, [r3, #24]
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	60bb      	str	r3, [r7, #8]
 800247c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800247e:	4b12      	ldr	r3, [pc, #72]	; (80024c8 <HAL_MspInit+0x68>)
 8002480:	69db      	ldr	r3, [r3, #28]
 8002482:	4a11      	ldr	r2, [pc, #68]	; (80024c8 <HAL_MspInit+0x68>)
 8002484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002488:	61d3      	str	r3, [r2, #28]
 800248a:	4b0f      	ldr	r3, [pc, #60]	; (80024c8 <HAL_MspInit+0x68>)
 800248c:	69db      	ldr	r3, [r3, #28]
 800248e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002492:	607b      	str	r3, [r7, #4]
 8002494:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002496:	2200      	movs	r2, #0
 8002498:	210f      	movs	r1, #15
 800249a:	f06f 0001 	mvn.w	r0, #1
 800249e:	f000 fbb4 	bl	8002c0a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80024a2:	4b0a      	ldr	r3, [pc, #40]	; (80024cc <HAL_MspInit+0x6c>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	60fb      	str	r3, [r7, #12]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80024ae:	60fb      	str	r3, [r7, #12]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024b6:	60fb      	str	r3, [r7, #12]
 80024b8:	4a04      	ldr	r2, [pc, #16]	; (80024cc <HAL_MspInit+0x6c>)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024be:	bf00      	nop
 80024c0:	3710      	adds	r7, #16
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	40021000 	.word	0x40021000
 80024cc:	40010000 	.word	0x40010000

080024d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b088      	sub	sp, #32
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d8:	f107 0310 	add.w	r3, r7, #16
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	605a      	str	r2, [r3, #4]
 80024e2:	609a      	str	r2, [r3, #8]
 80024e4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a15      	ldr	r2, [pc, #84]	; (8002540 <HAL_I2C_MspInit+0x70>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d123      	bne.n	8002538 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024f0:	4b14      	ldr	r3, [pc, #80]	; (8002544 <HAL_I2C_MspInit+0x74>)
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	4a13      	ldr	r2, [pc, #76]	; (8002544 <HAL_I2C_MspInit+0x74>)
 80024f6:	f043 0308 	orr.w	r3, r3, #8
 80024fa:	6193      	str	r3, [r2, #24]
 80024fc:	4b11      	ldr	r3, [pc, #68]	; (8002544 <HAL_I2C_MspInit+0x74>)
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	f003 0308 	and.w	r3, r3, #8
 8002504:	60fb      	str	r3, [r7, #12]
 8002506:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002508:	23c0      	movs	r3, #192	; 0xc0
 800250a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800250c:	2312      	movs	r3, #18
 800250e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002510:	2303      	movs	r3, #3
 8002512:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002514:	f107 0310 	add.w	r3, r7, #16
 8002518:	4619      	mov	r1, r3
 800251a:	480b      	ldr	r0, [pc, #44]	; (8002548 <HAL_I2C_MspInit+0x78>)
 800251c:	f000 fbac 	bl	8002c78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002520:	4b08      	ldr	r3, [pc, #32]	; (8002544 <HAL_I2C_MspInit+0x74>)
 8002522:	69db      	ldr	r3, [r3, #28]
 8002524:	4a07      	ldr	r2, [pc, #28]	; (8002544 <HAL_I2C_MspInit+0x74>)
 8002526:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800252a:	61d3      	str	r3, [r2, #28]
 800252c:	4b05      	ldr	r3, [pc, #20]	; (8002544 <HAL_I2C_MspInit+0x74>)
 800252e:	69db      	ldr	r3, [r3, #28]
 8002530:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002534:	60bb      	str	r3, [r7, #8]
 8002536:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002538:	bf00      	nop
 800253a:	3720      	adds	r7, #32
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	40005400 	.word	0x40005400
 8002544:	40021000 	.word	0x40021000
 8002548:	40010c00 	.word	0x40010c00

0800254c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b08a      	sub	sp, #40	; 0x28
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002554:	f107 0318 	add.w	r3, r7, #24
 8002558:	2200      	movs	r2, #0
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	605a      	str	r2, [r3, #4]
 800255e:	609a      	str	r2, [r3, #8]
 8002560:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a37      	ldr	r2, [pc, #220]	; (8002644 <HAL_SPI_MspInit+0xf8>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d130      	bne.n	80025ce <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800256c:	4b36      	ldr	r3, [pc, #216]	; (8002648 <HAL_SPI_MspInit+0xfc>)
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	4a35      	ldr	r2, [pc, #212]	; (8002648 <HAL_SPI_MspInit+0xfc>)
 8002572:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002576:	6193      	str	r3, [r2, #24]
 8002578:	4b33      	ldr	r3, [pc, #204]	; (8002648 <HAL_SPI_MspInit+0xfc>)
 800257a:	699b      	ldr	r3, [r3, #24]
 800257c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002580:	617b      	str	r3, [r7, #20]
 8002582:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002584:	4b30      	ldr	r3, [pc, #192]	; (8002648 <HAL_SPI_MspInit+0xfc>)
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	4a2f      	ldr	r2, [pc, #188]	; (8002648 <HAL_SPI_MspInit+0xfc>)
 800258a:	f043 0304 	orr.w	r3, r3, #4
 800258e:	6193      	str	r3, [r2, #24]
 8002590:	4b2d      	ldr	r3, [pc, #180]	; (8002648 <HAL_SPI_MspInit+0xfc>)
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	f003 0304 	and.w	r3, r3, #4
 8002598:	613b      	str	r3, [r7, #16]
 800259a:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800259c:	23a0      	movs	r3, #160	; 0xa0
 800259e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a0:	2302      	movs	r3, #2
 80025a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025a4:	2303      	movs	r3, #3
 80025a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025a8:	f107 0318 	add.w	r3, r7, #24
 80025ac:	4619      	mov	r1, r3
 80025ae:	4827      	ldr	r0, [pc, #156]	; (800264c <HAL_SPI_MspInit+0x100>)
 80025b0:	f000 fb62 	bl	8002c78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80025b4:	2340      	movs	r3, #64	; 0x40
 80025b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025b8:	2300      	movs	r3, #0
 80025ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025bc:	2300      	movs	r3, #0
 80025be:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025c0:	f107 0318 	add.w	r3, r7, #24
 80025c4:	4619      	mov	r1, r3
 80025c6:	4821      	ldr	r0, [pc, #132]	; (800264c <HAL_SPI_MspInit+0x100>)
 80025c8:	f000 fb56 	bl	8002c78 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80025cc:	e036      	b.n	800263c <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a1f      	ldr	r2, [pc, #124]	; (8002650 <HAL_SPI_MspInit+0x104>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d131      	bne.n	800263c <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80025d8:	4b1b      	ldr	r3, [pc, #108]	; (8002648 <HAL_SPI_MspInit+0xfc>)
 80025da:	69db      	ldr	r3, [r3, #28]
 80025dc:	4a1a      	ldr	r2, [pc, #104]	; (8002648 <HAL_SPI_MspInit+0xfc>)
 80025de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025e2:	61d3      	str	r3, [r2, #28]
 80025e4:	4b18      	ldr	r3, [pc, #96]	; (8002648 <HAL_SPI_MspInit+0xfc>)
 80025e6:	69db      	ldr	r3, [r3, #28]
 80025e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025ec:	60fb      	str	r3, [r7, #12]
 80025ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025f0:	4b15      	ldr	r3, [pc, #84]	; (8002648 <HAL_SPI_MspInit+0xfc>)
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	4a14      	ldr	r2, [pc, #80]	; (8002648 <HAL_SPI_MspInit+0xfc>)
 80025f6:	f043 0308 	orr.w	r3, r3, #8
 80025fa:	6193      	str	r3, [r2, #24]
 80025fc:	4b12      	ldr	r3, [pc, #72]	; (8002648 <HAL_SPI_MspInit+0xfc>)
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	f003 0308 	and.w	r3, r3, #8
 8002604:	60bb      	str	r3, [r7, #8]
 8002606:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002608:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800260c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800260e:	2302      	movs	r3, #2
 8002610:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002612:	2303      	movs	r3, #3
 8002614:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002616:	f107 0318 	add.w	r3, r7, #24
 800261a:	4619      	mov	r1, r3
 800261c:	480d      	ldr	r0, [pc, #52]	; (8002654 <HAL_SPI_MspInit+0x108>)
 800261e:	f000 fb2b 	bl	8002c78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002622:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002626:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002628:	2300      	movs	r3, #0
 800262a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262c:	2300      	movs	r3, #0
 800262e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002630:	f107 0318 	add.w	r3, r7, #24
 8002634:	4619      	mov	r1, r3
 8002636:	4807      	ldr	r0, [pc, #28]	; (8002654 <HAL_SPI_MspInit+0x108>)
 8002638:	f000 fb1e 	bl	8002c78 <HAL_GPIO_Init>
}
 800263c:	bf00      	nop
 800263e:	3728      	adds	r7, #40	; 0x28
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	40013000 	.word	0x40013000
 8002648:	40021000 	.word	0x40021000
 800264c:	40010800 	.word	0x40010800
 8002650:	40003800 	.word	0x40003800
 8002654:	40010c00 	.word	0x40010c00

08002658 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b08c      	sub	sp, #48	; 0x30
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002660:	f107 0318 	add.w	r3, r7, #24
 8002664:	2200      	movs	r2, #0
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	605a      	str	r2, [r3, #4]
 800266a:	609a      	str	r2, [r3, #8]
 800266c:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a3b      	ldr	r2, [pc, #236]	; (8002760 <HAL_TIM_Encoder_MspInit+0x108>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d136      	bne.n	80026e6 <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002678:	4b3a      	ldr	r3, [pc, #232]	; (8002764 <HAL_TIM_Encoder_MspInit+0x10c>)
 800267a:	69db      	ldr	r3, [r3, #28]
 800267c:	4a39      	ldr	r2, [pc, #228]	; (8002764 <HAL_TIM_Encoder_MspInit+0x10c>)
 800267e:	f043 0302 	orr.w	r3, r3, #2
 8002682:	61d3      	str	r3, [r2, #28]
 8002684:	4b37      	ldr	r3, [pc, #220]	; (8002764 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002686:	69db      	ldr	r3, [r3, #28]
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	617b      	str	r3, [r7, #20]
 800268e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002690:	4b34      	ldr	r3, [pc, #208]	; (8002764 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	4a33      	ldr	r2, [pc, #204]	; (8002764 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002696:	f043 0310 	orr.w	r3, r3, #16
 800269a:	6193      	str	r3, [r2, #24]
 800269c:	4b31      	ldr	r3, [pc, #196]	; (8002764 <HAL_TIM_Encoder_MspInit+0x10c>)
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	f003 0310 	and.w	r3, r3, #16
 80026a4:	613b      	str	r3, [r7, #16]
 80026a6:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80026a8:	23c0      	movs	r3, #192	; 0xc0
 80026aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026ac:	2300      	movs	r3, #0
 80026ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b0:	2300      	movs	r3, #0
 80026b2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026b4:	f107 0318 	add.w	r3, r7, #24
 80026b8:	4619      	mov	r1, r3
 80026ba:	482b      	ldr	r0, [pc, #172]	; (8002768 <HAL_TIM_Encoder_MspInit+0x110>)
 80026bc:	f000 fadc 	bl	8002c78 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_ENABLE();
 80026c0:	4b2a      	ldr	r3, [pc, #168]	; (800276c <HAL_TIM_Encoder_MspInit+0x114>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80026c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026c8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80026cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80026ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80026d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80026d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d8:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 80026dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80026de:	4a23      	ldr	r2, [pc, #140]	; (800276c <HAL_TIM_Encoder_MspInit+0x114>)
 80026e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e2:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80026e4:	e037      	b.n	8002756 <HAL_TIM_Encoder_MspInit+0xfe>
  else if(htim_encoder->Instance==TIM4)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a21      	ldr	r2, [pc, #132]	; (8002770 <HAL_TIM_Encoder_MspInit+0x118>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d132      	bne.n	8002756 <HAL_TIM_Encoder_MspInit+0xfe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80026f0:	4b1c      	ldr	r3, [pc, #112]	; (8002764 <HAL_TIM_Encoder_MspInit+0x10c>)
 80026f2:	69db      	ldr	r3, [r3, #28]
 80026f4:	4a1b      	ldr	r2, [pc, #108]	; (8002764 <HAL_TIM_Encoder_MspInit+0x10c>)
 80026f6:	f043 0304 	orr.w	r3, r3, #4
 80026fa:	61d3      	str	r3, [r2, #28]
 80026fc:	4b19      	ldr	r3, [pc, #100]	; (8002764 <HAL_TIM_Encoder_MspInit+0x10c>)
 80026fe:	69db      	ldr	r3, [r3, #28]
 8002700:	f003 0304 	and.w	r3, r3, #4
 8002704:	60fb      	str	r3, [r7, #12]
 8002706:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002708:	4b16      	ldr	r3, [pc, #88]	; (8002764 <HAL_TIM_Encoder_MspInit+0x10c>)
 800270a:	699b      	ldr	r3, [r3, #24]
 800270c:	4a15      	ldr	r2, [pc, #84]	; (8002764 <HAL_TIM_Encoder_MspInit+0x10c>)
 800270e:	f043 0320 	orr.w	r3, r3, #32
 8002712:	6193      	str	r3, [r2, #24]
 8002714:	4b13      	ldr	r3, [pc, #76]	; (8002764 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	f003 0320 	and.w	r3, r3, #32
 800271c:	60bb      	str	r3, [r7, #8]
 800271e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002720:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002724:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002726:	2300      	movs	r3, #0
 8002728:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272a:	2300      	movs	r3, #0
 800272c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800272e:	f107 0318 	add.w	r3, r7, #24
 8002732:	4619      	mov	r1, r3
 8002734:	480f      	ldr	r0, [pc, #60]	; (8002774 <HAL_TIM_Encoder_MspInit+0x11c>)
 8002736:	f000 fa9f 	bl	8002c78 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM4_ENABLE();
 800273a:	4b0c      	ldr	r3, [pc, #48]	; (800276c <HAL_TIM_Encoder_MspInit+0x114>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002742:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002746:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800274a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800274e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002750:	4a06      	ldr	r2, [pc, #24]	; (800276c <HAL_TIM_Encoder_MspInit+0x114>)
 8002752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002754:	6053      	str	r3, [r2, #4]
}
 8002756:	bf00      	nop
 8002758:	3730      	adds	r7, #48	; 0x30
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	40000400 	.word	0x40000400
 8002764:	40021000 	.word	0x40021000
 8002768:	40011000 	.word	0x40011000
 800276c:	40010000 	.word	0x40010000
 8002770:	40000800 	.word	0x40000800
 8002774:	40011400 	.word	0x40011400

08002778 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b08a      	sub	sp, #40	; 0x28
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002780:	f107 0314 	add.w	r3, r7, #20
 8002784:	2200      	movs	r2, #0
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	605a      	str	r2, [r3, #4]
 800278a:	609a      	str	r2, [r3, #8]
 800278c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a25      	ldr	r2, [pc, #148]	; (8002828 <HAL_UART_MspInit+0xb0>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d143      	bne.n	8002820 <HAL_UART_MspInit+0xa8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002798:	4b24      	ldr	r3, [pc, #144]	; (800282c <HAL_UART_MspInit+0xb4>)
 800279a:	69db      	ldr	r3, [r3, #28]
 800279c:	4a23      	ldr	r2, [pc, #140]	; (800282c <HAL_UART_MspInit+0xb4>)
 800279e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027a2:	61d3      	str	r3, [r2, #28]
 80027a4:	4b21      	ldr	r3, [pc, #132]	; (800282c <HAL_UART_MspInit+0xb4>)
 80027a6:	69db      	ldr	r3, [r3, #28]
 80027a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027ac:	613b      	str	r3, [r7, #16]
 80027ae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027b0:	4b1e      	ldr	r3, [pc, #120]	; (800282c <HAL_UART_MspInit+0xb4>)
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	4a1d      	ldr	r2, [pc, #116]	; (800282c <HAL_UART_MspInit+0xb4>)
 80027b6:	f043 0320 	orr.w	r3, r3, #32
 80027ba:	6193      	str	r3, [r2, #24]
 80027bc:	4b1b      	ldr	r3, [pc, #108]	; (800282c <HAL_UART_MspInit+0xb4>)
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	f003 0320 	and.w	r3, r3, #32
 80027c4:	60fb      	str	r3, [r7, #12]
 80027c6:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80027c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ce:	2302      	movs	r3, #2
 80027d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027d2:	2303      	movs	r3, #3
 80027d4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027d6:	f107 0314 	add.w	r3, r7, #20
 80027da:	4619      	mov	r1, r3
 80027dc:	4814      	ldr	r0, [pc, #80]	; (8002830 <HAL_UART_MspInit+0xb8>)
 80027de:	f000 fa4b 	bl	8002c78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80027e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027e8:	2300      	movs	r3, #0
 80027ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ec:	2300      	movs	r3, #0
 80027ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027f0:	f107 0314 	add.w	r3, r7, #20
 80027f4:	4619      	mov	r1, r3
 80027f6:	480e      	ldr	r0, [pc, #56]	; (8002830 <HAL_UART_MspInit+0xb8>)
 80027f8:	f000 fa3e 	bl	8002c78 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART3_ENABLE();
 80027fc:	4b0d      	ldr	r3, [pc, #52]	; (8002834 <HAL_UART_MspInit+0xbc>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	627b      	str	r3, [r7, #36]	; 0x24
 8002802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002804:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002808:	627b      	str	r3, [r7, #36]	; 0x24
 800280a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002810:	627b      	str	r3, [r7, #36]	; 0x24
 8002812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002814:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002818:	627b      	str	r3, [r7, #36]	; 0x24
 800281a:	4a06      	ldr	r2, [pc, #24]	; (8002834 <HAL_UART_MspInit+0xbc>)
 800281c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281e:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002820:	bf00      	nop
 8002822:	3728      	adds	r7, #40	; 0x28
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	40004800 	.word	0x40004800
 800282c:	40021000 	.word	0x40021000
 8002830:	40011400 	.word	0x40011400
 8002834:	40010000 	.word	0x40010000

08002838 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800283c:	e7fe      	b.n	800283c <NMI_Handler+0x4>

0800283e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800283e:	b480      	push	{r7}
 8002840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002842:	e7fe      	b.n	8002842 <HardFault_Handler+0x4>

08002844 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002848:	e7fe      	b.n	8002848 <MemManage_Handler+0x4>

0800284a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800284a:	b480      	push	{r7}
 800284c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800284e:	e7fe      	b.n	800284e <BusFault_Handler+0x4>

08002850 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002854:	e7fe      	b.n	8002854 <UsageFault_Handler+0x4>

08002856 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002856:	b480      	push	{r7}
 8002858:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800285a:	bf00      	nop
 800285c:	46bd      	mov	sp, r7
 800285e:	bc80      	pop	{r7}
 8002860:	4770      	bx	lr

08002862 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002862:	b580      	push	{r7, lr}
 8002864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002866:	f000 f8dd 	bl	8002a24 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800286a:	f009 fe25 	bl	800c4b8 <xTaskGetSchedulerState>
 800286e:	4603      	mov	r3, r0
 8002870:	2b01      	cmp	r3, #1
 8002872:	d001      	beq.n	8002878 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002874:	f00a fb80 	bl	800cf78 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002878:	bf00      	nop
 800287a:	bd80      	pop	{r7, pc}

0800287c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002880:	4802      	ldr	r0, [pc, #8]	; (800288c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002882:	f001 fca4 	bl	80041ce <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002886:	bf00      	nop
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	20002a74 	.word	0x20002a74

08002890 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0
	return 1;
 8002894:	2301      	movs	r3, #1
}
 8002896:	4618      	mov	r0, r3
 8002898:	46bd      	mov	sp, r7
 800289a:	bc80      	pop	{r7}
 800289c:	4770      	bx	lr

0800289e <_kill>:

int _kill(int pid, int sig)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b082      	sub	sp, #8
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
 80028a6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80028a8:	f00b fafe 	bl	800dea8 <__errno>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2216      	movs	r2, #22
 80028b0:	601a      	str	r2, [r3, #0]
	return -1;
 80028b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <_exit>:

void _exit (int status)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b082      	sub	sp, #8
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80028c6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f7ff ffe7 	bl	800289e <_kill>
	while (1) {}		/* Make sure we hang here */
 80028d0:	e7fe      	b.n	80028d0 <_exit+0x12>
	...

080028d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028dc:	4a14      	ldr	r2, [pc, #80]	; (8002930 <_sbrk+0x5c>)
 80028de:	4b15      	ldr	r3, [pc, #84]	; (8002934 <_sbrk+0x60>)
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028e8:	4b13      	ldr	r3, [pc, #76]	; (8002938 <_sbrk+0x64>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d102      	bne.n	80028f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028f0:	4b11      	ldr	r3, [pc, #68]	; (8002938 <_sbrk+0x64>)
 80028f2:	4a12      	ldr	r2, [pc, #72]	; (800293c <_sbrk+0x68>)
 80028f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028f6:	4b10      	ldr	r3, [pc, #64]	; (8002938 <_sbrk+0x64>)
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4413      	add	r3, r2
 80028fe:	693a      	ldr	r2, [r7, #16]
 8002900:	429a      	cmp	r2, r3
 8002902:	d207      	bcs.n	8002914 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002904:	f00b fad0 	bl	800dea8 <__errno>
 8002908:	4603      	mov	r3, r0
 800290a:	220c      	movs	r2, #12
 800290c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800290e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002912:	e009      	b.n	8002928 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002914:	4b08      	ldr	r3, [pc, #32]	; (8002938 <_sbrk+0x64>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800291a:	4b07      	ldr	r3, [pc, #28]	; (8002938 <_sbrk+0x64>)
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4413      	add	r3, r2
 8002922:	4a05      	ldr	r2, [pc, #20]	; (8002938 <_sbrk+0x64>)
 8002924:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002926:	68fb      	ldr	r3, [r7, #12]
}
 8002928:	4618      	mov	r0, r3
 800292a:	3718      	adds	r7, #24
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	20010000 	.word	0x20010000
 8002934:	00000400 	.word	0x00000400
 8002938:	2000048c 	.word	0x2000048c
 800293c:	20002f98 	.word	0x20002f98

08002940 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002944:	bf00      	nop
 8002946:	46bd      	mov	sp, r7
 8002948:	bc80      	pop	{r7}
 800294a:	4770      	bx	lr

0800294c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800294c:	480c      	ldr	r0, [pc, #48]	; (8002980 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800294e:	490d      	ldr	r1, [pc, #52]	; (8002984 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002950:	4a0d      	ldr	r2, [pc, #52]	; (8002988 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002952:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002954:	e002      	b.n	800295c <LoopCopyDataInit>

08002956 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002956:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002958:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800295a:	3304      	adds	r3, #4

0800295c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800295c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800295e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002960:	d3f9      	bcc.n	8002956 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002962:	4a0a      	ldr	r2, [pc, #40]	; (800298c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002964:	4c0a      	ldr	r4, [pc, #40]	; (8002990 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002966:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002968:	e001      	b.n	800296e <LoopFillZerobss>

0800296a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800296a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800296c:	3204      	adds	r2, #4

0800296e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800296e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002970:	d3fb      	bcc.n	800296a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002972:	f7ff ffe5 	bl	8002940 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002976:	f00b fa9d 	bl	800deb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800297a:	f7ff f9d1 	bl	8001d20 <main>
  bx lr
 800297e:	4770      	bx	lr
  ldr r0, =_sdata
 8002980:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002984:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8002988:	0800e61c 	.word	0x0800e61c
  ldr r2, =_sbss
 800298c:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8002990:	20002f94 	.word	0x20002f94

08002994 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002994:	e7fe      	b.n	8002994 <ADC1_2_IRQHandler>
	...

08002998 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800299c:	4b08      	ldr	r3, [pc, #32]	; (80029c0 <HAL_Init+0x28>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a07      	ldr	r2, [pc, #28]	; (80029c0 <HAL_Init+0x28>)
 80029a2:	f043 0310 	orr.w	r3, r3, #16
 80029a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029a8:	2003      	movs	r0, #3
 80029aa:	f000 f923 	bl	8002bf4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029ae:	200f      	movs	r0, #15
 80029b0:	f000 f808 	bl	80029c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029b4:	f7ff fd54 	bl	8002460 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	40022000 	.word	0x40022000

080029c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029cc:	4b12      	ldr	r3, [pc, #72]	; (8002a18 <HAL_InitTick+0x54>)
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	4b12      	ldr	r3, [pc, #72]	; (8002a1c <HAL_InitTick+0x58>)
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	4619      	mov	r1, r3
 80029d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029da:	fbb3 f3f1 	udiv	r3, r3, r1
 80029de:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e2:	4618      	mov	r0, r3
 80029e4:	f000 f93b 	bl	8002c5e <HAL_SYSTICK_Config>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e00e      	b.n	8002a10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2b0f      	cmp	r3, #15
 80029f6:	d80a      	bhi.n	8002a0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029f8:	2200      	movs	r2, #0
 80029fa:	6879      	ldr	r1, [r7, #4]
 80029fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a00:	f000 f903 	bl	8002c0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a04:	4a06      	ldr	r2, [pc, #24]	; (8002a20 <HAL_InitTick+0x5c>)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	e000      	b.n	8002a10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3708      	adds	r7, #8
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	20000004 	.word	0x20000004
 8002a1c:	2000000c 	.word	0x2000000c
 8002a20:	20000008 	.word	0x20000008

08002a24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a28:	4b05      	ldr	r3, [pc, #20]	; (8002a40 <HAL_IncTick+0x1c>)
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	4b05      	ldr	r3, [pc, #20]	; (8002a44 <HAL_IncTick+0x20>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4413      	add	r3, r2
 8002a34:	4a03      	ldr	r2, [pc, #12]	; (8002a44 <HAL_IncTick+0x20>)
 8002a36:	6013      	str	r3, [r2, #0]
}
 8002a38:	bf00      	nop
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bc80      	pop	{r7}
 8002a3e:	4770      	bx	lr
 8002a40:	2000000c 	.word	0x2000000c
 8002a44:	20000490 	.word	0x20000490

08002a48 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a4c:	4b02      	ldr	r3, [pc, #8]	; (8002a58 <HAL_GetTick+0x10>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bc80      	pop	{r7}
 8002a56:	4770      	bx	lr
 8002a58:	20000490 	.word	0x20000490

08002a5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f003 0307 	and.w	r3, r3, #7
 8002a6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a6c:	4b0c      	ldr	r3, [pc, #48]	; (8002aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a72:	68ba      	ldr	r2, [r7, #8]
 8002a74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a78:	4013      	ands	r3, r2
 8002a7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a8e:	4a04      	ldr	r2, [pc, #16]	; (8002aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	60d3      	str	r3, [r2, #12]
}
 8002a94:	bf00      	nop
 8002a96:	3714      	adds	r7, #20
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bc80      	pop	{r7}
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	e000ed00 	.word	0xe000ed00

08002aa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002aa8:	4b04      	ldr	r3, [pc, #16]	; (8002abc <__NVIC_GetPriorityGrouping+0x18>)
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	0a1b      	lsrs	r3, r3, #8
 8002aae:	f003 0307 	and.w	r3, r3, #7
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bc80      	pop	{r7}
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	e000ed00 	.word	0xe000ed00

08002ac0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	db0b      	blt.n	8002aea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ad2:	79fb      	ldrb	r3, [r7, #7]
 8002ad4:	f003 021f 	and.w	r2, r3, #31
 8002ad8:	4906      	ldr	r1, [pc, #24]	; (8002af4 <__NVIC_EnableIRQ+0x34>)
 8002ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ade:	095b      	lsrs	r3, r3, #5
 8002ae0:	2001      	movs	r0, #1
 8002ae2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002aea:	bf00      	nop
 8002aec:	370c      	adds	r7, #12
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bc80      	pop	{r7}
 8002af2:	4770      	bx	lr
 8002af4:	e000e100 	.word	0xe000e100

08002af8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	4603      	mov	r3, r0
 8002b00:	6039      	str	r1, [r7, #0]
 8002b02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	db0a      	blt.n	8002b22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	b2da      	uxtb	r2, r3
 8002b10:	490c      	ldr	r1, [pc, #48]	; (8002b44 <__NVIC_SetPriority+0x4c>)
 8002b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b16:	0112      	lsls	r2, r2, #4
 8002b18:	b2d2      	uxtb	r2, r2
 8002b1a:	440b      	add	r3, r1
 8002b1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b20:	e00a      	b.n	8002b38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	b2da      	uxtb	r2, r3
 8002b26:	4908      	ldr	r1, [pc, #32]	; (8002b48 <__NVIC_SetPriority+0x50>)
 8002b28:	79fb      	ldrb	r3, [r7, #7]
 8002b2a:	f003 030f 	and.w	r3, r3, #15
 8002b2e:	3b04      	subs	r3, #4
 8002b30:	0112      	lsls	r2, r2, #4
 8002b32:	b2d2      	uxtb	r2, r2
 8002b34:	440b      	add	r3, r1
 8002b36:	761a      	strb	r2, [r3, #24]
}
 8002b38:	bf00      	nop
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bc80      	pop	{r7}
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	e000e100 	.word	0xe000e100
 8002b48:	e000ed00 	.word	0xe000ed00

08002b4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b089      	sub	sp, #36	; 0x24
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f003 0307 	and.w	r3, r3, #7
 8002b5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	f1c3 0307 	rsb	r3, r3, #7
 8002b66:	2b04      	cmp	r3, #4
 8002b68:	bf28      	it	cs
 8002b6a:	2304      	movcs	r3, #4
 8002b6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	3304      	adds	r3, #4
 8002b72:	2b06      	cmp	r3, #6
 8002b74:	d902      	bls.n	8002b7c <NVIC_EncodePriority+0x30>
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	3b03      	subs	r3, #3
 8002b7a:	e000      	b.n	8002b7e <NVIC_EncodePriority+0x32>
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8a:	43da      	mvns	r2, r3
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	401a      	ands	r2, r3
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b94:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b9e:	43d9      	mvns	r1, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ba4:	4313      	orrs	r3, r2
         );
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3724      	adds	r7, #36	; 0x24
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bc80      	pop	{r7}
 8002bae:	4770      	bx	lr

08002bb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bc0:	d301      	bcc.n	8002bc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e00f      	b.n	8002be6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bc6:	4a0a      	ldr	r2, [pc, #40]	; (8002bf0 <SysTick_Config+0x40>)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bce:	210f      	movs	r1, #15
 8002bd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002bd4:	f7ff ff90 	bl	8002af8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bd8:	4b05      	ldr	r3, [pc, #20]	; (8002bf0 <SysTick_Config+0x40>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bde:	4b04      	ldr	r3, [pc, #16]	; (8002bf0 <SysTick_Config+0x40>)
 8002be0:	2207      	movs	r2, #7
 8002be2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3708      	adds	r7, #8
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	e000e010 	.word	0xe000e010

08002bf4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f7ff ff2d 	bl	8002a5c <__NVIC_SetPriorityGrouping>
}
 8002c02:	bf00      	nop
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b086      	sub	sp, #24
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	4603      	mov	r3, r0
 8002c12:	60b9      	str	r1, [r7, #8]
 8002c14:	607a      	str	r2, [r7, #4]
 8002c16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c1c:	f7ff ff42 	bl	8002aa4 <__NVIC_GetPriorityGrouping>
 8002c20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	68b9      	ldr	r1, [r7, #8]
 8002c26:	6978      	ldr	r0, [r7, #20]
 8002c28:	f7ff ff90 	bl	8002b4c <NVIC_EncodePriority>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c32:	4611      	mov	r1, r2
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7ff ff5f 	bl	8002af8 <__NVIC_SetPriority>
}
 8002c3a:	bf00      	nop
 8002c3c:	3718      	adds	r7, #24
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b082      	sub	sp, #8
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	4603      	mov	r3, r0
 8002c4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7ff ff35 	bl	8002ac0 <__NVIC_EnableIRQ>
}
 8002c56:	bf00      	nop
 8002c58:	3708      	adds	r7, #8
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b082      	sub	sp, #8
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f7ff ffa2 	bl	8002bb0 <SysTick_Config>
 8002c6c:	4603      	mov	r3, r0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3708      	adds	r7, #8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
	...

08002c78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b08b      	sub	sp, #44	; 0x2c
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c82:	2300      	movs	r3, #0
 8002c84:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002c86:	2300      	movs	r3, #0
 8002c88:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c8a:	e179      	b.n	8002f80 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c90:	fa02 f303 	lsl.w	r3, r2, r3
 8002c94:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	69fa      	ldr	r2, [r7, #28]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	f040 8168 	bne.w	8002f7a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	4a96      	ldr	r2, [pc, #600]	; (8002f08 <HAL_GPIO_Init+0x290>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d05e      	beq.n	8002d72 <HAL_GPIO_Init+0xfa>
 8002cb4:	4a94      	ldr	r2, [pc, #592]	; (8002f08 <HAL_GPIO_Init+0x290>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d875      	bhi.n	8002da6 <HAL_GPIO_Init+0x12e>
 8002cba:	4a94      	ldr	r2, [pc, #592]	; (8002f0c <HAL_GPIO_Init+0x294>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d058      	beq.n	8002d72 <HAL_GPIO_Init+0xfa>
 8002cc0:	4a92      	ldr	r2, [pc, #584]	; (8002f0c <HAL_GPIO_Init+0x294>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d86f      	bhi.n	8002da6 <HAL_GPIO_Init+0x12e>
 8002cc6:	4a92      	ldr	r2, [pc, #584]	; (8002f10 <HAL_GPIO_Init+0x298>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d052      	beq.n	8002d72 <HAL_GPIO_Init+0xfa>
 8002ccc:	4a90      	ldr	r2, [pc, #576]	; (8002f10 <HAL_GPIO_Init+0x298>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d869      	bhi.n	8002da6 <HAL_GPIO_Init+0x12e>
 8002cd2:	4a90      	ldr	r2, [pc, #576]	; (8002f14 <HAL_GPIO_Init+0x29c>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d04c      	beq.n	8002d72 <HAL_GPIO_Init+0xfa>
 8002cd8:	4a8e      	ldr	r2, [pc, #568]	; (8002f14 <HAL_GPIO_Init+0x29c>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d863      	bhi.n	8002da6 <HAL_GPIO_Init+0x12e>
 8002cde:	4a8e      	ldr	r2, [pc, #568]	; (8002f18 <HAL_GPIO_Init+0x2a0>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d046      	beq.n	8002d72 <HAL_GPIO_Init+0xfa>
 8002ce4:	4a8c      	ldr	r2, [pc, #560]	; (8002f18 <HAL_GPIO_Init+0x2a0>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d85d      	bhi.n	8002da6 <HAL_GPIO_Init+0x12e>
 8002cea:	2b12      	cmp	r3, #18
 8002cec:	d82a      	bhi.n	8002d44 <HAL_GPIO_Init+0xcc>
 8002cee:	2b12      	cmp	r3, #18
 8002cf0:	d859      	bhi.n	8002da6 <HAL_GPIO_Init+0x12e>
 8002cf2:	a201      	add	r2, pc, #4	; (adr r2, 8002cf8 <HAL_GPIO_Init+0x80>)
 8002cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cf8:	08002d73 	.word	0x08002d73
 8002cfc:	08002d4d 	.word	0x08002d4d
 8002d00:	08002d5f 	.word	0x08002d5f
 8002d04:	08002da1 	.word	0x08002da1
 8002d08:	08002da7 	.word	0x08002da7
 8002d0c:	08002da7 	.word	0x08002da7
 8002d10:	08002da7 	.word	0x08002da7
 8002d14:	08002da7 	.word	0x08002da7
 8002d18:	08002da7 	.word	0x08002da7
 8002d1c:	08002da7 	.word	0x08002da7
 8002d20:	08002da7 	.word	0x08002da7
 8002d24:	08002da7 	.word	0x08002da7
 8002d28:	08002da7 	.word	0x08002da7
 8002d2c:	08002da7 	.word	0x08002da7
 8002d30:	08002da7 	.word	0x08002da7
 8002d34:	08002da7 	.word	0x08002da7
 8002d38:	08002da7 	.word	0x08002da7
 8002d3c:	08002d55 	.word	0x08002d55
 8002d40:	08002d69 	.word	0x08002d69
 8002d44:	4a75      	ldr	r2, [pc, #468]	; (8002f1c <HAL_GPIO_Init+0x2a4>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d013      	beq.n	8002d72 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002d4a:	e02c      	b.n	8002da6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	623b      	str	r3, [r7, #32]
          break;
 8002d52:	e029      	b.n	8002da8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	3304      	adds	r3, #4
 8002d5a:	623b      	str	r3, [r7, #32]
          break;
 8002d5c:	e024      	b.n	8002da8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	3308      	adds	r3, #8
 8002d64:	623b      	str	r3, [r7, #32]
          break;
 8002d66:	e01f      	b.n	8002da8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	330c      	adds	r3, #12
 8002d6e:	623b      	str	r3, [r7, #32]
          break;
 8002d70:	e01a      	b.n	8002da8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d102      	bne.n	8002d80 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002d7a:	2304      	movs	r3, #4
 8002d7c:	623b      	str	r3, [r7, #32]
          break;
 8002d7e:	e013      	b.n	8002da8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d105      	bne.n	8002d94 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d88:	2308      	movs	r3, #8
 8002d8a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	69fa      	ldr	r2, [r7, #28]
 8002d90:	611a      	str	r2, [r3, #16]
          break;
 8002d92:	e009      	b.n	8002da8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d94:	2308      	movs	r3, #8
 8002d96:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	69fa      	ldr	r2, [r7, #28]
 8002d9c:	615a      	str	r2, [r3, #20]
          break;
 8002d9e:	e003      	b.n	8002da8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002da0:	2300      	movs	r3, #0
 8002da2:	623b      	str	r3, [r7, #32]
          break;
 8002da4:	e000      	b.n	8002da8 <HAL_GPIO_Init+0x130>
          break;
 8002da6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	2bff      	cmp	r3, #255	; 0xff
 8002dac:	d801      	bhi.n	8002db2 <HAL_GPIO_Init+0x13a>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	e001      	b.n	8002db6 <HAL_GPIO_Init+0x13e>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	3304      	adds	r3, #4
 8002db6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	2bff      	cmp	r3, #255	; 0xff
 8002dbc:	d802      	bhi.n	8002dc4 <HAL_GPIO_Init+0x14c>
 8002dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	e002      	b.n	8002dca <HAL_GPIO_Init+0x152>
 8002dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc6:	3b08      	subs	r3, #8
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	210f      	movs	r1, #15
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd8:	43db      	mvns	r3, r3
 8002dda:	401a      	ands	r2, r3
 8002ddc:	6a39      	ldr	r1, [r7, #32]
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	fa01 f303 	lsl.w	r3, r1, r3
 8002de4:	431a      	orrs	r2, r3
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	f000 80c1 	beq.w	8002f7a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002df8:	4b49      	ldr	r3, [pc, #292]	; (8002f20 <HAL_GPIO_Init+0x2a8>)
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	4a48      	ldr	r2, [pc, #288]	; (8002f20 <HAL_GPIO_Init+0x2a8>)
 8002dfe:	f043 0301 	orr.w	r3, r3, #1
 8002e02:	6193      	str	r3, [r2, #24]
 8002e04:	4b46      	ldr	r3, [pc, #280]	; (8002f20 <HAL_GPIO_Init+0x2a8>)
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	f003 0301 	and.w	r3, r3, #1
 8002e0c:	60bb      	str	r3, [r7, #8]
 8002e0e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002e10:	4a44      	ldr	r2, [pc, #272]	; (8002f24 <HAL_GPIO_Init+0x2ac>)
 8002e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e14:	089b      	lsrs	r3, r3, #2
 8002e16:	3302      	adds	r3, #2
 8002e18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e1c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e20:	f003 0303 	and.w	r3, r3, #3
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	220f      	movs	r2, #15
 8002e28:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2c:	43db      	mvns	r3, r3
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	4013      	ands	r3, r2
 8002e32:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4a3c      	ldr	r2, [pc, #240]	; (8002f28 <HAL_GPIO_Init+0x2b0>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d01f      	beq.n	8002e7c <HAL_GPIO_Init+0x204>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4a3b      	ldr	r2, [pc, #236]	; (8002f2c <HAL_GPIO_Init+0x2b4>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d019      	beq.n	8002e78 <HAL_GPIO_Init+0x200>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4a3a      	ldr	r2, [pc, #232]	; (8002f30 <HAL_GPIO_Init+0x2b8>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d013      	beq.n	8002e74 <HAL_GPIO_Init+0x1fc>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a39      	ldr	r2, [pc, #228]	; (8002f34 <HAL_GPIO_Init+0x2bc>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d00d      	beq.n	8002e70 <HAL_GPIO_Init+0x1f8>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a38      	ldr	r2, [pc, #224]	; (8002f38 <HAL_GPIO_Init+0x2c0>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d007      	beq.n	8002e6c <HAL_GPIO_Init+0x1f4>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4a37      	ldr	r2, [pc, #220]	; (8002f3c <HAL_GPIO_Init+0x2c4>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d101      	bne.n	8002e68 <HAL_GPIO_Init+0x1f0>
 8002e64:	2305      	movs	r3, #5
 8002e66:	e00a      	b.n	8002e7e <HAL_GPIO_Init+0x206>
 8002e68:	2306      	movs	r3, #6
 8002e6a:	e008      	b.n	8002e7e <HAL_GPIO_Init+0x206>
 8002e6c:	2304      	movs	r3, #4
 8002e6e:	e006      	b.n	8002e7e <HAL_GPIO_Init+0x206>
 8002e70:	2303      	movs	r3, #3
 8002e72:	e004      	b.n	8002e7e <HAL_GPIO_Init+0x206>
 8002e74:	2302      	movs	r3, #2
 8002e76:	e002      	b.n	8002e7e <HAL_GPIO_Init+0x206>
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e000      	b.n	8002e7e <HAL_GPIO_Init+0x206>
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e80:	f002 0203 	and.w	r2, r2, #3
 8002e84:	0092      	lsls	r2, r2, #2
 8002e86:	4093      	lsls	r3, r2
 8002e88:	68fa      	ldr	r2, [r7, #12]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002e8e:	4925      	ldr	r1, [pc, #148]	; (8002f24 <HAL_GPIO_Init+0x2ac>)
 8002e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e92:	089b      	lsrs	r3, r3, #2
 8002e94:	3302      	adds	r3, #2
 8002e96:	68fa      	ldr	r2, [r7, #12]
 8002e98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d006      	beq.n	8002eb6 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ea8:	4b25      	ldr	r3, [pc, #148]	; (8002f40 <HAL_GPIO_Init+0x2c8>)
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	4924      	ldr	r1, [pc, #144]	; (8002f40 <HAL_GPIO_Init+0x2c8>)
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	600b      	str	r3, [r1, #0]
 8002eb4:	e006      	b.n	8002ec4 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002eb6:	4b22      	ldr	r3, [pc, #136]	; (8002f40 <HAL_GPIO_Init+0x2c8>)
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	4920      	ldr	r1, [pc, #128]	; (8002f40 <HAL_GPIO_Init+0x2c8>)
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d006      	beq.n	8002ede <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ed0:	4b1b      	ldr	r3, [pc, #108]	; (8002f40 <HAL_GPIO_Init+0x2c8>)
 8002ed2:	685a      	ldr	r2, [r3, #4]
 8002ed4:	491a      	ldr	r1, [pc, #104]	; (8002f40 <HAL_GPIO_Init+0x2c8>)
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	604b      	str	r3, [r1, #4]
 8002edc:	e006      	b.n	8002eec <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002ede:	4b18      	ldr	r3, [pc, #96]	; (8002f40 <HAL_GPIO_Init+0x2c8>)
 8002ee0:	685a      	ldr	r2, [r3, #4]
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	43db      	mvns	r3, r3
 8002ee6:	4916      	ldr	r1, [pc, #88]	; (8002f40 <HAL_GPIO_Init+0x2c8>)
 8002ee8:	4013      	ands	r3, r2
 8002eea:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d025      	beq.n	8002f44 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002ef8:	4b11      	ldr	r3, [pc, #68]	; (8002f40 <HAL_GPIO_Init+0x2c8>)
 8002efa:	689a      	ldr	r2, [r3, #8]
 8002efc:	4910      	ldr	r1, [pc, #64]	; (8002f40 <HAL_GPIO_Init+0x2c8>)
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	608b      	str	r3, [r1, #8]
 8002f04:	e025      	b.n	8002f52 <HAL_GPIO_Init+0x2da>
 8002f06:	bf00      	nop
 8002f08:	10320000 	.word	0x10320000
 8002f0c:	10310000 	.word	0x10310000
 8002f10:	10220000 	.word	0x10220000
 8002f14:	10210000 	.word	0x10210000
 8002f18:	10120000 	.word	0x10120000
 8002f1c:	10110000 	.word	0x10110000
 8002f20:	40021000 	.word	0x40021000
 8002f24:	40010000 	.word	0x40010000
 8002f28:	40010800 	.word	0x40010800
 8002f2c:	40010c00 	.word	0x40010c00
 8002f30:	40011000 	.word	0x40011000
 8002f34:	40011400 	.word	0x40011400
 8002f38:	40011800 	.word	0x40011800
 8002f3c:	40011c00 	.word	0x40011c00
 8002f40:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002f44:	4b15      	ldr	r3, [pc, #84]	; (8002f9c <HAL_GPIO_Init+0x324>)
 8002f46:	689a      	ldr	r2, [r3, #8]
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	43db      	mvns	r3, r3
 8002f4c:	4913      	ldr	r1, [pc, #76]	; (8002f9c <HAL_GPIO_Init+0x324>)
 8002f4e:	4013      	ands	r3, r2
 8002f50:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d006      	beq.n	8002f6c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002f5e:	4b0f      	ldr	r3, [pc, #60]	; (8002f9c <HAL_GPIO_Init+0x324>)
 8002f60:	68da      	ldr	r2, [r3, #12]
 8002f62:	490e      	ldr	r1, [pc, #56]	; (8002f9c <HAL_GPIO_Init+0x324>)
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	60cb      	str	r3, [r1, #12]
 8002f6a:	e006      	b.n	8002f7a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002f6c:	4b0b      	ldr	r3, [pc, #44]	; (8002f9c <HAL_GPIO_Init+0x324>)
 8002f6e:	68da      	ldr	r2, [r3, #12]
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	43db      	mvns	r3, r3
 8002f74:	4909      	ldr	r1, [pc, #36]	; (8002f9c <HAL_GPIO_Init+0x324>)
 8002f76:	4013      	ands	r3, r2
 8002f78:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f86:	fa22 f303 	lsr.w	r3, r2, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	f47f ae7e 	bne.w	8002c8c <HAL_GPIO_Init+0x14>
  }
}
 8002f90:	bf00      	nop
 8002f92:	bf00      	nop
 8002f94:	372c      	adds	r7, #44	; 0x2c
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bc80      	pop	{r7}
 8002f9a:	4770      	bx	lr
 8002f9c:	40010400 	.word	0x40010400

08002fa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	460b      	mov	r3, r1
 8002faa:	807b      	strh	r3, [r7, #2]
 8002fac:	4613      	mov	r3, r2
 8002fae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002fb0:	787b      	ldrb	r3, [r7, #1]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d003      	beq.n	8002fbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fb6:	887a      	ldrh	r2, [r7, #2]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002fbc:	e003      	b.n	8002fc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002fbe:	887b      	ldrh	r3, [r7, #2]
 8002fc0:	041a      	lsls	r2, r3, #16
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	611a      	str	r2, [r3, #16]
}
 8002fc6:	bf00      	nop
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bc80      	pop	{r7}
 8002fce:	4770      	bx	lr

08002fd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d101      	bne.n	8002fe2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e12b      	b.n	800323a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d106      	bne.n	8002ffc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f7ff fa6a 	bl	80024d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2224      	movs	r2, #36	; 0x24
 8003000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f022 0201 	bic.w	r2, r2, #1
 8003012:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003022:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003032:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003034:	f003 f834 	bl	80060a0 <HAL_RCC_GetPCLK1Freq>
 8003038:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	4a81      	ldr	r2, [pc, #516]	; (8003244 <HAL_I2C_Init+0x274>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d807      	bhi.n	8003054 <HAL_I2C_Init+0x84>
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	4a80      	ldr	r2, [pc, #512]	; (8003248 <HAL_I2C_Init+0x278>)
 8003048:	4293      	cmp	r3, r2
 800304a:	bf94      	ite	ls
 800304c:	2301      	movls	r3, #1
 800304e:	2300      	movhi	r3, #0
 8003050:	b2db      	uxtb	r3, r3
 8003052:	e006      	b.n	8003062 <HAL_I2C_Init+0x92>
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	4a7d      	ldr	r2, [pc, #500]	; (800324c <HAL_I2C_Init+0x27c>)
 8003058:	4293      	cmp	r3, r2
 800305a:	bf94      	ite	ls
 800305c:	2301      	movls	r3, #1
 800305e:	2300      	movhi	r3, #0
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e0e7      	b.n	800323a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	4a78      	ldr	r2, [pc, #480]	; (8003250 <HAL_I2C_Init+0x280>)
 800306e:	fba2 2303 	umull	r2, r3, r2, r3
 8003072:	0c9b      	lsrs	r3, r3, #18
 8003074:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68ba      	ldr	r2, [r7, #8]
 8003086:	430a      	orrs	r2, r1
 8003088:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	6a1b      	ldr	r3, [r3, #32]
 8003090:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	4a6a      	ldr	r2, [pc, #424]	; (8003244 <HAL_I2C_Init+0x274>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d802      	bhi.n	80030a4 <HAL_I2C_Init+0xd4>
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	3301      	adds	r3, #1
 80030a2:	e009      	b.n	80030b8 <HAL_I2C_Init+0xe8>
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80030aa:	fb02 f303 	mul.w	r3, r2, r3
 80030ae:	4a69      	ldr	r2, [pc, #420]	; (8003254 <HAL_I2C_Init+0x284>)
 80030b0:	fba2 2303 	umull	r2, r3, r2, r3
 80030b4:	099b      	lsrs	r3, r3, #6
 80030b6:	3301      	adds	r3, #1
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	6812      	ldr	r2, [r2, #0]
 80030bc:	430b      	orrs	r3, r1
 80030be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	69db      	ldr	r3, [r3, #28]
 80030c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80030ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	495c      	ldr	r1, [pc, #368]	; (8003244 <HAL_I2C_Init+0x274>)
 80030d4:	428b      	cmp	r3, r1
 80030d6:	d819      	bhi.n	800310c <HAL_I2C_Init+0x13c>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	1e59      	subs	r1, r3, #1
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80030e6:	1c59      	adds	r1, r3, #1
 80030e8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80030ec:	400b      	ands	r3, r1
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00a      	beq.n	8003108 <HAL_I2C_Init+0x138>
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	1e59      	subs	r1, r3, #1
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	005b      	lsls	r3, r3, #1
 80030fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003100:	3301      	adds	r3, #1
 8003102:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003106:	e051      	b.n	80031ac <HAL_I2C_Init+0x1dc>
 8003108:	2304      	movs	r3, #4
 800310a:	e04f      	b.n	80031ac <HAL_I2C_Init+0x1dc>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d111      	bne.n	8003138 <HAL_I2C_Init+0x168>
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	1e58      	subs	r0, r3, #1
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6859      	ldr	r1, [r3, #4]
 800311c:	460b      	mov	r3, r1
 800311e:	005b      	lsls	r3, r3, #1
 8003120:	440b      	add	r3, r1
 8003122:	fbb0 f3f3 	udiv	r3, r0, r3
 8003126:	3301      	adds	r3, #1
 8003128:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800312c:	2b00      	cmp	r3, #0
 800312e:	bf0c      	ite	eq
 8003130:	2301      	moveq	r3, #1
 8003132:	2300      	movne	r3, #0
 8003134:	b2db      	uxtb	r3, r3
 8003136:	e012      	b.n	800315e <HAL_I2C_Init+0x18e>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	1e58      	subs	r0, r3, #1
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6859      	ldr	r1, [r3, #4]
 8003140:	460b      	mov	r3, r1
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	440b      	add	r3, r1
 8003146:	0099      	lsls	r1, r3, #2
 8003148:	440b      	add	r3, r1
 800314a:	fbb0 f3f3 	udiv	r3, r0, r3
 800314e:	3301      	adds	r3, #1
 8003150:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003154:	2b00      	cmp	r3, #0
 8003156:	bf0c      	ite	eq
 8003158:	2301      	moveq	r3, #1
 800315a:	2300      	movne	r3, #0
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <HAL_I2C_Init+0x196>
 8003162:	2301      	movs	r3, #1
 8003164:	e022      	b.n	80031ac <HAL_I2C_Init+0x1dc>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d10e      	bne.n	800318c <HAL_I2C_Init+0x1bc>
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	1e58      	subs	r0, r3, #1
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6859      	ldr	r1, [r3, #4]
 8003176:	460b      	mov	r3, r1
 8003178:	005b      	lsls	r3, r3, #1
 800317a:	440b      	add	r3, r1
 800317c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003180:	3301      	adds	r3, #1
 8003182:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003186:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800318a:	e00f      	b.n	80031ac <HAL_I2C_Init+0x1dc>
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	1e58      	subs	r0, r3, #1
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6859      	ldr	r1, [r3, #4]
 8003194:	460b      	mov	r3, r1
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	440b      	add	r3, r1
 800319a:	0099      	lsls	r1, r3, #2
 800319c:	440b      	add	r3, r1
 800319e:	fbb0 f3f3 	udiv	r3, r0, r3
 80031a2:	3301      	adds	r3, #1
 80031a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031ac:	6879      	ldr	r1, [r7, #4]
 80031ae:	6809      	ldr	r1, [r1, #0]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	69da      	ldr	r2, [r3, #28]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a1b      	ldr	r3, [r3, #32]
 80031c6:	431a      	orrs	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	430a      	orrs	r2, r1
 80031ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80031da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	6911      	ldr	r1, [r2, #16]
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	68d2      	ldr	r2, [r2, #12]
 80031e6:	4311      	orrs	r1, r2
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	6812      	ldr	r2, [r2, #0]
 80031ec:	430b      	orrs	r3, r1
 80031ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	695a      	ldr	r2, [r3, #20]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	699b      	ldr	r3, [r3, #24]
 8003202:	431a      	orrs	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	430a      	orrs	r2, r1
 800320a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f042 0201 	orr.w	r2, r2, #1
 800321a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2220      	movs	r2, #32
 8003226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3710      	adds	r7, #16
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	000186a0 	.word	0x000186a0
 8003248:	001e847f 	.word	0x001e847f
 800324c:	003d08ff 	.word	0x003d08ff
 8003250:	431bde83 	.word	0x431bde83
 8003254:	10624dd3 	.word	0x10624dd3

08003258 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b088      	sub	sp, #32
 800325c:	af02      	add	r7, sp, #8
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	607a      	str	r2, [r7, #4]
 8003262:	461a      	mov	r2, r3
 8003264:	460b      	mov	r3, r1
 8003266:	817b      	strh	r3, [r7, #10]
 8003268:	4613      	mov	r3, r2
 800326a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800326c:	f7ff fbec 	bl	8002a48 <HAL_GetTick>
 8003270:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b20      	cmp	r3, #32
 800327c:	f040 80e0 	bne.w	8003440 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	9300      	str	r3, [sp, #0]
 8003284:	2319      	movs	r3, #25
 8003286:	2201      	movs	r2, #1
 8003288:	4970      	ldr	r1, [pc, #448]	; (800344c <HAL_I2C_Master_Transmit+0x1f4>)
 800328a:	68f8      	ldr	r0, [r7, #12]
 800328c:	f000 fc92 	bl	8003bb4 <I2C_WaitOnFlagUntilTimeout>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d001      	beq.n	800329a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003296:	2302      	movs	r3, #2
 8003298:	e0d3      	b.n	8003442 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d101      	bne.n	80032a8 <HAL_I2C_Master_Transmit+0x50>
 80032a4:	2302      	movs	r3, #2
 80032a6:	e0cc      	b.n	8003442 <HAL_I2C_Master_Transmit+0x1ea>
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d007      	beq.n	80032ce <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f042 0201 	orr.w	r2, r2, #1
 80032cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2221      	movs	r2, #33	; 0x21
 80032e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2210      	movs	r2, #16
 80032ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2200      	movs	r2, #0
 80032f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	893a      	ldrh	r2, [r7, #8]
 80032fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003304:	b29a      	uxth	r2, r3
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	4a50      	ldr	r2, [pc, #320]	; (8003450 <HAL_I2C_Master_Transmit+0x1f8>)
 800330e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003310:	8979      	ldrh	r1, [r7, #10]
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	6a3a      	ldr	r2, [r7, #32]
 8003316:	68f8      	ldr	r0, [r7, #12]
 8003318:	f000 fafc 	bl	8003914 <I2C_MasterRequestWrite>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d001      	beq.n	8003326 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e08d      	b.n	8003442 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003326:	2300      	movs	r3, #0
 8003328:	613b      	str	r3, [r7, #16]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	695b      	ldr	r3, [r3, #20]
 8003330:	613b      	str	r3, [r7, #16]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	699b      	ldr	r3, [r3, #24]
 8003338:	613b      	str	r3, [r7, #16]
 800333a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800333c:	e066      	b.n	800340c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800333e:	697a      	ldr	r2, [r7, #20]
 8003340:	6a39      	ldr	r1, [r7, #32]
 8003342:	68f8      	ldr	r0, [r7, #12]
 8003344:	f000 fd0c 	bl	8003d60 <I2C_WaitOnTXEFlagUntilTimeout>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00d      	beq.n	800336a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003352:	2b04      	cmp	r3, #4
 8003354:	d107      	bne.n	8003366 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003364:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e06b      	b.n	8003442 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336e:	781a      	ldrb	r2, [r3, #0]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337a:	1c5a      	adds	r2, r3, #1
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003384:	b29b      	uxth	r3, r3
 8003386:	3b01      	subs	r3, #1
 8003388:	b29a      	uxth	r2, r3
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003392:	3b01      	subs	r3, #1
 8003394:	b29a      	uxth	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	695b      	ldr	r3, [r3, #20]
 80033a0:	f003 0304 	and.w	r3, r3, #4
 80033a4:	2b04      	cmp	r3, #4
 80033a6:	d11b      	bne.n	80033e0 <HAL_I2C_Master_Transmit+0x188>
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d017      	beq.n	80033e0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b4:	781a      	ldrb	r2, [r3, #0]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c0:	1c5a      	adds	r2, r3, #1
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	3b01      	subs	r3, #1
 80033ce:	b29a      	uxth	r2, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033d8:	3b01      	subs	r3, #1
 80033da:	b29a      	uxth	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033e0:	697a      	ldr	r2, [r7, #20]
 80033e2:	6a39      	ldr	r1, [r7, #32]
 80033e4:	68f8      	ldr	r0, [r7, #12]
 80033e6:	f000 fcfc 	bl	8003de2 <I2C_WaitOnBTFFlagUntilTimeout>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d00d      	beq.n	800340c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f4:	2b04      	cmp	r3, #4
 80033f6:	d107      	bne.n	8003408 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003406:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e01a      	b.n	8003442 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003410:	2b00      	cmp	r3, #0
 8003412:	d194      	bne.n	800333e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003422:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2220      	movs	r2, #32
 8003428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800343c:	2300      	movs	r3, #0
 800343e:	e000      	b.n	8003442 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003440:	2302      	movs	r3, #2
  }
}
 8003442:	4618      	mov	r0, r3
 8003444:	3718      	adds	r7, #24
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	00100002 	.word	0x00100002
 8003450:	ffff0000 	.word	0xffff0000

08003454 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b08c      	sub	sp, #48	; 0x30
 8003458:	af02      	add	r7, sp, #8
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	607a      	str	r2, [r7, #4]
 800345e:	461a      	mov	r2, r3
 8003460:	460b      	mov	r3, r1
 8003462:	817b      	strh	r3, [r7, #10]
 8003464:	4613      	mov	r3, r2
 8003466:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003468:	2300      	movs	r3, #0
 800346a:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800346c:	f7ff faec 	bl	8002a48 <HAL_GetTick>
 8003470:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003478:	b2db      	uxtb	r3, r3
 800347a:	2b20      	cmp	r3, #32
 800347c:	f040 823f 	bne.w	80038fe <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003482:	9300      	str	r3, [sp, #0]
 8003484:	2319      	movs	r3, #25
 8003486:	2201      	movs	r2, #1
 8003488:	497f      	ldr	r1, [pc, #508]	; (8003688 <HAL_I2C_Master_Receive+0x234>)
 800348a:	68f8      	ldr	r0, [r7, #12]
 800348c:	f000 fb92 	bl	8003bb4 <I2C_WaitOnFlagUntilTimeout>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d001      	beq.n	800349a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8003496:	2302      	movs	r3, #2
 8003498:	e232      	b.n	8003900 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d101      	bne.n	80034a8 <HAL_I2C_Master_Receive+0x54>
 80034a4:	2302      	movs	r3, #2
 80034a6:	e22b      	b.n	8003900 <HAL_I2C_Master_Receive+0x4ac>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d007      	beq.n	80034ce <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f042 0201 	orr.w	r2, r2, #1
 80034cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2222      	movs	r2, #34	; 0x22
 80034e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2210      	movs	r2, #16
 80034ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2200      	movs	r2, #0
 80034f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	893a      	ldrh	r2, [r7, #8]
 80034fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003504:	b29a      	uxth	r2, r3
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	4a5f      	ldr	r2, [pc, #380]	; (800368c <HAL_I2C_Master_Receive+0x238>)
 800350e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003510:	8979      	ldrh	r1, [r7, #10]
 8003512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003514:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	f000 fa7e 	bl	8003a18 <I2C_MasterRequestRead>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e1ec      	b.n	8003900 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800352a:	2b00      	cmp	r3, #0
 800352c:	d113      	bne.n	8003556 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800352e:	2300      	movs	r3, #0
 8003530:	61fb      	str	r3, [r7, #28]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	695b      	ldr	r3, [r3, #20]
 8003538:	61fb      	str	r3, [r7, #28]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	699b      	ldr	r3, [r3, #24]
 8003540:	61fb      	str	r3, [r7, #28]
 8003542:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003552:	601a      	str	r2, [r3, #0]
 8003554:	e1c0      	b.n	80038d8 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800355a:	2b01      	cmp	r3, #1
 800355c:	d11e      	bne.n	800359c <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800356c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800356e:	b672      	cpsid	i
}
 8003570:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003572:	2300      	movs	r3, #0
 8003574:	61bb      	str	r3, [r7, #24]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	695b      	ldr	r3, [r3, #20]
 800357c:	61bb      	str	r3, [r7, #24]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	699b      	ldr	r3, [r3, #24]
 8003584:	61bb      	str	r3, [r7, #24]
 8003586:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003596:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003598:	b662      	cpsie	i
}
 800359a:	e035      	b.n	8003608 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d11e      	bne.n	80035e2 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035b2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80035b4:	b672      	cpsid	i
}
 80035b6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035b8:	2300      	movs	r3, #0
 80035ba:	617b      	str	r3, [r7, #20]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	695b      	ldr	r3, [r3, #20]
 80035c2:	617b      	str	r3, [r7, #20]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	699b      	ldr	r3, [r3, #24]
 80035ca:	617b      	str	r3, [r7, #20]
 80035cc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035dc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80035de:	b662      	cpsie	i
}
 80035e0:	e012      	b.n	8003608 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80035f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035f2:	2300      	movs	r3, #0
 80035f4:	613b      	str	r3, [r7, #16]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	695b      	ldr	r3, [r3, #20]
 80035fc:	613b      	str	r3, [r7, #16]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	613b      	str	r3, [r7, #16]
 8003606:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003608:	e166      	b.n	80038d8 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800360e:	2b03      	cmp	r3, #3
 8003610:	f200 811f 	bhi.w	8003852 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003618:	2b01      	cmp	r3, #1
 800361a:	d123      	bne.n	8003664 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800361c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800361e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003620:	68f8      	ldr	r0, [r7, #12]
 8003622:	f000 fc1f 	bl	8003e64 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d001      	beq.n	8003630 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e167      	b.n	8003900 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	691a      	ldr	r2, [r3, #16]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363a:	b2d2      	uxtb	r2, r2
 800363c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003642:	1c5a      	adds	r2, r3, #1
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800364c:	3b01      	subs	r3, #1
 800364e:	b29a      	uxth	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003658:	b29b      	uxth	r3, r3
 800365a:	3b01      	subs	r3, #1
 800365c:	b29a      	uxth	r2, r3
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003662:	e139      	b.n	80038d8 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003668:	2b02      	cmp	r3, #2
 800366a:	d152      	bne.n	8003712 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800366c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366e:	9300      	str	r3, [sp, #0]
 8003670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003672:	2200      	movs	r2, #0
 8003674:	4906      	ldr	r1, [pc, #24]	; (8003690 <HAL_I2C_Master_Receive+0x23c>)
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	f000 fa9c 	bl	8003bb4 <I2C_WaitOnFlagUntilTimeout>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d008      	beq.n	8003694 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e13c      	b.n	8003900 <HAL_I2C_Master_Receive+0x4ac>
 8003686:	bf00      	nop
 8003688:	00100002 	.word	0x00100002
 800368c:	ffff0000 	.word	0xffff0000
 8003690:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003694:	b672      	cpsid	i
}
 8003696:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	691a      	ldr	r2, [r3, #16]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b2:	b2d2      	uxtb	r2, r2
 80036b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ba:	1c5a      	adds	r2, r3, #1
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036c4:	3b01      	subs	r3, #1
 80036c6:	b29a      	uxth	r2, r3
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	3b01      	subs	r3, #1
 80036d4:	b29a      	uxth	r2, r3
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80036da:	b662      	cpsie	i
}
 80036dc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	691a      	ldr	r2, [r3, #16]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e8:	b2d2      	uxtb	r2, r2
 80036ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f0:	1c5a      	adds	r2, r3, #1
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036fa:	3b01      	subs	r3, #1
 80036fc:	b29a      	uxth	r2, r3
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003706:	b29b      	uxth	r3, r3
 8003708:	3b01      	subs	r3, #1
 800370a:	b29a      	uxth	r2, r3
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003710:	e0e2      	b.n	80038d8 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003714:	9300      	str	r3, [sp, #0]
 8003716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003718:	2200      	movs	r2, #0
 800371a:	497b      	ldr	r1, [pc, #492]	; (8003908 <HAL_I2C_Master_Receive+0x4b4>)
 800371c:	68f8      	ldr	r0, [r7, #12]
 800371e:	f000 fa49 	bl	8003bb4 <I2C_WaitOnFlagUntilTimeout>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d001      	beq.n	800372c <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e0e9      	b.n	8003900 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800373a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800373c:	b672      	cpsid	i
}
 800373e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	691a      	ldr	r2, [r3, #16]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374a:	b2d2      	uxtb	r2, r2
 800374c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003752:	1c5a      	adds	r2, r3, #1
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800375c:	3b01      	subs	r3, #1
 800375e:	b29a      	uxth	r2, r3
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003768:	b29b      	uxth	r3, r3
 800376a:	3b01      	subs	r3, #1
 800376c:	b29a      	uxth	r2, r3
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003772:	4b66      	ldr	r3, [pc, #408]	; (800390c <HAL_I2C_Master_Receive+0x4b8>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	08db      	lsrs	r3, r3, #3
 8003778:	4a65      	ldr	r2, [pc, #404]	; (8003910 <HAL_I2C_Master_Receive+0x4bc>)
 800377a:	fba2 2303 	umull	r2, r3, r2, r3
 800377e:	0a1a      	lsrs	r2, r3, #8
 8003780:	4613      	mov	r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	4413      	add	r3, r2
 8003786:	00da      	lsls	r2, r3, #3
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800378c:	6a3b      	ldr	r3, [r7, #32]
 800378e:	3b01      	subs	r3, #1
 8003790:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003792:	6a3b      	ldr	r3, [r7, #32]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d118      	bne.n	80037ca <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2220      	movs	r2, #32
 80037a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b2:	f043 0220 	orr.w	r2, r3, #32
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80037ba:	b662      	cpsie	i
}
 80037bc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e09a      	b.n	8003900 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	695b      	ldr	r3, [r3, #20]
 80037d0:	f003 0304 	and.w	r3, r3, #4
 80037d4:	2b04      	cmp	r3, #4
 80037d6:	d1d9      	bne.n	800378c <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	691a      	ldr	r2, [r3, #16]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f2:	b2d2      	uxtb	r2, r2
 80037f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fa:	1c5a      	adds	r2, r3, #1
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003804:	3b01      	subs	r3, #1
 8003806:	b29a      	uxth	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003810:	b29b      	uxth	r3, r3
 8003812:	3b01      	subs	r3, #1
 8003814:	b29a      	uxth	r2, r3
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800381a:	b662      	cpsie	i
}
 800381c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	691a      	ldr	r2, [r3, #16]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003828:	b2d2      	uxtb	r2, r2
 800382a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003830:	1c5a      	adds	r2, r3, #1
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800383a:	3b01      	subs	r3, #1
 800383c:	b29a      	uxth	r2, r3
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003846:	b29b      	uxth	r3, r3
 8003848:	3b01      	subs	r3, #1
 800384a:	b29a      	uxth	r2, r3
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003850:	e042      	b.n	80038d8 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003852:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003854:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003856:	68f8      	ldr	r0, [r7, #12]
 8003858:	f000 fb04 	bl	8003e64 <I2C_WaitOnRXNEFlagUntilTimeout>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d001      	beq.n	8003866 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e04c      	b.n	8003900 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	691a      	ldr	r2, [r3, #16]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003870:	b2d2      	uxtb	r2, r2
 8003872:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003878:	1c5a      	adds	r2, r3, #1
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003882:	3b01      	subs	r3, #1
 8003884:	b29a      	uxth	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800388e:	b29b      	uxth	r3, r3
 8003890:	3b01      	subs	r3, #1
 8003892:	b29a      	uxth	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	695b      	ldr	r3, [r3, #20]
 800389e:	f003 0304 	and.w	r3, r3, #4
 80038a2:	2b04      	cmp	r3, #4
 80038a4:	d118      	bne.n	80038d8 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	691a      	ldr	r2, [r3, #16]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b0:	b2d2      	uxtb	r2, r2
 80038b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b8:	1c5a      	adds	r2, r3, #1
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038c2:	3b01      	subs	r3, #1
 80038c4:	b29a      	uxth	r2, r3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	3b01      	subs	r3, #1
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038dc:	2b00      	cmp	r3, #0
 80038de:	f47f ae94 	bne.w	800360a <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2220      	movs	r2, #32
 80038e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80038fa:	2300      	movs	r3, #0
 80038fc:	e000      	b.n	8003900 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 80038fe:	2302      	movs	r3, #2
  }
}
 8003900:	4618      	mov	r0, r3
 8003902:	3728      	adds	r7, #40	; 0x28
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	00010004 	.word	0x00010004
 800390c:	20000004 	.word	0x20000004
 8003910:	14f8b589 	.word	0x14f8b589

08003914 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b088      	sub	sp, #32
 8003918:	af02      	add	r7, sp, #8
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	607a      	str	r2, [r7, #4]
 800391e:	603b      	str	r3, [r7, #0]
 8003920:	460b      	mov	r3, r1
 8003922:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003928:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	2b08      	cmp	r3, #8
 800392e:	d006      	beq.n	800393e <I2C_MasterRequestWrite+0x2a>
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d003      	beq.n	800393e <I2C_MasterRequestWrite+0x2a>
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800393c:	d108      	bne.n	8003950 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800394c:	601a      	str	r2, [r3, #0]
 800394e:	e00b      	b.n	8003968 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003954:	2b12      	cmp	r3, #18
 8003956:	d107      	bne.n	8003968 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003966:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	9300      	str	r3, [sp, #0]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003974:	68f8      	ldr	r0, [r7, #12]
 8003976:	f000 f91d 	bl	8003bb4 <I2C_WaitOnFlagUntilTimeout>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d00d      	beq.n	800399c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800398a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800398e:	d103      	bne.n	8003998 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003996:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e035      	b.n	8003a08 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039a4:	d108      	bne.n	80039b8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80039a6:	897b      	ldrh	r3, [r7, #10]
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	461a      	mov	r2, r3
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80039b4:	611a      	str	r2, [r3, #16]
 80039b6:	e01b      	b.n	80039f0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80039b8:	897b      	ldrh	r3, [r7, #10]
 80039ba:	11db      	asrs	r3, r3, #7
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	f003 0306 	and.w	r3, r3, #6
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	f063 030f 	orn	r3, r3, #15
 80039c8:	b2da      	uxtb	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	490e      	ldr	r1, [pc, #56]	; (8003a10 <I2C_MasterRequestWrite+0xfc>)
 80039d6:	68f8      	ldr	r0, [r7, #12]
 80039d8:	f000 f943 	bl	8003c62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e010      	b.n	8003a08 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80039e6:	897b      	ldrh	r3, [r7, #10]
 80039e8:	b2da      	uxtb	r2, r3
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	4907      	ldr	r1, [pc, #28]	; (8003a14 <I2C_MasterRequestWrite+0x100>)
 80039f6:	68f8      	ldr	r0, [r7, #12]
 80039f8:	f000 f933 	bl	8003c62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d001      	beq.n	8003a06 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e000      	b.n	8003a08 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003a06:	2300      	movs	r3, #0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3718      	adds	r7, #24
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	00010008 	.word	0x00010008
 8003a14:	00010002 	.word	0x00010002

08003a18 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b088      	sub	sp, #32
 8003a1c:	af02      	add	r7, sp, #8
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	607a      	str	r2, [r7, #4]
 8003a22:	603b      	str	r3, [r7, #0]
 8003a24:	460b      	mov	r3, r1
 8003a26:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a3c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	2b08      	cmp	r3, #8
 8003a42:	d006      	beq.n	8003a52 <I2C_MasterRequestRead+0x3a>
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d003      	beq.n	8003a52 <I2C_MasterRequestRead+0x3a>
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a50:	d108      	bne.n	8003a64 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a60:	601a      	str	r2, [r3, #0]
 8003a62:	e00b      	b.n	8003a7c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a68:	2b11      	cmp	r3, #17
 8003a6a:	d107      	bne.n	8003a7c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a7a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	9300      	str	r3, [sp, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a88:	68f8      	ldr	r0, [r7, #12]
 8003a8a:	f000 f893 	bl	8003bb4 <I2C_WaitOnFlagUntilTimeout>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d00d      	beq.n	8003ab0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003aa2:	d103      	bne.n	8003aac <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003aaa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e079      	b.n	8003ba4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	691b      	ldr	r3, [r3, #16]
 8003ab4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ab8:	d108      	bne.n	8003acc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003aba:	897b      	ldrh	r3, [r7, #10]
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	f043 0301 	orr.w	r3, r3, #1
 8003ac2:	b2da      	uxtb	r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	611a      	str	r2, [r3, #16]
 8003aca:	e05f      	b.n	8003b8c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003acc:	897b      	ldrh	r3, [r7, #10]
 8003ace:	11db      	asrs	r3, r3, #7
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	f003 0306 	and.w	r3, r3, #6
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	f063 030f 	orn	r3, r3, #15
 8003adc:	b2da      	uxtb	r2, r3
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	4930      	ldr	r1, [pc, #192]	; (8003bac <I2C_MasterRequestRead+0x194>)
 8003aea:	68f8      	ldr	r0, [r7, #12]
 8003aec:	f000 f8b9 	bl	8003c62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d001      	beq.n	8003afa <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e054      	b.n	8003ba4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003afa:	897b      	ldrh	r3, [r7, #10]
 8003afc:	b2da      	uxtb	r2, r3
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	4929      	ldr	r1, [pc, #164]	; (8003bb0 <I2C_MasterRequestRead+0x198>)
 8003b0a:	68f8      	ldr	r0, [r7, #12]
 8003b0c:	f000 f8a9 	bl	8003c62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d001      	beq.n	8003b1a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e044      	b.n	8003ba4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	613b      	str	r3, [r7, #16]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	695b      	ldr	r3, [r3, #20]
 8003b24:	613b      	str	r3, [r7, #16]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	613b      	str	r3, [r7, #16]
 8003b2e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b3e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	9300      	str	r3, [sp, #0]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b4c:	68f8      	ldr	r0, [r7, #12]
 8003b4e:	f000 f831 	bl	8003bb4 <I2C_WaitOnFlagUntilTimeout>
 8003b52:	4603      	mov	r3, r0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d00d      	beq.n	8003b74 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b66:	d103      	bne.n	8003b70 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b6e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e017      	b.n	8003ba4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003b74:	897b      	ldrh	r3, [r7, #10]
 8003b76:	11db      	asrs	r3, r3, #7
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	f003 0306 	and.w	r3, r3, #6
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	f063 030e 	orn	r3, r3, #14
 8003b84:	b2da      	uxtb	r2, r3
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	4907      	ldr	r1, [pc, #28]	; (8003bb0 <I2C_MasterRequestRead+0x198>)
 8003b92:	68f8      	ldr	r0, [r7, #12]
 8003b94:	f000 f865 	bl	8003c62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d001      	beq.n	8003ba2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e000      	b.n	8003ba4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3718      	adds	r7, #24
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	00010008 	.word	0x00010008
 8003bb0:	00010002 	.word	0x00010002

08003bb4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	603b      	str	r3, [r7, #0]
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bc4:	e025      	b.n	8003c12 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bcc:	d021      	beq.n	8003c12 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bce:	f7fe ff3b 	bl	8002a48 <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	683a      	ldr	r2, [r7, #0]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d302      	bcc.n	8003be4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d116      	bne.n	8003c12 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2200      	movs	r2, #0
 8003be8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2220      	movs	r2, #32
 8003bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfe:	f043 0220 	orr.w	r2, r3, #32
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e023      	b.n	8003c5a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	0c1b      	lsrs	r3, r3, #16
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d10d      	bne.n	8003c38 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	43da      	mvns	r2, r3
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	4013      	ands	r3, r2
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	bf0c      	ite	eq
 8003c2e:	2301      	moveq	r3, #1
 8003c30:	2300      	movne	r3, #0
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	461a      	mov	r2, r3
 8003c36:	e00c      	b.n	8003c52 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	699b      	ldr	r3, [r3, #24]
 8003c3e:	43da      	mvns	r2, r3
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	4013      	ands	r3, r2
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	bf0c      	ite	eq
 8003c4a:	2301      	moveq	r3, #1
 8003c4c:	2300      	movne	r3, #0
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	461a      	mov	r2, r3
 8003c52:	79fb      	ldrb	r3, [r7, #7]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d0b6      	beq.n	8003bc6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3710      	adds	r7, #16
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}

08003c62 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003c62:	b580      	push	{r7, lr}
 8003c64:	b084      	sub	sp, #16
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	60f8      	str	r0, [r7, #12]
 8003c6a:	60b9      	str	r1, [r7, #8]
 8003c6c:	607a      	str	r2, [r7, #4]
 8003c6e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c70:	e051      	b.n	8003d16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	695b      	ldr	r3, [r3, #20]
 8003c78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c80:	d123      	bne.n	8003cca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c90:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c9a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2220      	movs	r2, #32
 8003ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb6:	f043 0204 	orr.w	r2, r3, #4
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e046      	b.n	8003d58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cd0:	d021      	beq.n	8003d16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cd2:	f7fe feb9 	bl	8002a48 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d302      	bcc.n	8003ce8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d116      	bne.n	8003d16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2200      	movs	r2, #0
 8003cec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2220      	movs	r2, #32
 8003cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d02:	f043 0220 	orr.w	r2, r3, #32
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e020      	b.n	8003d58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	0c1b      	lsrs	r3, r3, #16
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d10c      	bne.n	8003d3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	43da      	mvns	r2, r3
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	bf14      	ite	ne
 8003d32:	2301      	movne	r3, #1
 8003d34:	2300      	moveq	r3, #0
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	e00b      	b.n	8003d52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	43da      	mvns	r2, r3
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	4013      	ands	r3, r2
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	bf14      	ite	ne
 8003d4c:	2301      	movne	r3, #1
 8003d4e:	2300      	moveq	r3, #0
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d18d      	bne.n	8003c72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3710      	adds	r7, #16
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d6c:	e02d      	b.n	8003dca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d6e:	68f8      	ldr	r0, [r7, #12]
 8003d70:	f000 f8ce 	bl	8003f10 <I2C_IsAcknowledgeFailed>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d001      	beq.n	8003d7e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e02d      	b.n	8003dda <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d84:	d021      	beq.n	8003dca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d86:	f7fe fe5f 	bl	8002a48 <HAL_GetTick>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	68ba      	ldr	r2, [r7, #8]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d302      	bcc.n	8003d9c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d116      	bne.n	8003dca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2220      	movs	r2, #32
 8003da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db6:	f043 0220 	orr.w	r2, r3, #32
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e007      	b.n	8003dda <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	695b      	ldr	r3, [r3, #20]
 8003dd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dd4:	2b80      	cmp	r3, #128	; 0x80
 8003dd6:	d1ca      	bne.n	8003d6e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}

08003de2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b084      	sub	sp, #16
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	60f8      	str	r0, [r7, #12]
 8003dea:	60b9      	str	r1, [r7, #8]
 8003dec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003dee:	e02d      	b.n	8003e4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003df0:	68f8      	ldr	r0, [r7, #12]
 8003df2:	f000 f88d 	bl	8003f10 <I2C_IsAcknowledgeFailed>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d001      	beq.n	8003e00 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e02d      	b.n	8003e5c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e06:	d021      	beq.n	8003e4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e08:	f7fe fe1e 	bl	8002a48 <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	68ba      	ldr	r2, [r7, #8]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d302      	bcc.n	8003e1e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d116      	bne.n	8003e4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2220      	movs	r2, #32
 8003e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e38:	f043 0220 	orr.w	r2, r3, #32
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e007      	b.n	8003e5c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	695b      	ldr	r3, [r3, #20]
 8003e52:	f003 0304 	and.w	r3, r3, #4
 8003e56:	2b04      	cmp	r3, #4
 8003e58:	d1ca      	bne.n	8003df0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e5a:	2300      	movs	r3, #0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3710      	adds	r7, #16
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e70:	e042      	b.n	8003ef8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	695b      	ldr	r3, [r3, #20]
 8003e78:	f003 0310 	and.w	r3, r3, #16
 8003e7c:	2b10      	cmp	r3, #16
 8003e7e:	d119      	bne.n	8003eb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f06f 0210 	mvn.w	r2, #16
 8003e88:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2220      	movs	r2, #32
 8003e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e029      	b.n	8003f08 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eb4:	f7fe fdc8 	bl	8002a48 <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	68ba      	ldr	r2, [r7, #8]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d302      	bcc.n	8003eca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d116      	bne.n	8003ef8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2220      	movs	r2, #32
 8003ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee4:	f043 0220 	orr.w	r2, r3, #32
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e007      	b.n	8003f08 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f02:	2b40      	cmp	r3, #64	; 0x40
 8003f04:	d1b5      	bne.n	8003e72 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3710      	adds	r7, #16
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	695b      	ldr	r3, [r3, #20]
 8003f1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f26:	d11b      	bne.n	8003f60 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f30:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2220      	movs	r2, #32
 8003f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4c:	f043 0204 	orr.w	r2, r3, #4
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e000      	b.n	8003f62 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	370c      	adds	r7, #12
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bc80      	pop	{r7}
 8003f6a:	4770      	bx	lr

08003f6c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f6e:	b08b      	sub	sp, #44	; 0x2c
 8003f70:	af06      	add	r7, sp, #24
 8003f72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d101      	bne.n	8003f7e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e0fd      	b.n	800417a <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d106      	bne.n	8003f98 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f009 fc16 	bl	800d7c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2203      	movs	r2, #3
 8003f9c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f002 fc85 	bl	80068b4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	603b      	str	r3, [r7, #0]
 8003fb0:	687e      	ldr	r6, [r7, #4]
 8003fb2:	466d      	mov	r5, sp
 8003fb4:	f106 0410 	add.w	r4, r6, #16
 8003fb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003fbc:	6823      	ldr	r3, [r4, #0]
 8003fbe:	602b      	str	r3, [r5, #0]
 8003fc0:	1d33      	adds	r3, r6, #4
 8003fc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003fc4:	6838      	ldr	r0, [r7, #0]
 8003fc6:	f002 fc4f 	bl	8006868 <USB_CoreInit>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d005      	beq.n	8003fdc <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2202      	movs	r2, #2
 8003fd4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e0ce      	b.n	800417a <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2100      	movs	r1, #0
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f002 fc80 	bl	80068e8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fe8:	2300      	movs	r3, #0
 8003fea:	73fb      	strb	r3, [r7, #15]
 8003fec:	e04c      	b.n	8004088 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003fee:	7bfb      	ldrb	r3, [r7, #15]
 8003ff0:	6879      	ldr	r1, [r7, #4]
 8003ff2:	1c5a      	adds	r2, r3, #1
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	4413      	add	r3, r2
 8003ffa:	00db      	lsls	r3, r3, #3
 8003ffc:	440b      	add	r3, r1
 8003ffe:	3301      	adds	r3, #1
 8004000:	2201      	movs	r2, #1
 8004002:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004004:	7bfb      	ldrb	r3, [r7, #15]
 8004006:	6879      	ldr	r1, [r7, #4]
 8004008:	1c5a      	adds	r2, r3, #1
 800400a:	4613      	mov	r3, r2
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	4413      	add	r3, r2
 8004010:	00db      	lsls	r3, r3, #3
 8004012:	440b      	add	r3, r1
 8004014:	7bfa      	ldrb	r2, [r7, #15]
 8004016:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004018:	7bfa      	ldrb	r2, [r7, #15]
 800401a:	7bfb      	ldrb	r3, [r7, #15]
 800401c:	b298      	uxth	r0, r3
 800401e:	6879      	ldr	r1, [r7, #4]
 8004020:	4613      	mov	r3, r2
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	4413      	add	r3, r2
 8004026:	00db      	lsls	r3, r3, #3
 8004028:	440b      	add	r3, r1
 800402a:	3336      	adds	r3, #54	; 0x36
 800402c:	4602      	mov	r2, r0
 800402e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004030:	7bfb      	ldrb	r3, [r7, #15]
 8004032:	6879      	ldr	r1, [r7, #4]
 8004034:	1c5a      	adds	r2, r3, #1
 8004036:	4613      	mov	r3, r2
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	4413      	add	r3, r2
 800403c:	00db      	lsls	r3, r3, #3
 800403e:	440b      	add	r3, r1
 8004040:	3303      	adds	r3, #3
 8004042:	2200      	movs	r2, #0
 8004044:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004046:	7bfa      	ldrb	r2, [r7, #15]
 8004048:	6879      	ldr	r1, [r7, #4]
 800404a:	4613      	mov	r3, r2
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	4413      	add	r3, r2
 8004050:	00db      	lsls	r3, r3, #3
 8004052:	440b      	add	r3, r1
 8004054:	3338      	adds	r3, #56	; 0x38
 8004056:	2200      	movs	r2, #0
 8004058:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800405a:	7bfa      	ldrb	r2, [r7, #15]
 800405c:	6879      	ldr	r1, [r7, #4]
 800405e:	4613      	mov	r3, r2
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	4413      	add	r3, r2
 8004064:	00db      	lsls	r3, r3, #3
 8004066:	440b      	add	r3, r1
 8004068:	333c      	adds	r3, #60	; 0x3c
 800406a:	2200      	movs	r2, #0
 800406c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800406e:	7bfa      	ldrb	r2, [r7, #15]
 8004070:	6879      	ldr	r1, [r7, #4]
 8004072:	4613      	mov	r3, r2
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	4413      	add	r3, r2
 8004078:	00db      	lsls	r3, r3, #3
 800407a:	440b      	add	r3, r1
 800407c:	3340      	adds	r3, #64	; 0x40
 800407e:	2200      	movs	r2, #0
 8004080:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004082:	7bfb      	ldrb	r3, [r7, #15]
 8004084:	3301      	adds	r3, #1
 8004086:	73fb      	strb	r3, [r7, #15]
 8004088:	7bfa      	ldrb	r2, [r7, #15]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	429a      	cmp	r2, r3
 8004090:	d3ad      	bcc.n	8003fee <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004092:	2300      	movs	r3, #0
 8004094:	73fb      	strb	r3, [r7, #15]
 8004096:	e044      	b.n	8004122 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004098:	7bfa      	ldrb	r2, [r7, #15]
 800409a:	6879      	ldr	r1, [r7, #4]
 800409c:	4613      	mov	r3, r2
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	4413      	add	r3, r2
 80040a2:	00db      	lsls	r3, r3, #3
 80040a4:	440b      	add	r3, r1
 80040a6:	f203 1369 	addw	r3, r3, #361	; 0x169
 80040aa:	2200      	movs	r2, #0
 80040ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80040ae:	7bfa      	ldrb	r2, [r7, #15]
 80040b0:	6879      	ldr	r1, [r7, #4]
 80040b2:	4613      	mov	r3, r2
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	4413      	add	r3, r2
 80040b8:	00db      	lsls	r3, r3, #3
 80040ba:	440b      	add	r3, r1
 80040bc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80040c0:	7bfa      	ldrb	r2, [r7, #15]
 80040c2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80040c4:	7bfa      	ldrb	r2, [r7, #15]
 80040c6:	6879      	ldr	r1, [r7, #4]
 80040c8:	4613      	mov	r3, r2
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	4413      	add	r3, r2
 80040ce:	00db      	lsls	r3, r3, #3
 80040d0:	440b      	add	r3, r1
 80040d2:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80040d6:	2200      	movs	r2, #0
 80040d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80040da:	7bfa      	ldrb	r2, [r7, #15]
 80040dc:	6879      	ldr	r1, [r7, #4]
 80040de:	4613      	mov	r3, r2
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	4413      	add	r3, r2
 80040e4:	00db      	lsls	r3, r3, #3
 80040e6:	440b      	add	r3, r1
 80040e8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80040ec:	2200      	movs	r2, #0
 80040ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80040f0:	7bfa      	ldrb	r2, [r7, #15]
 80040f2:	6879      	ldr	r1, [r7, #4]
 80040f4:	4613      	mov	r3, r2
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	4413      	add	r3, r2
 80040fa:	00db      	lsls	r3, r3, #3
 80040fc:	440b      	add	r3, r1
 80040fe:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004102:	2200      	movs	r2, #0
 8004104:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004106:	7bfa      	ldrb	r2, [r7, #15]
 8004108:	6879      	ldr	r1, [r7, #4]
 800410a:	4613      	mov	r3, r2
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	4413      	add	r3, r2
 8004110:	00db      	lsls	r3, r3, #3
 8004112:	440b      	add	r3, r1
 8004114:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004118:	2200      	movs	r2, #0
 800411a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800411c:	7bfb      	ldrb	r3, [r7, #15]
 800411e:	3301      	adds	r3, #1
 8004120:	73fb      	strb	r3, [r7, #15]
 8004122:	7bfa      	ldrb	r2, [r7, #15]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	429a      	cmp	r2, r3
 800412a:	d3b5      	bcc.n	8004098 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	603b      	str	r3, [r7, #0]
 8004132:	687e      	ldr	r6, [r7, #4]
 8004134:	466d      	mov	r5, sp
 8004136:	f106 0410 	add.w	r4, r6, #16
 800413a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800413c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800413e:	6823      	ldr	r3, [r4, #0]
 8004140:	602b      	str	r3, [r5, #0]
 8004142:	1d33      	adds	r3, r6, #4
 8004144:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004146:	6838      	ldr	r0, [r7, #0]
 8004148:	f002 fbda 	bl	8006900 <USB_DevInit>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d005      	beq.n	800415e <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2202      	movs	r2, #2
 8004156:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e00d      	b.n	800417a <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2201      	movs	r2, #1
 800416a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4618      	mov	r0, r3
 8004174:	f005 f88c 	bl	8009290 <USB_DevDisconnect>

  return HAL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3714      	adds	r7, #20
 800417e:	46bd      	mov	sp, r7
 8004180:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004182 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004182:	b580      	push	{r7, lr}
 8004184:	b082      	sub	sp, #8
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004190:	2b01      	cmp	r3, #1
 8004192:	d101      	bne.n	8004198 <HAL_PCD_Start+0x16>
 8004194:	2302      	movs	r3, #2
 8004196:	e016      	b.n	80041c6 <HAL_PCD_Start+0x44>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4618      	mov	r0, r3
 80041a6:	f002 fb6f 	bl	8006888 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80041aa:	2101      	movs	r1, #1
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f009 fd7c 	bl	800dcaa <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4618      	mov	r0, r3
 80041b8:	f005 f860 	bl	800927c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3708      	adds	r7, #8
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}

080041ce <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80041ce:	b580      	push	{r7, lr}
 80041d0:	b088      	sub	sp, #32
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4618      	mov	r0, r3
 80041dc:	f005 f862 	bl	80092a4 <USB_ReadInterrupts>
 80041e0:	4603      	mov	r3, r0
 80041e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041ea:	d102      	bne.n	80041f2 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f000 fb5f 	bl	80048b0 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4618      	mov	r0, r3
 80041f8:	f005 f854 	bl	80092a4 <USB_ReadInterrupts>
 80041fc:	4603      	mov	r3, r0
 80041fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004202:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004206:	d112      	bne.n	800422e <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004210:	b29a      	uxth	r2, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800421a:	b292      	uxth	r2, r2
 800421c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f009 fb4a 	bl	800d8ba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004226:	2100      	movs	r1, #0
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f000 f923 	bl	8004474 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4618      	mov	r0, r3
 8004234:	f005 f836 	bl	80092a4 <USB_ReadInterrupts>
 8004238:	4603      	mov	r3, r0
 800423a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800423e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004242:	d10b      	bne.n	800425c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800424c:	b29a      	uxth	r2, r3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004256:	b292      	uxth	r2, r2
 8004258:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4618      	mov	r0, r3
 8004262:	f005 f81f 	bl	80092a4 <USB_ReadInterrupts>
 8004266:	4603      	mov	r3, r0
 8004268:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800426c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004270:	d10b      	bne.n	800428a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800427a:	b29a      	uxth	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004284:	b292      	uxth	r2, r2
 8004286:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4618      	mov	r0, r3
 8004290:	f005 f808 	bl	80092a4 <USB_ReadInterrupts>
 8004294:	4603      	mov	r3, r0
 8004296:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800429a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800429e:	d126      	bne.n	80042ee <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80042a8:	b29a      	uxth	r2, r3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f022 0204 	bic.w	r2, r2, #4
 80042b2:	b292      	uxth	r2, r2
 80042b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80042c0:	b29a      	uxth	r2, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f022 0208 	bic.w	r2, r2, #8
 80042ca:	b292      	uxth	r2, r2
 80042cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f009 fb2b 	bl	800d92c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80042de:	b29a      	uxth	r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80042e8:	b292      	uxth	r2, r2
 80042ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4618      	mov	r0, r3
 80042f4:	f004 ffd6 	bl	80092a4 <USB_ReadInterrupts>
 80042f8:	4603      	mov	r3, r0
 80042fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004302:	f040 8082 	bne.w	800440a <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8004306:	2300      	movs	r3, #0
 8004308:	77fb      	strb	r3, [r7, #31]
 800430a:	e010      	b.n	800432e <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	461a      	mov	r2, r3
 8004312:	7ffb      	ldrb	r3, [r7, #31]
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	441a      	add	r2, r3
 8004318:	7ffb      	ldrb	r3, [r7, #31]
 800431a:	8812      	ldrh	r2, [r2, #0]
 800431c:	b292      	uxth	r2, r2
 800431e:	005b      	lsls	r3, r3, #1
 8004320:	3320      	adds	r3, #32
 8004322:	443b      	add	r3, r7
 8004324:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8004328:	7ffb      	ldrb	r3, [r7, #31]
 800432a:	3301      	adds	r3, #1
 800432c:	77fb      	strb	r3, [r7, #31]
 800432e:	7ffb      	ldrb	r3, [r7, #31]
 8004330:	2b07      	cmp	r3, #7
 8004332:	d9eb      	bls.n	800430c <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800433c:	b29a      	uxth	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f042 0201 	orr.w	r2, r2, #1
 8004346:	b292      	uxth	r2, r2
 8004348:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004354:	b29a      	uxth	r2, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f022 0201 	bic.w	r2, r2, #1
 800435e:	b292      	uxth	r2, r2
 8004360:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8004364:	bf00      	nop
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800436e:	b29b      	uxth	r3, r3
 8004370:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004374:	2b00      	cmp	r3, #0
 8004376:	d0f6      	beq.n	8004366 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004380:	b29a      	uxth	r2, r3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800438a:	b292      	uxth	r2, r2
 800438c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8004390:	2300      	movs	r3, #0
 8004392:	77fb      	strb	r3, [r7, #31]
 8004394:	e00f      	b.n	80043b6 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8004396:	7ffb      	ldrb	r3, [r7, #31]
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	6812      	ldr	r2, [r2, #0]
 800439c:	4611      	mov	r1, r2
 800439e:	7ffa      	ldrb	r2, [r7, #31]
 80043a0:	0092      	lsls	r2, r2, #2
 80043a2:	440a      	add	r2, r1
 80043a4:	005b      	lsls	r3, r3, #1
 80043a6:	3320      	adds	r3, #32
 80043a8:	443b      	add	r3, r7
 80043aa:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80043ae:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80043b0:	7ffb      	ldrb	r3, [r7, #31]
 80043b2:	3301      	adds	r3, #1
 80043b4:	77fb      	strb	r3, [r7, #31]
 80043b6:	7ffb      	ldrb	r3, [r7, #31]
 80043b8:	2b07      	cmp	r3, #7
 80043ba:	d9ec      	bls.n	8004396 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80043c4:	b29a      	uxth	r2, r3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f042 0208 	orr.w	r2, r2, #8
 80043ce:	b292      	uxth	r2, r2
 80043d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80043dc:	b29a      	uxth	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043e6:	b292      	uxth	r2, r2
 80043e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80043f4:	b29a      	uxth	r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f042 0204 	orr.w	r2, r2, #4
 80043fe:	b292      	uxth	r2, r2
 8004400:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f009 fa77 	bl	800d8f8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4618      	mov	r0, r3
 8004410:	f004 ff48 	bl	80092a4 <USB_ReadInterrupts>
 8004414:	4603      	mov	r3, r0
 8004416:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800441a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800441e:	d10e      	bne.n	800443e <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004428:	b29a      	uxth	r2, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004432:	b292      	uxth	r2, r2
 8004434:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f009 fa30 	bl	800d89e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4618      	mov	r0, r3
 8004444:	f004 ff2e 	bl	80092a4 <USB_ReadInterrupts>
 8004448:	4603      	mov	r3, r0
 800444a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800444e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004452:	d10b      	bne.n	800446c <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800445c:	b29a      	uxth	r2, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004466:	b292      	uxth	r2, r2
 8004468:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800446c:	bf00      	nop
 800446e:	3720      	adds	r7, #32
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b082      	sub	sp, #8
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	460b      	mov	r3, r1
 800447e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004486:	2b01      	cmp	r3, #1
 8004488:	d101      	bne.n	800448e <HAL_PCD_SetAddress+0x1a>
 800448a:	2302      	movs	r3, #2
 800448c:	e013      	b.n	80044b6 <HAL_PCD_SetAddress+0x42>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2201      	movs	r2, #1
 8004492:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	78fa      	ldrb	r2, [r7, #3]
 800449a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	78fa      	ldrb	r2, [r7, #3]
 80044a4:	4611      	mov	r1, r2
 80044a6:	4618      	mov	r0, r3
 80044a8:	f004 fed5 	bl	8009256 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3708      	adds	r7, #8
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}

080044be <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80044be:	b580      	push	{r7, lr}
 80044c0:	b084      	sub	sp, #16
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	6078      	str	r0, [r7, #4]
 80044c6:	4608      	mov	r0, r1
 80044c8:	4611      	mov	r1, r2
 80044ca:	461a      	mov	r2, r3
 80044cc:	4603      	mov	r3, r0
 80044ce:	70fb      	strb	r3, [r7, #3]
 80044d0:	460b      	mov	r3, r1
 80044d2:	803b      	strh	r3, [r7, #0]
 80044d4:	4613      	mov	r3, r2
 80044d6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80044d8:	2300      	movs	r3, #0
 80044da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80044dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	da0e      	bge.n	8004502 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044e4:	78fb      	ldrb	r3, [r7, #3]
 80044e6:	f003 0307 	and.w	r3, r3, #7
 80044ea:	1c5a      	adds	r2, r3, #1
 80044ec:	4613      	mov	r3, r2
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	4413      	add	r3, r2
 80044f2:	00db      	lsls	r3, r3, #3
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	4413      	add	r3, r2
 80044f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2201      	movs	r2, #1
 80044fe:	705a      	strb	r2, [r3, #1]
 8004500:	e00e      	b.n	8004520 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004502:	78fb      	ldrb	r3, [r7, #3]
 8004504:	f003 0207 	and.w	r2, r3, #7
 8004508:	4613      	mov	r3, r2
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	4413      	add	r3, r2
 800450e:	00db      	lsls	r3, r3, #3
 8004510:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	4413      	add	r3, r2
 8004518:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2200      	movs	r2, #0
 800451e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004520:	78fb      	ldrb	r3, [r7, #3]
 8004522:	f003 0307 	and.w	r3, r3, #7
 8004526:	b2da      	uxtb	r2, r3
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800452c:	883a      	ldrh	r2, [r7, #0]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	78ba      	ldrb	r2, [r7, #2]
 8004536:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	785b      	ldrb	r3, [r3, #1]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d004      	beq.n	800454a <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	b29a      	uxth	r2, r3
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800454a:	78bb      	ldrb	r3, [r7, #2]
 800454c:	2b02      	cmp	r3, #2
 800454e:	d102      	bne.n	8004556 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2200      	movs	r2, #0
 8004554:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800455c:	2b01      	cmp	r3, #1
 800455e:	d101      	bne.n	8004564 <HAL_PCD_EP_Open+0xa6>
 8004560:	2302      	movs	r3, #2
 8004562:	e00e      	b.n	8004582 <HAL_PCD_EP_Open+0xc4>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	68f9      	ldr	r1, [r7, #12]
 8004572:	4618      	mov	r0, r3
 8004574:	f002 f9e4 	bl	8006940 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8004580:	7afb      	ldrb	r3, [r7, #11]
}
 8004582:	4618      	mov	r0, r3
 8004584:	3710      	adds	r7, #16
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}

0800458a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800458a:	b580      	push	{r7, lr}
 800458c:	b084      	sub	sp, #16
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
 8004592:	460b      	mov	r3, r1
 8004594:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004596:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800459a:	2b00      	cmp	r3, #0
 800459c:	da0e      	bge.n	80045bc <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800459e:	78fb      	ldrb	r3, [r7, #3]
 80045a0:	f003 0307 	and.w	r3, r3, #7
 80045a4:	1c5a      	adds	r2, r3, #1
 80045a6:	4613      	mov	r3, r2
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	4413      	add	r3, r2
 80045ac:	00db      	lsls	r3, r3, #3
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	4413      	add	r3, r2
 80045b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2201      	movs	r2, #1
 80045b8:	705a      	strb	r2, [r3, #1]
 80045ba:	e00e      	b.n	80045da <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80045bc:	78fb      	ldrb	r3, [r7, #3]
 80045be:	f003 0207 	and.w	r2, r3, #7
 80045c2:	4613      	mov	r3, r2
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	4413      	add	r3, r2
 80045c8:	00db      	lsls	r3, r3, #3
 80045ca:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	4413      	add	r3, r2
 80045d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2200      	movs	r2, #0
 80045d8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80045da:	78fb      	ldrb	r3, [r7, #3]
 80045dc:	f003 0307 	and.w	r3, r3, #7
 80045e0:	b2da      	uxtb	r2, r3
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d101      	bne.n	80045f4 <HAL_PCD_EP_Close+0x6a>
 80045f0:	2302      	movs	r3, #2
 80045f2:	e00e      	b.n	8004612 <HAL_PCD_EP_Close+0x88>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	68f9      	ldr	r1, [r7, #12]
 8004602:	4618      	mov	r0, r3
 8004604:	f002 fd06 	bl	8007014 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3710      	adds	r7, #16
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}

0800461a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800461a:	b580      	push	{r7, lr}
 800461c:	b086      	sub	sp, #24
 800461e:	af00      	add	r7, sp, #0
 8004620:	60f8      	str	r0, [r7, #12]
 8004622:	607a      	str	r2, [r7, #4]
 8004624:	603b      	str	r3, [r7, #0]
 8004626:	460b      	mov	r3, r1
 8004628:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800462a:	7afb      	ldrb	r3, [r7, #11]
 800462c:	f003 0207 	and.w	r2, r3, #7
 8004630:	4613      	mov	r3, r2
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	4413      	add	r3, r2
 8004636:	00db      	lsls	r3, r3, #3
 8004638:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800463c:	68fa      	ldr	r2, [r7, #12]
 800463e:	4413      	add	r3, r2
 8004640:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	683a      	ldr	r2, [r7, #0]
 800464c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	2200      	movs	r2, #0
 8004652:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	2200      	movs	r2, #0
 8004658:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800465a:	7afb      	ldrb	r3, [r7, #11]
 800465c:	f003 0307 	and.w	r3, r3, #7
 8004660:	b2da      	uxtb	r2, r3
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004666:	7afb      	ldrb	r3, [r7, #11]
 8004668:	f003 0307 	and.w	r3, r3, #7
 800466c:	2b00      	cmp	r3, #0
 800466e:	d106      	bne.n	800467e <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	6979      	ldr	r1, [r7, #20]
 8004676:	4618      	mov	r0, r3
 8004678:	f002 feb8 	bl	80073ec <USB_EPStartXfer>
 800467c:	e005      	b.n	800468a <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	6979      	ldr	r1, [r7, #20]
 8004684:	4618      	mov	r0, r3
 8004686:	f002 feb1 	bl	80073ec <USB_EPStartXfer>
  }

  return HAL_OK;
 800468a:	2300      	movs	r3, #0
}
 800468c:	4618      	mov	r0, r3
 800468e:	3718      	adds	r7, #24
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}

08004694 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	460b      	mov	r3, r1
 800469e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80046a0:	78fb      	ldrb	r3, [r7, #3]
 80046a2:	f003 0207 	and.w	r2, r3, #7
 80046a6:	6879      	ldr	r1, [r7, #4]
 80046a8:	4613      	mov	r3, r2
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	4413      	add	r3, r2
 80046ae:	00db      	lsls	r3, r3, #3
 80046b0:	440b      	add	r3, r1
 80046b2:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80046b6:	681b      	ldr	r3, [r3, #0]
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	370c      	adds	r7, #12
 80046bc:	46bd      	mov	sp, r7
 80046be:	bc80      	pop	{r7}
 80046c0:	4770      	bx	lr

080046c2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80046c2:	b580      	push	{r7, lr}
 80046c4:	b086      	sub	sp, #24
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	60f8      	str	r0, [r7, #12]
 80046ca:	607a      	str	r2, [r7, #4]
 80046cc:	603b      	str	r3, [r7, #0]
 80046ce:	460b      	mov	r3, r1
 80046d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046d2:	7afb      	ldrb	r3, [r7, #11]
 80046d4:	f003 0307 	and.w	r3, r3, #7
 80046d8:	1c5a      	adds	r2, r3, #1
 80046da:	4613      	mov	r3, r2
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	4413      	add	r3, r2
 80046e0:	00db      	lsls	r3, r3, #3
 80046e2:	68fa      	ldr	r2, [r7, #12]
 80046e4:	4413      	add	r3, r2
 80046e6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	683a      	ldr	r2, [r7, #0]
 80046f2:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	683a      	ldr	r2, [r7, #0]
 8004700:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	2200      	movs	r2, #0
 8004706:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	2201      	movs	r2, #1
 800470c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800470e:	7afb      	ldrb	r3, [r7, #11]
 8004710:	f003 0307 	and.w	r3, r3, #7
 8004714:	b2da      	uxtb	r2, r3
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800471a:	7afb      	ldrb	r3, [r7, #11]
 800471c:	f003 0307 	and.w	r3, r3, #7
 8004720:	2b00      	cmp	r3, #0
 8004722:	d106      	bne.n	8004732 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	6979      	ldr	r1, [r7, #20]
 800472a:	4618      	mov	r0, r3
 800472c:	f002 fe5e 	bl	80073ec <USB_EPStartXfer>
 8004730:	e005      	b.n	800473e <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	6979      	ldr	r1, [r7, #20]
 8004738:	4618      	mov	r0, r3
 800473a:	f002 fe57 	bl	80073ec <USB_EPStartXfer>
  }

  return HAL_OK;
 800473e:	2300      	movs	r3, #0
}
 8004740:	4618      	mov	r0, r3
 8004742:	3718      	adds	r7, #24
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}

08004748 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	460b      	mov	r3, r1
 8004752:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004754:	78fb      	ldrb	r3, [r7, #3]
 8004756:	f003 0207 	and.w	r2, r3, #7
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	429a      	cmp	r2, r3
 8004760:	d901      	bls.n	8004766 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e04c      	b.n	8004800 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004766:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800476a:	2b00      	cmp	r3, #0
 800476c:	da0e      	bge.n	800478c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800476e:	78fb      	ldrb	r3, [r7, #3]
 8004770:	f003 0307 	and.w	r3, r3, #7
 8004774:	1c5a      	adds	r2, r3, #1
 8004776:	4613      	mov	r3, r2
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	4413      	add	r3, r2
 800477c:	00db      	lsls	r3, r3, #3
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	4413      	add	r3, r2
 8004782:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2201      	movs	r2, #1
 8004788:	705a      	strb	r2, [r3, #1]
 800478a:	e00c      	b.n	80047a6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800478c:	78fa      	ldrb	r2, [r7, #3]
 800478e:	4613      	mov	r3, r2
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	4413      	add	r3, r2
 8004794:	00db      	lsls	r3, r3, #3
 8004796:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	4413      	add	r3, r2
 800479e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2200      	movs	r2, #0
 80047a4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2201      	movs	r2, #1
 80047aa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80047ac:	78fb      	ldrb	r3, [r7, #3]
 80047ae:	f003 0307 	and.w	r3, r3, #7
 80047b2:	b2da      	uxtb	r2, r3
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d101      	bne.n	80047c6 <HAL_PCD_EP_SetStall+0x7e>
 80047c2:	2302      	movs	r3, #2
 80047c4:	e01c      	b.n	8004800 <HAL_PCD_EP_SetStall+0xb8>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2201      	movs	r2, #1
 80047ca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	68f9      	ldr	r1, [r7, #12]
 80047d4:	4618      	mov	r0, r3
 80047d6:	f004 fc41 	bl	800905c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80047da:	78fb      	ldrb	r3, [r7, #3]
 80047dc:	f003 0307 	and.w	r3, r3, #7
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d108      	bne.n	80047f6 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80047ee:	4619      	mov	r1, r3
 80047f0:	4610      	mov	r0, r2
 80047f2:	f004 fd66 	bl	80092c2 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80047fe:	2300      	movs	r3, #0
}
 8004800:	4618      	mov	r0, r3
 8004802:	3710      	adds	r7, #16
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}

08004808 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	460b      	mov	r3, r1
 8004812:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004814:	78fb      	ldrb	r3, [r7, #3]
 8004816:	f003 020f 	and.w	r2, r3, #15
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	429a      	cmp	r2, r3
 8004820:	d901      	bls.n	8004826 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e040      	b.n	80048a8 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004826:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800482a:	2b00      	cmp	r3, #0
 800482c:	da0e      	bge.n	800484c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800482e:	78fb      	ldrb	r3, [r7, #3]
 8004830:	f003 0307 	and.w	r3, r3, #7
 8004834:	1c5a      	adds	r2, r3, #1
 8004836:	4613      	mov	r3, r2
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	4413      	add	r3, r2
 800483c:	00db      	lsls	r3, r3, #3
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	4413      	add	r3, r2
 8004842:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2201      	movs	r2, #1
 8004848:	705a      	strb	r2, [r3, #1]
 800484a:	e00e      	b.n	800486a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800484c:	78fb      	ldrb	r3, [r7, #3]
 800484e:	f003 0207 	and.w	r2, r3, #7
 8004852:	4613      	mov	r3, r2
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	4413      	add	r3, r2
 8004858:	00db      	lsls	r3, r3, #3
 800485a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	4413      	add	r3, r2
 8004862:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2200      	movs	r2, #0
 8004868:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2200      	movs	r2, #0
 800486e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004870:	78fb      	ldrb	r3, [r7, #3]
 8004872:	f003 0307 	and.w	r3, r3, #7
 8004876:	b2da      	uxtb	r2, r3
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004882:	2b01      	cmp	r3, #1
 8004884:	d101      	bne.n	800488a <HAL_PCD_EP_ClrStall+0x82>
 8004886:	2302      	movs	r3, #2
 8004888:	e00e      	b.n	80048a8 <HAL_PCD_EP_ClrStall+0xa0>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68f9      	ldr	r1, [r7, #12]
 8004898:	4618      	mov	r0, r3
 800489a:	f004 fc2f 	bl	80090fc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3710      	adds	r7, #16
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b08e      	sub	sp, #56	; 0x38
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80048b8:	e2ec      	b.n	8004e94 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80048c2:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80048c4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	f003 030f 	and.w	r3, r3, #15
 80048cc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80048d0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	f040 8161 	bne.w	8004b9c <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80048da:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80048dc:	f003 0310 	and.w	r3, r3, #16
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d152      	bne.n	800498a <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	881b      	ldrh	r3, [r3, #0]
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80048f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048f4:	81fb      	strh	r3, [r7, #14]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	89fb      	ldrh	r3, [r7, #14]
 80048fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004900:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004904:	b29b      	uxth	r3, r3
 8004906:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	3328      	adds	r3, #40	; 0x28
 800490c:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004916:	b29b      	uxth	r3, r3
 8004918:	461a      	mov	r2, r3
 800491a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	00db      	lsls	r3, r3, #3
 8004920:	4413      	add	r3, r2
 8004922:	3302      	adds	r3, #2
 8004924:	005b      	lsls	r3, r3, #1
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	6812      	ldr	r2, [r2, #0]
 800492a:	4413      	add	r3, r2
 800492c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004930:	881b      	ldrh	r3, [r3, #0]
 8004932:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004938:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800493a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493c:	695a      	ldr	r2, [r3, #20]
 800493e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004940:	69db      	ldr	r3, [r3, #28]
 8004942:	441a      	add	r2, r3
 8004944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004946:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004948:	2100      	movs	r1, #0
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f008 ff8d 	bl	800d86a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004956:	b2db      	uxtb	r3, r3
 8004958:	2b00      	cmp	r3, #0
 800495a:	f000 829b 	beq.w	8004e94 <PCD_EP_ISR_Handler+0x5e4>
 800495e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004960:	699b      	ldr	r3, [r3, #24]
 8004962:	2b00      	cmp	r3, #0
 8004964:	f040 8296 	bne.w	8004e94 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800496e:	b2db      	uxtb	r3, r3
 8004970:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004974:	b2da      	uxtb	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	b292      	uxth	r2, r2
 800497c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004988:	e284      	b.n	8004e94 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004990:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	881b      	ldrh	r3, [r3, #0]
 8004998:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800499a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800499c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d034      	beq.n	8004a0e <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	461a      	mov	r2, r3
 80049b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	00db      	lsls	r3, r3, #3
 80049b6:	4413      	add	r3, r2
 80049b8:	3306      	adds	r3, #6
 80049ba:	005b      	lsls	r3, r3, #1
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	6812      	ldr	r2, [r2, #0]
 80049c0:	4413      	add	r3, r2
 80049c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049c6:	881b      	ldrh	r3, [r3, #0]
 80049c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80049cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ce:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6818      	ldr	r0, [r3, #0]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80049da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049dc:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80049de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	f004 fcbd 	bl	8009362 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	881b      	ldrh	r3, [r3, #0]
 80049ee:	b29a      	uxth	r2, r3
 80049f0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80049f4:	4013      	ands	r3, r2
 80049f6:	823b      	strh	r3, [r7, #16]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	8a3a      	ldrh	r2, [r7, #16]
 80049fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004a02:	b292      	uxth	r2, r2
 8004a04:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f008 ff02 	bl	800d810 <HAL_PCD_SetupStageCallback>
 8004a0c:	e242      	b.n	8004e94 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004a0e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	f280 823e 	bge.w	8004e94 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	881b      	ldrh	r3, [r3, #0]
 8004a1e:	b29a      	uxth	r2, r3
 8004a20:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004a24:	4013      	ands	r3, r2
 8004a26:	83bb      	strh	r3, [r7, #28]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	8bba      	ldrh	r2, [r7, #28]
 8004a2e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004a32:	b292      	uxth	r2, r2
 8004a34:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	461a      	mov	r2, r3
 8004a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	00db      	lsls	r3, r3, #3
 8004a48:	4413      	add	r3, r2
 8004a4a:	3306      	adds	r3, #6
 8004a4c:	005b      	lsls	r3, r3, #1
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	6812      	ldr	r2, [r2, #0]
 8004a52:	4413      	add	r3, r2
 8004a54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a58:	881b      	ldrh	r3, [r3, #0]
 8004a5a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a60:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a64:	69db      	ldr	r3, [r3, #28]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d019      	beq.n	8004a9e <PCD_EP_ISR_Handler+0x1ee>
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d015      	beq.n	8004a9e <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6818      	ldr	r0, [r3, #0]
 8004a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a78:	6959      	ldr	r1, [r3, #20]
 8004a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a80:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	f004 fc6d 	bl	8009362 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8a:	695a      	ldr	r2, [r3, #20]
 8004a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8e:	69db      	ldr	r3, [r3, #28]
 8004a90:	441a      	add	r2, r3
 8004a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a94:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004a96:	2100      	movs	r1, #0
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f008 fecb 	bl	800d834 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	881b      	ldrh	r3, [r3, #0]
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	f040 81f2 	bne.w	8004e94 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	61bb      	str	r3, [r7, #24]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	4413      	add	r3, r2
 8004ac6:	61bb      	str	r3, [r7, #24]
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004ace:	617b      	str	r3, [r7, #20]
 8004ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad2:	691b      	ldr	r3, [r3, #16]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d112      	bne.n	8004afe <PCD_EP_ISR_Handler+0x24e>
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	881b      	ldrh	r3, [r3, #0]
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ae2:	b29a      	uxth	r2, r3
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	801a      	strh	r2, [r3, #0]
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	881b      	ldrh	r3, [r3, #0]
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004af2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004af6:	b29a      	uxth	r2, r3
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	801a      	strh	r2, [r3, #0]
 8004afc:	e02f      	b.n	8004b5e <PCD_EP_ISR_Handler+0x2ae>
 8004afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	2b3e      	cmp	r3, #62	; 0x3e
 8004b04:	d813      	bhi.n	8004b2e <PCD_EP_ISR_Handler+0x27e>
 8004b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	085b      	lsrs	r3, r3, #1
 8004b0c:	633b      	str	r3, [r7, #48]	; 0x30
 8004b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	f003 0301 	and.w	r3, r3, #1
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d002      	beq.n	8004b20 <PCD_EP_ISR_Handler+0x270>
 8004b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b1c:	3301      	adds	r3, #1
 8004b1e:	633b      	str	r3, [r7, #48]	; 0x30
 8004b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	029b      	lsls	r3, r3, #10
 8004b26:	b29a      	uxth	r2, r3
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	801a      	strh	r2, [r3, #0]
 8004b2c:	e017      	b.n	8004b5e <PCD_EP_ISR_Handler+0x2ae>
 8004b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	095b      	lsrs	r3, r3, #5
 8004b34:	633b      	str	r3, [r7, #48]	; 0x30
 8004b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	f003 031f 	and.w	r3, r3, #31
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d102      	bne.n	8004b48 <PCD_EP_ISR_Handler+0x298>
 8004b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b44:	3b01      	subs	r3, #1
 8004b46:	633b      	str	r3, [r7, #48]	; 0x30
 8004b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	029b      	lsls	r3, r3, #10
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b58:	b29a      	uxth	r2, r3
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	881b      	ldrh	r3, [r3, #0]
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b6e:	827b      	strh	r3, [r7, #18]
 8004b70:	8a7b      	ldrh	r3, [r7, #18]
 8004b72:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004b76:	827b      	strh	r3, [r7, #18]
 8004b78:	8a7b      	ldrh	r3, [r7, #18]
 8004b7a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004b7e:	827b      	strh	r3, [r7, #18]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	8a7b      	ldrh	r3, [r7, #18]
 8004b86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	8013      	strh	r3, [r2, #0]
 8004b9a:	e17b      	b.n	8004e94 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	4413      	add	r3, r2
 8004baa:	881b      	ldrh	r3, [r3, #0]
 8004bac:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004bae:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	f280 80ea 	bge.w	8004d8c <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	4413      	add	r3, r2
 8004bc6:	881b      	ldrh	r3, [r3, #0]
 8004bc8:	b29a      	uxth	r2, r3
 8004bca:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004bce:	4013      	ands	r3, r2
 8004bd0:	853b      	strh	r3, [r7, #40]	; 0x28
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	4413      	add	r3, r2
 8004be0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004be2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004be6:	b292      	uxth	r2, r2
 8004be8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004bea:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8004bee:	4613      	mov	r3, r2
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	4413      	add	r3, r2
 8004bf4:	00db      	lsls	r3, r3, #3
 8004bf6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	4413      	add	r3, r2
 8004bfe:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c02:	7b1b      	ldrb	r3, [r3, #12]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d122      	bne.n	8004c4e <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	461a      	mov	r2, r3
 8004c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	00db      	lsls	r3, r3, #3
 8004c1a:	4413      	add	r3, r2
 8004c1c:	3306      	adds	r3, #6
 8004c1e:	005b      	lsls	r3, r3, #1
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	6812      	ldr	r2, [r2, #0]
 8004c24:	4413      	add	r3, r2
 8004c26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c2a:	881b      	ldrh	r3, [r3, #0]
 8004c2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c30:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8004c32:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	f000 8087 	beq.w	8004d48 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6818      	ldr	r0, [r3, #0]
 8004c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c40:	6959      	ldr	r1, [r3, #20]
 8004c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c44:	88da      	ldrh	r2, [r3, #6]
 8004c46:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004c48:	f004 fb8b 	bl	8009362 <USB_ReadPMA>
 8004c4c:	e07c      	b.n	8004d48 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c50:	78db      	ldrb	r3, [r3, #3]
 8004c52:	2b02      	cmp	r3, #2
 8004c54:	d108      	bne.n	8004c68 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004c56:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004c58:	461a      	mov	r2, r3
 8004c5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f000 f927 	bl	8004eb0 <HAL_PCD_EP_DB_Receive>
 8004c62:	4603      	mov	r3, r0
 8004c64:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004c66:	e06f      	b.n	8004d48 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	4413      	add	r3, r2
 8004c76:	881b      	ldrh	r3, [r3, #0]
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c82:	847b      	strh	r3, [r7, #34]	; 0x22
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	461a      	mov	r2, r3
 8004c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	441a      	add	r2, r3
 8004c92:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004c94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ca0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	461a      	mov	r2, r3
 8004cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	4413      	add	r3, r2
 8004cb6:	881b      	ldrh	r3, [r3, #0]
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d021      	beq.n	8004d06 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	461a      	mov	r2, r3
 8004cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	00db      	lsls	r3, r3, #3
 8004cd4:	4413      	add	r3, r2
 8004cd6:	3302      	adds	r3, #2
 8004cd8:	005b      	lsls	r3, r3, #1
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	6812      	ldr	r2, [r2, #0]
 8004cde:	4413      	add	r3, r2
 8004ce0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ce4:	881b      	ldrh	r3, [r3, #0]
 8004ce6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004cea:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004cec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d02a      	beq.n	8004d48 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6818      	ldr	r0, [r3, #0]
 8004cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf8:	6959      	ldr	r1, [r3, #20]
 8004cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfc:	891a      	ldrh	r2, [r3, #8]
 8004cfe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004d00:	f004 fb2f 	bl	8009362 <USB_ReadPMA>
 8004d04:	e020      	b.n	8004d48 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	461a      	mov	r2, r3
 8004d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	00db      	lsls	r3, r3, #3
 8004d18:	4413      	add	r3, r2
 8004d1a:	3306      	adds	r3, #6
 8004d1c:	005b      	lsls	r3, r3, #1
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	6812      	ldr	r2, [r2, #0]
 8004d22:	4413      	add	r3, r2
 8004d24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d28:	881b      	ldrh	r3, [r3, #0]
 8004d2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d2e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004d30:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d008      	beq.n	8004d48 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6818      	ldr	r0, [r3, #0]
 8004d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3c:	6959      	ldr	r1, [r3, #20]
 8004d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d40:	895a      	ldrh	r2, [r3, #10]
 8004d42:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004d44:	f004 fb0d 	bl	8009362 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4a:	69da      	ldr	r2, [r3, #28]
 8004d4c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004d4e:	441a      	add	r2, r3
 8004d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d52:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d56:	695a      	ldr	r2, [r3, #20]
 8004d58:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004d5a:	441a      	add	r2, r3
 8004d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d62:	699b      	ldr	r3, [r3, #24]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d004      	beq.n	8004d72 <PCD_EP_ISR_Handler+0x4c2>
 8004d68:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6c:	691b      	ldr	r3, [r3, #16]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d206      	bcs.n	8004d80 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	4619      	mov	r1, r3
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f008 fd5b 	bl	800d834 <HAL_PCD_DataOutStageCallback>
 8004d7e:	e005      	b.n	8004d8c <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d86:	4618      	mov	r0, r3
 8004d88:	f002 fb30 	bl	80073ec <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004d8c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d07e      	beq.n	8004e94 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8004d96:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004d9a:	1c5a      	adds	r2, r3, #1
 8004d9c:	4613      	mov	r3, r2
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	4413      	add	r3, r2
 8004da2:	00db      	lsls	r3, r3, #3
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	4413      	add	r3, r2
 8004da8:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	461a      	mov	r2, r3
 8004db0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	4413      	add	r3, r2
 8004db8:	881b      	ldrh	r3, [r3, #0]
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004dc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dc4:	843b      	strh	r3, [r7, #32]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	461a      	mov	r2, r3
 8004dcc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	441a      	add	r2, r3
 8004dd4:	8c3b      	ldrh	r3, [r7, #32]
 8004dd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8004de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de4:	78db      	ldrb	r3, [r3, #3]
 8004de6:	2b03      	cmp	r3, #3
 8004de8:	d00c      	beq.n	8004e04 <PCD_EP_ISR_Handler+0x554>
 8004dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dec:	78db      	ldrb	r3, [r3, #3]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d008      	beq.n	8004e04 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df4:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d146      	bne.n	8004e88 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004dfa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d141      	bne.n	8004e88 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	461a      	mov	r2, r3
 8004e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	00db      	lsls	r3, r3, #3
 8004e16:	4413      	add	r3, r2
 8004e18:	3302      	adds	r3, #2
 8004e1a:	005b      	lsls	r3, r3, #1
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	6812      	ldr	r2, [r2, #0]
 8004e20:	4413      	add	r3, r2
 8004e22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e26:	881b      	ldrh	r3, [r3, #0]
 8004e28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e2c:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8004e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e30:	699a      	ldr	r2, [r3, #24]
 8004e32:	8bfb      	ldrh	r3, [r7, #30]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d906      	bls.n	8004e46 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8004e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3a:	699a      	ldr	r2, [r3, #24]
 8004e3c:	8bfb      	ldrh	r3, [r7, #30]
 8004e3e:	1ad2      	subs	r2, r2, r3
 8004e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e42:	619a      	str	r2, [r3, #24]
 8004e44:	e002      	b.n	8004e4c <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8004e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e48:	2200      	movs	r2, #0
 8004e4a:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8004e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4e:	699b      	ldr	r3, [r3, #24]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d106      	bne.n	8004e62 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	4619      	mov	r1, r3
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f008 fd05 	bl	800d86a <HAL_PCD_DataInStageCallback>
 8004e60:	e018      	b.n	8004e94 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8004e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e64:	695a      	ldr	r2, [r3, #20]
 8004e66:	8bfb      	ldrh	r3, [r7, #30]
 8004e68:	441a      	add	r2, r3
 8004e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6c:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8004e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e70:	69da      	ldr	r2, [r3, #28]
 8004e72:	8bfb      	ldrh	r3, [r7, #30]
 8004e74:	441a      	add	r2, r3
 8004e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e78:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e80:	4618      	mov	r0, r3
 8004e82:	f002 fab3 	bl	80073ec <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8004e86:	e005      	b.n	8004e94 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004e88:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 f91b 	bl	80050ca <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	b21b      	sxth	r3, r3
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	f6ff ad0a 	blt.w	80048ba <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004ea6:	2300      	movs	r3, #0
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3738      	adds	r7, #56	; 0x38
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b088      	sub	sp, #32
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	4613      	mov	r3, r2
 8004ebc:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004ebe:	88fb      	ldrh	r3, [r7, #6]
 8004ec0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d07e      	beq.n	8004fc6 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	00db      	lsls	r3, r3, #3
 8004eda:	4413      	add	r3, r2
 8004edc:	3302      	adds	r3, #2
 8004ede:	005b      	lsls	r3, r3, #1
 8004ee0:	68fa      	ldr	r2, [r7, #12]
 8004ee2:	6812      	ldr	r2, [r2, #0]
 8004ee4:	4413      	add	r3, r2
 8004ee6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004eea:	881b      	ldrh	r3, [r3, #0]
 8004eec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ef0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	699a      	ldr	r2, [r3, #24]
 8004ef6:	8b7b      	ldrh	r3, [r7, #26]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d306      	bcc.n	8004f0a <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	699a      	ldr	r2, [r3, #24]
 8004f00:	8b7b      	ldrh	r3, [r7, #26]
 8004f02:	1ad2      	subs	r2, r2, r3
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	619a      	str	r2, [r3, #24]
 8004f08:	e002      	b.n	8004f10 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	699b      	ldr	r3, [r3, #24]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d123      	bne.n	8004f60 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	781b      	ldrb	r3, [r3, #0]
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	4413      	add	r3, r2
 8004f26:	881b      	ldrh	r3, [r3, #0]
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f32:	833b      	strh	r3, [r7, #24]
 8004f34:	8b3b      	ldrh	r3, [r7, #24]
 8004f36:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004f3a:	833b      	strh	r3, [r7, #24]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	461a      	mov	r2, r3
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	441a      	add	r2, r3
 8004f4a:	8b3b      	ldrh	r3, [r7, #24]
 8004f4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004f60:	88fb      	ldrh	r3, [r7, #6]
 8004f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d01f      	beq.n	8004faa <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	461a      	mov	r2, r3
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	4413      	add	r3, r2
 8004f78:	881b      	ldrh	r3, [r3, #0]
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f84:	82fb      	strh	r3, [r7, #22]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	441a      	add	r2, r3
 8004f94:	8afb      	ldrh	r3, [r7, #22]
 8004f96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fa2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004faa:	8b7b      	ldrh	r3, [r7, #26]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	f000 8087 	beq.w	80050c0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6818      	ldr	r0, [r3, #0]
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	6959      	ldr	r1, [r3, #20]
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	891a      	ldrh	r2, [r3, #8]
 8004fbe:	8b7b      	ldrh	r3, [r7, #26]
 8004fc0:	f004 f9cf 	bl	8009362 <USB_ReadPMA>
 8004fc4:	e07c      	b.n	80050c0 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	00db      	lsls	r3, r3, #3
 8004fd8:	4413      	add	r3, r2
 8004fda:	3306      	adds	r3, #6
 8004fdc:	005b      	lsls	r3, r3, #1
 8004fde:	68fa      	ldr	r2, [r7, #12]
 8004fe0:	6812      	ldr	r2, [r2, #0]
 8004fe2:	4413      	add	r3, r2
 8004fe4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fe8:	881b      	ldrh	r3, [r3, #0]
 8004fea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fee:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	699a      	ldr	r2, [r3, #24]
 8004ff4:	8b7b      	ldrh	r3, [r7, #26]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d306      	bcc.n	8005008 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	699a      	ldr	r2, [r3, #24]
 8004ffe:	8b7b      	ldrh	r3, [r7, #26]
 8005000:	1ad2      	subs	r2, r2, r3
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	619a      	str	r2, [r3, #24]
 8005006:	e002      	b.n	800500e <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	2200      	movs	r2, #0
 800500c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	699b      	ldr	r3, [r3, #24]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d123      	bne.n	800505e <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	461a      	mov	r2, r3
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	4413      	add	r3, r2
 8005024:	881b      	ldrh	r3, [r3, #0]
 8005026:	b29b      	uxth	r3, r3
 8005028:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800502c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005030:	83fb      	strh	r3, [r7, #30]
 8005032:	8bfb      	ldrh	r3, [r7, #30]
 8005034:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005038:	83fb      	strh	r3, [r7, #30]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	461a      	mov	r2, r3
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	441a      	add	r2, r3
 8005048:	8bfb      	ldrh	r3, [r7, #30]
 800504a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800504e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005052:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005056:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800505a:	b29b      	uxth	r3, r3
 800505c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800505e:	88fb      	ldrh	r3, [r7, #6]
 8005060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005064:	2b00      	cmp	r3, #0
 8005066:	d11f      	bne.n	80050a8 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	461a      	mov	r2, r3
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	4413      	add	r3, r2
 8005076:	881b      	ldrh	r3, [r3, #0]
 8005078:	b29b      	uxth	r3, r3
 800507a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800507e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005082:	83bb      	strh	r3, [r7, #28]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	461a      	mov	r2, r3
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	441a      	add	r2, r3
 8005092:	8bbb      	ldrh	r3, [r7, #28]
 8005094:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005098:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800509c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050a0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80050a8:	8b7b      	ldrh	r3, [r7, #26]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d008      	beq.n	80050c0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6818      	ldr	r0, [r3, #0]
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	6959      	ldr	r1, [r3, #20]
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	895a      	ldrh	r2, [r3, #10]
 80050ba:	8b7b      	ldrh	r3, [r7, #26]
 80050bc:	f004 f951 	bl	8009362 <USB_ReadPMA>
    }
  }

  return count;
 80050c0:	8b7b      	ldrh	r3, [r7, #26]
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3720      	adds	r7, #32
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}

080050ca <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80050ca:	b580      	push	{r7, lr}
 80050cc:	b0a2      	sub	sp, #136	; 0x88
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	60f8      	str	r0, [r7, #12]
 80050d2:	60b9      	str	r1, [r7, #8]
 80050d4:	4613      	mov	r3, r2
 80050d6:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80050d8:	88fb      	ldrh	r3, [r7, #6]
 80050da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050de:	2b00      	cmp	r3, #0
 80050e0:	f000 81c7 	beq.w	8005472 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	461a      	mov	r2, r3
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	00db      	lsls	r3, r3, #3
 80050f6:	4413      	add	r3, r2
 80050f8:	3302      	adds	r3, #2
 80050fa:	005b      	lsls	r3, r3, #1
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	6812      	ldr	r2, [r2, #0]
 8005100:	4413      	add	r3, r2
 8005102:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005106:	881b      	ldrh	r3, [r3, #0]
 8005108:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800510c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	699a      	ldr	r2, [r3, #24]
 8005114:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005118:	429a      	cmp	r2, r3
 800511a:	d907      	bls.n	800512c <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	699a      	ldr	r2, [r3, #24]
 8005120:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005124:	1ad2      	subs	r2, r2, r3
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	619a      	str	r2, [r3, #24]
 800512a:	e002      	b.n	8005132 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	2200      	movs	r2, #0
 8005130:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	699b      	ldr	r3, [r3, #24]
 8005136:	2b00      	cmp	r3, #0
 8005138:	f040 80b9 	bne.w	80052ae <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	785b      	ldrb	r3, [r3, #1]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d126      	bne.n	8005192 <HAL_PCD_EP_DB_Transmit+0xc8>
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	62bb      	str	r3, [r7, #40]	; 0x28
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005152:	b29b      	uxth	r3, r3
 8005154:	461a      	mov	r2, r3
 8005156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005158:	4413      	add	r3, r2
 800515a:	62bb      	str	r3, [r7, #40]	; 0x28
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	011a      	lsls	r2, r3, #4
 8005162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005164:	4413      	add	r3, r2
 8005166:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800516a:	627b      	str	r3, [r7, #36]	; 0x24
 800516c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516e:	881b      	ldrh	r3, [r3, #0]
 8005170:	b29b      	uxth	r3, r3
 8005172:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005176:	b29a      	uxth	r2, r3
 8005178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517a:	801a      	strh	r2, [r3, #0]
 800517c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517e:	881b      	ldrh	r3, [r3, #0]
 8005180:	b29b      	uxth	r3, r3
 8005182:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005186:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800518a:	b29a      	uxth	r2, r3
 800518c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518e:	801a      	strh	r2, [r3, #0]
 8005190:	e01a      	b.n	80051c8 <HAL_PCD_EP_DB_Transmit+0xfe>
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	785b      	ldrb	r3, [r3, #1]
 8005196:	2b01      	cmp	r3, #1
 8005198:	d116      	bne.n	80051c8 <HAL_PCD_EP_DB_Transmit+0xfe>
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	633b      	str	r3, [r7, #48]	; 0x30
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	461a      	mov	r2, r3
 80051ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ae:	4413      	add	r3, r2
 80051b0:	633b      	str	r3, [r7, #48]	; 0x30
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	781b      	ldrb	r3, [r3, #0]
 80051b6:	011a      	lsls	r2, r3, #4
 80051b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ba:	4413      	add	r3, r2
 80051bc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80051c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051c4:	2200      	movs	r2, #0
 80051c6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	623b      	str	r3, [r7, #32]
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	785b      	ldrb	r3, [r3, #1]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d126      	bne.n	8005224 <HAL_PCD_EP_DB_Transmit+0x15a>
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	61bb      	str	r3, [r7, #24]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	461a      	mov	r2, r3
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	4413      	add	r3, r2
 80051ec:	61bb      	str	r3, [r7, #24]
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	011a      	lsls	r2, r3, #4
 80051f4:	69bb      	ldr	r3, [r7, #24]
 80051f6:	4413      	add	r3, r2
 80051f8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80051fc:	617b      	str	r3, [r7, #20]
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	881b      	ldrh	r3, [r3, #0]
 8005202:	b29b      	uxth	r3, r3
 8005204:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005208:	b29a      	uxth	r2, r3
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	801a      	strh	r2, [r3, #0]
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	881b      	ldrh	r3, [r3, #0]
 8005212:	b29b      	uxth	r3, r3
 8005214:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005218:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800521c:	b29a      	uxth	r2, r3
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	801a      	strh	r2, [r3, #0]
 8005222:	e017      	b.n	8005254 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	785b      	ldrb	r3, [r3, #1]
 8005228:	2b01      	cmp	r3, #1
 800522a:	d113      	bne.n	8005254 <HAL_PCD_EP_DB_Transmit+0x18a>
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005234:	b29b      	uxth	r3, r3
 8005236:	461a      	mov	r2, r3
 8005238:	6a3b      	ldr	r3, [r7, #32]
 800523a:	4413      	add	r3, r2
 800523c:	623b      	str	r3, [r7, #32]
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	011a      	lsls	r2, r3, #4
 8005244:	6a3b      	ldr	r3, [r7, #32]
 8005246:	4413      	add	r3, r2
 8005248:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800524c:	61fb      	str	r3, [r7, #28]
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	2200      	movs	r2, #0
 8005252:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	4619      	mov	r1, r3
 800525a:	68f8      	ldr	r0, [r7, #12]
 800525c:	f008 fb05 	bl	800d86a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005260:	88fb      	ldrh	r3, [r7, #6]
 8005262:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005266:	2b00      	cmp	r3, #0
 8005268:	f000 82d4 	beq.w	8005814 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	461a      	mov	r2, r3
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	4413      	add	r3, r2
 800527a:	881b      	ldrh	r3, [r3, #0]
 800527c:	b29b      	uxth	r3, r3
 800527e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005286:	827b      	strh	r3, [r7, #18]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	461a      	mov	r2, r3
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	441a      	add	r2, r3
 8005296:	8a7b      	ldrh	r3, [r7, #18]
 8005298:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800529c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80052a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	8013      	strh	r3, [r2, #0]
 80052ac:	e2b2      	b.n	8005814 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80052ae:	88fb      	ldrh	r3, [r7, #6]
 80052b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d021      	beq.n	80052fc <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	461a      	mov	r2, r3
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	4413      	add	r3, r2
 80052c6:	881b      	ldrh	r3, [r3, #0]
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052d2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	461a      	mov	r2, r3
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	441a      	add	r2, r3
 80052e4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80052e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80052f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005302:	2b01      	cmp	r3, #1
 8005304:	f040 8286 	bne.w	8005814 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	695a      	ldr	r2, [r3, #20]
 800530c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005310:	441a      	add	r2, r3
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	69da      	ldr	r2, [r3, #28]
 800531a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800531e:	441a      	add	r2, r3
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	6a1a      	ldr	r2, [r3, #32]
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	429a      	cmp	r2, r3
 800532e:	d309      	bcc.n	8005344 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	691b      	ldr	r3, [r3, #16]
 8005334:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	6a1a      	ldr	r2, [r3, #32]
 800533a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800533c:	1ad2      	subs	r2, r2, r3
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	621a      	str	r2, [r3, #32]
 8005342:	e015      	b.n	8005370 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	6a1b      	ldr	r3, [r3, #32]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d107      	bne.n	800535c <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 800534c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005350:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	2200      	movs	r2, #0
 8005356:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800535a:	e009      	b.n	8005370 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	2200      	movs	r2, #0
 8005360:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	6a1b      	ldr	r3, [r3, #32]
 8005368:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	2200      	movs	r2, #0
 800536e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	785b      	ldrb	r3, [r3, #1]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d155      	bne.n	8005424 <HAL_PCD_EP_DB_Transmit+0x35a>
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	63bb      	str	r3, [r7, #56]	; 0x38
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005386:	b29b      	uxth	r3, r3
 8005388:	461a      	mov	r2, r3
 800538a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800538c:	4413      	add	r3, r2
 800538e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	011a      	lsls	r2, r3, #4
 8005396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005398:	4413      	add	r3, r2
 800539a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800539e:	637b      	str	r3, [r7, #52]	; 0x34
 80053a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d112      	bne.n	80053cc <HAL_PCD_EP_DB_Transmit+0x302>
 80053a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053a8:	881b      	ldrh	r3, [r3, #0]
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80053b0:	b29a      	uxth	r2, r3
 80053b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053b4:	801a      	strh	r2, [r3, #0]
 80053b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053b8:	881b      	ldrh	r3, [r3, #0]
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053c8:	801a      	strh	r2, [r3, #0]
 80053ca:	e047      	b.n	800545c <HAL_PCD_EP_DB_Transmit+0x392>
 80053cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053ce:	2b3e      	cmp	r3, #62	; 0x3e
 80053d0:	d811      	bhi.n	80053f6 <HAL_PCD_EP_DB_Transmit+0x32c>
 80053d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053d4:	085b      	lsrs	r3, r3, #1
 80053d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80053d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053da:	f003 0301 	and.w	r3, r3, #1
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d002      	beq.n	80053e8 <HAL_PCD_EP_DB_Transmit+0x31e>
 80053e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053e4:	3301      	adds	r3, #1
 80053e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80053e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	029b      	lsls	r3, r3, #10
 80053ee:	b29a      	uxth	r2, r3
 80053f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053f2:	801a      	strh	r2, [r3, #0]
 80053f4:	e032      	b.n	800545c <HAL_PCD_EP_DB_Transmit+0x392>
 80053f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053f8:	095b      	lsrs	r3, r3, #5
 80053fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80053fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053fe:	f003 031f 	and.w	r3, r3, #31
 8005402:	2b00      	cmp	r3, #0
 8005404:	d102      	bne.n	800540c <HAL_PCD_EP_DB_Transmit+0x342>
 8005406:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005408:	3b01      	subs	r3, #1
 800540a:	64bb      	str	r3, [r7, #72]	; 0x48
 800540c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800540e:	b29b      	uxth	r3, r3
 8005410:	029b      	lsls	r3, r3, #10
 8005412:	b29b      	uxth	r3, r3
 8005414:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005418:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800541c:	b29a      	uxth	r2, r3
 800541e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005420:	801a      	strh	r2, [r3, #0]
 8005422:	e01b      	b.n	800545c <HAL_PCD_EP_DB_Transmit+0x392>
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	785b      	ldrb	r3, [r3, #1]
 8005428:	2b01      	cmp	r3, #1
 800542a:	d117      	bne.n	800545c <HAL_PCD_EP_DB_Transmit+0x392>
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	643b      	str	r3, [r7, #64]	; 0x40
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800543a:	b29b      	uxth	r3, r3
 800543c:	461a      	mov	r2, r3
 800543e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005440:	4413      	add	r3, r2
 8005442:	643b      	str	r3, [r7, #64]	; 0x40
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	011a      	lsls	r2, r3, #4
 800544a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800544c:	4413      	add	r3, r2
 800544e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005452:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005454:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005456:	b29a      	uxth	r2, r3
 8005458:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800545a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6818      	ldr	r0, [r3, #0]
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	6959      	ldr	r1, [r3, #20]
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	891a      	ldrh	r2, [r3, #8]
 8005468:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800546a:	b29b      	uxth	r3, r3
 800546c:	f003 ff34 	bl	80092d8 <USB_WritePMA>
 8005470:	e1d0      	b.n	8005814 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800547a:	b29b      	uxth	r3, r3
 800547c:	461a      	mov	r2, r3
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	00db      	lsls	r3, r3, #3
 8005484:	4413      	add	r3, r2
 8005486:	3306      	adds	r3, #6
 8005488:	005b      	lsls	r3, r3, #1
 800548a:	68fa      	ldr	r2, [r7, #12]
 800548c:	6812      	ldr	r2, [r2, #0]
 800548e:	4413      	add	r3, r2
 8005490:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005494:	881b      	ldrh	r3, [r3, #0]
 8005496:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800549a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	699a      	ldr	r2, [r3, #24]
 80054a2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d307      	bcc.n	80054ba <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	699a      	ldr	r2, [r3, #24]
 80054ae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80054b2:	1ad2      	subs	r2, r2, r3
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	619a      	str	r2, [r3, #24]
 80054b8:	e002      	b.n	80054c0 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	2200      	movs	r2, #0
 80054be:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	699b      	ldr	r3, [r3, #24]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	f040 80c4 	bne.w	8005652 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	785b      	ldrb	r3, [r3, #1]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d126      	bne.n	8005520 <HAL_PCD_EP_DB_Transmit+0x456>
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	461a      	mov	r2, r3
 80054e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054e6:	4413      	add	r3, r2
 80054e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	011a      	lsls	r2, r3, #4
 80054f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054f2:	4413      	add	r3, r2
 80054f4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80054f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80054fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80054fc:	881b      	ldrh	r3, [r3, #0]
 80054fe:	b29b      	uxth	r3, r3
 8005500:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005504:	b29a      	uxth	r2, r3
 8005506:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005508:	801a      	strh	r2, [r3, #0]
 800550a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800550c:	881b      	ldrh	r3, [r3, #0]
 800550e:	b29b      	uxth	r3, r3
 8005510:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005514:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005518:	b29a      	uxth	r2, r3
 800551a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800551c:	801a      	strh	r2, [r3, #0]
 800551e:	e01a      	b.n	8005556 <HAL_PCD_EP_DB_Transmit+0x48c>
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	785b      	ldrb	r3, [r3, #1]
 8005524:	2b01      	cmp	r3, #1
 8005526:	d116      	bne.n	8005556 <HAL_PCD_EP_DB_Transmit+0x48c>
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	677b      	str	r3, [r7, #116]	; 0x74
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005536:	b29b      	uxth	r3, r3
 8005538:	461a      	mov	r2, r3
 800553a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800553c:	4413      	add	r3, r2
 800553e:	677b      	str	r3, [r7, #116]	; 0x74
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	011a      	lsls	r2, r3, #4
 8005546:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005548:	4413      	add	r3, r2
 800554a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800554e:	673b      	str	r3, [r7, #112]	; 0x70
 8005550:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005552:	2200      	movs	r2, #0
 8005554:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	67bb      	str	r3, [r7, #120]	; 0x78
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	785b      	ldrb	r3, [r3, #1]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d12f      	bne.n	80055c4 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005574:	b29b      	uxth	r3, r3
 8005576:	461a      	mov	r2, r3
 8005578:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800557c:	4413      	add	r3, r2
 800557e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	011a      	lsls	r2, r3, #4
 8005588:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800558c:	4413      	add	r3, r2
 800558e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005592:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005596:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800559a:	881b      	ldrh	r3, [r3, #0]
 800559c:	b29b      	uxth	r3, r3
 800559e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80055a2:	b29a      	uxth	r2, r3
 80055a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80055a8:	801a      	strh	r2, [r3, #0]
 80055aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80055ae:	881b      	ldrh	r3, [r3, #0]
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055ba:	b29a      	uxth	r2, r3
 80055bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80055c0:	801a      	strh	r2, [r3, #0]
 80055c2:	e017      	b.n	80055f4 <HAL_PCD_EP_DB_Transmit+0x52a>
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	785b      	ldrb	r3, [r3, #1]
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d113      	bne.n	80055f4 <HAL_PCD_EP_DB_Transmit+0x52a>
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	461a      	mov	r2, r3
 80055d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055da:	4413      	add	r3, r2
 80055dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	011a      	lsls	r2, r3, #4
 80055e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055e6:	4413      	add	r3, r2
 80055e8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80055ec:	67fb      	str	r3, [r7, #124]	; 0x7c
 80055ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80055f0:	2200      	movs	r2, #0
 80055f2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	4619      	mov	r1, r3
 80055fa:	68f8      	ldr	r0, [r7, #12]
 80055fc:	f008 f935 	bl	800d86a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005600:	88fb      	ldrh	r3, [r7, #6]
 8005602:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005606:	2b00      	cmp	r3, #0
 8005608:	f040 8104 	bne.w	8005814 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	461a      	mov	r2, r3
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	4413      	add	r3, r2
 800561a:	881b      	ldrh	r3, [r3, #0]
 800561c:	b29b      	uxth	r3, r3
 800561e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005626:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	461a      	mov	r2, r3
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	441a      	add	r2, r3
 8005638:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800563c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005640:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005644:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005648:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800564c:	b29b      	uxth	r3, r3
 800564e:	8013      	strh	r3, [r2, #0]
 8005650:	e0e0      	b.n	8005814 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005652:	88fb      	ldrh	r3, [r7, #6]
 8005654:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005658:	2b00      	cmp	r3, #0
 800565a:	d121      	bne.n	80056a0 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	461a      	mov	r2, r3
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	4413      	add	r3, r2
 800566a:	881b      	ldrh	r3, [r3, #0]
 800566c:	b29b      	uxth	r3, r3
 800566e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005676:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	461a      	mov	r2, r3
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	441a      	add	r2, r3
 8005688:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800568c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005690:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005694:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005698:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800569c:	b29b      	uxth	r3, r3
 800569e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	f040 80b4 	bne.w	8005814 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	695a      	ldr	r2, [r3, #20]
 80056b0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80056b4:	441a      	add	r2, r3
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	69da      	ldr	r2, [r3, #28]
 80056be:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80056c2:	441a      	add	r2, r3
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	6a1a      	ldr	r2, [r3, #32]
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	691b      	ldr	r3, [r3, #16]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d309      	bcc.n	80056e8 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	691b      	ldr	r3, [r3, #16]
 80056d8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	6a1a      	ldr	r2, [r3, #32]
 80056de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056e0:	1ad2      	subs	r2, r2, r3
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	621a      	str	r2, [r3, #32]
 80056e6:	e015      	b.n	8005714 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	6a1b      	ldr	r3, [r3, #32]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d107      	bne.n	8005700 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 80056f0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80056f4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80056fe:	e009      	b.n	8005714 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	6a1b      	ldr	r3, [r3, #32]
 8005704:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	2200      	movs	r2, #0
 800570a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	2200      	movs	r2, #0
 8005710:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	667b      	str	r3, [r7, #100]	; 0x64
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	785b      	ldrb	r3, [r3, #1]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d155      	bne.n	80057ce <HAL_PCD_EP_DB_Transmit+0x704>
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005730:	b29b      	uxth	r3, r3
 8005732:	461a      	mov	r2, r3
 8005734:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005736:	4413      	add	r3, r2
 8005738:	65fb      	str	r3, [r7, #92]	; 0x5c
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	781b      	ldrb	r3, [r3, #0]
 800573e:	011a      	lsls	r2, r3, #4
 8005740:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005742:	4413      	add	r3, r2
 8005744:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005748:	65bb      	str	r3, [r7, #88]	; 0x58
 800574a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800574c:	2b00      	cmp	r3, #0
 800574e:	d112      	bne.n	8005776 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8005750:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005752:	881b      	ldrh	r3, [r3, #0]
 8005754:	b29b      	uxth	r3, r3
 8005756:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800575a:	b29a      	uxth	r2, r3
 800575c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800575e:	801a      	strh	r2, [r3, #0]
 8005760:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005762:	881b      	ldrh	r3, [r3, #0]
 8005764:	b29b      	uxth	r3, r3
 8005766:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800576a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800576e:	b29a      	uxth	r2, r3
 8005770:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005772:	801a      	strh	r2, [r3, #0]
 8005774:	e044      	b.n	8005800 <HAL_PCD_EP_DB_Transmit+0x736>
 8005776:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005778:	2b3e      	cmp	r3, #62	; 0x3e
 800577a:	d811      	bhi.n	80057a0 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800577c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800577e:	085b      	lsrs	r3, r3, #1
 8005780:	657b      	str	r3, [r7, #84]	; 0x54
 8005782:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005784:	f003 0301 	and.w	r3, r3, #1
 8005788:	2b00      	cmp	r3, #0
 800578a:	d002      	beq.n	8005792 <HAL_PCD_EP_DB_Transmit+0x6c8>
 800578c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800578e:	3301      	adds	r3, #1
 8005790:	657b      	str	r3, [r7, #84]	; 0x54
 8005792:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005794:	b29b      	uxth	r3, r3
 8005796:	029b      	lsls	r3, r3, #10
 8005798:	b29a      	uxth	r2, r3
 800579a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800579c:	801a      	strh	r2, [r3, #0]
 800579e:	e02f      	b.n	8005800 <HAL_PCD_EP_DB_Transmit+0x736>
 80057a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057a2:	095b      	lsrs	r3, r3, #5
 80057a4:	657b      	str	r3, [r7, #84]	; 0x54
 80057a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057a8:	f003 031f 	and.w	r3, r3, #31
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d102      	bne.n	80057b6 <HAL_PCD_EP_DB_Transmit+0x6ec>
 80057b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057b2:	3b01      	subs	r3, #1
 80057b4:	657b      	str	r3, [r7, #84]	; 0x54
 80057b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	029b      	lsls	r3, r3, #10
 80057bc:	b29b      	uxth	r3, r3
 80057be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057c6:	b29a      	uxth	r2, r3
 80057c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057ca:	801a      	strh	r2, [r3, #0]
 80057cc:	e018      	b.n	8005800 <HAL_PCD_EP_DB_Transmit+0x736>
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	785b      	ldrb	r3, [r3, #1]
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d114      	bne.n	8005800 <HAL_PCD_EP_DB_Transmit+0x736>
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057de:	b29b      	uxth	r3, r3
 80057e0:	461a      	mov	r2, r3
 80057e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057e4:	4413      	add	r3, r2
 80057e6:	667b      	str	r3, [r7, #100]	; 0x64
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	781b      	ldrb	r3, [r3, #0]
 80057ec:	011a      	lsls	r2, r3, #4
 80057ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057f0:	4413      	add	r3, r2
 80057f2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80057f6:	663b      	str	r3, [r7, #96]	; 0x60
 80057f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057fa:	b29a      	uxth	r2, r3
 80057fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80057fe:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6818      	ldr	r0, [r3, #0]
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	6959      	ldr	r1, [r3, #20]
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	895a      	ldrh	r2, [r3, #10]
 800580c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800580e:	b29b      	uxth	r3, r3
 8005810:	f003 fd62 	bl	80092d8 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	461a      	mov	r2, r3
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	4413      	add	r3, r2
 8005822:	881b      	ldrh	r3, [r3, #0]
 8005824:	b29b      	uxth	r3, r3
 8005826:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800582a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800582e:	823b      	strh	r3, [r7, #16]
 8005830:	8a3b      	ldrh	r3, [r7, #16]
 8005832:	f083 0310 	eor.w	r3, r3, #16
 8005836:	823b      	strh	r3, [r7, #16]
 8005838:	8a3b      	ldrh	r3, [r7, #16]
 800583a:	f083 0320 	eor.w	r3, r3, #32
 800583e:	823b      	strh	r3, [r7, #16]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	461a      	mov	r2, r3
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	441a      	add	r2, r3
 800584e:	8a3b      	ldrh	r3, [r7, #16]
 8005850:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005854:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005858:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800585c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005860:	b29b      	uxth	r3, r3
 8005862:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005864:	2300      	movs	r3, #0
}
 8005866:	4618      	mov	r0, r3
 8005868:	3788      	adds	r7, #136	; 0x88
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}

0800586e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800586e:	b480      	push	{r7}
 8005870:	b087      	sub	sp, #28
 8005872:	af00      	add	r7, sp, #0
 8005874:	60f8      	str	r0, [r7, #12]
 8005876:	607b      	str	r3, [r7, #4]
 8005878:	460b      	mov	r3, r1
 800587a:	817b      	strh	r3, [r7, #10]
 800587c:	4613      	mov	r3, r2
 800587e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005880:	897b      	ldrh	r3, [r7, #10]
 8005882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005886:	b29b      	uxth	r3, r3
 8005888:	2b00      	cmp	r3, #0
 800588a:	d00b      	beq.n	80058a4 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800588c:	897b      	ldrh	r3, [r7, #10]
 800588e:	f003 0307 	and.w	r3, r3, #7
 8005892:	1c5a      	adds	r2, r3, #1
 8005894:	4613      	mov	r3, r2
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	4413      	add	r3, r2
 800589a:	00db      	lsls	r3, r3, #3
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	4413      	add	r3, r2
 80058a0:	617b      	str	r3, [r7, #20]
 80058a2:	e009      	b.n	80058b8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80058a4:	897a      	ldrh	r2, [r7, #10]
 80058a6:	4613      	mov	r3, r2
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	4413      	add	r3, r2
 80058ac:	00db      	lsls	r3, r3, #3
 80058ae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80058b2:	68fa      	ldr	r2, [r7, #12]
 80058b4:	4413      	add	r3, r2
 80058b6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80058b8:	893b      	ldrh	r3, [r7, #8]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d107      	bne.n	80058ce <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	2200      	movs	r2, #0
 80058c2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	b29a      	uxth	r2, r3
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	80da      	strh	r2, [r3, #6]
 80058cc:	e00b      	b.n	80058e6 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	2201      	movs	r2, #1
 80058d2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	b29a      	uxth	r2, r3
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	0c1b      	lsrs	r3, r3, #16
 80058e0:	b29a      	uxth	r2, r3
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80058e6:	2300      	movs	r3, #0
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	371c      	adds	r7, #28
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bc80      	pop	{r7}
 80058f0:	4770      	bx	lr
	...

080058f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b086      	sub	sp, #24
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d101      	bne.n	8005906 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e272      	b.n	8005dec <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 0301 	and.w	r3, r3, #1
 800590e:	2b00      	cmp	r3, #0
 8005910:	f000 8087 	beq.w	8005a22 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005914:	4b92      	ldr	r3, [pc, #584]	; (8005b60 <HAL_RCC_OscConfig+0x26c>)
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	f003 030c 	and.w	r3, r3, #12
 800591c:	2b04      	cmp	r3, #4
 800591e:	d00c      	beq.n	800593a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005920:	4b8f      	ldr	r3, [pc, #572]	; (8005b60 <HAL_RCC_OscConfig+0x26c>)
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	f003 030c 	and.w	r3, r3, #12
 8005928:	2b08      	cmp	r3, #8
 800592a:	d112      	bne.n	8005952 <HAL_RCC_OscConfig+0x5e>
 800592c:	4b8c      	ldr	r3, [pc, #560]	; (8005b60 <HAL_RCC_OscConfig+0x26c>)
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005934:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005938:	d10b      	bne.n	8005952 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800593a:	4b89      	ldr	r3, [pc, #548]	; (8005b60 <HAL_RCC_OscConfig+0x26c>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005942:	2b00      	cmp	r3, #0
 8005944:	d06c      	beq.n	8005a20 <HAL_RCC_OscConfig+0x12c>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d168      	bne.n	8005a20 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e24c      	b.n	8005dec <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800595a:	d106      	bne.n	800596a <HAL_RCC_OscConfig+0x76>
 800595c:	4b80      	ldr	r3, [pc, #512]	; (8005b60 <HAL_RCC_OscConfig+0x26c>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a7f      	ldr	r2, [pc, #508]	; (8005b60 <HAL_RCC_OscConfig+0x26c>)
 8005962:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005966:	6013      	str	r3, [r2, #0]
 8005968:	e02e      	b.n	80059c8 <HAL_RCC_OscConfig+0xd4>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d10c      	bne.n	800598c <HAL_RCC_OscConfig+0x98>
 8005972:	4b7b      	ldr	r3, [pc, #492]	; (8005b60 <HAL_RCC_OscConfig+0x26c>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a7a      	ldr	r2, [pc, #488]	; (8005b60 <HAL_RCC_OscConfig+0x26c>)
 8005978:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800597c:	6013      	str	r3, [r2, #0]
 800597e:	4b78      	ldr	r3, [pc, #480]	; (8005b60 <HAL_RCC_OscConfig+0x26c>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a77      	ldr	r2, [pc, #476]	; (8005b60 <HAL_RCC_OscConfig+0x26c>)
 8005984:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005988:	6013      	str	r3, [r2, #0]
 800598a:	e01d      	b.n	80059c8 <HAL_RCC_OscConfig+0xd4>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005994:	d10c      	bne.n	80059b0 <HAL_RCC_OscConfig+0xbc>
 8005996:	4b72      	ldr	r3, [pc, #456]	; (8005b60 <HAL_RCC_OscConfig+0x26c>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a71      	ldr	r2, [pc, #452]	; (8005b60 <HAL_RCC_OscConfig+0x26c>)
 800599c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059a0:	6013      	str	r3, [r2, #0]
 80059a2:	4b6f      	ldr	r3, [pc, #444]	; (8005b60 <HAL_RCC_OscConfig+0x26c>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a6e      	ldr	r2, [pc, #440]	; (8005b60 <HAL_RCC_OscConfig+0x26c>)
 80059a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059ac:	6013      	str	r3, [r2, #0]
 80059ae:	e00b      	b.n	80059c8 <HAL_RCC_OscConfig+0xd4>
 80059b0:	4b6b      	ldr	r3, [pc, #428]	; (8005b60 <HAL_RCC_OscConfig+0x26c>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a6a      	ldr	r2, [pc, #424]	; (8005b60 <HAL_RCC_OscConfig+0x26c>)
 80059b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059ba:	6013      	str	r3, [r2, #0]
 80059bc:	4b68      	ldr	r3, [pc, #416]	; (8005b60 <HAL_RCC_OscConfig+0x26c>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a67      	ldr	r2, [pc, #412]	; (8005b60 <HAL_RCC_OscConfig+0x26c>)
 80059c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059c6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d013      	beq.n	80059f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059d0:	f7fd f83a 	bl	8002a48 <HAL_GetTick>
 80059d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059d6:	e008      	b.n	80059ea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059d8:	f7fd f836 	bl	8002a48 <HAL_GetTick>
 80059dc:	4602      	mov	r2, r0
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	1ad3      	subs	r3, r2, r3
 80059e2:	2b64      	cmp	r3, #100	; 0x64
 80059e4:	d901      	bls.n	80059ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80059e6:	2303      	movs	r3, #3
 80059e8:	e200      	b.n	8005dec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059ea:	4b5d      	ldr	r3, [pc, #372]	; (8005b60 <HAL_RCC_OscConfig+0x26c>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d0f0      	beq.n	80059d8 <HAL_RCC_OscConfig+0xe4>
 80059f6:	e014      	b.n	8005a22 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059f8:	f7fd f826 	bl	8002a48 <HAL_GetTick>
 80059fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059fe:	e008      	b.n	8005a12 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a00:	f7fd f822 	bl	8002a48 <HAL_GetTick>
 8005a04:	4602      	mov	r2, r0
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	1ad3      	subs	r3, r2, r3
 8005a0a:	2b64      	cmp	r3, #100	; 0x64
 8005a0c:	d901      	bls.n	8005a12 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005a0e:	2303      	movs	r3, #3
 8005a10:	e1ec      	b.n	8005dec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a12:	4b53      	ldr	r3, [pc, #332]	; (8005b60 <HAL_RCC_OscConfig+0x26c>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d1f0      	bne.n	8005a00 <HAL_RCC_OscConfig+0x10c>
 8005a1e:	e000      	b.n	8005a22 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 0302 	and.w	r3, r3, #2
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d063      	beq.n	8005af6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005a2e:	4b4c      	ldr	r3, [pc, #304]	; (8005b60 <HAL_RCC_OscConfig+0x26c>)
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	f003 030c 	and.w	r3, r3, #12
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d00b      	beq.n	8005a52 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005a3a:	4b49      	ldr	r3, [pc, #292]	; (8005b60 <HAL_RCC_OscConfig+0x26c>)
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	f003 030c 	and.w	r3, r3, #12
 8005a42:	2b08      	cmp	r3, #8
 8005a44:	d11c      	bne.n	8005a80 <HAL_RCC_OscConfig+0x18c>
 8005a46:	4b46      	ldr	r3, [pc, #280]	; (8005b60 <HAL_RCC_OscConfig+0x26c>)
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d116      	bne.n	8005a80 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a52:	4b43      	ldr	r3, [pc, #268]	; (8005b60 <HAL_RCC_OscConfig+0x26c>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 0302 	and.w	r3, r3, #2
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d005      	beq.n	8005a6a <HAL_RCC_OscConfig+0x176>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d001      	beq.n	8005a6a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	e1c0      	b.n	8005dec <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a6a:	4b3d      	ldr	r3, [pc, #244]	; (8005b60 <HAL_RCC_OscConfig+0x26c>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	695b      	ldr	r3, [r3, #20]
 8005a76:	00db      	lsls	r3, r3, #3
 8005a78:	4939      	ldr	r1, [pc, #228]	; (8005b60 <HAL_RCC_OscConfig+0x26c>)
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a7e:	e03a      	b.n	8005af6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	691b      	ldr	r3, [r3, #16]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d020      	beq.n	8005aca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a88:	4b36      	ldr	r3, [pc, #216]	; (8005b64 <HAL_RCC_OscConfig+0x270>)
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a8e:	f7fc ffdb 	bl	8002a48 <HAL_GetTick>
 8005a92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a94:	e008      	b.n	8005aa8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a96:	f7fc ffd7 	bl	8002a48 <HAL_GetTick>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	1ad3      	subs	r3, r2, r3
 8005aa0:	2b02      	cmp	r3, #2
 8005aa2:	d901      	bls.n	8005aa8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005aa4:	2303      	movs	r3, #3
 8005aa6:	e1a1      	b.n	8005dec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005aa8:	4b2d      	ldr	r3, [pc, #180]	; (8005b60 <HAL_RCC_OscConfig+0x26c>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 0302 	and.w	r3, r3, #2
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d0f0      	beq.n	8005a96 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ab4:	4b2a      	ldr	r3, [pc, #168]	; (8005b60 <HAL_RCC_OscConfig+0x26c>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	695b      	ldr	r3, [r3, #20]
 8005ac0:	00db      	lsls	r3, r3, #3
 8005ac2:	4927      	ldr	r1, [pc, #156]	; (8005b60 <HAL_RCC_OscConfig+0x26c>)
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	600b      	str	r3, [r1, #0]
 8005ac8:	e015      	b.n	8005af6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005aca:	4b26      	ldr	r3, [pc, #152]	; (8005b64 <HAL_RCC_OscConfig+0x270>)
 8005acc:	2200      	movs	r2, #0
 8005ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ad0:	f7fc ffba 	bl	8002a48 <HAL_GetTick>
 8005ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ad6:	e008      	b.n	8005aea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ad8:	f7fc ffb6 	bl	8002a48 <HAL_GetTick>
 8005adc:	4602      	mov	r2, r0
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	1ad3      	subs	r3, r2, r3
 8005ae2:	2b02      	cmp	r3, #2
 8005ae4:	d901      	bls.n	8005aea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005ae6:	2303      	movs	r3, #3
 8005ae8:	e180      	b.n	8005dec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005aea:	4b1d      	ldr	r3, [pc, #116]	; (8005b60 <HAL_RCC_OscConfig+0x26c>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f003 0302 	and.w	r3, r3, #2
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d1f0      	bne.n	8005ad8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 0308 	and.w	r3, r3, #8
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d03a      	beq.n	8005b78 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	699b      	ldr	r3, [r3, #24]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d019      	beq.n	8005b3e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b0a:	4b17      	ldr	r3, [pc, #92]	; (8005b68 <HAL_RCC_OscConfig+0x274>)
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b10:	f7fc ff9a 	bl	8002a48 <HAL_GetTick>
 8005b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b16:	e008      	b.n	8005b2a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b18:	f7fc ff96 	bl	8002a48 <HAL_GetTick>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	1ad3      	subs	r3, r2, r3
 8005b22:	2b02      	cmp	r3, #2
 8005b24:	d901      	bls.n	8005b2a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005b26:	2303      	movs	r3, #3
 8005b28:	e160      	b.n	8005dec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b2a:	4b0d      	ldr	r3, [pc, #52]	; (8005b60 <HAL_RCC_OscConfig+0x26c>)
 8005b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2e:	f003 0302 	and.w	r3, r3, #2
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d0f0      	beq.n	8005b18 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005b36:	2001      	movs	r0, #1
 8005b38:	f000 fada 	bl	80060f0 <RCC_Delay>
 8005b3c:	e01c      	b.n	8005b78 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b3e:	4b0a      	ldr	r3, [pc, #40]	; (8005b68 <HAL_RCC_OscConfig+0x274>)
 8005b40:	2200      	movs	r2, #0
 8005b42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b44:	f7fc ff80 	bl	8002a48 <HAL_GetTick>
 8005b48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b4a:	e00f      	b.n	8005b6c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b4c:	f7fc ff7c 	bl	8002a48 <HAL_GetTick>
 8005b50:	4602      	mov	r2, r0
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	1ad3      	subs	r3, r2, r3
 8005b56:	2b02      	cmp	r3, #2
 8005b58:	d908      	bls.n	8005b6c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005b5a:	2303      	movs	r3, #3
 8005b5c:	e146      	b.n	8005dec <HAL_RCC_OscConfig+0x4f8>
 8005b5e:	bf00      	nop
 8005b60:	40021000 	.word	0x40021000
 8005b64:	42420000 	.word	0x42420000
 8005b68:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b6c:	4b92      	ldr	r3, [pc, #584]	; (8005db8 <HAL_RCC_OscConfig+0x4c4>)
 8005b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b70:	f003 0302 	and.w	r3, r3, #2
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d1e9      	bne.n	8005b4c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 0304 	and.w	r3, r3, #4
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	f000 80a6 	beq.w	8005cd2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b86:	2300      	movs	r3, #0
 8005b88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b8a:	4b8b      	ldr	r3, [pc, #556]	; (8005db8 <HAL_RCC_OscConfig+0x4c4>)
 8005b8c:	69db      	ldr	r3, [r3, #28]
 8005b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d10d      	bne.n	8005bb2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b96:	4b88      	ldr	r3, [pc, #544]	; (8005db8 <HAL_RCC_OscConfig+0x4c4>)
 8005b98:	69db      	ldr	r3, [r3, #28]
 8005b9a:	4a87      	ldr	r2, [pc, #540]	; (8005db8 <HAL_RCC_OscConfig+0x4c4>)
 8005b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ba0:	61d3      	str	r3, [r2, #28]
 8005ba2:	4b85      	ldr	r3, [pc, #532]	; (8005db8 <HAL_RCC_OscConfig+0x4c4>)
 8005ba4:	69db      	ldr	r3, [r3, #28]
 8005ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005baa:	60bb      	str	r3, [r7, #8]
 8005bac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bb2:	4b82      	ldr	r3, [pc, #520]	; (8005dbc <HAL_RCC_OscConfig+0x4c8>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d118      	bne.n	8005bf0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005bbe:	4b7f      	ldr	r3, [pc, #508]	; (8005dbc <HAL_RCC_OscConfig+0x4c8>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a7e      	ldr	r2, [pc, #504]	; (8005dbc <HAL_RCC_OscConfig+0x4c8>)
 8005bc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bca:	f7fc ff3d 	bl	8002a48 <HAL_GetTick>
 8005bce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bd0:	e008      	b.n	8005be4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bd2:	f7fc ff39 	bl	8002a48 <HAL_GetTick>
 8005bd6:	4602      	mov	r2, r0
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	1ad3      	subs	r3, r2, r3
 8005bdc:	2b64      	cmp	r3, #100	; 0x64
 8005bde:	d901      	bls.n	8005be4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005be0:	2303      	movs	r3, #3
 8005be2:	e103      	b.n	8005dec <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005be4:	4b75      	ldr	r3, [pc, #468]	; (8005dbc <HAL_RCC_OscConfig+0x4c8>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d0f0      	beq.n	8005bd2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d106      	bne.n	8005c06 <HAL_RCC_OscConfig+0x312>
 8005bf8:	4b6f      	ldr	r3, [pc, #444]	; (8005db8 <HAL_RCC_OscConfig+0x4c4>)
 8005bfa:	6a1b      	ldr	r3, [r3, #32]
 8005bfc:	4a6e      	ldr	r2, [pc, #440]	; (8005db8 <HAL_RCC_OscConfig+0x4c4>)
 8005bfe:	f043 0301 	orr.w	r3, r3, #1
 8005c02:	6213      	str	r3, [r2, #32]
 8005c04:	e02d      	b.n	8005c62 <HAL_RCC_OscConfig+0x36e>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d10c      	bne.n	8005c28 <HAL_RCC_OscConfig+0x334>
 8005c0e:	4b6a      	ldr	r3, [pc, #424]	; (8005db8 <HAL_RCC_OscConfig+0x4c4>)
 8005c10:	6a1b      	ldr	r3, [r3, #32]
 8005c12:	4a69      	ldr	r2, [pc, #420]	; (8005db8 <HAL_RCC_OscConfig+0x4c4>)
 8005c14:	f023 0301 	bic.w	r3, r3, #1
 8005c18:	6213      	str	r3, [r2, #32]
 8005c1a:	4b67      	ldr	r3, [pc, #412]	; (8005db8 <HAL_RCC_OscConfig+0x4c4>)
 8005c1c:	6a1b      	ldr	r3, [r3, #32]
 8005c1e:	4a66      	ldr	r2, [pc, #408]	; (8005db8 <HAL_RCC_OscConfig+0x4c4>)
 8005c20:	f023 0304 	bic.w	r3, r3, #4
 8005c24:	6213      	str	r3, [r2, #32]
 8005c26:	e01c      	b.n	8005c62 <HAL_RCC_OscConfig+0x36e>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	2b05      	cmp	r3, #5
 8005c2e:	d10c      	bne.n	8005c4a <HAL_RCC_OscConfig+0x356>
 8005c30:	4b61      	ldr	r3, [pc, #388]	; (8005db8 <HAL_RCC_OscConfig+0x4c4>)
 8005c32:	6a1b      	ldr	r3, [r3, #32]
 8005c34:	4a60      	ldr	r2, [pc, #384]	; (8005db8 <HAL_RCC_OscConfig+0x4c4>)
 8005c36:	f043 0304 	orr.w	r3, r3, #4
 8005c3a:	6213      	str	r3, [r2, #32]
 8005c3c:	4b5e      	ldr	r3, [pc, #376]	; (8005db8 <HAL_RCC_OscConfig+0x4c4>)
 8005c3e:	6a1b      	ldr	r3, [r3, #32]
 8005c40:	4a5d      	ldr	r2, [pc, #372]	; (8005db8 <HAL_RCC_OscConfig+0x4c4>)
 8005c42:	f043 0301 	orr.w	r3, r3, #1
 8005c46:	6213      	str	r3, [r2, #32]
 8005c48:	e00b      	b.n	8005c62 <HAL_RCC_OscConfig+0x36e>
 8005c4a:	4b5b      	ldr	r3, [pc, #364]	; (8005db8 <HAL_RCC_OscConfig+0x4c4>)
 8005c4c:	6a1b      	ldr	r3, [r3, #32]
 8005c4e:	4a5a      	ldr	r2, [pc, #360]	; (8005db8 <HAL_RCC_OscConfig+0x4c4>)
 8005c50:	f023 0301 	bic.w	r3, r3, #1
 8005c54:	6213      	str	r3, [r2, #32]
 8005c56:	4b58      	ldr	r3, [pc, #352]	; (8005db8 <HAL_RCC_OscConfig+0x4c4>)
 8005c58:	6a1b      	ldr	r3, [r3, #32]
 8005c5a:	4a57      	ldr	r2, [pc, #348]	; (8005db8 <HAL_RCC_OscConfig+0x4c4>)
 8005c5c:	f023 0304 	bic.w	r3, r3, #4
 8005c60:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d015      	beq.n	8005c96 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c6a:	f7fc feed 	bl	8002a48 <HAL_GetTick>
 8005c6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c70:	e00a      	b.n	8005c88 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c72:	f7fc fee9 	bl	8002a48 <HAL_GetTick>
 8005c76:	4602      	mov	r2, r0
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	1ad3      	subs	r3, r2, r3
 8005c7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d901      	bls.n	8005c88 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005c84:	2303      	movs	r3, #3
 8005c86:	e0b1      	b.n	8005dec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c88:	4b4b      	ldr	r3, [pc, #300]	; (8005db8 <HAL_RCC_OscConfig+0x4c4>)
 8005c8a:	6a1b      	ldr	r3, [r3, #32]
 8005c8c:	f003 0302 	and.w	r3, r3, #2
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d0ee      	beq.n	8005c72 <HAL_RCC_OscConfig+0x37e>
 8005c94:	e014      	b.n	8005cc0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c96:	f7fc fed7 	bl	8002a48 <HAL_GetTick>
 8005c9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c9c:	e00a      	b.n	8005cb4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c9e:	f7fc fed3 	bl	8002a48 <HAL_GetTick>
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	1ad3      	subs	r3, r2, r3
 8005ca8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d901      	bls.n	8005cb4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005cb0:	2303      	movs	r3, #3
 8005cb2:	e09b      	b.n	8005dec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cb4:	4b40      	ldr	r3, [pc, #256]	; (8005db8 <HAL_RCC_OscConfig+0x4c4>)
 8005cb6:	6a1b      	ldr	r3, [r3, #32]
 8005cb8:	f003 0302 	and.w	r3, r3, #2
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d1ee      	bne.n	8005c9e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005cc0:	7dfb      	ldrb	r3, [r7, #23]
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d105      	bne.n	8005cd2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cc6:	4b3c      	ldr	r3, [pc, #240]	; (8005db8 <HAL_RCC_OscConfig+0x4c4>)
 8005cc8:	69db      	ldr	r3, [r3, #28]
 8005cca:	4a3b      	ldr	r2, [pc, #236]	; (8005db8 <HAL_RCC_OscConfig+0x4c4>)
 8005ccc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cd0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	69db      	ldr	r3, [r3, #28]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	f000 8087 	beq.w	8005dea <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005cdc:	4b36      	ldr	r3, [pc, #216]	; (8005db8 <HAL_RCC_OscConfig+0x4c4>)
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	f003 030c 	and.w	r3, r3, #12
 8005ce4:	2b08      	cmp	r3, #8
 8005ce6:	d061      	beq.n	8005dac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	69db      	ldr	r3, [r3, #28]
 8005cec:	2b02      	cmp	r3, #2
 8005cee:	d146      	bne.n	8005d7e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cf0:	4b33      	ldr	r3, [pc, #204]	; (8005dc0 <HAL_RCC_OscConfig+0x4cc>)
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cf6:	f7fc fea7 	bl	8002a48 <HAL_GetTick>
 8005cfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005cfc:	e008      	b.n	8005d10 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cfe:	f7fc fea3 	bl	8002a48 <HAL_GetTick>
 8005d02:	4602      	mov	r2, r0
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	1ad3      	subs	r3, r2, r3
 8005d08:	2b02      	cmp	r3, #2
 8005d0a:	d901      	bls.n	8005d10 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005d0c:	2303      	movs	r3, #3
 8005d0e:	e06d      	b.n	8005dec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d10:	4b29      	ldr	r3, [pc, #164]	; (8005db8 <HAL_RCC_OscConfig+0x4c4>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d1f0      	bne.n	8005cfe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6a1b      	ldr	r3, [r3, #32]
 8005d20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d24:	d108      	bne.n	8005d38 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005d26:	4b24      	ldr	r3, [pc, #144]	; (8005db8 <HAL_RCC_OscConfig+0x4c4>)
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	4921      	ldr	r1, [pc, #132]	; (8005db8 <HAL_RCC_OscConfig+0x4c4>)
 8005d34:	4313      	orrs	r3, r2
 8005d36:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d38:	4b1f      	ldr	r3, [pc, #124]	; (8005db8 <HAL_RCC_OscConfig+0x4c4>)
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6a19      	ldr	r1, [r3, #32]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d48:	430b      	orrs	r3, r1
 8005d4a:	491b      	ldr	r1, [pc, #108]	; (8005db8 <HAL_RCC_OscConfig+0x4c4>)
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d50:	4b1b      	ldr	r3, [pc, #108]	; (8005dc0 <HAL_RCC_OscConfig+0x4cc>)
 8005d52:	2201      	movs	r2, #1
 8005d54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d56:	f7fc fe77 	bl	8002a48 <HAL_GetTick>
 8005d5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005d5c:	e008      	b.n	8005d70 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d5e:	f7fc fe73 	bl	8002a48 <HAL_GetTick>
 8005d62:	4602      	mov	r2, r0
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	1ad3      	subs	r3, r2, r3
 8005d68:	2b02      	cmp	r3, #2
 8005d6a:	d901      	bls.n	8005d70 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005d6c:	2303      	movs	r3, #3
 8005d6e:	e03d      	b.n	8005dec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005d70:	4b11      	ldr	r3, [pc, #68]	; (8005db8 <HAL_RCC_OscConfig+0x4c4>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d0f0      	beq.n	8005d5e <HAL_RCC_OscConfig+0x46a>
 8005d7c:	e035      	b.n	8005dea <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d7e:	4b10      	ldr	r3, [pc, #64]	; (8005dc0 <HAL_RCC_OscConfig+0x4cc>)
 8005d80:	2200      	movs	r2, #0
 8005d82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d84:	f7fc fe60 	bl	8002a48 <HAL_GetTick>
 8005d88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d8a:	e008      	b.n	8005d9e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d8c:	f7fc fe5c 	bl	8002a48 <HAL_GetTick>
 8005d90:	4602      	mov	r2, r0
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	1ad3      	subs	r3, r2, r3
 8005d96:	2b02      	cmp	r3, #2
 8005d98:	d901      	bls.n	8005d9e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005d9a:	2303      	movs	r3, #3
 8005d9c:	e026      	b.n	8005dec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d9e:	4b06      	ldr	r3, [pc, #24]	; (8005db8 <HAL_RCC_OscConfig+0x4c4>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d1f0      	bne.n	8005d8c <HAL_RCC_OscConfig+0x498>
 8005daa:	e01e      	b.n	8005dea <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	69db      	ldr	r3, [r3, #28]
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d107      	bne.n	8005dc4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	e019      	b.n	8005dec <HAL_RCC_OscConfig+0x4f8>
 8005db8:	40021000 	.word	0x40021000
 8005dbc:	40007000 	.word	0x40007000
 8005dc0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005dc4:	4b0b      	ldr	r3, [pc, #44]	; (8005df4 <HAL_RCC_OscConfig+0x500>)
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6a1b      	ldr	r3, [r3, #32]
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d106      	bne.n	8005de6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d001      	beq.n	8005dea <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e000      	b.n	8005dec <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005dea:	2300      	movs	r3, #0
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3718      	adds	r7, #24
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}
 8005df4:	40021000 	.word	0x40021000

08005df8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d101      	bne.n	8005e0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	e0d0      	b.n	8005fae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005e0c:	4b6a      	ldr	r3, [pc, #424]	; (8005fb8 <HAL_RCC_ClockConfig+0x1c0>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 0307 	and.w	r3, r3, #7
 8005e14:	683a      	ldr	r2, [r7, #0]
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d910      	bls.n	8005e3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e1a:	4b67      	ldr	r3, [pc, #412]	; (8005fb8 <HAL_RCC_ClockConfig+0x1c0>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f023 0207 	bic.w	r2, r3, #7
 8005e22:	4965      	ldr	r1, [pc, #404]	; (8005fb8 <HAL_RCC_ClockConfig+0x1c0>)
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e2a:	4b63      	ldr	r3, [pc, #396]	; (8005fb8 <HAL_RCC_ClockConfig+0x1c0>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 0307 	and.w	r3, r3, #7
 8005e32:	683a      	ldr	r2, [r7, #0]
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d001      	beq.n	8005e3c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e0b8      	b.n	8005fae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f003 0302 	and.w	r3, r3, #2
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d020      	beq.n	8005e8a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f003 0304 	and.w	r3, r3, #4
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d005      	beq.n	8005e60 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e54:	4b59      	ldr	r3, [pc, #356]	; (8005fbc <HAL_RCC_ClockConfig+0x1c4>)
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	4a58      	ldr	r2, [pc, #352]	; (8005fbc <HAL_RCC_ClockConfig+0x1c4>)
 8005e5a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005e5e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 0308 	and.w	r3, r3, #8
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d005      	beq.n	8005e78 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e6c:	4b53      	ldr	r3, [pc, #332]	; (8005fbc <HAL_RCC_ClockConfig+0x1c4>)
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	4a52      	ldr	r2, [pc, #328]	; (8005fbc <HAL_RCC_ClockConfig+0x1c4>)
 8005e72:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005e76:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e78:	4b50      	ldr	r3, [pc, #320]	; (8005fbc <HAL_RCC_ClockConfig+0x1c4>)
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	494d      	ldr	r1, [pc, #308]	; (8005fbc <HAL_RCC_ClockConfig+0x1c4>)
 8005e86:	4313      	orrs	r3, r2
 8005e88:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f003 0301 	and.w	r3, r3, #1
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d040      	beq.n	8005f18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d107      	bne.n	8005eae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e9e:	4b47      	ldr	r3, [pc, #284]	; (8005fbc <HAL_RCC_ClockConfig+0x1c4>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d115      	bne.n	8005ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e07f      	b.n	8005fae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	2b02      	cmp	r3, #2
 8005eb4:	d107      	bne.n	8005ec6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005eb6:	4b41      	ldr	r3, [pc, #260]	; (8005fbc <HAL_RCC_ClockConfig+0x1c4>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d109      	bne.n	8005ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e073      	b.n	8005fae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ec6:	4b3d      	ldr	r3, [pc, #244]	; (8005fbc <HAL_RCC_ClockConfig+0x1c4>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 0302 	and.w	r3, r3, #2
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d101      	bne.n	8005ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e06b      	b.n	8005fae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ed6:	4b39      	ldr	r3, [pc, #228]	; (8005fbc <HAL_RCC_ClockConfig+0x1c4>)
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	f023 0203 	bic.w	r2, r3, #3
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	4936      	ldr	r1, [pc, #216]	; (8005fbc <HAL_RCC_ClockConfig+0x1c4>)
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ee8:	f7fc fdae 	bl	8002a48 <HAL_GetTick>
 8005eec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005eee:	e00a      	b.n	8005f06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ef0:	f7fc fdaa 	bl	8002a48 <HAL_GetTick>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d901      	bls.n	8005f06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005f02:	2303      	movs	r3, #3
 8005f04:	e053      	b.n	8005fae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f06:	4b2d      	ldr	r3, [pc, #180]	; (8005fbc <HAL_RCC_ClockConfig+0x1c4>)
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	f003 020c 	and.w	r2, r3, #12
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d1eb      	bne.n	8005ef0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005f18:	4b27      	ldr	r3, [pc, #156]	; (8005fb8 <HAL_RCC_ClockConfig+0x1c0>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f003 0307 	and.w	r3, r3, #7
 8005f20:	683a      	ldr	r2, [r7, #0]
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d210      	bcs.n	8005f48 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f26:	4b24      	ldr	r3, [pc, #144]	; (8005fb8 <HAL_RCC_ClockConfig+0x1c0>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f023 0207 	bic.w	r2, r3, #7
 8005f2e:	4922      	ldr	r1, [pc, #136]	; (8005fb8 <HAL_RCC_ClockConfig+0x1c0>)
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f36:	4b20      	ldr	r3, [pc, #128]	; (8005fb8 <HAL_RCC_ClockConfig+0x1c0>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f003 0307 	and.w	r3, r3, #7
 8005f3e:	683a      	ldr	r2, [r7, #0]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d001      	beq.n	8005f48 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	e032      	b.n	8005fae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f003 0304 	and.w	r3, r3, #4
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d008      	beq.n	8005f66 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f54:	4b19      	ldr	r3, [pc, #100]	; (8005fbc <HAL_RCC_ClockConfig+0x1c4>)
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	4916      	ldr	r1, [pc, #88]	; (8005fbc <HAL_RCC_ClockConfig+0x1c4>)
 8005f62:	4313      	orrs	r3, r2
 8005f64:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f003 0308 	and.w	r3, r3, #8
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d009      	beq.n	8005f86 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005f72:	4b12      	ldr	r3, [pc, #72]	; (8005fbc <HAL_RCC_ClockConfig+0x1c4>)
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	00db      	lsls	r3, r3, #3
 8005f80:	490e      	ldr	r1, [pc, #56]	; (8005fbc <HAL_RCC_ClockConfig+0x1c4>)
 8005f82:	4313      	orrs	r3, r2
 8005f84:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005f86:	f000 f821 	bl	8005fcc <HAL_RCC_GetSysClockFreq>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	4b0b      	ldr	r3, [pc, #44]	; (8005fbc <HAL_RCC_ClockConfig+0x1c4>)
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	091b      	lsrs	r3, r3, #4
 8005f92:	f003 030f 	and.w	r3, r3, #15
 8005f96:	490a      	ldr	r1, [pc, #40]	; (8005fc0 <HAL_RCC_ClockConfig+0x1c8>)
 8005f98:	5ccb      	ldrb	r3, [r1, r3]
 8005f9a:	fa22 f303 	lsr.w	r3, r2, r3
 8005f9e:	4a09      	ldr	r2, [pc, #36]	; (8005fc4 <HAL_RCC_ClockConfig+0x1cc>)
 8005fa0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005fa2:	4b09      	ldr	r3, [pc, #36]	; (8005fc8 <HAL_RCC_ClockConfig+0x1d0>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f7fc fd0c 	bl	80029c4 <HAL_InitTick>

  return HAL_OK;
 8005fac:	2300      	movs	r3, #0
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3710      	adds	r7, #16
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}
 8005fb6:	bf00      	nop
 8005fb8:	40022000 	.word	0x40022000
 8005fbc:	40021000 	.word	0x40021000
 8005fc0:	0800e418 	.word	0x0800e418
 8005fc4:	20000004 	.word	0x20000004
 8005fc8:	20000008 	.word	0x20000008

08005fcc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005fcc:	b490      	push	{r4, r7}
 8005fce:	b08a      	sub	sp, #40	; 0x28
 8005fd0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005fd2:	4b29      	ldr	r3, [pc, #164]	; (8006078 <HAL_RCC_GetSysClockFreq+0xac>)
 8005fd4:	1d3c      	adds	r4, r7, #4
 8005fd6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005fd8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005fdc:	f240 2301 	movw	r3, #513	; 0x201
 8005fe0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	61fb      	str	r3, [r7, #28]
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	61bb      	str	r3, [r7, #24]
 8005fea:	2300      	movs	r3, #0
 8005fec:	627b      	str	r3, [r7, #36]	; 0x24
 8005fee:	2300      	movs	r3, #0
 8005ff0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005ff6:	4b21      	ldr	r3, [pc, #132]	; (800607c <HAL_RCC_GetSysClockFreq+0xb0>)
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005ffc:	69fb      	ldr	r3, [r7, #28]
 8005ffe:	f003 030c 	and.w	r3, r3, #12
 8006002:	2b04      	cmp	r3, #4
 8006004:	d002      	beq.n	800600c <HAL_RCC_GetSysClockFreq+0x40>
 8006006:	2b08      	cmp	r3, #8
 8006008:	d003      	beq.n	8006012 <HAL_RCC_GetSysClockFreq+0x46>
 800600a:	e02b      	b.n	8006064 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800600c:	4b1c      	ldr	r3, [pc, #112]	; (8006080 <HAL_RCC_GetSysClockFreq+0xb4>)
 800600e:	623b      	str	r3, [r7, #32]
      break;
 8006010:	e02b      	b.n	800606a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006012:	69fb      	ldr	r3, [r7, #28]
 8006014:	0c9b      	lsrs	r3, r3, #18
 8006016:	f003 030f 	and.w	r3, r3, #15
 800601a:	3328      	adds	r3, #40	; 0x28
 800601c:	443b      	add	r3, r7
 800601e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006022:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800602a:	2b00      	cmp	r3, #0
 800602c:	d012      	beq.n	8006054 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800602e:	4b13      	ldr	r3, [pc, #76]	; (800607c <HAL_RCC_GetSysClockFreq+0xb0>)
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	0c5b      	lsrs	r3, r3, #17
 8006034:	f003 0301 	and.w	r3, r3, #1
 8006038:	3328      	adds	r3, #40	; 0x28
 800603a:	443b      	add	r3, r7
 800603c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006040:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	4a0e      	ldr	r2, [pc, #56]	; (8006080 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006046:	fb03 f202 	mul.w	r2, r3, r2
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006050:	627b      	str	r3, [r7, #36]	; 0x24
 8006052:	e004      	b.n	800605e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	4a0b      	ldr	r2, [pc, #44]	; (8006084 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006058:	fb02 f303 	mul.w	r3, r2, r3
 800605c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800605e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006060:	623b      	str	r3, [r7, #32]
      break;
 8006062:	e002      	b.n	800606a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006064:	4b08      	ldr	r3, [pc, #32]	; (8006088 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006066:	623b      	str	r3, [r7, #32]
      break;
 8006068:	bf00      	nop
    }
  }
  return sysclockfreq;
 800606a:	6a3b      	ldr	r3, [r7, #32]
}
 800606c:	4618      	mov	r0, r3
 800606e:	3728      	adds	r7, #40	; 0x28
 8006070:	46bd      	mov	sp, r7
 8006072:	bc90      	pop	{r4, r7}
 8006074:	4770      	bx	lr
 8006076:	bf00      	nop
 8006078:	0800e204 	.word	0x0800e204
 800607c:	40021000 	.word	0x40021000
 8006080:	00f42400 	.word	0x00f42400
 8006084:	003d0900 	.word	0x003d0900
 8006088:	007a1200 	.word	0x007a1200

0800608c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800608c:	b480      	push	{r7}
 800608e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006090:	4b02      	ldr	r3, [pc, #8]	; (800609c <HAL_RCC_GetHCLKFreq+0x10>)
 8006092:	681b      	ldr	r3, [r3, #0]
}
 8006094:	4618      	mov	r0, r3
 8006096:	46bd      	mov	sp, r7
 8006098:	bc80      	pop	{r7}
 800609a:	4770      	bx	lr
 800609c:	20000004 	.word	0x20000004

080060a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80060a4:	f7ff fff2 	bl	800608c <HAL_RCC_GetHCLKFreq>
 80060a8:	4602      	mov	r2, r0
 80060aa:	4b05      	ldr	r3, [pc, #20]	; (80060c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	0a1b      	lsrs	r3, r3, #8
 80060b0:	f003 0307 	and.w	r3, r3, #7
 80060b4:	4903      	ldr	r1, [pc, #12]	; (80060c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80060b6:	5ccb      	ldrb	r3, [r1, r3]
 80060b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060bc:	4618      	mov	r0, r3
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	40021000 	.word	0x40021000
 80060c4:	0800e428 	.word	0x0800e428

080060c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80060cc:	f7ff ffde 	bl	800608c <HAL_RCC_GetHCLKFreq>
 80060d0:	4602      	mov	r2, r0
 80060d2:	4b05      	ldr	r3, [pc, #20]	; (80060e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	0adb      	lsrs	r3, r3, #11
 80060d8:	f003 0307 	and.w	r3, r3, #7
 80060dc:	4903      	ldr	r1, [pc, #12]	; (80060ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80060de:	5ccb      	ldrb	r3, [r1, r3]
 80060e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	bd80      	pop	{r7, pc}
 80060e8:	40021000 	.word	0x40021000
 80060ec:	0800e428 	.word	0x0800e428

080060f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b085      	sub	sp, #20
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80060f8:	4b0a      	ldr	r3, [pc, #40]	; (8006124 <RCC_Delay+0x34>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a0a      	ldr	r2, [pc, #40]	; (8006128 <RCC_Delay+0x38>)
 80060fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006102:	0a5b      	lsrs	r3, r3, #9
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	fb02 f303 	mul.w	r3, r2, r3
 800610a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800610c:	bf00      	nop
  }
  while (Delay --);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	1e5a      	subs	r2, r3, #1
 8006112:	60fa      	str	r2, [r7, #12]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d1f9      	bne.n	800610c <RCC_Delay+0x1c>
}
 8006118:	bf00      	nop
 800611a:	bf00      	nop
 800611c:	3714      	adds	r7, #20
 800611e:	46bd      	mov	sp, r7
 8006120:	bc80      	pop	{r7}
 8006122:	4770      	bx	lr
 8006124:	20000004 	.word	0x20000004
 8006128:	10624dd3 	.word	0x10624dd3

0800612c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b086      	sub	sp, #24
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006134:	2300      	movs	r3, #0
 8006136:	613b      	str	r3, [r7, #16]
 8006138:	2300      	movs	r3, #0
 800613a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f003 0301 	and.w	r3, r3, #1
 8006144:	2b00      	cmp	r3, #0
 8006146:	d07d      	beq.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006148:	2300      	movs	r3, #0
 800614a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800614c:	4b4f      	ldr	r3, [pc, #316]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800614e:	69db      	ldr	r3, [r3, #28]
 8006150:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006154:	2b00      	cmp	r3, #0
 8006156:	d10d      	bne.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006158:	4b4c      	ldr	r3, [pc, #304]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800615a:	69db      	ldr	r3, [r3, #28]
 800615c:	4a4b      	ldr	r2, [pc, #300]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800615e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006162:	61d3      	str	r3, [r2, #28]
 8006164:	4b49      	ldr	r3, [pc, #292]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006166:	69db      	ldr	r3, [r3, #28]
 8006168:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800616c:	60bb      	str	r3, [r7, #8]
 800616e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006170:	2301      	movs	r3, #1
 8006172:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006174:	4b46      	ldr	r3, [pc, #280]	; (8006290 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800617c:	2b00      	cmp	r3, #0
 800617e:	d118      	bne.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006180:	4b43      	ldr	r3, [pc, #268]	; (8006290 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a42      	ldr	r2, [pc, #264]	; (8006290 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006186:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800618a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800618c:	f7fc fc5c 	bl	8002a48 <HAL_GetTick>
 8006190:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006192:	e008      	b.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006194:	f7fc fc58 	bl	8002a48 <HAL_GetTick>
 8006198:	4602      	mov	r2, r0
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	1ad3      	subs	r3, r2, r3
 800619e:	2b64      	cmp	r3, #100	; 0x64
 80061a0:	d901      	bls.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80061a2:	2303      	movs	r3, #3
 80061a4:	e06d      	b.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061a6:	4b3a      	ldr	r3, [pc, #232]	; (8006290 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d0f0      	beq.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80061b2:	4b36      	ldr	r3, [pc, #216]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061b4:	6a1b      	ldr	r3, [r3, #32]
 80061b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061ba:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d02e      	beq.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061ca:	68fa      	ldr	r2, [r7, #12]
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d027      	beq.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80061d0:	4b2e      	ldr	r3, [pc, #184]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061d2:	6a1b      	ldr	r3, [r3, #32]
 80061d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061d8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80061da:	4b2e      	ldr	r3, [pc, #184]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80061dc:	2201      	movs	r2, #1
 80061de:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80061e0:	4b2c      	ldr	r3, [pc, #176]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80061e2:	2200      	movs	r2, #0
 80061e4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80061e6:	4a29      	ldr	r2, [pc, #164]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f003 0301 	and.w	r3, r3, #1
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d014      	beq.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061f6:	f7fc fc27 	bl	8002a48 <HAL_GetTick>
 80061fa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061fc:	e00a      	b.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061fe:	f7fc fc23 	bl	8002a48 <HAL_GetTick>
 8006202:	4602      	mov	r2, r0
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	1ad3      	subs	r3, r2, r3
 8006208:	f241 3288 	movw	r2, #5000	; 0x1388
 800620c:	4293      	cmp	r3, r2
 800620e:	d901      	bls.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006210:	2303      	movs	r3, #3
 8006212:	e036      	b.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006214:	4b1d      	ldr	r3, [pc, #116]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006216:	6a1b      	ldr	r3, [r3, #32]
 8006218:	f003 0302 	and.w	r3, r3, #2
 800621c:	2b00      	cmp	r3, #0
 800621e:	d0ee      	beq.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006220:	4b1a      	ldr	r3, [pc, #104]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006222:	6a1b      	ldr	r3, [r3, #32]
 8006224:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	4917      	ldr	r1, [pc, #92]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800622e:	4313      	orrs	r3, r2
 8006230:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006232:	7dfb      	ldrb	r3, [r7, #23]
 8006234:	2b01      	cmp	r3, #1
 8006236:	d105      	bne.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006238:	4b14      	ldr	r3, [pc, #80]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800623a:	69db      	ldr	r3, [r3, #28]
 800623c:	4a13      	ldr	r2, [pc, #76]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800623e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006242:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 0302 	and.w	r3, r3, #2
 800624c:	2b00      	cmp	r3, #0
 800624e:	d008      	beq.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006250:	4b0e      	ldr	r3, [pc, #56]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	490b      	ldr	r1, [pc, #44]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800625e:	4313      	orrs	r3, r2
 8006260:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f003 0310 	and.w	r3, r3, #16
 800626a:	2b00      	cmp	r3, #0
 800626c:	d008      	beq.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800626e:	4b07      	ldr	r3, [pc, #28]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	695b      	ldr	r3, [r3, #20]
 800627a:	4904      	ldr	r1, [pc, #16]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800627c:	4313      	orrs	r3, r2
 800627e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006280:	2300      	movs	r3, #0
}
 8006282:	4618      	mov	r0, r3
 8006284:	3718      	adds	r7, #24
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
 800628a:	bf00      	nop
 800628c:	40021000 	.word	0x40021000
 8006290:	40007000 	.word	0x40007000
 8006294:	42420440 	.word	0x42420440

08006298 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b082      	sub	sp, #8
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d101      	bne.n	80062aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	e076      	b.n	8006398 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d108      	bne.n	80062c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062ba:	d009      	beq.n	80062d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	61da      	str	r2, [r3, #28]
 80062c2:	e005      	b.n	80062d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2200      	movs	r2, #0
 80062ce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d106      	bne.n	80062f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f7fc f92e 	bl	800254c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2202      	movs	r2, #2
 80062f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006306:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006318:	431a      	orrs	r2, r3
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	68db      	ldr	r3, [r3, #12]
 800631e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006322:	431a      	orrs	r2, r3
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	691b      	ldr	r3, [r3, #16]
 8006328:	f003 0302 	and.w	r3, r3, #2
 800632c:	431a      	orrs	r2, r3
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	695b      	ldr	r3, [r3, #20]
 8006332:	f003 0301 	and.w	r3, r3, #1
 8006336:	431a      	orrs	r2, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	699b      	ldr	r3, [r3, #24]
 800633c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006340:	431a      	orrs	r2, r3
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	69db      	ldr	r3, [r3, #28]
 8006346:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800634a:	431a      	orrs	r2, r3
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6a1b      	ldr	r3, [r3, #32]
 8006350:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006354:	ea42 0103 	orr.w	r1, r2, r3
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800635c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	430a      	orrs	r2, r1
 8006366:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	699b      	ldr	r3, [r3, #24]
 800636c:	0c1a      	lsrs	r2, r3, #16
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f002 0204 	and.w	r2, r2, #4
 8006376:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	69da      	ldr	r2, [r3, #28]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006386:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2200      	movs	r2, #0
 800638c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2201      	movs	r2, #1
 8006392:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006396:	2300      	movs	r3, #0
}
 8006398:	4618      	mov	r0, r3
 800639a:	3708      	adds	r7, #8
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b086      	sub	sp, #24
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d101      	bne.n	80063b4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	e093      	b.n	80064dc <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063ba:	b2db      	uxtb	r3, r3
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d106      	bne.n	80063ce <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f7fc f945 	bl	8002658 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2202      	movs	r2, #2
 80063d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	687a      	ldr	r2, [r7, #4]
 80063de:	6812      	ldr	r2, [r2, #0]
 80063e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063e4:	f023 0307 	bic.w	r3, r3, #7
 80063e8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	3304      	adds	r3, #4
 80063f2:	4619      	mov	r1, r3
 80063f4:	4610      	mov	r0, r2
 80063f6:	f000 f875 	bl	80064e4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	699b      	ldr	r3, [r3, #24]
 8006408:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	6a1b      	ldr	r3, [r3, #32]
 8006410:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	697a      	ldr	r2, [r7, #20]
 8006418:	4313      	orrs	r3, r2
 800641a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006422:	f023 0303 	bic.w	r3, r3, #3
 8006426:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	689a      	ldr	r2, [r3, #8]
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	699b      	ldr	r3, [r3, #24]
 8006430:	021b      	lsls	r3, r3, #8
 8006432:	4313      	orrs	r3, r2
 8006434:	693a      	ldr	r2, [r7, #16]
 8006436:	4313      	orrs	r3, r2
 8006438:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006440:	f023 030c 	bic.w	r3, r3, #12
 8006444:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800644c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006450:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	68da      	ldr	r2, [r3, #12]
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	69db      	ldr	r3, [r3, #28]
 800645a:	021b      	lsls	r3, r3, #8
 800645c:	4313      	orrs	r3, r2
 800645e:	693a      	ldr	r2, [r7, #16]
 8006460:	4313      	orrs	r3, r2
 8006462:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	691b      	ldr	r3, [r3, #16]
 8006468:	011a      	lsls	r2, r3, #4
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	6a1b      	ldr	r3, [r3, #32]
 800646e:	031b      	lsls	r3, r3, #12
 8006470:	4313      	orrs	r3, r2
 8006472:	693a      	ldr	r2, [r7, #16]
 8006474:	4313      	orrs	r3, r2
 8006476:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800647e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	685a      	ldr	r2, [r3, #4]
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	695b      	ldr	r3, [r3, #20]
 8006488:	011b      	lsls	r3, r3, #4
 800648a:	4313      	orrs	r3, r2
 800648c:	68fa      	ldr	r2, [r7, #12]
 800648e:	4313      	orrs	r3, r2
 8006490:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	697a      	ldr	r2, [r7, #20]
 8006498:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	693a      	ldr	r2, [r7, #16]
 80064a0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	68fa      	ldr	r2, [r7, #12]
 80064a8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2201      	movs	r2, #1
 80064ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2201      	movs	r2, #1
 80064b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2201      	movs	r2, #1
 80064be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2201      	movs	r2, #1
 80064c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2201      	movs	r2, #1
 80064ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2201      	movs	r2, #1
 80064d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064da:	2300      	movs	r3, #0
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3718      	adds	r7, #24
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}

080064e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b085      	sub	sp, #20
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	4a33      	ldr	r2, [pc, #204]	; (80065c4 <TIM_Base_SetConfig+0xe0>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d013      	beq.n	8006524 <TIM_Base_SetConfig+0x40>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4a32      	ldr	r2, [pc, #200]	; (80065c8 <TIM_Base_SetConfig+0xe4>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d00f      	beq.n	8006524 <TIM_Base_SetConfig+0x40>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800650a:	d00b      	beq.n	8006524 <TIM_Base_SetConfig+0x40>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4a2f      	ldr	r2, [pc, #188]	; (80065cc <TIM_Base_SetConfig+0xe8>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d007      	beq.n	8006524 <TIM_Base_SetConfig+0x40>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4a2e      	ldr	r2, [pc, #184]	; (80065d0 <TIM_Base_SetConfig+0xec>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d003      	beq.n	8006524 <TIM_Base_SetConfig+0x40>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	4a2d      	ldr	r2, [pc, #180]	; (80065d4 <TIM_Base_SetConfig+0xf0>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d108      	bne.n	8006536 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800652a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	68fa      	ldr	r2, [r7, #12]
 8006532:	4313      	orrs	r3, r2
 8006534:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4a22      	ldr	r2, [pc, #136]	; (80065c4 <TIM_Base_SetConfig+0xe0>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d013      	beq.n	8006566 <TIM_Base_SetConfig+0x82>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4a21      	ldr	r2, [pc, #132]	; (80065c8 <TIM_Base_SetConfig+0xe4>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d00f      	beq.n	8006566 <TIM_Base_SetConfig+0x82>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800654c:	d00b      	beq.n	8006566 <TIM_Base_SetConfig+0x82>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4a1e      	ldr	r2, [pc, #120]	; (80065cc <TIM_Base_SetConfig+0xe8>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d007      	beq.n	8006566 <TIM_Base_SetConfig+0x82>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a1d      	ldr	r2, [pc, #116]	; (80065d0 <TIM_Base_SetConfig+0xec>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d003      	beq.n	8006566 <TIM_Base_SetConfig+0x82>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4a1c      	ldr	r2, [pc, #112]	; (80065d4 <TIM_Base_SetConfig+0xf0>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d108      	bne.n	8006578 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800656c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	68db      	ldr	r3, [r3, #12]
 8006572:	68fa      	ldr	r2, [r7, #12]
 8006574:	4313      	orrs	r3, r2
 8006576:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	695b      	ldr	r3, [r3, #20]
 8006582:	4313      	orrs	r3, r2
 8006584:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	68fa      	ldr	r2, [r7, #12]
 800658a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	689a      	ldr	r2, [r3, #8]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	681a      	ldr	r2, [r3, #0]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	4a09      	ldr	r2, [pc, #36]	; (80065c4 <TIM_Base_SetConfig+0xe0>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d003      	beq.n	80065ac <TIM_Base_SetConfig+0xc8>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	4a08      	ldr	r2, [pc, #32]	; (80065c8 <TIM_Base_SetConfig+0xe4>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d103      	bne.n	80065b4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	691a      	ldr	r2, [r3, #16]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2201      	movs	r2, #1
 80065b8:	615a      	str	r2, [r3, #20]
}
 80065ba:	bf00      	nop
 80065bc:	3714      	adds	r7, #20
 80065be:	46bd      	mov	sp, r7
 80065c0:	bc80      	pop	{r7}
 80065c2:	4770      	bx	lr
 80065c4:	40012c00 	.word	0x40012c00
 80065c8:	40013400 	.word	0x40013400
 80065cc:	40000400 	.word	0x40000400
 80065d0:	40000800 	.word	0x40000800
 80065d4:	40000c00 	.word	0x40000c00

080065d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80065d8:	b480      	push	{r7}
 80065da:	b085      	sub	sp, #20
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d101      	bne.n	80065f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80065ec:	2302      	movs	r3, #2
 80065ee:	e050      	b.n	8006692 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2201      	movs	r2, #1
 80065f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2202      	movs	r2, #2
 80065fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006616:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	68fa      	ldr	r2, [r7, #12]
 800661e:	4313      	orrs	r3, r2
 8006620:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	68fa      	ldr	r2, [r7, #12]
 8006628:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a1b      	ldr	r2, [pc, #108]	; (800669c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d018      	beq.n	8006666 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a19      	ldr	r2, [pc, #100]	; (80066a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d013      	beq.n	8006666 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006646:	d00e      	beq.n	8006666 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a15      	ldr	r2, [pc, #84]	; (80066a4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d009      	beq.n	8006666 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a14      	ldr	r2, [pc, #80]	; (80066a8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d004      	beq.n	8006666 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a12      	ldr	r2, [pc, #72]	; (80066ac <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d10c      	bne.n	8006680 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800666c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	68ba      	ldr	r2, [r7, #8]
 8006674:	4313      	orrs	r3, r2
 8006676:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	68ba      	ldr	r2, [r7, #8]
 800667e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2201      	movs	r2, #1
 8006684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2200      	movs	r2, #0
 800668c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006690:	2300      	movs	r3, #0
}
 8006692:	4618      	mov	r0, r3
 8006694:	3714      	adds	r7, #20
 8006696:	46bd      	mov	sp, r7
 8006698:	bc80      	pop	{r7}
 800669a:	4770      	bx	lr
 800669c:	40012c00 	.word	0x40012c00
 80066a0:	40013400 	.word	0x40013400
 80066a4:	40000400 	.word	0x40000400
 80066a8:	40000800 	.word	0x40000800
 80066ac:	40000c00 	.word	0x40000c00

080066b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b082      	sub	sp, #8
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d101      	bne.n	80066c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	e03f      	b.n	8006742 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d106      	bne.n	80066dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2200      	movs	r2, #0
 80066d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f7fc f84e 	bl	8002778 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2224      	movs	r2, #36	; 0x24
 80066e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	68da      	ldr	r2, [r3, #12]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80066f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f000 f829 	bl	800674c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	691a      	ldr	r2, [r3, #16]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006708:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	695a      	ldr	r2, [r3, #20]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006718:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	68da      	ldr	r2, [r3, #12]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006728:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2200      	movs	r2, #0
 800672e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2220      	movs	r2, #32
 8006734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2220      	movs	r2, #32
 800673c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006740:	2300      	movs	r3, #0
}
 8006742:	4618      	mov	r0, r3
 8006744:	3708      	adds	r7, #8
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}
	...

0800674c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b084      	sub	sp, #16
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	691b      	ldr	r3, [r3, #16]
 800675a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	68da      	ldr	r2, [r3, #12]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	430a      	orrs	r2, r1
 8006768:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	689a      	ldr	r2, [r3, #8]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	691b      	ldr	r3, [r3, #16]
 8006772:	431a      	orrs	r2, r3
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	695b      	ldr	r3, [r3, #20]
 8006778:	4313      	orrs	r3, r2
 800677a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	68db      	ldr	r3, [r3, #12]
 8006782:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006786:	f023 030c 	bic.w	r3, r3, #12
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	6812      	ldr	r2, [r2, #0]
 800678e:	68b9      	ldr	r1, [r7, #8]
 8006790:	430b      	orrs	r3, r1
 8006792:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	695b      	ldr	r3, [r3, #20]
 800679a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	699a      	ldr	r2, [r3, #24]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	430a      	orrs	r2, r1
 80067a8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a2c      	ldr	r2, [pc, #176]	; (8006860 <UART_SetConfig+0x114>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d103      	bne.n	80067bc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80067b4:	f7ff fc88 	bl	80060c8 <HAL_RCC_GetPCLK2Freq>
 80067b8:	60f8      	str	r0, [r7, #12]
 80067ba:	e002      	b.n	80067c2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80067bc:	f7ff fc70 	bl	80060a0 <HAL_RCC_GetPCLK1Freq>
 80067c0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80067c2:	68fa      	ldr	r2, [r7, #12]
 80067c4:	4613      	mov	r3, r2
 80067c6:	009b      	lsls	r3, r3, #2
 80067c8:	4413      	add	r3, r2
 80067ca:	009a      	lsls	r2, r3, #2
 80067cc:	441a      	add	r2, r3
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	009b      	lsls	r3, r3, #2
 80067d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80067d8:	4a22      	ldr	r2, [pc, #136]	; (8006864 <UART_SetConfig+0x118>)
 80067da:	fba2 2303 	umull	r2, r3, r2, r3
 80067de:	095b      	lsrs	r3, r3, #5
 80067e0:	0119      	lsls	r1, r3, #4
 80067e2:	68fa      	ldr	r2, [r7, #12]
 80067e4:	4613      	mov	r3, r2
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	4413      	add	r3, r2
 80067ea:	009a      	lsls	r2, r3, #2
 80067ec:	441a      	add	r2, r3
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	009b      	lsls	r3, r3, #2
 80067f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80067f8:	4b1a      	ldr	r3, [pc, #104]	; (8006864 <UART_SetConfig+0x118>)
 80067fa:	fba3 0302 	umull	r0, r3, r3, r2
 80067fe:	095b      	lsrs	r3, r3, #5
 8006800:	2064      	movs	r0, #100	; 0x64
 8006802:	fb00 f303 	mul.w	r3, r0, r3
 8006806:	1ad3      	subs	r3, r2, r3
 8006808:	011b      	lsls	r3, r3, #4
 800680a:	3332      	adds	r3, #50	; 0x32
 800680c:	4a15      	ldr	r2, [pc, #84]	; (8006864 <UART_SetConfig+0x118>)
 800680e:	fba2 2303 	umull	r2, r3, r2, r3
 8006812:	095b      	lsrs	r3, r3, #5
 8006814:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006818:	4419      	add	r1, r3
 800681a:	68fa      	ldr	r2, [r7, #12]
 800681c:	4613      	mov	r3, r2
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	4413      	add	r3, r2
 8006822:	009a      	lsls	r2, r3, #2
 8006824:	441a      	add	r2, r3
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006830:	4b0c      	ldr	r3, [pc, #48]	; (8006864 <UART_SetConfig+0x118>)
 8006832:	fba3 0302 	umull	r0, r3, r3, r2
 8006836:	095b      	lsrs	r3, r3, #5
 8006838:	2064      	movs	r0, #100	; 0x64
 800683a:	fb00 f303 	mul.w	r3, r0, r3
 800683e:	1ad3      	subs	r3, r2, r3
 8006840:	011b      	lsls	r3, r3, #4
 8006842:	3332      	adds	r3, #50	; 0x32
 8006844:	4a07      	ldr	r2, [pc, #28]	; (8006864 <UART_SetConfig+0x118>)
 8006846:	fba2 2303 	umull	r2, r3, r2, r3
 800684a:	095b      	lsrs	r3, r3, #5
 800684c:	f003 020f 	and.w	r2, r3, #15
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	440a      	add	r2, r1
 8006856:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006858:	bf00      	nop
 800685a:	3710      	adds	r7, #16
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}
 8006860:	40013800 	.word	0x40013800
 8006864:	51eb851f 	.word	0x51eb851f

08006868 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006868:	b084      	sub	sp, #16
 800686a:	b480      	push	{r7}
 800686c:	b083      	sub	sp, #12
 800686e:	af00      	add	r7, sp, #0
 8006870:	6078      	str	r0, [r7, #4]
 8006872:	f107 0014 	add.w	r0, r7, #20
 8006876:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800687a:	2300      	movs	r3, #0
}
 800687c:	4618      	mov	r0, r3
 800687e:	370c      	adds	r7, #12
 8006880:	46bd      	mov	sp, r7
 8006882:	bc80      	pop	{r7}
 8006884:	b004      	add	sp, #16
 8006886:	4770      	bx	lr

08006888 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006888:	b480      	push	{r7}
 800688a:	b085      	sub	sp, #20
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006898:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800689c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	b29a      	uxth	r2, r3
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80068a8:	2300      	movs	r3, #0
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3714      	adds	r7, #20
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bc80      	pop	{r7}
 80068b2:	4770      	bx	lr

080068b4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b085      	sub	sp, #20
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80068bc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80068c0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80068c8:	b29a      	uxth	r2, r3
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	43db      	mvns	r3, r3
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	4013      	ands	r3, r2
 80068d4:	b29a      	uxth	r2, r3
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80068dc:	2300      	movs	r3, #0
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3714      	adds	r7, #20
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bc80      	pop	{r7}
 80068e6:	4770      	bx	lr

080068e8 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b083      	sub	sp, #12
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	460b      	mov	r3, r1
 80068f2:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80068f4:	2300      	movs	r3, #0
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	370c      	adds	r7, #12
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bc80      	pop	{r7}
 80068fe:	4770      	bx	lr

08006900 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006900:	b084      	sub	sp, #16
 8006902:	b480      	push	{r7}
 8006904:	b083      	sub	sp, #12
 8006906:	af00      	add	r7, sp, #0
 8006908:	6078      	str	r0, [r7, #4]
 800690a:	f107 0014 	add.w	r0, r7, #20
 800690e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2201      	movs	r2, #1
 8006916:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2200      	movs	r2, #0
 800691e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2200      	movs	r2, #0
 8006926:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006932:	2300      	movs	r3, #0
}
 8006934:	4618      	mov	r0, r3
 8006936:	370c      	adds	r7, #12
 8006938:	46bd      	mov	sp, r7
 800693a:	bc80      	pop	{r7}
 800693c:	b004      	add	sp, #16
 800693e:	4770      	bx	lr

08006940 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006940:	b480      	push	{r7}
 8006942:	b09b      	sub	sp, #108	; 0x6c
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800694a:	2300      	movs	r3, #0
 800694c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	781b      	ldrb	r3, [r3, #0]
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	4413      	add	r3, r2
 800695a:	881b      	ldrh	r3, [r3, #0]
 800695c:	b29b      	uxth	r3, r3
 800695e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006966:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	78db      	ldrb	r3, [r3, #3]
 800696e:	2b03      	cmp	r3, #3
 8006970:	d81f      	bhi.n	80069b2 <USB_ActivateEndpoint+0x72>
 8006972:	a201      	add	r2, pc, #4	; (adr r2, 8006978 <USB_ActivateEndpoint+0x38>)
 8006974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006978:	08006989 	.word	0x08006989
 800697c:	080069a5 	.word	0x080069a5
 8006980:	080069bb 	.word	0x080069bb
 8006984:	08006997 	.word	0x08006997
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006988:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800698c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006990:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006994:	e012      	b.n	80069bc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006996:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800699a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800699e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80069a2:	e00b      	b.n	80069bc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80069a4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80069a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80069ac:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80069b0:	e004      	b.n	80069bc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80069b8:	e000      	b.n	80069bc <USB_ActivateEndpoint+0x7c>
      break;
 80069ba:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	781b      	ldrb	r3, [r3, #0]
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	441a      	add	r2, r3
 80069c6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80069ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069da:	b29b      	uxth	r3, r3
 80069dc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	4413      	add	r3, r2
 80069e8:	881b      	ldrh	r3, [r3, #0]
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069f4:	b29a      	uxth	r2, r3
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	781b      	ldrb	r3, [r3, #0]
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	4313      	orrs	r3, r2
 80069fe:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8006a02:	687a      	ldr	r2, [r7, #4]
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	441a      	add	r2, r3
 8006a0c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8006a10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	7b1b      	ldrb	r3, [r3, #12]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	f040 8149 	bne.w	8006cc0 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	785b      	ldrb	r3, [r3, #1]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	f000 8084 	beq.w	8006b40 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	617b      	str	r3, [r7, #20]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	461a      	mov	r2, r3
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	4413      	add	r3, r2
 8006a4a:	617b      	str	r3, [r7, #20]
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	781b      	ldrb	r3, [r3, #0]
 8006a50:	011a      	lsls	r2, r3, #4
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	4413      	add	r3, r2
 8006a56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a5a:	613b      	str	r3, [r7, #16]
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	88db      	ldrh	r3, [r3, #6]
 8006a60:	085b      	lsrs	r3, r3, #1
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	005b      	lsls	r3, r3, #1
 8006a66:	b29a      	uxth	r2, r3
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	009b      	lsls	r3, r3, #2
 8006a74:	4413      	add	r3, r2
 8006a76:	881b      	ldrh	r3, [r3, #0]
 8006a78:	81fb      	strh	r3, [r7, #14]
 8006a7a:	89fb      	ldrh	r3, [r7, #14]
 8006a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d01b      	beq.n	8006abc <USB_ActivateEndpoint+0x17c>
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	4413      	add	r3, r2
 8006a8e:	881b      	ldrh	r3, [r3, #0]
 8006a90:	b29b      	uxth	r3, r3
 8006a92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a9a:	81bb      	strh	r3, [r7, #12]
 8006a9c:	687a      	ldr	r2, [r7, #4]
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	781b      	ldrb	r3, [r3, #0]
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	441a      	add	r2, r3
 8006aa6:	89bb      	ldrh	r3, [r7, #12]
 8006aa8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006aac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ab0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ab4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	78db      	ldrb	r3, [r3, #3]
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d020      	beq.n	8006b06 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	781b      	ldrb	r3, [r3, #0]
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	4413      	add	r3, r2
 8006ace:	881b      	ldrh	r3, [r3, #0]
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ad6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ada:	813b      	strh	r3, [r7, #8]
 8006adc:	893b      	ldrh	r3, [r7, #8]
 8006ade:	f083 0320 	eor.w	r3, r3, #32
 8006ae2:	813b      	strh	r3, [r7, #8]
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	781b      	ldrb	r3, [r3, #0]
 8006aea:	009b      	lsls	r3, r3, #2
 8006aec:	441a      	add	r2, r3
 8006aee:	893b      	ldrh	r3, [r7, #8]
 8006af0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006af4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006af8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006afc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	8013      	strh	r3, [r2, #0]
 8006b04:	e27f      	b.n	8007006 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	4413      	add	r3, r2
 8006b10:	881b      	ldrh	r3, [r3, #0]
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b1c:	817b      	strh	r3, [r7, #10]
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	781b      	ldrb	r3, [r3, #0]
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	441a      	add	r2, r3
 8006b28:	897b      	ldrh	r3, [r7, #10]
 8006b2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	8013      	strh	r3, [r2, #0]
 8006b3e:	e262      	b.n	8007006 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	461a      	mov	r2, r3
 8006b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b50:	4413      	add	r3, r2
 8006b52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	011a      	lsls	r2, r3, #4
 8006b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b5c:	4413      	add	r3, r2
 8006b5e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006b62:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	88db      	ldrh	r3, [r3, #6]
 8006b68:	085b      	lsrs	r3, r3, #1
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	005b      	lsls	r3, r3, #1
 8006b6e:	b29a      	uxth	r2, r3
 8006b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b72:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	627b      	str	r3, [r7, #36]	; 0x24
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	461a      	mov	r2, r3
 8006b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b84:	4413      	add	r3, r2
 8006b86:	627b      	str	r3, [r7, #36]	; 0x24
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	011a      	lsls	r2, r3, #4
 8006b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b90:	4413      	add	r3, r2
 8006b92:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006b96:	623b      	str	r3, [r7, #32]
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	691b      	ldr	r3, [r3, #16]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d112      	bne.n	8006bc6 <USB_ActivateEndpoint+0x286>
 8006ba0:	6a3b      	ldr	r3, [r7, #32]
 8006ba2:	881b      	ldrh	r3, [r3, #0]
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006baa:	b29a      	uxth	r2, r3
 8006bac:	6a3b      	ldr	r3, [r7, #32]
 8006bae:	801a      	strh	r2, [r3, #0]
 8006bb0:	6a3b      	ldr	r3, [r7, #32]
 8006bb2:	881b      	ldrh	r3, [r3, #0]
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bbe:	b29a      	uxth	r2, r3
 8006bc0:	6a3b      	ldr	r3, [r7, #32]
 8006bc2:	801a      	strh	r2, [r3, #0]
 8006bc4:	e02f      	b.n	8006c26 <USB_ActivateEndpoint+0x2e6>
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	691b      	ldr	r3, [r3, #16]
 8006bca:	2b3e      	cmp	r3, #62	; 0x3e
 8006bcc:	d813      	bhi.n	8006bf6 <USB_ActivateEndpoint+0x2b6>
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	691b      	ldr	r3, [r3, #16]
 8006bd2:	085b      	lsrs	r3, r3, #1
 8006bd4:	663b      	str	r3, [r7, #96]	; 0x60
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	691b      	ldr	r3, [r3, #16]
 8006bda:	f003 0301 	and.w	r3, r3, #1
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d002      	beq.n	8006be8 <USB_ActivateEndpoint+0x2a8>
 8006be2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006be4:	3301      	adds	r3, #1
 8006be6:	663b      	str	r3, [r7, #96]	; 0x60
 8006be8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	029b      	lsls	r3, r3, #10
 8006bee:	b29a      	uxth	r2, r3
 8006bf0:	6a3b      	ldr	r3, [r7, #32]
 8006bf2:	801a      	strh	r2, [r3, #0]
 8006bf4:	e017      	b.n	8006c26 <USB_ActivateEndpoint+0x2e6>
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	691b      	ldr	r3, [r3, #16]
 8006bfa:	095b      	lsrs	r3, r3, #5
 8006bfc:	663b      	str	r3, [r7, #96]	; 0x60
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	691b      	ldr	r3, [r3, #16]
 8006c02:	f003 031f 	and.w	r3, r3, #31
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d102      	bne.n	8006c10 <USB_ActivateEndpoint+0x2d0>
 8006c0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c0c:	3b01      	subs	r3, #1
 8006c0e:	663b      	str	r3, [r7, #96]	; 0x60
 8006c10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	029b      	lsls	r3, r3, #10
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c20:	b29a      	uxth	r2, r3
 8006c22:	6a3b      	ldr	r3, [r7, #32]
 8006c24:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	009b      	lsls	r3, r3, #2
 8006c2e:	4413      	add	r3, r2
 8006c30:	881b      	ldrh	r3, [r3, #0]
 8006c32:	83fb      	strh	r3, [r7, #30]
 8006c34:	8bfb      	ldrh	r3, [r7, #30]
 8006c36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d01b      	beq.n	8006c76 <USB_ActivateEndpoint+0x336>
 8006c3e:	687a      	ldr	r2, [r7, #4]
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	4413      	add	r3, r2
 8006c48:	881b      	ldrh	r3, [r3, #0]
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c54:	83bb      	strh	r3, [r7, #28]
 8006c56:	687a      	ldr	r2, [r7, #4]
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	441a      	add	r2, r3
 8006c60:	8bbb      	ldrh	r3, [r7, #28]
 8006c62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006c76:	687a      	ldr	r2, [r7, #4]
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	4413      	add	r3, r2
 8006c80:	881b      	ldrh	r3, [r3, #0]
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c8c:	837b      	strh	r3, [r7, #26]
 8006c8e:	8b7b      	ldrh	r3, [r7, #26]
 8006c90:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006c94:	837b      	strh	r3, [r7, #26]
 8006c96:	8b7b      	ldrh	r3, [r7, #26]
 8006c98:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006c9c:	837b      	strh	r3, [r7, #26]
 8006c9e:	687a      	ldr	r2, [r7, #4]
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	441a      	add	r2, r3
 8006ca8:	8b7b      	ldrh	r3, [r7, #26]
 8006caa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	8013      	strh	r3, [r2, #0]
 8006cbe:	e1a2      	b.n	8007006 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8006cc0:	687a      	ldr	r2, [r7, #4]
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	781b      	ldrb	r3, [r3, #0]
 8006cc6:	009b      	lsls	r3, r3, #2
 8006cc8:	4413      	add	r3, r2
 8006cca:	881b      	ldrh	r3, [r3, #0]
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cd6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8006cda:	687a      	ldr	r2, [r7, #4]
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	009b      	lsls	r3, r3, #2
 8006ce2:	441a      	add	r2, r3
 8006ce4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8006ce8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cf0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006cf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	65bb      	str	r3, [r7, #88]	; 0x58
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	461a      	mov	r2, r3
 8006d0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d0c:	4413      	add	r3, r2
 8006d0e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	781b      	ldrb	r3, [r3, #0]
 8006d14:	011a      	lsls	r2, r3, #4
 8006d16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d18:	4413      	add	r3, r2
 8006d1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d1e:	657b      	str	r3, [r7, #84]	; 0x54
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	891b      	ldrh	r3, [r3, #8]
 8006d24:	085b      	lsrs	r3, r3, #1
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	005b      	lsls	r3, r3, #1
 8006d2a:	b29a      	uxth	r2, r3
 8006d2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d2e:	801a      	strh	r2, [r3, #0]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	653b      	str	r3, [r7, #80]	; 0x50
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d40:	4413      	add	r3, r2
 8006d42:	653b      	str	r3, [r7, #80]	; 0x50
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	011a      	lsls	r2, r3, #4
 8006d4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d4c:	4413      	add	r3, r2
 8006d4e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006d52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	895b      	ldrh	r3, [r3, #10]
 8006d58:	085b      	lsrs	r3, r3, #1
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	005b      	lsls	r3, r3, #1
 8006d5e:	b29a      	uxth	r2, r3
 8006d60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d62:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	785b      	ldrb	r3, [r3, #1]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	f040 8091 	bne.w	8006e90 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	4413      	add	r3, r2
 8006d78:	881b      	ldrh	r3, [r3, #0]
 8006d7a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006d7c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006d7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d01b      	beq.n	8006dbe <USB_ActivateEndpoint+0x47e>
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	009b      	lsls	r3, r3, #2
 8006d8e:	4413      	add	r3, r2
 8006d90:	881b      	ldrh	r3, [r3, #0]
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d9c:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	009b      	lsls	r3, r3, #2
 8006da6:	441a      	add	r2, r3
 8006da8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006daa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006db2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006db6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006dbe:	687a      	ldr	r2, [r7, #4]
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	4413      	add	r3, r2
 8006dc8:	881b      	ldrh	r3, [r3, #0]
 8006dca:	873b      	strh	r3, [r7, #56]	; 0x38
 8006dcc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d01b      	beq.n	8006e0e <USB_ActivateEndpoint+0x4ce>
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	009b      	lsls	r3, r3, #2
 8006dde:	4413      	add	r3, r2
 8006de0:	881b      	ldrh	r3, [r3, #0]
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006de8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dec:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006dee:	687a      	ldr	r2, [r7, #4]
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	781b      	ldrb	r3, [r3, #0]
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	441a      	add	r2, r3
 8006df8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006dfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e06:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	781b      	ldrb	r3, [r3, #0]
 8006e14:	009b      	lsls	r3, r3, #2
 8006e16:	4413      	add	r3, r2
 8006e18:	881b      	ldrh	r3, [r3, #0]
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e24:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006e26:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006e28:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006e2c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006e2e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006e30:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006e34:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006e36:	687a      	ldr	r2, [r7, #4]
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	009b      	lsls	r3, r3, #2
 8006e3e:	441a      	add	r2, r3
 8006e40:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006e42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006e56:	687a      	ldr	r2, [r7, #4]
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	4413      	add	r3, r2
 8006e60:	881b      	ldrh	r3, [r3, #0]
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e6c:	867b      	strh	r3, [r7, #50]	; 0x32
 8006e6e:	687a      	ldr	r2, [r7, #4]
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	781b      	ldrb	r3, [r3, #0]
 8006e74:	009b      	lsls	r3, r3, #2
 8006e76:	441a      	add	r2, r3
 8006e78:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006e7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	8013      	strh	r3, [r2, #0]
 8006e8e:	e0ba      	b.n	8007006 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006e90:	687a      	ldr	r2, [r7, #4]
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	781b      	ldrb	r3, [r3, #0]
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	4413      	add	r3, r2
 8006e9a:	881b      	ldrh	r3, [r3, #0]
 8006e9c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006ea0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006ea4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d01d      	beq.n	8006ee8 <USB_ActivateEndpoint+0x5a8>
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	781b      	ldrb	r3, [r3, #0]
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	4413      	add	r3, r2
 8006eb6:	881b      	ldrh	r3, [r3, #0]
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ec2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006ec6:	687a      	ldr	r2, [r7, #4]
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	009b      	lsls	r3, r3, #2
 8006ece:	441a      	add	r2, r3
 8006ed0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006ed4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ed8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006edc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006ee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ee8:	687a      	ldr	r2, [r7, #4]
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	781b      	ldrb	r3, [r3, #0]
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	4413      	add	r3, r2
 8006ef2:	881b      	ldrh	r3, [r3, #0]
 8006ef4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006ef8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d01d      	beq.n	8006f40 <USB_ActivateEndpoint+0x600>
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	4413      	add	r3, r2
 8006f0e:	881b      	ldrh	r3, [r3, #0]
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f1a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	009b      	lsls	r3, r3, #2
 8006f26:	441a      	add	r2, r3
 8006f28:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006f2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f38:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	78db      	ldrb	r3, [r3, #3]
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	d024      	beq.n	8006f92 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006f48:	687a      	ldr	r2, [r7, #4]
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	781b      	ldrb	r3, [r3, #0]
 8006f4e:	009b      	lsls	r3, r3, #2
 8006f50:	4413      	add	r3, r2
 8006f52:	881b      	ldrh	r3, [r3, #0]
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f5e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006f62:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006f66:	f083 0320 	eor.w	r3, r3, #32
 8006f6a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	441a      	add	r2, r3
 8006f78:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006f7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	8013      	strh	r3, [r2, #0]
 8006f90:	e01d      	b.n	8006fce <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	781b      	ldrb	r3, [r3, #0]
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	4413      	add	r3, r2
 8006f9c:	881b      	ldrh	r3, [r3, #0]
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fa8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	781b      	ldrb	r3, [r3, #0]
 8006fb2:	009b      	lsls	r3, r3, #2
 8006fb4:	441a      	add	r2, r3
 8006fb6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006fba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006fce:	687a      	ldr	r2, [r7, #4]
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	009b      	lsls	r3, r3, #2
 8006fd6:	4413      	add	r3, r2
 8006fd8:	881b      	ldrh	r3, [r3, #0]
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fe0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fe4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006fe6:	687a      	ldr	r2, [r7, #4]
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	781b      	ldrb	r3, [r3, #0]
 8006fec:	009b      	lsls	r3, r3, #2
 8006fee:	441a      	add	r2, r3
 8006ff0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006ff2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ff6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ffa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ffe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007002:	b29b      	uxth	r3, r3
 8007004:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8007006:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800700a:	4618      	mov	r0, r3
 800700c:	376c      	adds	r7, #108	; 0x6c
 800700e:	46bd      	mov	sp, r7
 8007010:	bc80      	pop	{r7}
 8007012:	4770      	bx	lr

08007014 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007014:	b480      	push	{r7}
 8007016:	b08d      	sub	sp, #52	; 0x34
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	7b1b      	ldrb	r3, [r3, #12]
 8007022:	2b00      	cmp	r3, #0
 8007024:	f040 808e 	bne.w	8007144 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	785b      	ldrb	r3, [r3, #1]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d044      	beq.n	80070ba <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	4413      	add	r3, r2
 800703a:	881b      	ldrh	r3, [r3, #0]
 800703c:	81bb      	strh	r3, [r7, #12]
 800703e:	89bb      	ldrh	r3, [r7, #12]
 8007040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007044:	2b00      	cmp	r3, #0
 8007046:	d01b      	beq.n	8007080 <USB_DeactivateEndpoint+0x6c>
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	4413      	add	r3, r2
 8007052:	881b      	ldrh	r3, [r3, #0]
 8007054:	b29b      	uxth	r3, r3
 8007056:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800705a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800705e:	817b      	strh	r3, [r7, #10]
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	441a      	add	r2, r3
 800706a:	897b      	ldrh	r3, [r7, #10]
 800706c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007070:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007074:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007078:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800707c:	b29b      	uxth	r3, r3
 800707e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	009b      	lsls	r3, r3, #2
 8007088:	4413      	add	r3, r2
 800708a:	881b      	ldrh	r3, [r3, #0]
 800708c:	b29b      	uxth	r3, r3
 800708e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007092:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007096:	813b      	strh	r3, [r7, #8]
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	441a      	add	r2, r3
 80070a2:	893b      	ldrh	r3, [r7, #8]
 80070a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	8013      	strh	r3, [r2, #0]
 80070b8:	e192      	b.n	80073e0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80070ba:	687a      	ldr	r2, [r7, #4]
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	781b      	ldrb	r3, [r3, #0]
 80070c0:	009b      	lsls	r3, r3, #2
 80070c2:	4413      	add	r3, r2
 80070c4:	881b      	ldrh	r3, [r3, #0]
 80070c6:	827b      	strh	r3, [r7, #18]
 80070c8:	8a7b      	ldrh	r3, [r7, #18]
 80070ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d01b      	beq.n	800710a <USB_DeactivateEndpoint+0xf6>
 80070d2:	687a      	ldr	r2, [r7, #4]
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	009b      	lsls	r3, r3, #2
 80070da:	4413      	add	r3, r2
 80070dc:	881b      	ldrh	r3, [r3, #0]
 80070de:	b29b      	uxth	r3, r3
 80070e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070e8:	823b      	strh	r3, [r7, #16]
 80070ea:	687a      	ldr	r2, [r7, #4]
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	781b      	ldrb	r3, [r3, #0]
 80070f0:	009b      	lsls	r3, r3, #2
 80070f2:	441a      	add	r2, r3
 80070f4:	8a3b      	ldrh	r3, [r7, #16]
 80070f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007102:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007106:	b29b      	uxth	r3, r3
 8007108:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	781b      	ldrb	r3, [r3, #0]
 8007110:	009b      	lsls	r3, r3, #2
 8007112:	4413      	add	r3, r2
 8007114:	881b      	ldrh	r3, [r3, #0]
 8007116:	b29b      	uxth	r3, r3
 8007118:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800711c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007120:	81fb      	strh	r3, [r7, #14]
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	781b      	ldrb	r3, [r3, #0]
 8007128:	009b      	lsls	r3, r3, #2
 800712a:	441a      	add	r2, r3
 800712c:	89fb      	ldrh	r3, [r7, #14]
 800712e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007132:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007136:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800713a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800713e:	b29b      	uxth	r3, r3
 8007140:	8013      	strh	r3, [r2, #0]
 8007142:	e14d      	b.n	80073e0 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	785b      	ldrb	r3, [r3, #1]
 8007148:	2b00      	cmp	r3, #0
 800714a:	f040 80a5 	bne.w	8007298 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800714e:	687a      	ldr	r2, [r7, #4]
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	009b      	lsls	r3, r3, #2
 8007156:	4413      	add	r3, r2
 8007158:	881b      	ldrh	r3, [r3, #0]
 800715a:	843b      	strh	r3, [r7, #32]
 800715c:	8c3b      	ldrh	r3, [r7, #32]
 800715e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007162:	2b00      	cmp	r3, #0
 8007164:	d01b      	beq.n	800719e <USB_DeactivateEndpoint+0x18a>
 8007166:	687a      	ldr	r2, [r7, #4]
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	781b      	ldrb	r3, [r3, #0]
 800716c:	009b      	lsls	r3, r3, #2
 800716e:	4413      	add	r3, r2
 8007170:	881b      	ldrh	r3, [r3, #0]
 8007172:	b29b      	uxth	r3, r3
 8007174:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007178:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800717c:	83fb      	strh	r3, [r7, #30]
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	009b      	lsls	r3, r3, #2
 8007186:	441a      	add	r2, r3
 8007188:	8bfb      	ldrh	r3, [r7, #30]
 800718a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800718e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007192:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007196:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800719a:	b29b      	uxth	r3, r3
 800719c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	781b      	ldrb	r3, [r3, #0]
 80071a4:	009b      	lsls	r3, r3, #2
 80071a6:	4413      	add	r3, r2
 80071a8:	881b      	ldrh	r3, [r3, #0]
 80071aa:	83bb      	strh	r3, [r7, #28]
 80071ac:	8bbb      	ldrh	r3, [r7, #28]
 80071ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d01b      	beq.n	80071ee <USB_DeactivateEndpoint+0x1da>
 80071b6:	687a      	ldr	r2, [r7, #4]
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	781b      	ldrb	r3, [r3, #0]
 80071bc:	009b      	lsls	r3, r3, #2
 80071be:	4413      	add	r3, r2
 80071c0:	881b      	ldrh	r3, [r3, #0]
 80071c2:	b29b      	uxth	r3, r3
 80071c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071cc:	837b      	strh	r3, [r7, #26]
 80071ce:	687a      	ldr	r2, [r7, #4]
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	781b      	ldrb	r3, [r3, #0]
 80071d4:	009b      	lsls	r3, r3, #2
 80071d6:	441a      	add	r2, r3
 80071d8:	8b7b      	ldrh	r3, [r7, #26]
 80071da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071e6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80071ea:	b29b      	uxth	r3, r3
 80071ec:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80071ee:	687a      	ldr	r2, [r7, #4]
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	009b      	lsls	r3, r3, #2
 80071f6:	4413      	add	r3, r2
 80071f8:	881b      	ldrh	r3, [r3, #0]
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007200:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007204:	833b      	strh	r3, [r7, #24]
 8007206:	687a      	ldr	r2, [r7, #4]
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	781b      	ldrb	r3, [r3, #0]
 800720c:	009b      	lsls	r3, r3, #2
 800720e:	441a      	add	r2, r3
 8007210:	8b3b      	ldrh	r3, [r7, #24]
 8007212:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007216:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800721a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800721e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007222:	b29b      	uxth	r3, r3
 8007224:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	009b      	lsls	r3, r3, #2
 800722e:	4413      	add	r3, r2
 8007230:	881b      	ldrh	r3, [r3, #0]
 8007232:	b29b      	uxth	r3, r3
 8007234:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007238:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800723c:	82fb      	strh	r3, [r7, #22]
 800723e:	687a      	ldr	r2, [r7, #4]
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	781b      	ldrb	r3, [r3, #0]
 8007244:	009b      	lsls	r3, r3, #2
 8007246:	441a      	add	r2, r3
 8007248:	8afb      	ldrh	r3, [r7, #22]
 800724a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800724e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007252:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007256:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800725a:	b29b      	uxth	r3, r3
 800725c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	781b      	ldrb	r3, [r3, #0]
 8007264:	009b      	lsls	r3, r3, #2
 8007266:	4413      	add	r3, r2
 8007268:	881b      	ldrh	r3, [r3, #0]
 800726a:	b29b      	uxth	r3, r3
 800726c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007270:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007274:	82bb      	strh	r3, [r7, #20]
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	009b      	lsls	r3, r3, #2
 800727e:	441a      	add	r2, r3
 8007280:	8abb      	ldrh	r3, [r7, #20]
 8007282:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007286:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800728a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800728e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007292:	b29b      	uxth	r3, r3
 8007294:	8013      	strh	r3, [r2, #0]
 8007296:	e0a3      	b.n	80073e0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007298:	687a      	ldr	r2, [r7, #4]
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	009b      	lsls	r3, r3, #2
 80072a0:	4413      	add	r3, r2
 80072a2:	881b      	ldrh	r3, [r3, #0]
 80072a4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80072a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80072a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d01b      	beq.n	80072e8 <USB_DeactivateEndpoint+0x2d4>
 80072b0:	687a      	ldr	r2, [r7, #4]
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	781b      	ldrb	r3, [r3, #0]
 80072b6:	009b      	lsls	r3, r3, #2
 80072b8:	4413      	add	r3, r2
 80072ba:	881b      	ldrh	r3, [r3, #0]
 80072bc:	b29b      	uxth	r3, r3
 80072be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072c6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80072c8:	687a      	ldr	r2, [r7, #4]
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	781b      	ldrb	r3, [r3, #0]
 80072ce:	009b      	lsls	r3, r3, #2
 80072d0:	441a      	add	r2, r3
 80072d2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80072d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80072e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	4413      	add	r3, r2
 80072f2:	881b      	ldrh	r3, [r3, #0]
 80072f4:	857b      	strh	r3, [r7, #42]	; 0x2a
 80072f6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80072f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d01b      	beq.n	8007338 <USB_DeactivateEndpoint+0x324>
 8007300:	687a      	ldr	r2, [r7, #4]
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	009b      	lsls	r3, r3, #2
 8007308:	4413      	add	r3, r2
 800730a:	881b      	ldrh	r3, [r3, #0]
 800730c:	b29b      	uxth	r3, r3
 800730e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007312:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007316:	853b      	strh	r3, [r7, #40]	; 0x28
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	009b      	lsls	r3, r3, #2
 8007320:	441a      	add	r2, r3
 8007322:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007324:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007328:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800732c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007330:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007334:	b29b      	uxth	r3, r3
 8007336:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007338:	687a      	ldr	r2, [r7, #4]
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	781b      	ldrb	r3, [r3, #0]
 800733e:	009b      	lsls	r3, r3, #2
 8007340:	4413      	add	r3, r2
 8007342:	881b      	ldrh	r3, [r3, #0]
 8007344:	b29b      	uxth	r3, r3
 8007346:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800734a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800734e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007350:	687a      	ldr	r2, [r7, #4]
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	781b      	ldrb	r3, [r3, #0]
 8007356:	009b      	lsls	r3, r3, #2
 8007358:	441a      	add	r2, r3
 800735a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800735c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007360:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007364:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800736c:	b29b      	uxth	r3, r3
 800736e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	009b      	lsls	r3, r3, #2
 8007378:	4413      	add	r3, r2
 800737a:	881b      	ldrh	r3, [r3, #0]
 800737c:	b29b      	uxth	r3, r3
 800737e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007382:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007386:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	441a      	add	r2, r3
 8007392:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007394:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007398:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800739c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	009b      	lsls	r3, r3, #2
 80073b0:	4413      	add	r3, r2
 80073b2:	881b      	ldrh	r3, [r3, #0]
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073be:	847b      	strh	r3, [r7, #34]	; 0x22
 80073c0:	687a      	ldr	r2, [r7, #4]
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	781b      	ldrb	r3, [r3, #0]
 80073c6:	009b      	lsls	r3, r3, #2
 80073c8:	441a      	add	r2, r3
 80073ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80073cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073dc:	b29b      	uxth	r3, r3
 80073de:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80073e0:	2300      	movs	r3, #0
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3734      	adds	r7, #52	; 0x34
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bc80      	pop	{r7}
 80073ea:	4770      	bx	lr

080073ec <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b0cc      	sub	sp, #304	; 0x130
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80073fa:	6018      	str	r0, [r3, #0]
 80073fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007400:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007404:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007406:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800740a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	785b      	ldrb	r3, [r3, #1]
 8007412:	2b01      	cmp	r3, #1
 8007414:	f041 817d 	bne.w	8008712 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007418:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800741c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	699a      	ldr	r2, [r3, #24]
 8007424:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007428:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	691b      	ldr	r3, [r3, #16]
 8007430:	429a      	cmp	r2, r3
 8007432:	d908      	bls.n	8007446 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8007434:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007438:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	691b      	ldr	r3, [r3, #16]
 8007440:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007444:	e007      	b.n	8007456 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8007446:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800744a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	699b      	ldr	r3, [r3, #24]
 8007452:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007456:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800745a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	7b1b      	ldrb	r3, [r3, #12]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d152      	bne.n	800750c <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007466:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800746a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	6959      	ldr	r1, [r3, #20]
 8007472:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007476:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	88da      	ldrh	r2, [r3, #6]
 800747e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007482:	b29b      	uxth	r3, r3
 8007484:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007488:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800748c:	6800      	ldr	r0, [r0, #0]
 800748e:	f001 ff23 	bl	80092d8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007492:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007496:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800749a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800749e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80074a2:	6812      	ldr	r2, [r2, #0]
 80074a4:	601a      	str	r2, [r3, #0]
 80074a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	4619      	mov	r1, r3
 80074b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074bc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80074c0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80074c4:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 80074c8:	6812      	ldr	r2, [r2, #0]
 80074ca:	440a      	add	r2, r1
 80074cc:	601a      	str	r2, [r3, #0]
 80074ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	781b      	ldrb	r3, [r3, #0]
 80074da:	011a      	lsls	r2, r3, #4
 80074dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074e0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4413      	add	r3, r2
 80074e8:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80074ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074f0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80074f4:	601a      	str	r2, [r3, #0]
 80074f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074fa:	b29a      	uxth	r2, r3
 80074fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007500:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	801a      	strh	r2, [r3, #0]
 8007508:	f001 b8b5 	b.w	8008676 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800750c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007510:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	78db      	ldrb	r3, [r3, #3]
 8007518:	2b02      	cmp	r3, #2
 800751a:	f040 84c6 	bne.w	8007eaa <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800751e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007522:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	6a1a      	ldr	r2, [r3, #32]
 800752a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800752e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	691b      	ldr	r3, [r3, #16]
 8007536:	429a      	cmp	r2, r3
 8007538:	f240 8443 	bls.w	8007dc2 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800753c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007540:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007544:	681a      	ldr	r2, [r3, #0]
 8007546:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800754a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	009b      	lsls	r3, r3, #2
 8007554:	4413      	add	r3, r2
 8007556:	881b      	ldrh	r3, [r3, #0]
 8007558:	b29b      	uxth	r3, r3
 800755a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800755e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007562:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8007566:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800756a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800756e:	681a      	ldr	r2, [r3, #0]
 8007570:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007574:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	009b      	lsls	r3, r3, #2
 800757e:	441a      	add	r2, r3
 8007580:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007584:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007588:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800758c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007594:	b29b      	uxth	r3, r3
 8007596:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007598:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800759c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	6a1a      	ldr	r2, [r3, #32]
 80075a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075a8:	1ad2      	subs	r2, r2, r3
 80075aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80075b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	009b      	lsls	r3, r3, #2
 80075ce:	4413      	add	r3, r2
 80075d0:	881b      	ldrh	r3, [r3, #0]
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075d8:	2b00      	cmp	r3, #0
 80075da:	f000 823e 	beq.w	8007a5a <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80075de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075e2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80075e6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80075ea:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80075ee:	6812      	ldr	r2, [r2, #0]
 80075f0:	601a      	str	r2, [r3, #0]
 80075f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	785b      	ldrb	r3, [r3, #1]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	f040 809a 	bne.w	8007738 <USB_EPStartXfer+0x34c>
 8007604:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007608:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800760c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007610:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007614:	6812      	ldr	r2, [r2, #0]
 8007616:	601a      	str	r2, [r3, #0]
 8007618:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800761c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007626:	b29b      	uxth	r3, r3
 8007628:	4619      	mov	r1, r3
 800762a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800762e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007632:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007636:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800763a:	6812      	ldr	r2, [r2, #0]
 800763c:	440a      	add	r2, r1
 800763e:	601a      	str	r2, [r3, #0]
 8007640:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007644:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	781b      	ldrb	r3, [r3, #0]
 800764c:	011a      	lsls	r2, r3, #4
 800764e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007652:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4413      	add	r3, r2
 800765a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800765e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007662:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007666:	601a      	str	r2, [r3, #0]
 8007668:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800766c:	2b00      	cmp	r3, #0
 800766e:	d122      	bne.n	80076b6 <USB_EPStartXfer+0x2ca>
 8007670:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007674:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	881b      	ldrh	r3, [r3, #0]
 800767c:	b29b      	uxth	r3, r3
 800767e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007682:	b29a      	uxth	r2, r3
 8007684:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007688:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	801a      	strh	r2, [r3, #0]
 8007690:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007694:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	881b      	ldrh	r3, [r3, #0]
 800769c:	b29b      	uxth	r3, r3
 800769e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076a6:	b29a      	uxth	r2, r3
 80076a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076ac:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	801a      	strh	r2, [r3, #0]
 80076b4:	e079      	b.n	80077aa <USB_EPStartXfer+0x3be>
 80076b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076ba:	2b3e      	cmp	r3, #62	; 0x3e
 80076bc:	d81b      	bhi.n	80076f6 <USB_EPStartXfer+0x30a>
 80076be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076c2:	085b      	lsrs	r3, r3, #1
 80076c4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80076c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076cc:	f003 0301 	and.w	r3, r3, #1
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d004      	beq.n	80076de <USB_EPStartXfer+0x2f2>
 80076d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80076d8:	3301      	adds	r3, #1
 80076da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80076de:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	029b      	lsls	r3, r3, #10
 80076e6:	b29a      	uxth	r2, r3
 80076e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076ec:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	801a      	strh	r2, [r3, #0]
 80076f4:	e059      	b.n	80077aa <USB_EPStartXfer+0x3be>
 80076f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076fa:	095b      	lsrs	r3, r3, #5
 80076fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007700:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007704:	f003 031f 	and.w	r3, r3, #31
 8007708:	2b00      	cmp	r3, #0
 800770a:	d104      	bne.n	8007716 <USB_EPStartXfer+0x32a>
 800770c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007710:	3b01      	subs	r3, #1
 8007712:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007716:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800771a:	b29b      	uxth	r3, r3
 800771c:	029b      	lsls	r3, r3, #10
 800771e:	b29b      	uxth	r3, r3
 8007720:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007724:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007728:	b29a      	uxth	r2, r3
 800772a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800772e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	801a      	strh	r2, [r3, #0]
 8007736:	e038      	b.n	80077aa <USB_EPStartXfer+0x3be>
 8007738:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800773c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	785b      	ldrb	r3, [r3, #1]
 8007744:	2b01      	cmp	r3, #1
 8007746:	d130      	bne.n	80077aa <USB_EPStartXfer+0x3be>
 8007748:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800774c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007756:	b29b      	uxth	r3, r3
 8007758:	4619      	mov	r1, r3
 800775a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800775e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007762:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007766:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800776a:	6812      	ldr	r2, [r2, #0]
 800776c:	440a      	add	r2, r1
 800776e:	601a      	str	r2, [r3, #0]
 8007770:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007774:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	781b      	ldrb	r3, [r3, #0]
 800777c:	011a      	lsls	r2, r3, #4
 800777e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007782:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4413      	add	r3, r2
 800778a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800778e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007792:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007796:	601a      	str	r2, [r3, #0]
 8007798:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800779c:	b29a      	uxth	r2, r3
 800779e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80077aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	895b      	ldrh	r3, [r3, #10]
 80077b6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80077ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	6959      	ldr	r1, [r3, #20]
 80077c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80077d0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80077d4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80077d8:	6800      	ldr	r0, [r0, #0]
 80077da:	f001 fd7d 	bl	80092d8 <USB_WritePMA>
            ep->xfer_buff += len;
 80077de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	695a      	ldr	r2, [r3, #20]
 80077ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077ee:	441a      	add	r2, r3
 80077f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80077fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007800:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	6a1a      	ldr	r2, [r3, #32]
 8007808:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800780c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	691b      	ldr	r3, [r3, #16]
 8007814:	429a      	cmp	r2, r3
 8007816:	d90f      	bls.n	8007838 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8007818:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800781c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	6a1a      	ldr	r2, [r3, #32]
 8007824:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007828:	1ad2      	subs	r2, r2, r3
 800782a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800782e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	621a      	str	r2, [r3, #32]
 8007836:	e00e      	b.n	8007856 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8007838:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800783c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	6a1b      	ldr	r3, [r3, #32]
 8007844:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8007848:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800784c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	2200      	movs	r2, #0
 8007854:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007856:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800785a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	785b      	ldrb	r3, [r3, #1]
 8007862:	2b00      	cmp	r3, #0
 8007864:	f040 809a 	bne.w	800799c <USB_EPStartXfer+0x5b0>
 8007868:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800786c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007870:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007874:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007878:	6812      	ldr	r2, [r2, #0]
 800787a:	601a      	str	r2, [r3, #0]
 800787c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007880:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800788a:	b29b      	uxth	r3, r3
 800788c:	4619      	mov	r1, r3
 800788e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007892:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007896:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800789a:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 800789e:	6812      	ldr	r2, [r2, #0]
 80078a0:	440a      	add	r2, r1
 80078a2:	601a      	str	r2, [r3, #0]
 80078a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	781b      	ldrb	r3, [r3, #0]
 80078b0:	011a      	lsls	r2, r3, #4
 80078b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078b6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4413      	add	r3, r2
 80078be:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80078c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078c6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80078ca:	601a      	str	r2, [r3, #0]
 80078cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d122      	bne.n	800791a <USB_EPStartXfer+0x52e>
 80078d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078d8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	881b      	ldrh	r3, [r3, #0]
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80078e6:	b29a      	uxth	r2, r3
 80078e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078ec:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	801a      	strh	r2, [r3, #0]
 80078f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078f8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	881b      	ldrh	r3, [r3, #0]
 8007900:	b29b      	uxth	r3, r3
 8007902:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007906:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800790a:	b29a      	uxth	r2, r3
 800790c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007910:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	801a      	strh	r2, [r3, #0]
 8007918:	e083      	b.n	8007a22 <USB_EPStartXfer+0x636>
 800791a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800791e:	2b3e      	cmp	r3, #62	; 0x3e
 8007920:	d81b      	bhi.n	800795a <USB_EPStartXfer+0x56e>
 8007922:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007926:	085b      	lsrs	r3, r3, #1
 8007928:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800792c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007930:	f003 0301 	and.w	r3, r3, #1
 8007934:	2b00      	cmp	r3, #0
 8007936:	d004      	beq.n	8007942 <USB_EPStartXfer+0x556>
 8007938:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800793c:	3301      	adds	r3, #1
 800793e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007942:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007946:	b29b      	uxth	r3, r3
 8007948:	029b      	lsls	r3, r3, #10
 800794a:	b29a      	uxth	r2, r3
 800794c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007950:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	801a      	strh	r2, [r3, #0]
 8007958:	e063      	b.n	8007a22 <USB_EPStartXfer+0x636>
 800795a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800795e:	095b      	lsrs	r3, r3, #5
 8007960:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007964:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007968:	f003 031f 	and.w	r3, r3, #31
 800796c:	2b00      	cmp	r3, #0
 800796e:	d104      	bne.n	800797a <USB_EPStartXfer+0x58e>
 8007970:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007974:	3b01      	subs	r3, #1
 8007976:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800797a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800797e:	b29b      	uxth	r3, r3
 8007980:	029b      	lsls	r3, r3, #10
 8007982:	b29b      	uxth	r3, r3
 8007984:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007988:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800798c:	b29a      	uxth	r2, r3
 800798e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007992:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	801a      	strh	r2, [r3, #0]
 800799a:	e042      	b.n	8007a22 <USB_EPStartXfer+0x636>
 800799c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	785b      	ldrb	r3, [r3, #1]
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d13a      	bne.n	8007a22 <USB_EPStartXfer+0x636>
 80079ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079b0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80079b4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80079b8:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80079bc:	6812      	ldr	r2, [r2, #0]
 80079be:	601a      	str	r2, [r3, #0]
 80079c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	4619      	mov	r1, r3
 80079d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079d6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80079da:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80079de:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80079e2:	6812      	ldr	r2, [r2, #0]
 80079e4:	440a      	add	r2, r1
 80079e6:	601a      	str	r2, [r3, #0]
 80079e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	781b      	ldrb	r3, [r3, #0]
 80079f4:	011a      	lsls	r2, r3, #4
 80079f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079fa:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4413      	add	r3, r2
 8007a02:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8007a06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a0a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007a0e:	601a      	str	r2, [r3, #0]
 8007a10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a14:	b29a      	uxth	r2, r3
 8007a16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a1a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007a22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	891b      	ldrh	r3, [r3, #8]
 8007a2e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	6959      	ldr	r1, [r3, #20]
 8007a3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007a48:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007a4c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007a50:	6800      	ldr	r0, [r0, #0]
 8007a52:	f001 fc41 	bl	80092d8 <USB_WritePMA>
 8007a56:	f000 be0e 	b.w	8008676 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007a5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	785b      	ldrb	r3, [r3, #1]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d16d      	bne.n	8007b46 <USB_EPStartXfer+0x75a>
 8007a6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a7a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a84:	b29b      	uxth	r3, r3
 8007a86:	461a      	mov	r2, r3
 8007a88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a8a:	4413      	add	r3, r2
 8007a8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	781b      	ldrb	r3, [r3, #0]
 8007a9a:	011a      	lsls	r2, r3, #4
 8007a9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a9e:	4413      	add	r3, r2
 8007aa0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007aa4:	647b      	str	r3, [r7, #68]	; 0x44
 8007aa6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d112      	bne.n	8007ad4 <USB_EPStartXfer+0x6e8>
 8007aae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ab0:	881b      	ldrh	r3, [r3, #0]
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007ab8:	b29a      	uxth	r2, r3
 8007aba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007abc:	801a      	strh	r2, [r3, #0]
 8007abe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ac0:	881b      	ldrh	r3, [r3, #0]
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ac8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007acc:	b29a      	uxth	r2, r3
 8007ace:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ad0:	801a      	strh	r2, [r3, #0]
 8007ad2:	e063      	b.n	8007b9c <USB_EPStartXfer+0x7b0>
 8007ad4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ad8:	2b3e      	cmp	r3, #62	; 0x3e
 8007ada:	d817      	bhi.n	8007b0c <USB_EPStartXfer+0x720>
 8007adc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ae0:	085b      	lsrs	r3, r3, #1
 8007ae2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007ae6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007aea:	f003 0301 	and.w	r3, r3, #1
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d004      	beq.n	8007afc <USB_EPStartXfer+0x710>
 8007af2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007af6:	3301      	adds	r3, #1
 8007af8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007afc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007b00:	b29b      	uxth	r3, r3
 8007b02:	029b      	lsls	r3, r3, #10
 8007b04:	b29a      	uxth	r2, r3
 8007b06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b08:	801a      	strh	r2, [r3, #0]
 8007b0a:	e047      	b.n	8007b9c <USB_EPStartXfer+0x7b0>
 8007b0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b10:	095b      	lsrs	r3, r3, #5
 8007b12:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007b16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b1a:	f003 031f 	and.w	r3, r3, #31
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d104      	bne.n	8007b2c <USB_EPStartXfer+0x740>
 8007b22:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007b26:	3b01      	subs	r3, #1
 8007b28:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007b2c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	029b      	lsls	r3, r3, #10
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b3e:	b29a      	uxth	r2, r3
 8007b40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b42:	801a      	strh	r2, [r3, #0]
 8007b44:	e02a      	b.n	8007b9c <USB_EPStartXfer+0x7b0>
 8007b46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	785b      	ldrb	r3, [r3, #1]
 8007b52:	2b01      	cmp	r3, #1
 8007b54:	d122      	bne.n	8007b9c <USB_EPStartXfer+0x7b0>
 8007b56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b5a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	653b      	str	r3, [r7, #80]	; 0x50
 8007b62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b66:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	461a      	mov	r2, r3
 8007b74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b76:	4413      	add	r3, r2
 8007b78:	653b      	str	r3, [r7, #80]	; 0x50
 8007b7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	011a      	lsls	r2, r3, #4
 8007b88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b8a:	4413      	add	r3, r2
 8007b8c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007b90:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b96:	b29a      	uxth	r2, r3
 8007b98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b9a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007b9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ba0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	891b      	ldrh	r3, [r3, #8]
 8007ba8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007bac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bb0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	6959      	ldr	r1, [r3, #20]
 8007bb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bbc:	b29b      	uxth	r3, r3
 8007bbe:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007bc2:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007bc6:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007bca:	6800      	ldr	r0, [r0, #0]
 8007bcc:	f001 fb84 	bl	80092d8 <USB_WritePMA>
            ep->xfer_buff += len;
 8007bd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bd4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	695a      	ldr	r2, [r3, #20]
 8007bdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007be0:	441a      	add	r2, r3
 8007be2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007be6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007bee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bf2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	6a1a      	ldr	r2, [r3, #32]
 8007bfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bfe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	691b      	ldr	r3, [r3, #16]
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d90f      	bls.n	8007c2a <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8007c0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	6a1a      	ldr	r2, [r3, #32]
 8007c16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c1a:	1ad2      	subs	r2, r2, r3
 8007c1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	621a      	str	r2, [r3, #32]
 8007c28:	e00e      	b.n	8007c48 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8007c2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	6a1b      	ldr	r3, [r3, #32]
 8007c36:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8007c3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	2200      	movs	r2, #0
 8007c46:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007c48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c4c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	643b      	str	r3, [r7, #64]	; 0x40
 8007c54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	785b      	ldrb	r3, [r3, #1]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d16d      	bne.n	8007d40 <USB_EPStartXfer+0x954>
 8007c64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c68:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007c70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c74:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	461a      	mov	r2, r3
 8007c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c84:	4413      	add	r3, r2
 8007c86:	63bb      	str	r3, [r7, #56]	; 0x38
 8007c88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	781b      	ldrb	r3, [r3, #0]
 8007c94:	011a      	lsls	r2, r3, #4
 8007c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c98:	4413      	add	r3, r2
 8007c9a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007c9e:	637b      	str	r3, [r7, #52]	; 0x34
 8007ca0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d112      	bne.n	8007cce <USB_EPStartXfer+0x8e2>
 8007ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007caa:	881b      	ldrh	r3, [r3, #0]
 8007cac:	b29b      	uxth	r3, r3
 8007cae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007cb2:	b29a      	uxth	r2, r3
 8007cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cb6:	801a      	strh	r2, [r3, #0]
 8007cb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cba:	881b      	ldrh	r3, [r3, #0]
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cc6:	b29a      	uxth	r2, r3
 8007cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cca:	801a      	strh	r2, [r3, #0]
 8007ccc:	e05d      	b.n	8007d8a <USB_EPStartXfer+0x99e>
 8007cce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cd2:	2b3e      	cmp	r3, #62	; 0x3e
 8007cd4:	d817      	bhi.n	8007d06 <USB_EPStartXfer+0x91a>
 8007cd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cda:	085b      	lsrs	r3, r3, #1
 8007cdc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007ce0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ce4:	f003 0301 	and.w	r3, r3, #1
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d004      	beq.n	8007cf6 <USB_EPStartXfer+0x90a>
 8007cec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007cf0:	3301      	adds	r3, #1
 8007cf2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007cf6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007cfa:	b29b      	uxth	r3, r3
 8007cfc:	029b      	lsls	r3, r3, #10
 8007cfe:	b29a      	uxth	r2, r3
 8007d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d02:	801a      	strh	r2, [r3, #0]
 8007d04:	e041      	b.n	8007d8a <USB_EPStartXfer+0x99e>
 8007d06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d0a:	095b      	lsrs	r3, r3, #5
 8007d0c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007d10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d14:	f003 031f 	and.w	r3, r3, #31
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d104      	bne.n	8007d26 <USB_EPStartXfer+0x93a>
 8007d1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007d20:	3b01      	subs	r3, #1
 8007d22:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007d26:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007d2a:	b29b      	uxth	r3, r3
 8007d2c:	029b      	lsls	r3, r3, #10
 8007d2e:	b29b      	uxth	r3, r3
 8007d30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d38:	b29a      	uxth	r2, r3
 8007d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d3c:	801a      	strh	r2, [r3, #0]
 8007d3e:	e024      	b.n	8007d8a <USB_EPStartXfer+0x99e>
 8007d40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	785b      	ldrb	r3, [r3, #1]
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d11c      	bne.n	8007d8a <USB_EPStartXfer+0x99e>
 8007d50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d54:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d5e:	b29b      	uxth	r3, r3
 8007d60:	461a      	mov	r2, r3
 8007d62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d64:	4413      	add	r3, r2
 8007d66:	643b      	str	r3, [r7, #64]	; 0x40
 8007d68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	781b      	ldrb	r3, [r3, #0]
 8007d74:	011a      	lsls	r2, r3, #4
 8007d76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d78:	4413      	add	r3, r2
 8007d7a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d84:	b29a      	uxth	r2, r3
 8007d86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d88:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007d8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	895b      	ldrh	r3, [r3, #10]
 8007d96:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007d9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	6959      	ldr	r1, [r3, #20]
 8007da6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007db0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007db4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007db8:	6800      	ldr	r0, [r0, #0]
 8007dba:	f001 fa8d 	bl	80092d8 <USB_WritePMA>
 8007dbe:	f000 bc5a 	b.w	8008676 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007dc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	6a1b      	ldr	r3, [r3, #32]
 8007dce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8007dd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dd6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007dda:	681a      	ldr	r2, [r3, #0]
 8007ddc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007de0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	009b      	lsls	r3, r3, #2
 8007dea:	4413      	add	r3, r2
 8007dec:	881b      	ldrh	r3, [r3, #0]
 8007dee:	b29b      	uxth	r3, r3
 8007df0:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007df4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007df8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007dfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e04:	681a      	ldr	r2, [r3, #0]
 8007e06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	781b      	ldrb	r3, [r3, #0]
 8007e12:	009b      	lsls	r3, r3, #2
 8007e14:	441a      	add	r2, r3
 8007e16:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007e1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e2a:	b29b      	uxth	r3, r3
 8007e2c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007e2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e3e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e48:	b29b      	uxth	r3, r3
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e4e:	4413      	add	r3, r2
 8007e50:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	781b      	ldrb	r3, [r3, #0]
 8007e5e:	011a      	lsls	r2, r3, #4
 8007e60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e62:	4413      	add	r3, r2
 8007e64:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007e68:	65bb      	str	r3, [r7, #88]	; 0x58
 8007e6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e6e:	b29a      	uxth	r2, r3
 8007e70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007e72:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007e74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	891b      	ldrh	r3, [r3, #8]
 8007e80:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007e84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	6959      	ldr	r1, [r3, #20]
 8007e90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e94:	b29b      	uxth	r3, r3
 8007e96:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007e9a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007e9e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007ea2:	6800      	ldr	r0, [r0, #0]
 8007ea4:	f001 fa18 	bl	80092d8 <USB_WritePMA>
 8007ea8:	e3e5      	b.n	8008676 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8007eaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007eae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007eb2:	681a      	ldr	r2, [r3, #0]
 8007eb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007eb8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	781b      	ldrb	r3, [r3, #0]
 8007ec0:	009b      	lsls	r3, r3, #2
 8007ec2:	4413      	add	r3, r2
 8007ec4:	881b      	ldrh	r3, [r3, #0]
 8007ec6:	b29b      	uxth	r3, r3
 8007ec8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ecc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ed0:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8007ed4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ed8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007edc:	681a      	ldr	r2, [r3, #0]
 8007ede:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ee2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	781b      	ldrb	r3, [r3, #0]
 8007eea:	009b      	lsls	r3, r3, #2
 8007eec:	441a      	add	r2, r3
 8007eee:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8007ef2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ef6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007efa:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007efe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f02:	b29b      	uxth	r3, r3
 8007f04:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007f06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	6a1a      	ldr	r2, [r3, #32]
 8007f12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f16:	1ad2      	subs	r2, r2, r3
 8007f18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007f24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f28:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f2c:	681a      	ldr	r2, [r3, #0]
 8007f2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	781b      	ldrb	r3, [r3, #0]
 8007f3a:	009b      	lsls	r3, r3, #2
 8007f3c:	4413      	add	r3, r2
 8007f3e:	881b      	ldrh	r3, [r3, #0]
 8007f40:	b29b      	uxth	r3, r3
 8007f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	f000 81bc 	beq.w	80082c4 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007f4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f50:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007f5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	785b      	ldrb	r3, [r3, #1]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d16d      	bne.n	8008046 <USB_EPStartXfer+0xc5a>
 8007f6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	67bb      	str	r3, [r7, #120]	; 0x78
 8007f76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f7a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f84:	b29b      	uxth	r3, r3
 8007f86:	461a      	mov	r2, r3
 8007f88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f8a:	4413      	add	r3, r2
 8007f8c:	67bb      	str	r3, [r7, #120]	; 0x78
 8007f8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	781b      	ldrb	r3, [r3, #0]
 8007f9a:	011a      	lsls	r2, r3, #4
 8007f9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f9e:	4413      	add	r3, r2
 8007fa0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007fa4:	677b      	str	r3, [r7, #116]	; 0x74
 8007fa6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d112      	bne.n	8007fd4 <USB_EPStartXfer+0xbe8>
 8007fae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007fb0:	881b      	ldrh	r3, [r3, #0]
 8007fb2:	b29b      	uxth	r3, r3
 8007fb4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007fb8:	b29a      	uxth	r2, r3
 8007fba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007fbc:	801a      	strh	r2, [r3, #0]
 8007fbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007fc0:	881b      	ldrh	r3, [r3, #0]
 8007fc2:	b29b      	uxth	r3, r3
 8007fc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fcc:	b29a      	uxth	r2, r3
 8007fce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007fd0:	801a      	strh	r2, [r3, #0]
 8007fd2:	e060      	b.n	8008096 <USB_EPStartXfer+0xcaa>
 8007fd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fd8:	2b3e      	cmp	r3, #62	; 0x3e
 8007fda:	d817      	bhi.n	800800c <USB_EPStartXfer+0xc20>
 8007fdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fe0:	085b      	lsrs	r3, r3, #1
 8007fe2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007fe6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fea:	f003 0301 	and.w	r3, r3, #1
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d004      	beq.n	8007ffc <USB_EPStartXfer+0xc10>
 8007ff2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007ff6:	3301      	adds	r3, #1
 8007ff8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007ffc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008000:	b29b      	uxth	r3, r3
 8008002:	029b      	lsls	r3, r3, #10
 8008004:	b29a      	uxth	r2, r3
 8008006:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008008:	801a      	strh	r2, [r3, #0]
 800800a:	e044      	b.n	8008096 <USB_EPStartXfer+0xcaa>
 800800c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008010:	095b      	lsrs	r3, r3, #5
 8008012:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008016:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800801a:	f003 031f 	and.w	r3, r3, #31
 800801e:	2b00      	cmp	r3, #0
 8008020:	d104      	bne.n	800802c <USB_EPStartXfer+0xc40>
 8008022:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008026:	3b01      	subs	r3, #1
 8008028:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800802c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008030:	b29b      	uxth	r3, r3
 8008032:	029b      	lsls	r3, r3, #10
 8008034:	b29b      	uxth	r3, r3
 8008036:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800803a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800803e:	b29a      	uxth	r2, r3
 8008040:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008042:	801a      	strh	r2, [r3, #0]
 8008044:	e027      	b.n	8008096 <USB_EPStartXfer+0xcaa>
 8008046:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800804a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	785b      	ldrb	r3, [r3, #1]
 8008052:	2b01      	cmp	r3, #1
 8008054:	d11f      	bne.n	8008096 <USB_EPStartXfer+0xcaa>
 8008056:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800805a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008064:	b29b      	uxth	r3, r3
 8008066:	461a      	mov	r2, r3
 8008068:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800806c:	4413      	add	r3, r2
 800806e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008072:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008076:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	011a      	lsls	r2, r3, #4
 8008080:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008084:	4413      	add	r3, r2
 8008086:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800808a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800808c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008090:	b29a      	uxth	r2, r3
 8008092:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008094:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008096:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800809a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	895b      	ldrh	r3, [r3, #10]
 80080a2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80080a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	6959      	ldr	r1, [r3, #20]
 80080b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080b6:	b29b      	uxth	r3, r3
 80080b8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80080bc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80080c0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80080c4:	6800      	ldr	r0, [r0, #0]
 80080c6:	f001 f907 	bl	80092d8 <USB_WritePMA>
          ep->xfer_buff += len;
 80080ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	695a      	ldr	r2, [r3, #20]
 80080d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080da:	441a      	add	r2, r3
 80080dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80080e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	6a1a      	ldr	r2, [r3, #32]
 80080f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	691b      	ldr	r3, [r3, #16]
 8008100:	429a      	cmp	r2, r3
 8008102:	d90f      	bls.n	8008124 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8008104:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008108:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	6a1a      	ldr	r2, [r3, #32]
 8008110:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008114:	1ad2      	subs	r2, r2, r3
 8008116:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800811a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	621a      	str	r2, [r3, #32]
 8008122:	e00e      	b.n	8008142 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8008124:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008128:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	6a1b      	ldr	r3, [r3, #32]
 8008130:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8008134:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008138:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	2200      	movs	r2, #0
 8008140:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8008142:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008146:	2b00      	cmp	r3, #0
 8008148:	f000 8295 	beq.w	8008676 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800814c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008150:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	785b      	ldrb	r3, [r3, #1]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d16d      	bne.n	8008238 <USB_EPStartXfer+0xe4c>
 800815c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008160:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	66bb      	str	r3, [r7, #104]	; 0x68
 8008168:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800816c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008176:	b29b      	uxth	r3, r3
 8008178:	461a      	mov	r2, r3
 800817a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800817c:	4413      	add	r3, r2
 800817e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008180:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008184:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	781b      	ldrb	r3, [r3, #0]
 800818c:	011a      	lsls	r2, r3, #4
 800818e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008190:	4413      	add	r3, r2
 8008192:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008196:	667b      	str	r3, [r7, #100]	; 0x64
 8008198:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800819c:	2b00      	cmp	r3, #0
 800819e:	d112      	bne.n	80081c6 <USB_EPStartXfer+0xdda>
 80081a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081a2:	881b      	ldrh	r3, [r3, #0]
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80081aa:	b29a      	uxth	r2, r3
 80081ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081ae:	801a      	strh	r2, [r3, #0]
 80081b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081b2:	881b      	ldrh	r3, [r3, #0]
 80081b4:	b29b      	uxth	r3, r3
 80081b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081be:	b29a      	uxth	r2, r3
 80081c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081c2:	801a      	strh	r2, [r3, #0]
 80081c4:	e063      	b.n	800828e <USB_EPStartXfer+0xea2>
 80081c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081ca:	2b3e      	cmp	r3, #62	; 0x3e
 80081cc:	d817      	bhi.n	80081fe <USB_EPStartXfer+0xe12>
 80081ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081d2:	085b      	lsrs	r3, r3, #1
 80081d4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80081d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081dc:	f003 0301 	and.w	r3, r3, #1
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d004      	beq.n	80081ee <USB_EPStartXfer+0xe02>
 80081e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081e8:	3301      	adds	r3, #1
 80081ea:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80081ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	029b      	lsls	r3, r3, #10
 80081f6:	b29a      	uxth	r2, r3
 80081f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081fa:	801a      	strh	r2, [r3, #0]
 80081fc:	e047      	b.n	800828e <USB_EPStartXfer+0xea2>
 80081fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008202:	095b      	lsrs	r3, r3, #5
 8008204:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008208:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800820c:	f003 031f 	and.w	r3, r3, #31
 8008210:	2b00      	cmp	r3, #0
 8008212:	d104      	bne.n	800821e <USB_EPStartXfer+0xe32>
 8008214:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008218:	3b01      	subs	r3, #1
 800821a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800821e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008222:	b29b      	uxth	r3, r3
 8008224:	029b      	lsls	r3, r3, #10
 8008226:	b29b      	uxth	r3, r3
 8008228:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800822c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008230:	b29a      	uxth	r2, r3
 8008232:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008234:	801a      	strh	r2, [r3, #0]
 8008236:	e02a      	b.n	800828e <USB_EPStartXfer+0xea2>
 8008238:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800823c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	785b      	ldrb	r3, [r3, #1]
 8008244:	2b01      	cmp	r3, #1
 8008246:	d122      	bne.n	800828e <USB_EPStartXfer+0xea2>
 8008248:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800824c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	673b      	str	r3, [r7, #112]	; 0x70
 8008254:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008258:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008262:	b29b      	uxth	r3, r3
 8008264:	461a      	mov	r2, r3
 8008266:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008268:	4413      	add	r3, r2
 800826a:	673b      	str	r3, [r7, #112]	; 0x70
 800826c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008270:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	781b      	ldrb	r3, [r3, #0]
 8008278:	011a      	lsls	r2, r3, #4
 800827a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800827c:	4413      	add	r3, r2
 800827e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008282:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008284:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008288:	b29a      	uxth	r2, r3
 800828a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800828c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800828e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008292:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	891b      	ldrh	r3, [r3, #8]
 800829a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800829e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	6959      	ldr	r1, [r3, #20]
 80082aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80082b4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80082b8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80082bc:	6800      	ldr	r0, [r0, #0]
 80082be:	f001 f80b 	bl	80092d8 <USB_WritePMA>
 80082c2:	e1d8      	b.n	8008676 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80082c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	785b      	ldrb	r3, [r3, #1]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d178      	bne.n	80083c6 <USB_EPStartXfer+0xfda>
 80082d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80082e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082f0:	b29b      	uxth	r3, r3
 80082f2:	461a      	mov	r2, r3
 80082f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80082f8:	4413      	add	r3, r2
 80082fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80082fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008302:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	781b      	ldrb	r3, [r3, #0]
 800830a:	011a      	lsls	r2, r3, #4
 800830c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008310:	4413      	add	r3, r2
 8008312:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008316:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800831a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800831e:	2b00      	cmp	r3, #0
 8008320:	d116      	bne.n	8008350 <USB_EPStartXfer+0xf64>
 8008322:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008326:	881b      	ldrh	r3, [r3, #0]
 8008328:	b29b      	uxth	r3, r3
 800832a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800832e:	b29a      	uxth	r2, r3
 8008330:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008334:	801a      	strh	r2, [r3, #0]
 8008336:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800833a:	881b      	ldrh	r3, [r3, #0]
 800833c:	b29b      	uxth	r3, r3
 800833e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008342:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008346:	b29a      	uxth	r2, r3
 8008348:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800834c:	801a      	strh	r2, [r3, #0]
 800834e:	e06b      	b.n	8008428 <USB_EPStartXfer+0x103c>
 8008350:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008354:	2b3e      	cmp	r3, #62	; 0x3e
 8008356:	d818      	bhi.n	800838a <USB_EPStartXfer+0xf9e>
 8008358:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800835c:	085b      	lsrs	r3, r3, #1
 800835e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008362:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008366:	f003 0301 	and.w	r3, r3, #1
 800836a:	2b00      	cmp	r3, #0
 800836c:	d004      	beq.n	8008378 <USB_EPStartXfer+0xf8c>
 800836e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008372:	3301      	adds	r3, #1
 8008374:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008378:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800837c:	b29b      	uxth	r3, r3
 800837e:	029b      	lsls	r3, r3, #10
 8008380:	b29a      	uxth	r2, r3
 8008382:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008386:	801a      	strh	r2, [r3, #0]
 8008388:	e04e      	b.n	8008428 <USB_EPStartXfer+0x103c>
 800838a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800838e:	095b      	lsrs	r3, r3, #5
 8008390:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008394:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008398:	f003 031f 	and.w	r3, r3, #31
 800839c:	2b00      	cmp	r3, #0
 800839e:	d104      	bne.n	80083aa <USB_EPStartXfer+0xfbe>
 80083a0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80083a4:	3b01      	subs	r3, #1
 80083a6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80083aa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	029b      	lsls	r3, r3, #10
 80083b2:	b29b      	uxth	r3, r3
 80083b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083bc:	b29a      	uxth	r2, r3
 80083be:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80083c2:	801a      	strh	r2, [r3, #0]
 80083c4:	e030      	b.n	8008428 <USB_EPStartXfer+0x103c>
 80083c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	785b      	ldrb	r3, [r3, #1]
 80083d2:	2b01      	cmp	r3, #1
 80083d4:	d128      	bne.n	8008428 <USB_EPStartXfer+0x103c>
 80083d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80083e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083f2:	b29b      	uxth	r3, r3
 80083f4:	461a      	mov	r2, r3
 80083f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80083fa:	4413      	add	r3, r2
 80083fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008400:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008404:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	781b      	ldrb	r3, [r3, #0]
 800840c:	011a      	lsls	r2, r3, #4
 800840e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008412:	4413      	add	r3, r2
 8008414:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008418:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800841c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008420:	b29a      	uxth	r2, r3
 8008422:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008426:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008428:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800842c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	891b      	ldrh	r3, [r3, #8]
 8008434:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008438:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800843c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	6959      	ldr	r1, [r3, #20]
 8008444:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008448:	b29b      	uxth	r3, r3
 800844a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800844e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008452:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008456:	6800      	ldr	r0, [r0, #0]
 8008458:	f000 ff3e 	bl	80092d8 <USB_WritePMA>
          ep->xfer_buff += len;
 800845c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008460:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	695a      	ldr	r2, [r3, #20]
 8008468:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800846c:	441a      	add	r2, r3
 800846e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008472:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800847a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800847e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	6a1a      	ldr	r2, [r3, #32]
 8008486:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800848a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	691b      	ldr	r3, [r3, #16]
 8008492:	429a      	cmp	r2, r3
 8008494:	d90f      	bls.n	80084b6 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8008496:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800849a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	6a1a      	ldr	r2, [r3, #32]
 80084a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084a6:	1ad2      	subs	r2, r2, r3
 80084a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	621a      	str	r2, [r3, #32]
 80084b4:	e00e      	b.n	80084d4 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 80084b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	6a1b      	ldr	r3, [r3, #32]
 80084c2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80084c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	2200      	movs	r2, #0
 80084d2:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80084d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084d8:	2b00      	cmp	r3, #0
 80084da:	f000 80cc 	beq.w	8008676 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80084de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80084ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	785b      	ldrb	r3, [r3, #1]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d178      	bne.n	80085ee <USB_EPStartXfer+0x1202>
 80084fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008500:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800850a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800850e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008518:	b29b      	uxth	r3, r3
 800851a:	461a      	mov	r2, r3
 800851c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008520:	4413      	add	r3, r2
 8008522:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008526:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800852a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	781b      	ldrb	r3, [r3, #0]
 8008532:	011a      	lsls	r2, r3, #4
 8008534:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008538:	4413      	add	r3, r2
 800853a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800853e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008542:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008546:	2b00      	cmp	r3, #0
 8008548:	d116      	bne.n	8008578 <USB_EPStartXfer+0x118c>
 800854a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800854e:	881b      	ldrh	r3, [r3, #0]
 8008550:	b29b      	uxth	r3, r3
 8008552:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008556:	b29a      	uxth	r2, r3
 8008558:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800855c:	801a      	strh	r2, [r3, #0]
 800855e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008562:	881b      	ldrh	r3, [r3, #0]
 8008564:	b29b      	uxth	r3, r3
 8008566:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800856a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800856e:	b29a      	uxth	r2, r3
 8008570:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008574:	801a      	strh	r2, [r3, #0]
 8008576:	e064      	b.n	8008642 <USB_EPStartXfer+0x1256>
 8008578:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800857c:	2b3e      	cmp	r3, #62	; 0x3e
 800857e:	d818      	bhi.n	80085b2 <USB_EPStartXfer+0x11c6>
 8008580:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008584:	085b      	lsrs	r3, r3, #1
 8008586:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800858a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800858e:	f003 0301 	and.w	r3, r3, #1
 8008592:	2b00      	cmp	r3, #0
 8008594:	d004      	beq.n	80085a0 <USB_EPStartXfer+0x11b4>
 8008596:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800859a:	3301      	adds	r3, #1
 800859c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80085a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80085a4:	b29b      	uxth	r3, r3
 80085a6:	029b      	lsls	r3, r3, #10
 80085a8:	b29a      	uxth	r2, r3
 80085aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80085ae:	801a      	strh	r2, [r3, #0]
 80085b0:	e047      	b.n	8008642 <USB_EPStartXfer+0x1256>
 80085b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085b6:	095b      	lsrs	r3, r3, #5
 80085b8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80085bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085c0:	f003 031f 	and.w	r3, r3, #31
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d104      	bne.n	80085d2 <USB_EPStartXfer+0x11e6>
 80085c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80085cc:	3b01      	subs	r3, #1
 80085ce:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80085d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80085d6:	b29b      	uxth	r3, r3
 80085d8:	029b      	lsls	r3, r3, #10
 80085da:	b29b      	uxth	r3, r3
 80085dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085e4:	b29a      	uxth	r2, r3
 80085e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80085ea:	801a      	strh	r2, [r3, #0]
 80085ec:	e029      	b.n	8008642 <USB_EPStartXfer+0x1256>
 80085ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	785b      	ldrb	r3, [r3, #1]
 80085fa:	2b01      	cmp	r3, #1
 80085fc:	d121      	bne.n	8008642 <USB_EPStartXfer+0x1256>
 80085fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008602:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800860c:	b29b      	uxth	r3, r3
 800860e:	461a      	mov	r2, r3
 8008610:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008614:	4413      	add	r3, r2
 8008616:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800861a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800861e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	781b      	ldrb	r3, [r3, #0]
 8008626:	011a      	lsls	r2, r3, #4
 8008628:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800862c:	4413      	add	r3, r2
 800862e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008632:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008636:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800863a:	b29a      	uxth	r2, r3
 800863c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008640:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008642:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008646:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	895b      	ldrh	r3, [r3, #10]
 800864e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008652:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008656:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	6959      	ldr	r1, [r3, #20]
 800865e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008662:	b29b      	uxth	r3, r3
 8008664:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008668:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800866c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008670:	6800      	ldr	r0, [r0, #0]
 8008672:	f000 fe31 	bl	80092d8 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008676:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800867a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800867e:	681a      	ldr	r2, [r3, #0]
 8008680:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008684:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	781b      	ldrb	r3, [r3, #0]
 800868c:	009b      	lsls	r3, r3, #2
 800868e:	4413      	add	r3, r2
 8008690:	881b      	ldrh	r3, [r3, #0]
 8008692:	b29b      	uxth	r3, r3
 8008694:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008698:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800869c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086a4:	8013      	strh	r3, [r2, #0]
 80086a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086aa:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80086ae:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80086b2:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80086b6:	8812      	ldrh	r2, [r2, #0]
 80086b8:	f082 0210 	eor.w	r2, r2, #16
 80086bc:	801a      	strh	r2, [r3, #0]
 80086be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086c2:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80086c6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80086ca:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80086ce:	8812      	ldrh	r2, [r2, #0]
 80086d0:	f082 0220 	eor.w	r2, r2, #32
 80086d4:	801a      	strh	r2, [r3, #0]
 80086d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80086de:	681a      	ldr	r2, [r3, #0]
 80086e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	781b      	ldrb	r3, [r3, #0]
 80086ec:	009b      	lsls	r3, r3, #2
 80086ee:	441a      	add	r2, r3
 80086f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086f4:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80086f8:	881b      	ldrh	r3, [r3, #0]
 80086fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008702:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008706:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800870a:	b29b      	uxth	r3, r3
 800870c:	8013      	strh	r3, [r2, #0]
 800870e:	f000 bc9f 	b.w	8009050 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008712:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008716:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	7b1b      	ldrb	r3, [r3, #12]
 800871e:	2b00      	cmp	r3, #0
 8008720:	f040 80ae 	bne.w	8008880 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008724:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008728:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	699a      	ldr	r2, [r3, #24]
 8008730:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008734:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	691b      	ldr	r3, [r3, #16]
 800873c:	429a      	cmp	r2, r3
 800873e:	d917      	bls.n	8008770 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8008740:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008744:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	691b      	ldr	r3, [r3, #16]
 800874c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8008750:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008754:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	699a      	ldr	r2, [r3, #24]
 800875c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008760:	1ad2      	subs	r2, r2, r3
 8008762:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008766:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	619a      	str	r2, [r3, #24]
 800876e:	e00e      	b.n	800878e <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8008770:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008774:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	699b      	ldr	r3, [r3, #24]
 800877c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8008780:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008784:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	2200      	movs	r2, #0
 800878c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800878e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008792:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800879c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087aa:	b29b      	uxth	r3, r3
 80087ac:	461a      	mov	r2, r3
 80087ae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80087b2:	4413      	add	r3, r2
 80087b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80087b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	781b      	ldrb	r3, [r3, #0]
 80087c4:	011a      	lsls	r2, r3, #4
 80087c6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80087ca:	4413      	add	r3, r2
 80087cc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80087d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80087d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d116      	bne.n	800880a <USB_EPStartXfer+0x141e>
 80087dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80087e0:	881b      	ldrh	r3, [r3, #0]
 80087e2:	b29b      	uxth	r3, r3
 80087e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80087e8:	b29a      	uxth	r2, r3
 80087ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80087ee:	801a      	strh	r2, [r3, #0]
 80087f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80087f4:	881b      	ldrh	r3, [r3, #0]
 80087f6:	b29b      	uxth	r3, r3
 80087f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008800:	b29a      	uxth	r2, r3
 8008802:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008806:	801a      	strh	r2, [r3, #0]
 8008808:	e3e8      	b.n	8008fdc <USB_EPStartXfer+0x1bf0>
 800880a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800880e:	2b3e      	cmp	r3, #62	; 0x3e
 8008810:	d818      	bhi.n	8008844 <USB_EPStartXfer+0x1458>
 8008812:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008816:	085b      	lsrs	r3, r3, #1
 8008818:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800881c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008820:	f003 0301 	and.w	r3, r3, #1
 8008824:	2b00      	cmp	r3, #0
 8008826:	d004      	beq.n	8008832 <USB_EPStartXfer+0x1446>
 8008828:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800882c:	3301      	adds	r3, #1
 800882e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008832:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008836:	b29b      	uxth	r3, r3
 8008838:	029b      	lsls	r3, r3, #10
 800883a:	b29a      	uxth	r2, r3
 800883c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008840:	801a      	strh	r2, [r3, #0]
 8008842:	e3cb      	b.n	8008fdc <USB_EPStartXfer+0x1bf0>
 8008844:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008848:	095b      	lsrs	r3, r3, #5
 800884a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800884e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008852:	f003 031f 	and.w	r3, r3, #31
 8008856:	2b00      	cmp	r3, #0
 8008858:	d104      	bne.n	8008864 <USB_EPStartXfer+0x1478>
 800885a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800885e:	3b01      	subs	r3, #1
 8008860:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008864:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008868:	b29b      	uxth	r3, r3
 800886a:	029b      	lsls	r3, r3, #10
 800886c:	b29b      	uxth	r3, r3
 800886e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008872:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008876:	b29a      	uxth	r2, r3
 8008878:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800887c:	801a      	strh	r2, [r3, #0]
 800887e:	e3ad      	b.n	8008fdc <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008880:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008884:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	78db      	ldrb	r3, [r3, #3]
 800888c:	2b02      	cmp	r3, #2
 800888e:	f040 8200 	bne.w	8008c92 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008892:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008896:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	785b      	ldrb	r3, [r3, #1]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	f040 8091 	bne.w	80089c6 <USB_EPStartXfer+0x15da>
 80088a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80088b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088c0:	b29b      	uxth	r3, r3
 80088c2:	461a      	mov	r2, r3
 80088c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80088c8:	4413      	add	r3, r2
 80088ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80088ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	781b      	ldrb	r3, [r3, #0]
 80088da:	011a      	lsls	r2, r3, #4
 80088dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80088e0:	4413      	add	r3, r2
 80088e2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80088e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80088ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	691b      	ldr	r3, [r3, #16]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d116      	bne.n	8008928 <USB_EPStartXfer+0x153c>
 80088fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80088fe:	881b      	ldrh	r3, [r3, #0]
 8008900:	b29b      	uxth	r3, r3
 8008902:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008906:	b29a      	uxth	r2, r3
 8008908:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800890c:	801a      	strh	r2, [r3, #0]
 800890e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008912:	881b      	ldrh	r3, [r3, #0]
 8008914:	b29b      	uxth	r3, r3
 8008916:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800891a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800891e:	b29a      	uxth	r2, r3
 8008920:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008924:	801a      	strh	r2, [r3, #0]
 8008926:	e083      	b.n	8008a30 <USB_EPStartXfer+0x1644>
 8008928:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800892c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	691b      	ldr	r3, [r3, #16]
 8008934:	2b3e      	cmp	r3, #62	; 0x3e
 8008936:	d820      	bhi.n	800897a <USB_EPStartXfer+0x158e>
 8008938:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800893c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	691b      	ldr	r3, [r3, #16]
 8008944:	085b      	lsrs	r3, r3, #1
 8008946:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800894a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800894e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	691b      	ldr	r3, [r3, #16]
 8008956:	f003 0301 	and.w	r3, r3, #1
 800895a:	2b00      	cmp	r3, #0
 800895c:	d004      	beq.n	8008968 <USB_EPStartXfer+0x157c>
 800895e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008962:	3301      	adds	r3, #1
 8008964:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008968:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800896c:	b29b      	uxth	r3, r3
 800896e:	029b      	lsls	r3, r3, #10
 8008970:	b29a      	uxth	r2, r3
 8008972:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008976:	801a      	strh	r2, [r3, #0]
 8008978:	e05a      	b.n	8008a30 <USB_EPStartXfer+0x1644>
 800897a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800897e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	691b      	ldr	r3, [r3, #16]
 8008986:	095b      	lsrs	r3, r3, #5
 8008988:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800898c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008990:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	691b      	ldr	r3, [r3, #16]
 8008998:	f003 031f 	and.w	r3, r3, #31
 800899c:	2b00      	cmp	r3, #0
 800899e:	d104      	bne.n	80089aa <USB_EPStartXfer+0x15be>
 80089a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089a4:	3b01      	subs	r3, #1
 80089a6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80089aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089ae:	b29b      	uxth	r3, r3
 80089b0:	029b      	lsls	r3, r3, #10
 80089b2:	b29b      	uxth	r3, r3
 80089b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089bc:	b29a      	uxth	r2, r3
 80089be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80089c2:	801a      	strh	r2, [r3, #0]
 80089c4:	e034      	b.n	8008a30 <USB_EPStartXfer+0x1644>
 80089c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	785b      	ldrb	r3, [r3, #1]
 80089d2:	2b01      	cmp	r3, #1
 80089d4:	d12c      	bne.n	8008a30 <USB_EPStartXfer+0x1644>
 80089d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80089e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089f2:	b29b      	uxth	r3, r3
 80089f4:	461a      	mov	r2, r3
 80089f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80089fa:	4413      	add	r3, r2
 80089fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008a00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	781b      	ldrb	r3, [r3, #0]
 8008a0c:	011a      	lsls	r2, r3, #4
 8008a0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008a12:	4413      	add	r3, r2
 8008a14:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008a18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008a1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	691b      	ldr	r3, [r3, #16]
 8008a28:	b29a      	uxth	r2, r3
 8008a2a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008a2e:	801a      	strh	r2, [r3, #0]
 8008a30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a34:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008a3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	785b      	ldrb	r3, [r3, #1]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	f040 8091 	bne.w	8008b72 <USB_EPStartXfer+0x1786>
 8008a50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a54:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008a5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a62:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a6c:	b29b      	uxth	r3, r3
 8008a6e:	461a      	mov	r2, r3
 8008a70:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008a74:	4413      	add	r3, r2
 8008a76:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008a7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	781b      	ldrb	r3, [r3, #0]
 8008a86:	011a      	lsls	r2, r3, #4
 8008a88:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008a8c:	4413      	add	r3, r2
 8008a8e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008a92:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008a96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	691b      	ldr	r3, [r3, #16]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d116      	bne.n	8008ad4 <USB_EPStartXfer+0x16e8>
 8008aa6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008aaa:	881b      	ldrh	r3, [r3, #0]
 8008aac:	b29b      	uxth	r3, r3
 8008aae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008ab2:	b29a      	uxth	r2, r3
 8008ab4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008ab8:	801a      	strh	r2, [r3, #0]
 8008aba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008abe:	881b      	ldrh	r3, [r3, #0]
 8008ac0:	b29b      	uxth	r3, r3
 8008ac2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ac6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008aca:	b29a      	uxth	r2, r3
 8008acc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008ad0:	801a      	strh	r2, [r3, #0]
 8008ad2:	e07c      	b.n	8008bce <USB_EPStartXfer+0x17e2>
 8008ad4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ad8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	691b      	ldr	r3, [r3, #16]
 8008ae0:	2b3e      	cmp	r3, #62	; 0x3e
 8008ae2:	d820      	bhi.n	8008b26 <USB_EPStartXfer+0x173a>
 8008ae4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ae8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	691b      	ldr	r3, [r3, #16]
 8008af0:	085b      	lsrs	r3, r3, #1
 8008af2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008af6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008afa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	691b      	ldr	r3, [r3, #16]
 8008b02:	f003 0301 	and.w	r3, r3, #1
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d004      	beq.n	8008b14 <USB_EPStartXfer+0x1728>
 8008b0a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008b0e:	3301      	adds	r3, #1
 8008b10:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008b14:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008b18:	b29b      	uxth	r3, r3
 8008b1a:	029b      	lsls	r3, r3, #10
 8008b1c:	b29a      	uxth	r2, r3
 8008b1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008b22:	801a      	strh	r2, [r3, #0]
 8008b24:	e053      	b.n	8008bce <USB_EPStartXfer+0x17e2>
 8008b26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	691b      	ldr	r3, [r3, #16]
 8008b32:	095b      	lsrs	r3, r3, #5
 8008b34:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008b38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	691b      	ldr	r3, [r3, #16]
 8008b44:	f003 031f 	and.w	r3, r3, #31
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d104      	bne.n	8008b56 <USB_EPStartXfer+0x176a>
 8008b4c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008b50:	3b01      	subs	r3, #1
 8008b52:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008b56:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008b5a:	b29b      	uxth	r3, r3
 8008b5c:	029b      	lsls	r3, r3, #10
 8008b5e:	b29b      	uxth	r3, r3
 8008b60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b68:	b29a      	uxth	r2, r3
 8008b6a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008b6e:	801a      	strh	r2, [r3, #0]
 8008b70:	e02d      	b.n	8008bce <USB_EPStartXfer+0x17e2>
 8008b72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	785b      	ldrb	r3, [r3, #1]
 8008b7e:	2b01      	cmp	r3, #1
 8008b80:	d125      	bne.n	8008bce <USB_EPStartXfer+0x17e2>
 8008b82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b86:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b90:	b29b      	uxth	r3, r3
 8008b92:	461a      	mov	r2, r3
 8008b94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008b98:	4413      	add	r3, r2
 8008b9a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008b9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ba2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	781b      	ldrb	r3, [r3, #0]
 8008baa:	011a      	lsls	r2, r3, #4
 8008bac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008bb0:	4413      	add	r3, r2
 8008bb2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008bb6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008bba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	691b      	ldr	r3, [r3, #16]
 8008bc6:	b29a      	uxth	r2, r3
 8008bc8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008bcc:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008bce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	69db      	ldr	r3, [r3, #28]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	f000 81fe 	beq.w	8008fdc <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008be0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008be4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008be8:	681a      	ldr	r2, [r3, #0]
 8008bea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	781b      	ldrb	r3, [r3, #0]
 8008bf6:	009b      	lsls	r3, r3, #2
 8008bf8:	4413      	add	r3, r2
 8008bfa:	881b      	ldrh	r3, [r3, #0]
 8008bfc:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008c00:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008c04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d005      	beq.n	8008c18 <USB_EPStartXfer+0x182c>
 8008c0c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d10d      	bne.n	8008c34 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008c18:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008c1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	f040 81db 	bne.w	8008fdc <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008c26:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	f040 81d4 	bne.w	8008fdc <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8008c34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c38:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008c3c:	681a      	ldr	r2, [r3, #0]
 8008c3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	781b      	ldrb	r3, [r3, #0]
 8008c4a:	009b      	lsls	r3, r3, #2
 8008c4c:	4413      	add	r3, r2
 8008c4e:	881b      	ldrh	r3, [r3, #0]
 8008c50:	b29b      	uxth	r3, r3
 8008c52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c5a:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8008c5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c62:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008c66:	681a      	ldr	r2, [r3, #0]
 8008c68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	781b      	ldrb	r3, [r3, #0]
 8008c74:	009b      	lsls	r3, r3, #2
 8008c76:	441a      	add	r2, r3
 8008c78:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8008c7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c88:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008c8c:	b29b      	uxth	r3, r3
 8008c8e:	8013      	strh	r3, [r2, #0]
 8008c90:	e1a4      	b.n	8008fdc <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008c92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	78db      	ldrb	r3, [r3, #3]
 8008c9e:	2b01      	cmp	r3, #1
 8008ca0:	f040 819a 	bne.w	8008fd8 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008ca4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ca8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	699a      	ldr	r2, [r3, #24]
 8008cb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cb4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	691b      	ldr	r3, [r3, #16]
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	d917      	bls.n	8008cf0 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8008cc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	691b      	ldr	r3, [r3, #16]
 8008ccc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8008cd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cd4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	699a      	ldr	r2, [r3, #24]
 8008cdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ce0:	1ad2      	subs	r2, r2, r3
 8008ce2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ce6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	619a      	str	r2, [r3, #24]
 8008cee:	e00e      	b.n	8008d0e <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8008cf0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cf4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	699b      	ldr	r3, [r3, #24]
 8008cfc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8008d00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008d0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	785b      	ldrb	r3, [r3, #1]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d178      	bne.n	8008e10 <USB_EPStartXfer+0x1a24>
 8008d1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d22:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008d2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d30:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d3a:	b29b      	uxth	r3, r3
 8008d3c:	461a      	mov	r2, r3
 8008d3e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008d42:	4413      	add	r3, r2
 8008d44:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008d48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	781b      	ldrb	r3, [r3, #0]
 8008d54:	011a      	lsls	r2, r3, #4
 8008d56:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008d5a:	4413      	add	r3, r2
 8008d5c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008d60:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008d64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d116      	bne.n	8008d9a <USB_EPStartXfer+0x19ae>
 8008d6c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008d70:	881b      	ldrh	r3, [r3, #0]
 8008d72:	b29b      	uxth	r3, r3
 8008d74:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008d78:	b29a      	uxth	r2, r3
 8008d7a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008d7e:	801a      	strh	r2, [r3, #0]
 8008d80:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008d84:	881b      	ldrh	r3, [r3, #0]
 8008d86:	b29b      	uxth	r3, r3
 8008d88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d90:	b29a      	uxth	r2, r3
 8008d92:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008d96:	801a      	strh	r2, [r3, #0]
 8008d98:	e06b      	b.n	8008e72 <USB_EPStartXfer+0x1a86>
 8008d9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d9e:	2b3e      	cmp	r3, #62	; 0x3e
 8008da0:	d818      	bhi.n	8008dd4 <USB_EPStartXfer+0x19e8>
 8008da2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008da6:	085b      	lsrs	r3, r3, #1
 8008da8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008dac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008db0:	f003 0301 	and.w	r3, r3, #1
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d004      	beq.n	8008dc2 <USB_EPStartXfer+0x19d6>
 8008db8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008dbc:	3301      	adds	r3, #1
 8008dbe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008dc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008dc6:	b29b      	uxth	r3, r3
 8008dc8:	029b      	lsls	r3, r3, #10
 8008dca:	b29a      	uxth	r2, r3
 8008dcc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008dd0:	801a      	strh	r2, [r3, #0]
 8008dd2:	e04e      	b.n	8008e72 <USB_EPStartXfer+0x1a86>
 8008dd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008dd8:	095b      	lsrs	r3, r3, #5
 8008dda:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008dde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008de2:	f003 031f 	and.w	r3, r3, #31
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d104      	bne.n	8008df4 <USB_EPStartXfer+0x1a08>
 8008dea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008dee:	3b01      	subs	r3, #1
 8008df0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008df4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008df8:	b29b      	uxth	r3, r3
 8008dfa:	029b      	lsls	r3, r3, #10
 8008dfc:	b29b      	uxth	r3, r3
 8008dfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e06:	b29a      	uxth	r2, r3
 8008e08:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008e0c:	801a      	strh	r2, [r3, #0]
 8008e0e:	e030      	b.n	8008e72 <USB_EPStartXfer+0x1a86>
 8008e10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	785b      	ldrb	r3, [r3, #1]
 8008e1c:	2b01      	cmp	r3, #1
 8008e1e:	d128      	bne.n	8008e72 <USB_EPStartXfer+0x1a86>
 8008e20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e24:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008e2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e3c:	b29b      	uxth	r3, r3
 8008e3e:	461a      	mov	r2, r3
 8008e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e44:	4413      	add	r3, r2
 8008e46:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008e4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	781b      	ldrb	r3, [r3, #0]
 8008e56:	011a      	lsls	r2, r3, #4
 8008e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e5c:	4413      	add	r3, r2
 8008e5e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008e62:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008e66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e6a:	b29a      	uxth	r2, r3
 8008e6c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008e70:	801a      	strh	r2, [r3, #0]
 8008e72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e76:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008e80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	785b      	ldrb	r3, [r3, #1]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d178      	bne.n	8008f82 <USB_EPStartXfer+0x1b96>
 8008e90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e94:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008e9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ea2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008eac:	b29b      	uxth	r3, r3
 8008eae:	461a      	mov	r2, r3
 8008eb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008eb4:	4413      	add	r3, r2
 8008eb6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008eba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ebe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	781b      	ldrb	r3, [r3, #0]
 8008ec6:	011a      	lsls	r2, r3, #4
 8008ec8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ecc:	4413      	add	r3, r2
 8008ece:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008ed2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008ed6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d116      	bne.n	8008f0c <USB_EPStartXfer+0x1b20>
 8008ede:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008ee2:	881b      	ldrh	r3, [r3, #0]
 8008ee4:	b29b      	uxth	r3, r3
 8008ee6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008eea:	b29a      	uxth	r2, r3
 8008eec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008ef0:	801a      	strh	r2, [r3, #0]
 8008ef2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008ef6:	881b      	ldrh	r3, [r3, #0]
 8008ef8:	b29b      	uxth	r3, r3
 8008efa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008efe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f02:	b29a      	uxth	r2, r3
 8008f04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008f08:	801a      	strh	r2, [r3, #0]
 8008f0a:	e067      	b.n	8008fdc <USB_EPStartXfer+0x1bf0>
 8008f0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f10:	2b3e      	cmp	r3, #62	; 0x3e
 8008f12:	d818      	bhi.n	8008f46 <USB_EPStartXfer+0x1b5a>
 8008f14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f18:	085b      	lsrs	r3, r3, #1
 8008f1a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008f1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f22:	f003 0301 	and.w	r3, r3, #1
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d004      	beq.n	8008f34 <USB_EPStartXfer+0x1b48>
 8008f2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008f2e:	3301      	adds	r3, #1
 8008f30:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008f34:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008f38:	b29b      	uxth	r3, r3
 8008f3a:	029b      	lsls	r3, r3, #10
 8008f3c:	b29a      	uxth	r2, r3
 8008f3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008f42:	801a      	strh	r2, [r3, #0]
 8008f44:	e04a      	b.n	8008fdc <USB_EPStartXfer+0x1bf0>
 8008f46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f4a:	095b      	lsrs	r3, r3, #5
 8008f4c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008f50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f54:	f003 031f 	and.w	r3, r3, #31
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d104      	bne.n	8008f66 <USB_EPStartXfer+0x1b7a>
 8008f5c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008f60:	3b01      	subs	r3, #1
 8008f62:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008f66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008f6a:	b29b      	uxth	r3, r3
 8008f6c:	029b      	lsls	r3, r3, #10
 8008f6e:	b29b      	uxth	r3, r3
 8008f70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f78:	b29a      	uxth	r2, r3
 8008f7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008f7e:	801a      	strh	r2, [r3, #0]
 8008f80:	e02c      	b.n	8008fdc <USB_EPStartXfer+0x1bf0>
 8008f82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	785b      	ldrb	r3, [r3, #1]
 8008f8e:	2b01      	cmp	r3, #1
 8008f90:	d124      	bne.n	8008fdc <USB_EPStartXfer+0x1bf0>
 8008f92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f96:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008fa0:	b29b      	uxth	r3, r3
 8008fa2:	461a      	mov	r2, r3
 8008fa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fa8:	4413      	add	r3, r2
 8008faa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008fae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	781b      	ldrb	r3, [r3, #0]
 8008fba:	011a      	lsls	r2, r3, #4
 8008fbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fc0:	4413      	add	r3, r2
 8008fc2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008fc6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008fca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fce:	b29a      	uxth	r2, r3
 8008fd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008fd4:	801a      	strh	r2, [r3, #0]
 8008fd6:	e001      	b.n	8008fdc <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8008fd8:	2301      	movs	r3, #1
 8008fda:	e03a      	b.n	8009052 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008fdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fe0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008fe4:	681a      	ldr	r2, [r3, #0]
 8008fe6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	781b      	ldrb	r3, [r3, #0]
 8008ff2:	009b      	lsls	r3, r3, #2
 8008ff4:	4413      	add	r3, r2
 8008ff6:	881b      	ldrh	r3, [r3, #0]
 8008ff8:	b29b      	uxth	r3, r3
 8008ffa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009002:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8009006:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800900a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800900e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8009012:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009016:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800901a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800901e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009022:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009026:	681a      	ldr	r2, [r3, #0]
 8009028:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800902c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	781b      	ldrb	r3, [r3, #0]
 8009034:	009b      	lsls	r3, r3, #2
 8009036:	441a      	add	r2, r3
 8009038:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800903c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009040:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009044:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009048:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800904c:	b29b      	uxth	r3, r3
 800904e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009050:	2300      	movs	r3, #0
}
 8009052:	4618      	mov	r0, r3
 8009054:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009058:	46bd      	mov	sp, r7
 800905a:	bd80      	pop	{r7, pc}

0800905c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800905c:	b480      	push	{r7}
 800905e:	b085      	sub	sp, #20
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
 8009064:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	785b      	ldrb	r3, [r3, #1]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d020      	beq.n	80090b0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800906e:	687a      	ldr	r2, [r7, #4]
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	781b      	ldrb	r3, [r3, #0]
 8009074:	009b      	lsls	r3, r3, #2
 8009076:	4413      	add	r3, r2
 8009078:	881b      	ldrh	r3, [r3, #0]
 800907a:	b29b      	uxth	r3, r3
 800907c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009080:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009084:	81bb      	strh	r3, [r7, #12]
 8009086:	89bb      	ldrh	r3, [r7, #12]
 8009088:	f083 0310 	eor.w	r3, r3, #16
 800908c:	81bb      	strh	r3, [r7, #12]
 800908e:	687a      	ldr	r2, [r7, #4]
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	781b      	ldrb	r3, [r3, #0]
 8009094:	009b      	lsls	r3, r3, #2
 8009096:	441a      	add	r2, r3
 8009098:	89bb      	ldrh	r3, [r7, #12]
 800909a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800909e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80090a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80090a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090aa:	b29b      	uxth	r3, r3
 80090ac:	8013      	strh	r3, [r2, #0]
 80090ae:	e01f      	b.n	80090f0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80090b0:	687a      	ldr	r2, [r7, #4]
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	781b      	ldrb	r3, [r3, #0]
 80090b6:	009b      	lsls	r3, r3, #2
 80090b8:	4413      	add	r3, r2
 80090ba:	881b      	ldrh	r3, [r3, #0]
 80090bc:	b29b      	uxth	r3, r3
 80090be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80090c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090c6:	81fb      	strh	r3, [r7, #14]
 80090c8:	89fb      	ldrh	r3, [r7, #14]
 80090ca:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80090ce:	81fb      	strh	r3, [r7, #14]
 80090d0:	687a      	ldr	r2, [r7, #4]
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	781b      	ldrb	r3, [r3, #0]
 80090d6:	009b      	lsls	r3, r3, #2
 80090d8:	441a      	add	r2, r3
 80090da:	89fb      	ldrh	r3, [r7, #14]
 80090dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80090e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80090e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80090e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090ec:	b29b      	uxth	r3, r3
 80090ee:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80090f0:	2300      	movs	r3, #0
}
 80090f2:	4618      	mov	r0, r3
 80090f4:	3714      	adds	r7, #20
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bc80      	pop	{r7}
 80090fa:	4770      	bx	lr

080090fc <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80090fc:	b480      	push	{r7}
 80090fe:	b087      	sub	sp, #28
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
 8009104:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	7b1b      	ldrb	r3, [r3, #12]
 800910a:	2b00      	cmp	r3, #0
 800910c:	f040 809d 	bne.w	800924a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	785b      	ldrb	r3, [r3, #1]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d04c      	beq.n	80091b2 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009118:	687a      	ldr	r2, [r7, #4]
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	781b      	ldrb	r3, [r3, #0]
 800911e:	009b      	lsls	r3, r3, #2
 8009120:	4413      	add	r3, r2
 8009122:	881b      	ldrh	r3, [r3, #0]
 8009124:	823b      	strh	r3, [r7, #16]
 8009126:	8a3b      	ldrh	r3, [r7, #16]
 8009128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800912c:	2b00      	cmp	r3, #0
 800912e:	d01b      	beq.n	8009168 <USB_EPClearStall+0x6c>
 8009130:	687a      	ldr	r2, [r7, #4]
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	781b      	ldrb	r3, [r3, #0]
 8009136:	009b      	lsls	r3, r3, #2
 8009138:	4413      	add	r3, r2
 800913a:	881b      	ldrh	r3, [r3, #0]
 800913c:	b29b      	uxth	r3, r3
 800913e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009146:	81fb      	strh	r3, [r7, #14]
 8009148:	687a      	ldr	r2, [r7, #4]
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	781b      	ldrb	r3, [r3, #0]
 800914e:	009b      	lsls	r3, r3, #2
 8009150:	441a      	add	r2, r3
 8009152:	89fb      	ldrh	r3, [r7, #14]
 8009154:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009158:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800915c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009160:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009164:	b29b      	uxth	r3, r3
 8009166:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	78db      	ldrb	r3, [r3, #3]
 800916c:	2b01      	cmp	r3, #1
 800916e:	d06c      	beq.n	800924a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009170:	687a      	ldr	r2, [r7, #4]
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	781b      	ldrb	r3, [r3, #0]
 8009176:	009b      	lsls	r3, r3, #2
 8009178:	4413      	add	r3, r2
 800917a:	881b      	ldrh	r3, [r3, #0]
 800917c:	b29b      	uxth	r3, r3
 800917e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009182:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009186:	81bb      	strh	r3, [r7, #12]
 8009188:	89bb      	ldrh	r3, [r7, #12]
 800918a:	f083 0320 	eor.w	r3, r3, #32
 800918e:	81bb      	strh	r3, [r7, #12]
 8009190:	687a      	ldr	r2, [r7, #4]
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	781b      	ldrb	r3, [r3, #0]
 8009196:	009b      	lsls	r3, r3, #2
 8009198:	441a      	add	r2, r3
 800919a:	89bb      	ldrh	r3, [r7, #12]
 800919c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80091a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80091a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091ac:	b29b      	uxth	r3, r3
 80091ae:	8013      	strh	r3, [r2, #0]
 80091b0:	e04b      	b.n	800924a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80091b2:	687a      	ldr	r2, [r7, #4]
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	781b      	ldrb	r3, [r3, #0]
 80091b8:	009b      	lsls	r3, r3, #2
 80091ba:	4413      	add	r3, r2
 80091bc:	881b      	ldrh	r3, [r3, #0]
 80091be:	82fb      	strh	r3, [r7, #22]
 80091c0:	8afb      	ldrh	r3, [r7, #22]
 80091c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d01b      	beq.n	8009202 <USB_EPClearStall+0x106>
 80091ca:	687a      	ldr	r2, [r7, #4]
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	781b      	ldrb	r3, [r3, #0]
 80091d0:	009b      	lsls	r3, r3, #2
 80091d2:	4413      	add	r3, r2
 80091d4:	881b      	ldrh	r3, [r3, #0]
 80091d6:	b29b      	uxth	r3, r3
 80091d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091e0:	82bb      	strh	r3, [r7, #20]
 80091e2:	687a      	ldr	r2, [r7, #4]
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	781b      	ldrb	r3, [r3, #0]
 80091e8:	009b      	lsls	r3, r3, #2
 80091ea:	441a      	add	r2, r3
 80091ec:	8abb      	ldrh	r3, [r7, #20]
 80091ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80091f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80091f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80091fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091fe:	b29b      	uxth	r3, r3
 8009200:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009202:	687a      	ldr	r2, [r7, #4]
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	781b      	ldrb	r3, [r3, #0]
 8009208:	009b      	lsls	r3, r3, #2
 800920a:	4413      	add	r3, r2
 800920c:	881b      	ldrh	r3, [r3, #0]
 800920e:	b29b      	uxth	r3, r3
 8009210:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009214:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009218:	827b      	strh	r3, [r7, #18]
 800921a:	8a7b      	ldrh	r3, [r7, #18]
 800921c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009220:	827b      	strh	r3, [r7, #18]
 8009222:	8a7b      	ldrh	r3, [r7, #18]
 8009224:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009228:	827b      	strh	r3, [r7, #18]
 800922a:	687a      	ldr	r2, [r7, #4]
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	781b      	ldrb	r3, [r3, #0]
 8009230:	009b      	lsls	r3, r3, #2
 8009232:	441a      	add	r2, r3
 8009234:	8a7b      	ldrh	r3, [r7, #18]
 8009236:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800923a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800923e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009242:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009246:	b29b      	uxth	r3, r3
 8009248:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800924a:	2300      	movs	r3, #0
}
 800924c:	4618      	mov	r0, r3
 800924e:	371c      	adds	r7, #28
 8009250:	46bd      	mov	sp, r7
 8009252:	bc80      	pop	{r7}
 8009254:	4770      	bx	lr

08009256 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009256:	b480      	push	{r7}
 8009258:	b083      	sub	sp, #12
 800925a:	af00      	add	r7, sp, #0
 800925c:	6078      	str	r0, [r7, #4]
 800925e:	460b      	mov	r3, r1
 8009260:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009262:	78fb      	ldrb	r3, [r7, #3]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d103      	bne.n	8009270 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2280      	movs	r2, #128	; 0x80
 800926c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009270:	2300      	movs	r3, #0
}
 8009272:	4618      	mov	r0, r3
 8009274:	370c      	adds	r7, #12
 8009276:	46bd      	mov	sp, r7
 8009278:	bc80      	pop	{r7}
 800927a:	4770      	bx	lr

0800927c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800927c:	b480      	push	{r7}
 800927e:	b083      	sub	sp, #12
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009284:	2300      	movs	r3, #0
}
 8009286:	4618      	mov	r0, r3
 8009288:	370c      	adds	r7, #12
 800928a:	46bd      	mov	sp, r7
 800928c:	bc80      	pop	{r7}
 800928e:	4770      	bx	lr

08009290 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8009290:	b480      	push	{r7}
 8009292:	b083      	sub	sp, #12
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009298:	2300      	movs	r3, #0
}
 800929a:	4618      	mov	r0, r3
 800929c:	370c      	adds	r7, #12
 800929e:	46bd      	mov	sp, r7
 80092a0:	bc80      	pop	{r7}
 80092a2:	4770      	bx	lr

080092a4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b085      	sub	sp, #20
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80092b2:	b29b      	uxth	r3, r3
 80092b4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80092b6:	68fb      	ldr	r3, [r7, #12]
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3714      	adds	r7, #20
 80092bc:	46bd      	mov	sp, r7
 80092be:	bc80      	pop	{r7}
 80092c0:	4770      	bx	lr

080092c2 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80092c2:	b480      	push	{r7}
 80092c4:	b083      	sub	sp, #12
 80092c6:	af00      	add	r7, sp, #0
 80092c8:	6078      	str	r0, [r7, #4]
 80092ca:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80092cc:	2300      	movs	r3, #0
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	370c      	adds	r7, #12
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bc80      	pop	{r7}
 80092d6:	4770      	bx	lr

080092d8 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80092d8:	b480      	push	{r7}
 80092da:	b08d      	sub	sp, #52	; 0x34
 80092dc:	af00      	add	r7, sp, #0
 80092de:	60f8      	str	r0, [r7, #12]
 80092e0:	60b9      	str	r1, [r7, #8]
 80092e2:	4611      	mov	r1, r2
 80092e4:	461a      	mov	r2, r3
 80092e6:	460b      	mov	r3, r1
 80092e8:	80fb      	strh	r3, [r7, #6]
 80092ea:	4613      	mov	r3, r2
 80092ec:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80092ee:	88bb      	ldrh	r3, [r7, #4]
 80092f0:	3301      	adds	r3, #1
 80092f2:	085b      	lsrs	r3, r3, #1
 80092f4:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80092fe:	88fb      	ldrh	r3, [r7, #6]
 8009300:	005a      	lsls	r2, r3, #1
 8009302:	69fb      	ldr	r3, [r7, #28]
 8009304:	4413      	add	r3, r2
 8009306:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800930a:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800930c:	6a3b      	ldr	r3, [r7, #32]
 800930e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009310:	e01e      	b.n	8009350 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8009312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009314:	781b      	ldrb	r3, [r3, #0]
 8009316:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8009318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800931a:	3301      	adds	r3, #1
 800931c:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800931e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009320:	781b      	ldrb	r3, [r3, #0]
 8009322:	b29b      	uxth	r3, r3
 8009324:	021b      	lsls	r3, r3, #8
 8009326:	b29b      	uxth	r3, r3
 8009328:	461a      	mov	r2, r3
 800932a:	69bb      	ldr	r3, [r7, #24]
 800932c:	4313      	orrs	r3, r2
 800932e:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8009330:	697b      	ldr	r3, [r7, #20]
 8009332:	b29a      	uxth	r2, r3
 8009334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009336:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800933a:	3302      	adds	r3, #2
 800933c:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800933e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009340:	3302      	adds	r3, #2
 8009342:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8009344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009346:	3301      	adds	r3, #1
 8009348:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800934a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800934c:	3b01      	subs	r3, #1
 800934e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009352:	2b00      	cmp	r3, #0
 8009354:	d1dd      	bne.n	8009312 <USB_WritePMA+0x3a>
  }
}
 8009356:	bf00      	nop
 8009358:	bf00      	nop
 800935a:	3734      	adds	r7, #52	; 0x34
 800935c:	46bd      	mov	sp, r7
 800935e:	bc80      	pop	{r7}
 8009360:	4770      	bx	lr

08009362 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009362:	b480      	push	{r7}
 8009364:	b08b      	sub	sp, #44	; 0x2c
 8009366:	af00      	add	r7, sp, #0
 8009368:	60f8      	str	r0, [r7, #12]
 800936a:	60b9      	str	r1, [r7, #8]
 800936c:	4611      	mov	r1, r2
 800936e:	461a      	mov	r2, r3
 8009370:	460b      	mov	r3, r1
 8009372:	80fb      	strh	r3, [r7, #6]
 8009374:	4613      	mov	r3, r2
 8009376:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009378:	88bb      	ldrh	r3, [r7, #4]
 800937a:	085b      	lsrs	r3, r3, #1
 800937c:	b29b      	uxth	r3, r3
 800937e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009388:	88fb      	ldrh	r3, [r7, #6]
 800938a:	005a      	lsls	r2, r3, #1
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	4413      	add	r3, r2
 8009390:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009394:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8009396:	69bb      	ldr	r3, [r7, #24]
 8009398:	627b      	str	r3, [r7, #36]	; 0x24
 800939a:	e01b      	b.n	80093d4 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800939c:	6a3b      	ldr	r3, [r7, #32]
 800939e:	881b      	ldrh	r3, [r3, #0]
 80093a0:	b29b      	uxth	r3, r3
 80093a2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80093a4:	6a3b      	ldr	r3, [r7, #32]
 80093a6:	3302      	adds	r3, #2
 80093a8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80093aa:	693b      	ldr	r3, [r7, #16]
 80093ac:	b2da      	uxtb	r2, r3
 80093ae:	69fb      	ldr	r3, [r7, #28]
 80093b0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80093b2:	69fb      	ldr	r3, [r7, #28]
 80093b4:	3301      	adds	r3, #1
 80093b6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80093b8:	693b      	ldr	r3, [r7, #16]
 80093ba:	0a1b      	lsrs	r3, r3, #8
 80093bc:	b2da      	uxtb	r2, r3
 80093be:	69fb      	ldr	r3, [r7, #28]
 80093c0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80093c2:	69fb      	ldr	r3, [r7, #28]
 80093c4:	3301      	adds	r3, #1
 80093c6:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80093c8:	6a3b      	ldr	r3, [r7, #32]
 80093ca:	3302      	adds	r3, #2
 80093cc:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80093ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d0:	3b01      	subs	r3, #1
 80093d2:	627b      	str	r3, [r7, #36]	; 0x24
 80093d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d1e0      	bne.n	800939c <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80093da:	88bb      	ldrh	r3, [r7, #4]
 80093dc:	f003 0301 	and.w	r3, r3, #1
 80093e0:	b29b      	uxth	r3, r3
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d007      	beq.n	80093f6 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80093e6:	6a3b      	ldr	r3, [r7, #32]
 80093e8:	881b      	ldrh	r3, [r3, #0]
 80093ea:	b29b      	uxth	r3, r3
 80093ec:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80093ee:	693b      	ldr	r3, [r7, #16]
 80093f0:	b2da      	uxtb	r2, r3
 80093f2:	69fb      	ldr	r3, [r7, #28]
 80093f4:	701a      	strb	r2, [r3, #0]
  }
}
 80093f6:	bf00      	nop
 80093f8:	372c      	adds	r7, #44	; 0x2c
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bc80      	pop	{r7}
 80093fe:	4770      	bx	lr

08009400 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b084      	sub	sp, #16
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
 8009408:	460b      	mov	r3, r1
 800940a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800940c:	2300      	movs	r3, #0
 800940e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	7c1b      	ldrb	r3, [r3, #16]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d115      	bne.n	8009444 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009418:	f44f 7300 	mov.w	r3, #512	; 0x200
 800941c:	2202      	movs	r2, #2
 800941e:	2181      	movs	r1, #129	; 0x81
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f004 fb06 	bl	800da32 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2201      	movs	r2, #1
 800942a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800942c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009430:	2202      	movs	r2, #2
 8009432:	2101      	movs	r1, #1
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f004 fafc 	bl	800da32 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2201      	movs	r2, #1
 800943e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8009442:	e012      	b.n	800946a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009444:	2340      	movs	r3, #64	; 0x40
 8009446:	2202      	movs	r2, #2
 8009448:	2181      	movs	r1, #129	; 0x81
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f004 faf1 	bl	800da32 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2201      	movs	r2, #1
 8009454:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009456:	2340      	movs	r3, #64	; 0x40
 8009458:	2202      	movs	r2, #2
 800945a:	2101      	movs	r1, #1
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f004 fae8 	bl	800da32 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2201      	movs	r2, #1
 8009466:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800946a:	2308      	movs	r3, #8
 800946c:	2203      	movs	r2, #3
 800946e:	2182      	movs	r1, #130	; 0x82
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f004 fade 	bl	800da32 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2201      	movs	r2, #1
 800947a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800947c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009480:	f004 fbfe 	bl	800dc80 <USBD_static_malloc>
 8009484:	4602      	mov	r2, r0
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009492:	2b00      	cmp	r3, #0
 8009494:	d102      	bne.n	800949c <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8009496:	2301      	movs	r3, #1
 8009498:	73fb      	strb	r3, [r7, #15]
 800949a:	e026      	b.n	80094ea <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094a2:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	2200      	movs	r2, #0
 80094b2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	2200      	movs	r2, #0
 80094ba:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	7c1b      	ldrb	r3, [r3, #16]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d109      	bne.n	80094da <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80094cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80094d0:	2101      	movs	r1, #1
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f004 fb9e 	bl	800dc14 <USBD_LL_PrepareReceive>
 80094d8:	e007      	b.n	80094ea <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80094e0:	2340      	movs	r3, #64	; 0x40
 80094e2:	2101      	movs	r1, #1
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f004 fb95 	bl	800dc14 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80094ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	3710      	adds	r7, #16
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bd80      	pop	{r7, pc}

080094f4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b084      	sub	sp, #16
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
 80094fc:	460b      	mov	r3, r1
 80094fe:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009500:	2300      	movs	r3, #0
 8009502:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009504:	2181      	movs	r1, #129	; 0x81
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f004 fab9 	bl	800da7e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2200      	movs	r2, #0
 8009510:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009512:	2101      	movs	r1, #1
 8009514:	6878      	ldr	r0, [r7, #4]
 8009516:	f004 fab2 	bl	800da7e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2200      	movs	r2, #0
 800951e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009522:	2182      	movs	r1, #130	; 0x82
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f004 faaa 	bl	800da7e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2200      	movs	r2, #0
 800952e:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009536:	2b00      	cmp	r3, #0
 8009538:	d00e      	beq.n	8009558 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009540:	685b      	ldr	r3, [r3, #4]
 8009542:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800954a:	4618      	mov	r0, r3
 800954c:	f004 fba4 	bl	800dc98 <USBD_static_free>
    pdev->pClassData = NULL;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2200      	movs	r2, #0
 8009554:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8009558:	7bfb      	ldrb	r3, [r7, #15]
}
 800955a:	4618      	mov	r0, r3
 800955c:	3710      	adds	r7, #16
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}

08009562 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009562:	b580      	push	{r7, lr}
 8009564:	b086      	sub	sp, #24
 8009566:	af00      	add	r7, sp, #0
 8009568:	6078      	str	r0, [r7, #4]
 800956a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009572:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8009574:	2300      	movs	r3, #0
 8009576:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8009578:	2300      	movs	r3, #0
 800957a:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800957c:	2300      	movs	r3, #0
 800957e:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	781b      	ldrb	r3, [r3, #0]
 8009584:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009588:	2b00      	cmp	r3, #0
 800958a:	d039      	beq.n	8009600 <USBD_CDC_Setup+0x9e>
 800958c:	2b20      	cmp	r3, #32
 800958e:	d17f      	bne.n	8009690 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	88db      	ldrh	r3, [r3, #6]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d029      	beq.n	80095ec <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	781b      	ldrb	r3, [r3, #0]
 800959c:	b25b      	sxtb	r3, r3
 800959e:	2b00      	cmp	r3, #0
 80095a0:	da11      	bge.n	80095c6 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80095a8:	689b      	ldr	r3, [r3, #8]
 80095aa:	683a      	ldr	r2, [r7, #0]
 80095ac:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80095ae:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80095b0:	683a      	ldr	r2, [r7, #0]
 80095b2:	88d2      	ldrh	r2, [r2, #6]
 80095b4:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80095b6:	6939      	ldr	r1, [r7, #16]
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	88db      	ldrh	r3, [r3, #6]
 80095bc:	461a      	mov	r2, r3
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f001 f9d9 	bl	800a976 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80095c4:	e06b      	b.n	800969e <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	785a      	ldrb	r2, [r3, #1]
 80095ca:	693b      	ldr	r3, [r7, #16]
 80095cc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	88db      	ldrh	r3, [r3, #6]
 80095d4:	b2da      	uxtb	r2, r3
 80095d6:	693b      	ldr	r3, [r7, #16]
 80095d8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80095dc:	6939      	ldr	r1, [r7, #16]
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	88db      	ldrh	r3, [r3, #6]
 80095e2:	461a      	mov	r2, r3
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f001 f9f4 	bl	800a9d2 <USBD_CtlPrepareRx>
      break;
 80095ea:	e058      	b.n	800969e <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80095f2:	689b      	ldr	r3, [r3, #8]
 80095f4:	683a      	ldr	r2, [r7, #0]
 80095f6:	7850      	ldrb	r0, [r2, #1]
 80095f8:	2200      	movs	r2, #0
 80095fa:	6839      	ldr	r1, [r7, #0]
 80095fc:	4798      	blx	r3
      break;
 80095fe:	e04e      	b.n	800969e <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	785b      	ldrb	r3, [r3, #1]
 8009604:	2b0b      	cmp	r3, #11
 8009606:	d02e      	beq.n	8009666 <USBD_CDC_Setup+0x104>
 8009608:	2b0b      	cmp	r3, #11
 800960a:	dc38      	bgt.n	800967e <USBD_CDC_Setup+0x11c>
 800960c:	2b00      	cmp	r3, #0
 800960e:	d002      	beq.n	8009616 <USBD_CDC_Setup+0xb4>
 8009610:	2b0a      	cmp	r3, #10
 8009612:	d014      	beq.n	800963e <USBD_CDC_Setup+0xdc>
 8009614:	e033      	b.n	800967e <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800961c:	2b03      	cmp	r3, #3
 800961e:	d107      	bne.n	8009630 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8009620:	f107 030c 	add.w	r3, r7, #12
 8009624:	2202      	movs	r2, #2
 8009626:	4619      	mov	r1, r3
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f001 f9a4 	bl	800a976 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800962e:	e02e      	b.n	800968e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009630:	6839      	ldr	r1, [r7, #0]
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	f001 f935 	bl	800a8a2 <USBD_CtlError>
            ret = USBD_FAIL;
 8009638:	2302      	movs	r3, #2
 800963a:	75fb      	strb	r3, [r7, #23]
          break;
 800963c:	e027      	b.n	800968e <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009644:	2b03      	cmp	r3, #3
 8009646:	d107      	bne.n	8009658 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8009648:	f107 030f 	add.w	r3, r7, #15
 800964c:	2201      	movs	r2, #1
 800964e:	4619      	mov	r1, r3
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f001 f990 	bl	800a976 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009656:	e01a      	b.n	800968e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009658:	6839      	ldr	r1, [r7, #0]
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f001 f921 	bl	800a8a2 <USBD_CtlError>
            ret = USBD_FAIL;
 8009660:	2302      	movs	r3, #2
 8009662:	75fb      	strb	r3, [r7, #23]
          break;
 8009664:	e013      	b.n	800968e <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800966c:	2b03      	cmp	r3, #3
 800966e:	d00d      	beq.n	800968c <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8009670:	6839      	ldr	r1, [r7, #0]
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f001 f915 	bl	800a8a2 <USBD_CtlError>
            ret = USBD_FAIL;
 8009678:	2302      	movs	r3, #2
 800967a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800967c:	e006      	b.n	800968c <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800967e:	6839      	ldr	r1, [r7, #0]
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f001 f90e 	bl	800a8a2 <USBD_CtlError>
          ret = USBD_FAIL;
 8009686:	2302      	movs	r3, #2
 8009688:	75fb      	strb	r3, [r7, #23]
          break;
 800968a:	e000      	b.n	800968e <USBD_CDC_Setup+0x12c>
          break;
 800968c:	bf00      	nop
      }
      break;
 800968e:	e006      	b.n	800969e <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009690:	6839      	ldr	r1, [r7, #0]
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f001 f905 	bl	800a8a2 <USBD_CtlError>
      ret = USBD_FAIL;
 8009698:	2302      	movs	r3, #2
 800969a:	75fb      	strb	r3, [r7, #23]
      break;
 800969c:	bf00      	nop
  }

  return ret;
 800969e:	7dfb      	ldrb	r3, [r7, #23]
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	3718      	adds	r7, #24
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bd80      	pop	{r7, pc}

080096a8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b084      	sub	sp, #16
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
 80096b0:	460b      	mov	r3, r1
 80096b2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096ba:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80096c2:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d03a      	beq.n	8009744 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80096ce:	78fa      	ldrb	r2, [r7, #3]
 80096d0:	6879      	ldr	r1, [r7, #4]
 80096d2:	4613      	mov	r3, r2
 80096d4:	009b      	lsls	r3, r3, #2
 80096d6:	4413      	add	r3, r2
 80096d8:	009b      	lsls	r3, r3, #2
 80096da:	440b      	add	r3, r1
 80096dc:	331c      	adds	r3, #28
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d029      	beq.n	8009738 <USBD_CDC_DataIn+0x90>
 80096e4:	78fa      	ldrb	r2, [r7, #3]
 80096e6:	6879      	ldr	r1, [r7, #4]
 80096e8:	4613      	mov	r3, r2
 80096ea:	009b      	lsls	r3, r3, #2
 80096ec:	4413      	add	r3, r2
 80096ee:	009b      	lsls	r3, r3, #2
 80096f0:	440b      	add	r3, r1
 80096f2:	331c      	adds	r3, #28
 80096f4:	681a      	ldr	r2, [r3, #0]
 80096f6:	78f9      	ldrb	r1, [r7, #3]
 80096f8:	68b8      	ldr	r0, [r7, #8]
 80096fa:	460b      	mov	r3, r1
 80096fc:	009b      	lsls	r3, r3, #2
 80096fe:	440b      	add	r3, r1
 8009700:	00db      	lsls	r3, r3, #3
 8009702:	4403      	add	r3, r0
 8009704:	3338      	adds	r3, #56	; 0x38
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	fbb2 f1f3 	udiv	r1, r2, r3
 800970c:	fb01 f303 	mul.w	r3, r1, r3
 8009710:	1ad3      	subs	r3, r2, r3
 8009712:	2b00      	cmp	r3, #0
 8009714:	d110      	bne.n	8009738 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8009716:	78fa      	ldrb	r2, [r7, #3]
 8009718:	6879      	ldr	r1, [r7, #4]
 800971a:	4613      	mov	r3, r2
 800971c:	009b      	lsls	r3, r3, #2
 800971e:	4413      	add	r3, r2
 8009720:	009b      	lsls	r3, r3, #2
 8009722:	440b      	add	r3, r1
 8009724:	331c      	adds	r3, #28
 8009726:	2200      	movs	r2, #0
 8009728:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800972a:	78f9      	ldrb	r1, [r7, #3]
 800972c:	2300      	movs	r3, #0
 800972e:	2200      	movs	r2, #0
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f004 fa4c 	bl	800dbce <USBD_LL_Transmit>
 8009736:	e003      	b.n	8009740 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	2200      	movs	r2, #0
 800973c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8009740:	2300      	movs	r3, #0
 8009742:	e000      	b.n	8009746 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8009744:	2302      	movs	r3, #2
  }
}
 8009746:	4618      	mov	r0, r3
 8009748:	3710      	adds	r7, #16
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}

0800974e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800974e:	b580      	push	{r7, lr}
 8009750:	b084      	sub	sp, #16
 8009752:	af00      	add	r7, sp, #0
 8009754:	6078      	str	r0, [r7, #4]
 8009756:	460b      	mov	r3, r1
 8009758:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009760:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009762:	78fb      	ldrb	r3, [r7, #3]
 8009764:	4619      	mov	r1, r3
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f004 fa77 	bl	800dc5a <USBD_LL_GetRxDataSize>
 800976c:	4602      	mov	r2, r0
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800977a:	2b00      	cmp	r3, #0
 800977c:	d00d      	beq.n	800979a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009784:	68db      	ldr	r3, [r3, #12]
 8009786:	68fa      	ldr	r2, [r7, #12]
 8009788:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800978c:	68fa      	ldr	r2, [r7, #12]
 800978e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009792:	4611      	mov	r1, r2
 8009794:	4798      	blx	r3

    return USBD_OK;
 8009796:	2300      	movs	r3, #0
 8009798:	e000      	b.n	800979c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800979a:	2302      	movs	r3, #2
  }
}
 800979c:	4618      	mov	r0, r3
 800979e:	3710      	adds	r7, #16
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}

080097a4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b084      	sub	sp, #16
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097b2:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d015      	beq.n	80097ea <USBD_CDC_EP0_RxReady+0x46>
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80097c4:	2bff      	cmp	r3, #255	; 0xff
 80097c6:	d010      	beq.n	80097ea <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80097ce:	689b      	ldr	r3, [r3, #8]
 80097d0:	68fa      	ldr	r2, [r7, #12]
 80097d2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80097d6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80097d8:	68fa      	ldr	r2, [r7, #12]
 80097da:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80097de:	b292      	uxth	r2, r2
 80097e0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	22ff      	movs	r2, #255	; 0xff
 80097e6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80097ea:	2300      	movs	r3, #0
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	3710      	adds	r7, #16
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}

080097f4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b083      	sub	sp, #12
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2243      	movs	r2, #67	; 0x43
 8009800:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8009802:	4b03      	ldr	r3, [pc, #12]	; (8009810 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009804:	4618      	mov	r0, r3
 8009806:	370c      	adds	r7, #12
 8009808:	46bd      	mov	sp, r7
 800980a:	bc80      	pop	{r7}
 800980c:	4770      	bx	lr
 800980e:	bf00      	nop
 8009810:	20000098 	.word	0x20000098

08009814 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009814:	b480      	push	{r7}
 8009816:	b083      	sub	sp, #12
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2243      	movs	r2, #67	; 0x43
 8009820:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8009822:	4b03      	ldr	r3, [pc, #12]	; (8009830 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009824:	4618      	mov	r0, r3
 8009826:	370c      	adds	r7, #12
 8009828:	46bd      	mov	sp, r7
 800982a:	bc80      	pop	{r7}
 800982c:	4770      	bx	lr
 800982e:	bf00      	nop
 8009830:	20000054 	.word	0x20000054

08009834 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009834:	b480      	push	{r7}
 8009836:	b083      	sub	sp, #12
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2243      	movs	r2, #67	; 0x43
 8009840:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8009842:	4b03      	ldr	r3, [pc, #12]	; (8009850 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009844:	4618      	mov	r0, r3
 8009846:	370c      	adds	r7, #12
 8009848:	46bd      	mov	sp, r7
 800984a:	bc80      	pop	{r7}
 800984c:	4770      	bx	lr
 800984e:	bf00      	nop
 8009850:	200000dc 	.word	0x200000dc

08009854 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009854:	b480      	push	{r7}
 8009856:	b083      	sub	sp, #12
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	220a      	movs	r2, #10
 8009860:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8009862:	4b03      	ldr	r3, [pc, #12]	; (8009870 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009864:	4618      	mov	r0, r3
 8009866:	370c      	adds	r7, #12
 8009868:	46bd      	mov	sp, r7
 800986a:	bc80      	pop	{r7}
 800986c:	4770      	bx	lr
 800986e:	bf00      	nop
 8009870:	20000010 	.word	0x20000010

08009874 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009874:	b480      	push	{r7}
 8009876:	b085      	sub	sp, #20
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
 800987c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800987e:	2302      	movs	r3, #2
 8009880:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d005      	beq.n	8009894 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	683a      	ldr	r2, [r7, #0]
 800988c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8009890:	2300      	movs	r3, #0
 8009892:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009894:	7bfb      	ldrb	r3, [r7, #15]
}
 8009896:	4618      	mov	r0, r3
 8009898:	3714      	adds	r7, #20
 800989a:	46bd      	mov	sp, r7
 800989c:	bc80      	pop	{r7}
 800989e:	4770      	bx	lr

080098a0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80098a0:	b480      	push	{r7}
 80098a2:	b087      	sub	sp, #28
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	60f8      	str	r0, [r7, #12]
 80098a8:	60b9      	str	r1, [r7, #8]
 80098aa:	4613      	mov	r3, r2
 80098ac:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098b4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80098b6:	697b      	ldr	r3, [r7, #20]
 80098b8:	68ba      	ldr	r2, [r7, #8]
 80098ba:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80098be:	88fa      	ldrh	r2, [r7, #6]
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80098c6:	2300      	movs	r3, #0
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	371c      	adds	r7, #28
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bc80      	pop	{r7}
 80098d0:	4770      	bx	lr

080098d2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80098d2:	b480      	push	{r7}
 80098d4:	b085      	sub	sp, #20
 80098d6:	af00      	add	r7, sp, #0
 80098d8:	6078      	str	r0, [r7, #4]
 80098da:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098e2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	683a      	ldr	r2, [r7, #0]
 80098e8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80098ec:	2300      	movs	r3, #0
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	3714      	adds	r7, #20
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bc80      	pop	{r7}
 80098f6:	4770      	bx	lr

080098f8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b084      	sub	sp, #16
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009906:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800990e:	2b00      	cmp	r3, #0
 8009910:	d017      	beq.n	8009942 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	7c1b      	ldrb	r3, [r3, #16]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d109      	bne.n	800992e <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009920:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009924:	2101      	movs	r1, #1
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f004 f974 	bl	800dc14 <USBD_LL_PrepareReceive>
 800992c:	e007      	b.n	800993e <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009934:	2340      	movs	r3, #64	; 0x40
 8009936:	2101      	movs	r1, #1
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f004 f96b 	bl	800dc14 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800993e:	2300      	movs	r3, #0
 8009940:	e000      	b.n	8009944 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8009942:	2302      	movs	r3, #2
  }
}
 8009944:	4618      	mov	r0, r3
 8009946:	3710      	adds	r7, #16
 8009948:	46bd      	mov	sp, r7
 800994a:	bd80      	pop	{r7, pc}

0800994c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b084      	sub	sp, #16
 8009950:	af00      	add	r7, sp, #0
 8009952:	60f8      	str	r0, [r7, #12]
 8009954:	60b9      	str	r1, [r7, #8]
 8009956:	4613      	mov	r3, r2
 8009958:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d101      	bne.n	8009964 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009960:	2302      	movs	r3, #2
 8009962:	e01a      	b.n	800999a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800996a:	2b00      	cmp	r3, #0
 800996c:	d003      	beq.n	8009976 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	2200      	movs	r2, #0
 8009972:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d003      	beq.n	8009984 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	68ba      	ldr	r2, [r7, #8]
 8009980:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	2201      	movs	r2, #1
 8009988:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	79fa      	ldrb	r2, [r7, #7]
 8009990:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009992:	68f8      	ldr	r0, [r7, #12]
 8009994:	f003 ffd8 	bl	800d948 <USBD_LL_Init>

  return USBD_OK;
 8009998:	2300      	movs	r3, #0
}
 800999a:	4618      	mov	r0, r3
 800999c:	3710      	adds	r7, #16
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}

080099a2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80099a2:	b480      	push	{r7}
 80099a4:	b085      	sub	sp, #20
 80099a6:	af00      	add	r7, sp, #0
 80099a8:	6078      	str	r0, [r7, #4]
 80099aa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80099ac:	2300      	movs	r3, #0
 80099ae:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d006      	beq.n	80099c4 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	683a      	ldr	r2, [r7, #0]
 80099ba:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80099be:	2300      	movs	r3, #0
 80099c0:	73fb      	strb	r3, [r7, #15]
 80099c2:	e001      	b.n	80099c8 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80099c4:	2302      	movs	r3, #2
 80099c6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80099c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	3714      	adds	r7, #20
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bc80      	pop	{r7}
 80099d2:	4770      	bx	lr

080099d4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b082      	sub	sp, #8
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80099dc:	6878      	ldr	r0, [r7, #4]
 80099de:	f004 f80d 	bl	800d9fc <USBD_LL_Start>

  return USBD_OK;
 80099e2:	2300      	movs	r3, #0
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	3708      	adds	r7, #8
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bd80      	pop	{r7, pc}

080099ec <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80099ec:	b480      	push	{r7}
 80099ee:	b083      	sub	sp, #12
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80099f4:	2300      	movs	r3, #0
}
 80099f6:	4618      	mov	r0, r3
 80099f8:	370c      	adds	r7, #12
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bc80      	pop	{r7}
 80099fe:	4770      	bx	lr

08009a00 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b084      	sub	sp, #16
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
 8009a08:	460b      	mov	r3, r1
 8009a0a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009a0c:	2302      	movs	r3, #2
 8009a0e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d00c      	beq.n	8009a34 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	78fa      	ldrb	r2, [r7, #3]
 8009a24:	4611      	mov	r1, r2
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	4798      	blx	r3
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d101      	bne.n	8009a34 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8009a30:	2300      	movs	r3, #0
 8009a32:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3710      	adds	r7, #16
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}

08009a3e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009a3e:	b580      	push	{r7, lr}
 8009a40:	b082      	sub	sp, #8
 8009a42:	af00      	add	r7, sp, #0
 8009a44:	6078      	str	r0, [r7, #4]
 8009a46:	460b      	mov	r3, r1
 8009a48:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a50:	685b      	ldr	r3, [r3, #4]
 8009a52:	78fa      	ldrb	r2, [r7, #3]
 8009a54:	4611      	mov	r1, r2
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	4798      	blx	r3

  return USBD_OK;
 8009a5a:	2300      	movs	r3, #0
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3708      	adds	r7, #8
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}

08009a64 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b082      	sub	sp, #8
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
 8009a6c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009a74:	6839      	ldr	r1, [r7, #0]
 8009a76:	4618      	mov	r0, r3
 8009a78:	f000 fed7 	bl	800a82a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2201      	movs	r2, #1
 8009a80:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009a8a:	461a      	mov	r2, r3
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009a98:	f003 031f 	and.w	r3, r3, #31
 8009a9c:	2b02      	cmp	r3, #2
 8009a9e:	d016      	beq.n	8009ace <USBD_LL_SetupStage+0x6a>
 8009aa0:	2b02      	cmp	r3, #2
 8009aa2:	d81c      	bhi.n	8009ade <USBD_LL_SetupStage+0x7a>
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d002      	beq.n	8009aae <USBD_LL_SetupStage+0x4a>
 8009aa8:	2b01      	cmp	r3, #1
 8009aaa:	d008      	beq.n	8009abe <USBD_LL_SetupStage+0x5a>
 8009aac:	e017      	b.n	8009ade <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009ab4:	4619      	mov	r1, r3
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f000 f9ca 	bl	8009e50 <USBD_StdDevReq>
      break;
 8009abc:	e01a      	b.n	8009af4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009ac4:	4619      	mov	r1, r3
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f000 fa2c 	bl	8009f24 <USBD_StdItfReq>
      break;
 8009acc:	e012      	b.n	8009af4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009ad4:	4619      	mov	r1, r3
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f000 fa6c 	bl	8009fb4 <USBD_StdEPReq>
      break;
 8009adc:	e00a      	b.n	8009af4 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009ae4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009ae8:	b2db      	uxtb	r3, r3
 8009aea:	4619      	mov	r1, r3
 8009aec:	6878      	ldr	r0, [r7, #4]
 8009aee:	f003 ffe5 	bl	800dabc <USBD_LL_StallEP>
      break;
 8009af2:	bf00      	nop
  }

  return USBD_OK;
 8009af4:	2300      	movs	r3, #0
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	3708      	adds	r7, #8
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}

08009afe <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009afe:	b580      	push	{r7, lr}
 8009b00:	b086      	sub	sp, #24
 8009b02:	af00      	add	r7, sp, #0
 8009b04:	60f8      	str	r0, [r7, #12]
 8009b06:	460b      	mov	r3, r1
 8009b08:	607a      	str	r2, [r7, #4]
 8009b0a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009b0c:	7afb      	ldrb	r3, [r7, #11]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d14b      	bne.n	8009baa <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009b18:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009b20:	2b03      	cmp	r3, #3
 8009b22:	d134      	bne.n	8009b8e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009b24:	697b      	ldr	r3, [r7, #20]
 8009b26:	68da      	ldr	r2, [r3, #12]
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	691b      	ldr	r3, [r3, #16]
 8009b2c:	429a      	cmp	r2, r3
 8009b2e:	d919      	bls.n	8009b64 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	68da      	ldr	r2, [r3, #12]
 8009b34:	697b      	ldr	r3, [r7, #20]
 8009b36:	691b      	ldr	r3, [r3, #16]
 8009b38:	1ad2      	subs	r2, r2, r3
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009b3e:	697b      	ldr	r3, [r7, #20]
 8009b40:	68da      	ldr	r2, [r3, #12]
 8009b42:	697b      	ldr	r3, [r7, #20]
 8009b44:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009b46:	429a      	cmp	r2, r3
 8009b48:	d203      	bcs.n	8009b52 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009b4e:	b29b      	uxth	r3, r3
 8009b50:	e002      	b.n	8009b58 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009b52:	697b      	ldr	r3, [r7, #20]
 8009b54:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009b56:	b29b      	uxth	r3, r3
 8009b58:	461a      	mov	r2, r3
 8009b5a:	6879      	ldr	r1, [r7, #4]
 8009b5c:	68f8      	ldr	r0, [r7, #12]
 8009b5e:	f000 ff56 	bl	800aa0e <USBD_CtlContinueRx>
 8009b62:	e038      	b.n	8009bd6 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b6a:	691b      	ldr	r3, [r3, #16]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d00a      	beq.n	8009b86 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009b76:	2b03      	cmp	r3, #3
 8009b78:	d105      	bne.n	8009b86 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b80:	691b      	ldr	r3, [r3, #16]
 8009b82:	68f8      	ldr	r0, [r7, #12]
 8009b84:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009b86:	68f8      	ldr	r0, [r7, #12]
 8009b88:	f000 ff53 	bl	800aa32 <USBD_CtlSendStatus>
 8009b8c:	e023      	b.n	8009bd6 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009b94:	2b05      	cmp	r3, #5
 8009b96:	d11e      	bne.n	8009bd6 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009ba0:	2100      	movs	r1, #0
 8009ba2:	68f8      	ldr	r0, [r7, #12]
 8009ba4:	f003 ff8a 	bl	800dabc <USBD_LL_StallEP>
 8009ba8:	e015      	b.n	8009bd6 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bb0:	699b      	ldr	r3, [r3, #24]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d00d      	beq.n	8009bd2 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009bbc:	2b03      	cmp	r3, #3
 8009bbe:	d108      	bne.n	8009bd2 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bc6:	699b      	ldr	r3, [r3, #24]
 8009bc8:	7afa      	ldrb	r2, [r7, #11]
 8009bca:	4611      	mov	r1, r2
 8009bcc:	68f8      	ldr	r0, [r7, #12]
 8009bce:	4798      	blx	r3
 8009bd0:	e001      	b.n	8009bd6 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009bd2:	2302      	movs	r3, #2
 8009bd4:	e000      	b.n	8009bd8 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009bd6:	2300      	movs	r3, #0
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	3718      	adds	r7, #24
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}

08009be0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b086      	sub	sp, #24
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	60f8      	str	r0, [r7, #12]
 8009be8:	460b      	mov	r3, r1
 8009bea:	607a      	str	r2, [r7, #4]
 8009bec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009bee:	7afb      	ldrb	r3, [r7, #11]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d17f      	bne.n	8009cf4 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	3314      	adds	r3, #20
 8009bf8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009c00:	2b02      	cmp	r3, #2
 8009c02:	d15c      	bne.n	8009cbe <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009c04:	697b      	ldr	r3, [r7, #20]
 8009c06:	68da      	ldr	r2, [r3, #12]
 8009c08:	697b      	ldr	r3, [r7, #20]
 8009c0a:	691b      	ldr	r3, [r3, #16]
 8009c0c:	429a      	cmp	r2, r3
 8009c0e:	d915      	bls.n	8009c3c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009c10:	697b      	ldr	r3, [r7, #20]
 8009c12:	68da      	ldr	r2, [r3, #12]
 8009c14:	697b      	ldr	r3, [r7, #20]
 8009c16:	691b      	ldr	r3, [r3, #16]
 8009c18:	1ad2      	subs	r2, r2, r3
 8009c1a:	697b      	ldr	r3, [r7, #20]
 8009c1c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	68db      	ldr	r3, [r3, #12]
 8009c22:	b29b      	uxth	r3, r3
 8009c24:	461a      	mov	r2, r3
 8009c26:	6879      	ldr	r1, [r7, #4]
 8009c28:	68f8      	ldr	r0, [r7, #12]
 8009c2a:	f000 fec0 	bl	800a9ae <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009c2e:	2300      	movs	r3, #0
 8009c30:	2200      	movs	r2, #0
 8009c32:	2100      	movs	r1, #0
 8009c34:	68f8      	ldr	r0, [r7, #12]
 8009c36:	f003 ffed 	bl	800dc14 <USBD_LL_PrepareReceive>
 8009c3a:	e04e      	b.n	8009cda <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009c3c:	697b      	ldr	r3, [r7, #20]
 8009c3e:	689b      	ldr	r3, [r3, #8]
 8009c40:	697a      	ldr	r2, [r7, #20]
 8009c42:	6912      	ldr	r2, [r2, #16]
 8009c44:	fbb3 f1f2 	udiv	r1, r3, r2
 8009c48:	fb01 f202 	mul.w	r2, r1, r2
 8009c4c:	1a9b      	subs	r3, r3, r2
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d11c      	bne.n	8009c8c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009c52:	697b      	ldr	r3, [r7, #20]
 8009c54:	689a      	ldr	r2, [r3, #8]
 8009c56:	697b      	ldr	r3, [r7, #20]
 8009c58:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009c5a:	429a      	cmp	r2, r3
 8009c5c:	d316      	bcc.n	8009c8c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	689a      	ldr	r2, [r3, #8]
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009c68:	429a      	cmp	r2, r3
 8009c6a:	d20f      	bcs.n	8009c8c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	2100      	movs	r1, #0
 8009c70:	68f8      	ldr	r0, [r7, #12]
 8009c72:	f000 fe9c 	bl	800a9ae <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	2200      	movs	r2, #0
 8009c7a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009c7e:	2300      	movs	r3, #0
 8009c80:	2200      	movs	r2, #0
 8009c82:	2100      	movs	r1, #0
 8009c84:	68f8      	ldr	r0, [r7, #12]
 8009c86:	f003 ffc5 	bl	800dc14 <USBD_LL_PrepareReceive>
 8009c8a:	e026      	b.n	8009cda <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c92:	68db      	ldr	r3, [r3, #12]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d00a      	beq.n	8009cae <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009c9e:	2b03      	cmp	r3, #3
 8009ca0:	d105      	bne.n	8009cae <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ca8:	68db      	ldr	r3, [r3, #12]
 8009caa:	68f8      	ldr	r0, [r7, #12]
 8009cac:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009cae:	2180      	movs	r1, #128	; 0x80
 8009cb0:	68f8      	ldr	r0, [r7, #12]
 8009cb2:	f003 ff03 	bl	800dabc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009cb6:	68f8      	ldr	r0, [r7, #12]
 8009cb8:	f000 fece 	bl	800aa58 <USBD_CtlReceiveStatus>
 8009cbc:	e00d      	b.n	8009cda <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009cc4:	2b04      	cmp	r3, #4
 8009cc6:	d004      	beq.n	8009cd2 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d103      	bne.n	8009cda <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009cd2:	2180      	movs	r1, #128	; 0x80
 8009cd4:	68f8      	ldr	r0, [r7, #12]
 8009cd6:	f003 fef1 	bl	800dabc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009ce0:	2b01      	cmp	r3, #1
 8009ce2:	d11d      	bne.n	8009d20 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009ce4:	68f8      	ldr	r0, [r7, #12]
 8009ce6:	f7ff fe81 	bl	80099ec <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	2200      	movs	r2, #0
 8009cee:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009cf2:	e015      	b.n	8009d20 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cfa:	695b      	ldr	r3, [r3, #20]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d00d      	beq.n	8009d1c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009d06:	2b03      	cmp	r3, #3
 8009d08:	d108      	bne.n	8009d1c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d10:	695b      	ldr	r3, [r3, #20]
 8009d12:	7afa      	ldrb	r2, [r7, #11]
 8009d14:	4611      	mov	r1, r2
 8009d16:	68f8      	ldr	r0, [r7, #12]
 8009d18:	4798      	blx	r3
 8009d1a:	e001      	b.n	8009d20 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009d1c:	2302      	movs	r3, #2
 8009d1e:	e000      	b.n	8009d22 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009d20:	2300      	movs	r3, #0
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	3718      	adds	r7, #24
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}

08009d2a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009d2a:	b580      	push	{r7, lr}
 8009d2c:	b082      	sub	sp, #8
 8009d2e:	af00      	add	r7, sp, #0
 8009d30:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009d32:	2340      	movs	r3, #64	; 0x40
 8009d34:	2200      	movs	r2, #0
 8009d36:	2100      	movs	r1, #0
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f003 fe7a 	bl	800da32 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2201      	movs	r2, #1
 8009d42:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2240      	movs	r2, #64	; 0x40
 8009d4a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009d4e:	2340      	movs	r3, #64	; 0x40
 8009d50:	2200      	movs	r2, #0
 8009d52:	2180      	movs	r1, #128	; 0x80
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f003 fe6c 	bl	800da32 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2201      	movs	r2, #1
 8009d5e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2240      	movs	r2, #64	; 0x40
 8009d64:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2201      	movs	r2, #1
 8009d6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2200      	movs	r2, #0
 8009d72:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d009      	beq.n	8009da2 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d94:	685b      	ldr	r3, [r3, #4]
 8009d96:	687a      	ldr	r2, [r7, #4]
 8009d98:	6852      	ldr	r2, [r2, #4]
 8009d9a:	b2d2      	uxtb	r2, r2
 8009d9c:	4611      	mov	r1, r2
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	4798      	blx	r3
  }

  return USBD_OK;
 8009da2:	2300      	movs	r3, #0
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	3708      	adds	r7, #8
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}

08009dac <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009dac:	b480      	push	{r7}
 8009dae:	b083      	sub	sp, #12
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
 8009db4:	460b      	mov	r3, r1
 8009db6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	78fa      	ldrb	r2, [r7, #3]
 8009dbc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009dbe:	2300      	movs	r3, #0
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	370c      	adds	r7, #12
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bc80      	pop	{r7}
 8009dc8:	4770      	bx	lr

08009dca <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009dca:	b480      	push	{r7}
 8009dcc:	b083      	sub	sp, #12
 8009dce:	af00      	add	r7, sp, #0
 8009dd0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2204      	movs	r2, #4
 8009de2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009de6:	2300      	movs	r3, #0
}
 8009de8:	4618      	mov	r0, r3
 8009dea:	370c      	adds	r7, #12
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bc80      	pop	{r7}
 8009df0:	4770      	bx	lr

08009df2 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009df2:	b480      	push	{r7}
 8009df4:	b083      	sub	sp, #12
 8009df6:	af00      	add	r7, sp, #0
 8009df8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e00:	2b04      	cmp	r3, #4
 8009e02:	d105      	bne.n	8009e10 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009e10:	2300      	movs	r3, #0
}
 8009e12:	4618      	mov	r0, r3
 8009e14:	370c      	adds	r7, #12
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bc80      	pop	{r7}
 8009e1a:	4770      	bx	lr

08009e1c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b082      	sub	sp, #8
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e2a:	2b03      	cmp	r3, #3
 8009e2c:	d10b      	bne.n	8009e46 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e34:	69db      	ldr	r3, [r3, #28]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d005      	beq.n	8009e46 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e40:	69db      	ldr	r3, [r3, #28]
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009e46:	2300      	movs	r3, #0
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	3708      	adds	r7, #8
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bd80      	pop	{r7, pc}

08009e50 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b084      	sub	sp, #16
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
 8009e58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	781b      	ldrb	r3, [r3, #0]
 8009e62:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009e66:	2b40      	cmp	r3, #64	; 0x40
 8009e68:	d005      	beq.n	8009e76 <USBD_StdDevReq+0x26>
 8009e6a:	2b40      	cmp	r3, #64	; 0x40
 8009e6c:	d84f      	bhi.n	8009f0e <USBD_StdDevReq+0xbe>
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d009      	beq.n	8009e86 <USBD_StdDevReq+0x36>
 8009e72:	2b20      	cmp	r3, #32
 8009e74:	d14b      	bne.n	8009f0e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e7c:	689b      	ldr	r3, [r3, #8]
 8009e7e:	6839      	ldr	r1, [r7, #0]
 8009e80:	6878      	ldr	r0, [r7, #4]
 8009e82:	4798      	blx	r3
      break;
 8009e84:	e048      	b.n	8009f18 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	785b      	ldrb	r3, [r3, #1]
 8009e8a:	2b09      	cmp	r3, #9
 8009e8c:	d839      	bhi.n	8009f02 <USBD_StdDevReq+0xb2>
 8009e8e:	a201      	add	r2, pc, #4	; (adr r2, 8009e94 <USBD_StdDevReq+0x44>)
 8009e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e94:	08009ee5 	.word	0x08009ee5
 8009e98:	08009ef9 	.word	0x08009ef9
 8009e9c:	08009f03 	.word	0x08009f03
 8009ea0:	08009eef 	.word	0x08009eef
 8009ea4:	08009f03 	.word	0x08009f03
 8009ea8:	08009ec7 	.word	0x08009ec7
 8009eac:	08009ebd 	.word	0x08009ebd
 8009eb0:	08009f03 	.word	0x08009f03
 8009eb4:	08009edb 	.word	0x08009edb
 8009eb8:	08009ed1 	.word	0x08009ed1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009ebc:	6839      	ldr	r1, [r7, #0]
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	f000 f9dc 	bl	800a27c <USBD_GetDescriptor>
          break;
 8009ec4:	e022      	b.n	8009f0c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009ec6:	6839      	ldr	r1, [r7, #0]
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	f000 fb3f 	bl	800a54c <USBD_SetAddress>
          break;
 8009ece:	e01d      	b.n	8009f0c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009ed0:	6839      	ldr	r1, [r7, #0]
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f000 fb7e 	bl	800a5d4 <USBD_SetConfig>
          break;
 8009ed8:	e018      	b.n	8009f0c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009eda:	6839      	ldr	r1, [r7, #0]
 8009edc:	6878      	ldr	r0, [r7, #4]
 8009ede:	f000 fc07 	bl	800a6f0 <USBD_GetConfig>
          break;
 8009ee2:	e013      	b.n	8009f0c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009ee4:	6839      	ldr	r1, [r7, #0]
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	f000 fc37 	bl	800a75a <USBD_GetStatus>
          break;
 8009eec:	e00e      	b.n	8009f0c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009eee:	6839      	ldr	r1, [r7, #0]
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	f000 fc65 	bl	800a7c0 <USBD_SetFeature>
          break;
 8009ef6:	e009      	b.n	8009f0c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009ef8:	6839      	ldr	r1, [r7, #0]
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f000 fc74 	bl	800a7e8 <USBD_ClrFeature>
          break;
 8009f00:	e004      	b.n	8009f0c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009f02:	6839      	ldr	r1, [r7, #0]
 8009f04:	6878      	ldr	r0, [r7, #4]
 8009f06:	f000 fccc 	bl	800a8a2 <USBD_CtlError>
          break;
 8009f0a:	bf00      	nop
      }
      break;
 8009f0c:	e004      	b.n	8009f18 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009f0e:	6839      	ldr	r1, [r7, #0]
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f000 fcc6 	bl	800a8a2 <USBD_CtlError>
      break;
 8009f16:	bf00      	nop
  }

  return ret;
 8009f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	3710      	adds	r7, #16
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd80      	pop	{r7, pc}
 8009f22:	bf00      	nop

08009f24 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b084      	sub	sp, #16
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
 8009f2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009f2e:	2300      	movs	r3, #0
 8009f30:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	781b      	ldrb	r3, [r3, #0]
 8009f36:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009f3a:	2b40      	cmp	r3, #64	; 0x40
 8009f3c:	d005      	beq.n	8009f4a <USBD_StdItfReq+0x26>
 8009f3e:	2b40      	cmp	r3, #64	; 0x40
 8009f40:	d82e      	bhi.n	8009fa0 <USBD_StdItfReq+0x7c>
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d001      	beq.n	8009f4a <USBD_StdItfReq+0x26>
 8009f46:	2b20      	cmp	r3, #32
 8009f48:	d12a      	bne.n	8009fa0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f50:	3b01      	subs	r3, #1
 8009f52:	2b02      	cmp	r3, #2
 8009f54:	d81d      	bhi.n	8009f92 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	889b      	ldrh	r3, [r3, #4]
 8009f5a:	b2db      	uxtb	r3, r3
 8009f5c:	2b01      	cmp	r3, #1
 8009f5e:	d813      	bhi.n	8009f88 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f66:	689b      	ldr	r3, [r3, #8]
 8009f68:	6839      	ldr	r1, [r7, #0]
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	4798      	blx	r3
 8009f6e:	4603      	mov	r3, r0
 8009f70:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	88db      	ldrh	r3, [r3, #6]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d110      	bne.n	8009f9c <USBD_StdItfReq+0x78>
 8009f7a:	7bfb      	ldrb	r3, [r7, #15]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d10d      	bne.n	8009f9c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009f80:	6878      	ldr	r0, [r7, #4]
 8009f82:	f000 fd56 	bl	800aa32 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009f86:	e009      	b.n	8009f9c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009f88:	6839      	ldr	r1, [r7, #0]
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f000 fc89 	bl	800a8a2 <USBD_CtlError>
          break;
 8009f90:	e004      	b.n	8009f9c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009f92:	6839      	ldr	r1, [r7, #0]
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f000 fc84 	bl	800a8a2 <USBD_CtlError>
          break;
 8009f9a:	e000      	b.n	8009f9e <USBD_StdItfReq+0x7a>
          break;
 8009f9c:	bf00      	nop
      }
      break;
 8009f9e:	e004      	b.n	8009faa <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009fa0:	6839      	ldr	r1, [r7, #0]
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	f000 fc7d 	bl	800a8a2 <USBD_CtlError>
      break;
 8009fa8:	bf00      	nop
  }

  return USBD_OK;
 8009faa:	2300      	movs	r3, #0
}
 8009fac:	4618      	mov	r0, r3
 8009fae:	3710      	adds	r7, #16
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}

08009fb4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b084      	sub	sp, #16
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
 8009fbc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	889b      	ldrh	r3, [r3, #4]
 8009fc6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	781b      	ldrb	r3, [r3, #0]
 8009fcc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009fd0:	2b40      	cmp	r3, #64	; 0x40
 8009fd2:	d007      	beq.n	8009fe4 <USBD_StdEPReq+0x30>
 8009fd4:	2b40      	cmp	r3, #64	; 0x40
 8009fd6:	f200 8146 	bhi.w	800a266 <USBD_StdEPReq+0x2b2>
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d00a      	beq.n	8009ff4 <USBD_StdEPReq+0x40>
 8009fde:	2b20      	cmp	r3, #32
 8009fe0:	f040 8141 	bne.w	800a266 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fea:	689b      	ldr	r3, [r3, #8]
 8009fec:	6839      	ldr	r1, [r7, #0]
 8009fee:	6878      	ldr	r0, [r7, #4]
 8009ff0:	4798      	blx	r3
      break;
 8009ff2:	e13d      	b.n	800a270 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	781b      	ldrb	r3, [r3, #0]
 8009ff8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009ffc:	2b20      	cmp	r3, #32
 8009ffe:	d10a      	bne.n	800a016 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a006:	689b      	ldr	r3, [r3, #8]
 800a008:	6839      	ldr	r1, [r7, #0]
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	4798      	blx	r3
 800a00e:	4603      	mov	r3, r0
 800a010:	73fb      	strb	r3, [r7, #15]

        return ret;
 800a012:	7bfb      	ldrb	r3, [r7, #15]
 800a014:	e12d      	b.n	800a272 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	785b      	ldrb	r3, [r3, #1]
 800a01a:	2b03      	cmp	r3, #3
 800a01c:	d007      	beq.n	800a02e <USBD_StdEPReq+0x7a>
 800a01e:	2b03      	cmp	r3, #3
 800a020:	f300 811b 	bgt.w	800a25a <USBD_StdEPReq+0x2a6>
 800a024:	2b00      	cmp	r3, #0
 800a026:	d072      	beq.n	800a10e <USBD_StdEPReq+0x15a>
 800a028:	2b01      	cmp	r3, #1
 800a02a:	d03a      	beq.n	800a0a2 <USBD_StdEPReq+0xee>
 800a02c:	e115      	b.n	800a25a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a034:	2b02      	cmp	r3, #2
 800a036:	d002      	beq.n	800a03e <USBD_StdEPReq+0x8a>
 800a038:	2b03      	cmp	r3, #3
 800a03a:	d015      	beq.n	800a068 <USBD_StdEPReq+0xb4>
 800a03c:	e02b      	b.n	800a096 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a03e:	7bbb      	ldrb	r3, [r7, #14]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d00c      	beq.n	800a05e <USBD_StdEPReq+0xaa>
 800a044:	7bbb      	ldrb	r3, [r7, #14]
 800a046:	2b80      	cmp	r3, #128	; 0x80
 800a048:	d009      	beq.n	800a05e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a04a:	7bbb      	ldrb	r3, [r7, #14]
 800a04c:	4619      	mov	r1, r3
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f003 fd34 	bl	800dabc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a054:	2180      	movs	r1, #128	; 0x80
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f003 fd30 	bl	800dabc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a05c:	e020      	b.n	800a0a0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800a05e:	6839      	ldr	r1, [r7, #0]
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f000 fc1e 	bl	800a8a2 <USBD_CtlError>
              break;
 800a066:	e01b      	b.n	800a0a0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	885b      	ldrh	r3, [r3, #2]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d10e      	bne.n	800a08e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800a070:	7bbb      	ldrb	r3, [r7, #14]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d00b      	beq.n	800a08e <USBD_StdEPReq+0xda>
 800a076:	7bbb      	ldrb	r3, [r7, #14]
 800a078:	2b80      	cmp	r3, #128	; 0x80
 800a07a:	d008      	beq.n	800a08e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	88db      	ldrh	r3, [r3, #6]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d104      	bne.n	800a08e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800a084:	7bbb      	ldrb	r3, [r7, #14]
 800a086:	4619      	mov	r1, r3
 800a088:	6878      	ldr	r0, [r7, #4]
 800a08a:	f003 fd17 	bl	800dabc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800a08e:	6878      	ldr	r0, [r7, #4]
 800a090:	f000 fccf 	bl	800aa32 <USBD_CtlSendStatus>

              break;
 800a094:	e004      	b.n	800a0a0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800a096:	6839      	ldr	r1, [r7, #0]
 800a098:	6878      	ldr	r0, [r7, #4]
 800a09a:	f000 fc02 	bl	800a8a2 <USBD_CtlError>
              break;
 800a09e:	bf00      	nop
          }
          break;
 800a0a0:	e0e0      	b.n	800a264 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0a8:	2b02      	cmp	r3, #2
 800a0aa:	d002      	beq.n	800a0b2 <USBD_StdEPReq+0xfe>
 800a0ac:	2b03      	cmp	r3, #3
 800a0ae:	d015      	beq.n	800a0dc <USBD_StdEPReq+0x128>
 800a0b0:	e026      	b.n	800a100 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a0b2:	7bbb      	ldrb	r3, [r7, #14]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d00c      	beq.n	800a0d2 <USBD_StdEPReq+0x11e>
 800a0b8:	7bbb      	ldrb	r3, [r7, #14]
 800a0ba:	2b80      	cmp	r3, #128	; 0x80
 800a0bc:	d009      	beq.n	800a0d2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a0be:	7bbb      	ldrb	r3, [r7, #14]
 800a0c0:	4619      	mov	r1, r3
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f003 fcfa 	bl	800dabc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a0c8:	2180      	movs	r1, #128	; 0x80
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f003 fcf6 	bl	800dabc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a0d0:	e01c      	b.n	800a10c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800a0d2:	6839      	ldr	r1, [r7, #0]
 800a0d4:	6878      	ldr	r0, [r7, #4]
 800a0d6:	f000 fbe4 	bl	800a8a2 <USBD_CtlError>
              break;
 800a0da:	e017      	b.n	800a10c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	885b      	ldrh	r3, [r3, #2]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d112      	bne.n	800a10a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a0e4:	7bbb      	ldrb	r3, [r7, #14]
 800a0e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d004      	beq.n	800a0f8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800a0ee:	7bbb      	ldrb	r3, [r7, #14]
 800a0f0:	4619      	mov	r1, r3
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f003 fd01 	bl	800dafa <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800a0f8:	6878      	ldr	r0, [r7, #4]
 800a0fa:	f000 fc9a 	bl	800aa32 <USBD_CtlSendStatus>
              }
              break;
 800a0fe:	e004      	b.n	800a10a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800a100:	6839      	ldr	r1, [r7, #0]
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f000 fbcd 	bl	800a8a2 <USBD_CtlError>
              break;
 800a108:	e000      	b.n	800a10c <USBD_StdEPReq+0x158>
              break;
 800a10a:	bf00      	nop
          }
          break;
 800a10c:	e0aa      	b.n	800a264 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a114:	2b02      	cmp	r3, #2
 800a116:	d002      	beq.n	800a11e <USBD_StdEPReq+0x16a>
 800a118:	2b03      	cmp	r3, #3
 800a11a:	d032      	beq.n	800a182 <USBD_StdEPReq+0x1ce>
 800a11c:	e097      	b.n	800a24e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a11e:	7bbb      	ldrb	r3, [r7, #14]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d007      	beq.n	800a134 <USBD_StdEPReq+0x180>
 800a124:	7bbb      	ldrb	r3, [r7, #14]
 800a126:	2b80      	cmp	r3, #128	; 0x80
 800a128:	d004      	beq.n	800a134 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800a12a:	6839      	ldr	r1, [r7, #0]
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f000 fbb8 	bl	800a8a2 <USBD_CtlError>
                break;
 800a132:	e091      	b.n	800a258 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a134:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	da0b      	bge.n	800a154 <USBD_StdEPReq+0x1a0>
 800a13c:	7bbb      	ldrb	r3, [r7, #14]
 800a13e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a142:	4613      	mov	r3, r2
 800a144:	009b      	lsls	r3, r3, #2
 800a146:	4413      	add	r3, r2
 800a148:	009b      	lsls	r3, r3, #2
 800a14a:	3310      	adds	r3, #16
 800a14c:	687a      	ldr	r2, [r7, #4]
 800a14e:	4413      	add	r3, r2
 800a150:	3304      	adds	r3, #4
 800a152:	e00b      	b.n	800a16c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a154:	7bbb      	ldrb	r3, [r7, #14]
 800a156:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a15a:	4613      	mov	r3, r2
 800a15c:	009b      	lsls	r3, r3, #2
 800a15e:	4413      	add	r3, r2
 800a160:	009b      	lsls	r3, r3, #2
 800a162:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a166:	687a      	ldr	r2, [r7, #4]
 800a168:	4413      	add	r3, r2
 800a16a:	3304      	adds	r3, #4
 800a16c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a16e:	68bb      	ldr	r3, [r7, #8]
 800a170:	2200      	movs	r2, #0
 800a172:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	2202      	movs	r2, #2
 800a178:	4619      	mov	r1, r3
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	f000 fbfb 	bl	800a976 <USBD_CtlSendData>
              break;
 800a180:	e06a      	b.n	800a258 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a182:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a186:	2b00      	cmp	r3, #0
 800a188:	da11      	bge.n	800a1ae <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a18a:	7bbb      	ldrb	r3, [r7, #14]
 800a18c:	f003 020f 	and.w	r2, r3, #15
 800a190:	6879      	ldr	r1, [r7, #4]
 800a192:	4613      	mov	r3, r2
 800a194:	009b      	lsls	r3, r3, #2
 800a196:	4413      	add	r3, r2
 800a198:	009b      	lsls	r3, r3, #2
 800a19a:	440b      	add	r3, r1
 800a19c:	3318      	adds	r3, #24
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d117      	bne.n	800a1d4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a1a4:	6839      	ldr	r1, [r7, #0]
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f000 fb7b 	bl	800a8a2 <USBD_CtlError>
                  break;
 800a1ac:	e054      	b.n	800a258 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a1ae:	7bbb      	ldrb	r3, [r7, #14]
 800a1b0:	f003 020f 	and.w	r2, r3, #15
 800a1b4:	6879      	ldr	r1, [r7, #4]
 800a1b6:	4613      	mov	r3, r2
 800a1b8:	009b      	lsls	r3, r3, #2
 800a1ba:	4413      	add	r3, r2
 800a1bc:	009b      	lsls	r3, r3, #2
 800a1be:	440b      	add	r3, r1
 800a1c0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d104      	bne.n	800a1d4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a1ca:	6839      	ldr	r1, [r7, #0]
 800a1cc:	6878      	ldr	r0, [r7, #4]
 800a1ce:	f000 fb68 	bl	800a8a2 <USBD_CtlError>
                  break;
 800a1d2:	e041      	b.n	800a258 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a1d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	da0b      	bge.n	800a1f4 <USBD_StdEPReq+0x240>
 800a1dc:	7bbb      	ldrb	r3, [r7, #14]
 800a1de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a1e2:	4613      	mov	r3, r2
 800a1e4:	009b      	lsls	r3, r3, #2
 800a1e6:	4413      	add	r3, r2
 800a1e8:	009b      	lsls	r3, r3, #2
 800a1ea:	3310      	adds	r3, #16
 800a1ec:	687a      	ldr	r2, [r7, #4]
 800a1ee:	4413      	add	r3, r2
 800a1f0:	3304      	adds	r3, #4
 800a1f2:	e00b      	b.n	800a20c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a1f4:	7bbb      	ldrb	r3, [r7, #14]
 800a1f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a1fa:	4613      	mov	r3, r2
 800a1fc:	009b      	lsls	r3, r3, #2
 800a1fe:	4413      	add	r3, r2
 800a200:	009b      	lsls	r3, r3, #2
 800a202:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a206:	687a      	ldr	r2, [r7, #4]
 800a208:	4413      	add	r3, r2
 800a20a:	3304      	adds	r3, #4
 800a20c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a20e:	7bbb      	ldrb	r3, [r7, #14]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d002      	beq.n	800a21a <USBD_StdEPReq+0x266>
 800a214:	7bbb      	ldrb	r3, [r7, #14]
 800a216:	2b80      	cmp	r3, #128	; 0x80
 800a218:	d103      	bne.n	800a222 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	2200      	movs	r2, #0
 800a21e:	601a      	str	r2, [r3, #0]
 800a220:	e00e      	b.n	800a240 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800a222:	7bbb      	ldrb	r3, [r7, #14]
 800a224:	4619      	mov	r1, r3
 800a226:	6878      	ldr	r0, [r7, #4]
 800a228:	f003 fc86 	bl	800db38 <USBD_LL_IsStallEP>
 800a22c:	4603      	mov	r3, r0
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d003      	beq.n	800a23a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	2201      	movs	r2, #1
 800a236:	601a      	str	r2, [r3, #0]
 800a238:	e002      	b.n	800a240 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	2200      	movs	r2, #0
 800a23e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a240:	68bb      	ldr	r3, [r7, #8]
 800a242:	2202      	movs	r2, #2
 800a244:	4619      	mov	r1, r3
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	f000 fb95 	bl	800a976 <USBD_CtlSendData>
              break;
 800a24c:	e004      	b.n	800a258 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800a24e:	6839      	ldr	r1, [r7, #0]
 800a250:	6878      	ldr	r0, [r7, #4]
 800a252:	f000 fb26 	bl	800a8a2 <USBD_CtlError>
              break;
 800a256:	bf00      	nop
          }
          break;
 800a258:	e004      	b.n	800a264 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800a25a:	6839      	ldr	r1, [r7, #0]
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f000 fb20 	bl	800a8a2 <USBD_CtlError>
          break;
 800a262:	bf00      	nop
      }
      break;
 800a264:	e004      	b.n	800a270 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800a266:	6839      	ldr	r1, [r7, #0]
 800a268:	6878      	ldr	r0, [r7, #4]
 800a26a:	f000 fb1a 	bl	800a8a2 <USBD_CtlError>
      break;
 800a26e:	bf00      	nop
  }

  return ret;
 800a270:	7bfb      	ldrb	r3, [r7, #15]
}
 800a272:	4618      	mov	r0, r3
 800a274:	3710      	adds	r7, #16
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}
	...

0800a27c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b084      	sub	sp, #16
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
 800a284:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a286:	2300      	movs	r3, #0
 800a288:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a28a:	2300      	movs	r3, #0
 800a28c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a28e:	2300      	movs	r3, #0
 800a290:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	885b      	ldrh	r3, [r3, #2]
 800a296:	0a1b      	lsrs	r3, r3, #8
 800a298:	b29b      	uxth	r3, r3
 800a29a:	3b01      	subs	r3, #1
 800a29c:	2b06      	cmp	r3, #6
 800a29e:	f200 8128 	bhi.w	800a4f2 <USBD_GetDescriptor+0x276>
 800a2a2:	a201      	add	r2, pc, #4	; (adr r2, 800a2a8 <USBD_GetDescriptor+0x2c>)
 800a2a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2a8:	0800a2c5 	.word	0x0800a2c5
 800a2ac:	0800a2dd 	.word	0x0800a2dd
 800a2b0:	0800a31d 	.word	0x0800a31d
 800a2b4:	0800a4f3 	.word	0x0800a4f3
 800a2b8:	0800a4f3 	.word	0x0800a4f3
 800a2bc:	0800a493 	.word	0x0800a493
 800a2c0:	0800a4bf 	.word	0x0800a4bf
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	687a      	ldr	r2, [r7, #4]
 800a2ce:	7c12      	ldrb	r2, [r2, #16]
 800a2d0:	f107 0108 	add.w	r1, r7, #8
 800a2d4:	4610      	mov	r0, r2
 800a2d6:	4798      	blx	r3
 800a2d8:	60f8      	str	r0, [r7, #12]
      break;
 800a2da:	e112      	b.n	800a502 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	7c1b      	ldrb	r3, [r3, #16]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d10d      	bne.n	800a300 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2ec:	f107 0208 	add.w	r2, r7, #8
 800a2f0:	4610      	mov	r0, r2
 800a2f2:	4798      	blx	r3
 800a2f4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	3301      	adds	r3, #1
 800a2fa:	2202      	movs	r2, #2
 800a2fc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a2fe:	e100      	b.n	800a502 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a308:	f107 0208 	add.w	r2, r7, #8
 800a30c:	4610      	mov	r0, r2
 800a30e:	4798      	blx	r3
 800a310:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	3301      	adds	r3, #1
 800a316:	2202      	movs	r2, #2
 800a318:	701a      	strb	r2, [r3, #0]
      break;
 800a31a:	e0f2      	b.n	800a502 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	885b      	ldrh	r3, [r3, #2]
 800a320:	b2db      	uxtb	r3, r3
 800a322:	2b05      	cmp	r3, #5
 800a324:	f200 80ac 	bhi.w	800a480 <USBD_GetDescriptor+0x204>
 800a328:	a201      	add	r2, pc, #4	; (adr r2, 800a330 <USBD_GetDescriptor+0xb4>)
 800a32a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a32e:	bf00      	nop
 800a330:	0800a349 	.word	0x0800a349
 800a334:	0800a37d 	.word	0x0800a37d
 800a338:	0800a3b1 	.word	0x0800a3b1
 800a33c:	0800a3e5 	.word	0x0800a3e5
 800a340:	0800a419 	.word	0x0800a419
 800a344:	0800a44d 	.word	0x0800a44d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a34e:	685b      	ldr	r3, [r3, #4]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d00b      	beq.n	800a36c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a35a:	685b      	ldr	r3, [r3, #4]
 800a35c:	687a      	ldr	r2, [r7, #4]
 800a35e:	7c12      	ldrb	r2, [r2, #16]
 800a360:	f107 0108 	add.w	r1, r7, #8
 800a364:	4610      	mov	r0, r2
 800a366:	4798      	blx	r3
 800a368:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a36a:	e091      	b.n	800a490 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a36c:	6839      	ldr	r1, [r7, #0]
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f000 fa97 	bl	800a8a2 <USBD_CtlError>
            err++;
 800a374:	7afb      	ldrb	r3, [r7, #11]
 800a376:	3301      	adds	r3, #1
 800a378:	72fb      	strb	r3, [r7, #11]
          break;
 800a37a:	e089      	b.n	800a490 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a382:	689b      	ldr	r3, [r3, #8]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d00b      	beq.n	800a3a0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a38e:	689b      	ldr	r3, [r3, #8]
 800a390:	687a      	ldr	r2, [r7, #4]
 800a392:	7c12      	ldrb	r2, [r2, #16]
 800a394:	f107 0108 	add.w	r1, r7, #8
 800a398:	4610      	mov	r0, r2
 800a39a:	4798      	blx	r3
 800a39c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a39e:	e077      	b.n	800a490 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a3a0:	6839      	ldr	r1, [r7, #0]
 800a3a2:	6878      	ldr	r0, [r7, #4]
 800a3a4:	f000 fa7d 	bl	800a8a2 <USBD_CtlError>
            err++;
 800a3a8:	7afb      	ldrb	r3, [r7, #11]
 800a3aa:	3301      	adds	r3, #1
 800a3ac:	72fb      	strb	r3, [r7, #11]
          break;
 800a3ae:	e06f      	b.n	800a490 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a3b6:	68db      	ldr	r3, [r3, #12]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d00b      	beq.n	800a3d4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a3c2:	68db      	ldr	r3, [r3, #12]
 800a3c4:	687a      	ldr	r2, [r7, #4]
 800a3c6:	7c12      	ldrb	r2, [r2, #16]
 800a3c8:	f107 0108 	add.w	r1, r7, #8
 800a3cc:	4610      	mov	r0, r2
 800a3ce:	4798      	blx	r3
 800a3d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a3d2:	e05d      	b.n	800a490 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a3d4:	6839      	ldr	r1, [r7, #0]
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	f000 fa63 	bl	800a8a2 <USBD_CtlError>
            err++;
 800a3dc:	7afb      	ldrb	r3, [r7, #11]
 800a3de:	3301      	adds	r3, #1
 800a3e0:	72fb      	strb	r3, [r7, #11]
          break;
 800a3e2:	e055      	b.n	800a490 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a3ea:	691b      	ldr	r3, [r3, #16]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d00b      	beq.n	800a408 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a3f6:	691b      	ldr	r3, [r3, #16]
 800a3f8:	687a      	ldr	r2, [r7, #4]
 800a3fa:	7c12      	ldrb	r2, [r2, #16]
 800a3fc:	f107 0108 	add.w	r1, r7, #8
 800a400:	4610      	mov	r0, r2
 800a402:	4798      	blx	r3
 800a404:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a406:	e043      	b.n	800a490 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a408:	6839      	ldr	r1, [r7, #0]
 800a40a:	6878      	ldr	r0, [r7, #4]
 800a40c:	f000 fa49 	bl	800a8a2 <USBD_CtlError>
            err++;
 800a410:	7afb      	ldrb	r3, [r7, #11]
 800a412:	3301      	adds	r3, #1
 800a414:	72fb      	strb	r3, [r7, #11]
          break;
 800a416:	e03b      	b.n	800a490 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a41e:	695b      	ldr	r3, [r3, #20]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d00b      	beq.n	800a43c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a42a:	695b      	ldr	r3, [r3, #20]
 800a42c:	687a      	ldr	r2, [r7, #4]
 800a42e:	7c12      	ldrb	r2, [r2, #16]
 800a430:	f107 0108 	add.w	r1, r7, #8
 800a434:	4610      	mov	r0, r2
 800a436:	4798      	blx	r3
 800a438:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a43a:	e029      	b.n	800a490 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a43c:	6839      	ldr	r1, [r7, #0]
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	f000 fa2f 	bl	800a8a2 <USBD_CtlError>
            err++;
 800a444:	7afb      	ldrb	r3, [r7, #11]
 800a446:	3301      	adds	r3, #1
 800a448:	72fb      	strb	r3, [r7, #11]
          break;
 800a44a:	e021      	b.n	800a490 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a452:	699b      	ldr	r3, [r3, #24]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d00b      	beq.n	800a470 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a45e:	699b      	ldr	r3, [r3, #24]
 800a460:	687a      	ldr	r2, [r7, #4]
 800a462:	7c12      	ldrb	r2, [r2, #16]
 800a464:	f107 0108 	add.w	r1, r7, #8
 800a468:	4610      	mov	r0, r2
 800a46a:	4798      	blx	r3
 800a46c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a46e:	e00f      	b.n	800a490 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a470:	6839      	ldr	r1, [r7, #0]
 800a472:	6878      	ldr	r0, [r7, #4]
 800a474:	f000 fa15 	bl	800a8a2 <USBD_CtlError>
            err++;
 800a478:	7afb      	ldrb	r3, [r7, #11]
 800a47a:	3301      	adds	r3, #1
 800a47c:	72fb      	strb	r3, [r7, #11]
          break;
 800a47e:	e007      	b.n	800a490 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800a480:	6839      	ldr	r1, [r7, #0]
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f000 fa0d 	bl	800a8a2 <USBD_CtlError>
          err++;
 800a488:	7afb      	ldrb	r3, [r7, #11]
 800a48a:	3301      	adds	r3, #1
 800a48c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800a48e:	e038      	b.n	800a502 <USBD_GetDescriptor+0x286>
 800a490:	e037      	b.n	800a502 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	7c1b      	ldrb	r3, [r3, #16]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d109      	bne.n	800a4ae <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4a2:	f107 0208 	add.w	r2, r7, #8
 800a4a6:	4610      	mov	r0, r2
 800a4a8:	4798      	blx	r3
 800a4aa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a4ac:	e029      	b.n	800a502 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a4ae:	6839      	ldr	r1, [r7, #0]
 800a4b0:	6878      	ldr	r0, [r7, #4]
 800a4b2:	f000 f9f6 	bl	800a8a2 <USBD_CtlError>
        err++;
 800a4b6:	7afb      	ldrb	r3, [r7, #11]
 800a4b8:	3301      	adds	r3, #1
 800a4ba:	72fb      	strb	r3, [r7, #11]
      break;
 800a4bc:	e021      	b.n	800a502 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	7c1b      	ldrb	r3, [r3, #16]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d10d      	bne.n	800a4e2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4ce:	f107 0208 	add.w	r2, r7, #8
 800a4d2:	4610      	mov	r0, r2
 800a4d4:	4798      	blx	r3
 800a4d6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	3301      	adds	r3, #1
 800a4dc:	2207      	movs	r2, #7
 800a4de:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a4e0:	e00f      	b.n	800a502 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a4e2:	6839      	ldr	r1, [r7, #0]
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	f000 f9dc 	bl	800a8a2 <USBD_CtlError>
        err++;
 800a4ea:	7afb      	ldrb	r3, [r7, #11]
 800a4ec:	3301      	adds	r3, #1
 800a4ee:	72fb      	strb	r3, [r7, #11]
      break;
 800a4f0:	e007      	b.n	800a502 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a4f2:	6839      	ldr	r1, [r7, #0]
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	f000 f9d4 	bl	800a8a2 <USBD_CtlError>
      err++;
 800a4fa:	7afb      	ldrb	r3, [r7, #11]
 800a4fc:	3301      	adds	r3, #1
 800a4fe:	72fb      	strb	r3, [r7, #11]
      break;
 800a500:	bf00      	nop
  }

  if (err != 0U)
 800a502:	7afb      	ldrb	r3, [r7, #11]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d11c      	bne.n	800a542 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a508:	893b      	ldrh	r3, [r7, #8]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d011      	beq.n	800a532 <USBD_GetDescriptor+0x2b6>
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	88db      	ldrh	r3, [r3, #6]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d00d      	beq.n	800a532 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	88da      	ldrh	r2, [r3, #6]
 800a51a:	893b      	ldrh	r3, [r7, #8]
 800a51c:	4293      	cmp	r3, r2
 800a51e:	bf28      	it	cs
 800a520:	4613      	movcs	r3, r2
 800a522:	b29b      	uxth	r3, r3
 800a524:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a526:	893b      	ldrh	r3, [r7, #8]
 800a528:	461a      	mov	r2, r3
 800a52a:	68f9      	ldr	r1, [r7, #12]
 800a52c:	6878      	ldr	r0, [r7, #4]
 800a52e:	f000 fa22 	bl	800a976 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	88db      	ldrh	r3, [r3, #6]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d104      	bne.n	800a544 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	f000 fa79 	bl	800aa32 <USBD_CtlSendStatus>
 800a540:	e000      	b.n	800a544 <USBD_GetDescriptor+0x2c8>
    return;
 800a542:	bf00      	nop
    }
  }
}
 800a544:	3710      	adds	r7, #16
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}
 800a54a:	bf00      	nop

0800a54c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b084      	sub	sp, #16
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
 800a554:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	889b      	ldrh	r3, [r3, #4]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d130      	bne.n	800a5c0 <USBD_SetAddress+0x74>
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	88db      	ldrh	r3, [r3, #6]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d12c      	bne.n	800a5c0 <USBD_SetAddress+0x74>
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	885b      	ldrh	r3, [r3, #2]
 800a56a:	2b7f      	cmp	r3, #127	; 0x7f
 800a56c:	d828      	bhi.n	800a5c0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	885b      	ldrh	r3, [r3, #2]
 800a572:	b2db      	uxtb	r3, r3
 800a574:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a578:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a580:	2b03      	cmp	r3, #3
 800a582:	d104      	bne.n	800a58e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a584:	6839      	ldr	r1, [r7, #0]
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	f000 f98b 	bl	800a8a2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a58c:	e01d      	b.n	800a5ca <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	7bfa      	ldrb	r2, [r7, #15]
 800a592:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a596:	7bfb      	ldrb	r3, [r7, #15]
 800a598:	4619      	mov	r1, r3
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	f003 faf8 	bl	800db90 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	f000 fa46 	bl	800aa32 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a5a6:	7bfb      	ldrb	r3, [r7, #15]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d004      	beq.n	800a5b6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2202      	movs	r2, #2
 800a5b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5b4:	e009      	b.n	800a5ca <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2201      	movs	r2, #1
 800a5ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5be:	e004      	b.n	800a5ca <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a5c0:	6839      	ldr	r1, [r7, #0]
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	f000 f96d 	bl	800a8a2 <USBD_CtlError>
  }
}
 800a5c8:	bf00      	nop
 800a5ca:	bf00      	nop
 800a5cc:	3710      	adds	r7, #16
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}
	...

0800a5d4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b082      	sub	sp, #8
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
 800a5dc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	885b      	ldrh	r3, [r3, #2]
 800a5e2:	b2da      	uxtb	r2, r3
 800a5e4:	4b41      	ldr	r3, [pc, #260]	; (800a6ec <USBD_SetConfig+0x118>)
 800a5e6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a5e8:	4b40      	ldr	r3, [pc, #256]	; (800a6ec <USBD_SetConfig+0x118>)
 800a5ea:	781b      	ldrb	r3, [r3, #0]
 800a5ec:	2b01      	cmp	r3, #1
 800a5ee:	d904      	bls.n	800a5fa <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a5f0:	6839      	ldr	r1, [r7, #0]
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	f000 f955 	bl	800a8a2 <USBD_CtlError>
 800a5f8:	e075      	b.n	800a6e6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a600:	2b02      	cmp	r3, #2
 800a602:	d002      	beq.n	800a60a <USBD_SetConfig+0x36>
 800a604:	2b03      	cmp	r3, #3
 800a606:	d023      	beq.n	800a650 <USBD_SetConfig+0x7c>
 800a608:	e062      	b.n	800a6d0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a60a:	4b38      	ldr	r3, [pc, #224]	; (800a6ec <USBD_SetConfig+0x118>)
 800a60c:	781b      	ldrb	r3, [r3, #0]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d01a      	beq.n	800a648 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a612:	4b36      	ldr	r3, [pc, #216]	; (800a6ec <USBD_SetConfig+0x118>)
 800a614:	781b      	ldrb	r3, [r3, #0]
 800a616:	461a      	mov	r2, r3
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2203      	movs	r2, #3
 800a620:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a624:	4b31      	ldr	r3, [pc, #196]	; (800a6ec <USBD_SetConfig+0x118>)
 800a626:	781b      	ldrb	r3, [r3, #0]
 800a628:	4619      	mov	r1, r3
 800a62a:	6878      	ldr	r0, [r7, #4]
 800a62c:	f7ff f9e8 	bl	8009a00 <USBD_SetClassConfig>
 800a630:	4603      	mov	r3, r0
 800a632:	2b02      	cmp	r3, #2
 800a634:	d104      	bne.n	800a640 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a636:	6839      	ldr	r1, [r7, #0]
 800a638:	6878      	ldr	r0, [r7, #4]
 800a63a:	f000 f932 	bl	800a8a2 <USBD_CtlError>
            return;
 800a63e:	e052      	b.n	800a6e6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f000 f9f6 	bl	800aa32 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a646:	e04e      	b.n	800a6e6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	f000 f9f2 	bl	800aa32 <USBD_CtlSendStatus>
        break;
 800a64e:	e04a      	b.n	800a6e6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a650:	4b26      	ldr	r3, [pc, #152]	; (800a6ec <USBD_SetConfig+0x118>)
 800a652:	781b      	ldrb	r3, [r3, #0]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d112      	bne.n	800a67e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2202      	movs	r2, #2
 800a65c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800a660:	4b22      	ldr	r3, [pc, #136]	; (800a6ec <USBD_SetConfig+0x118>)
 800a662:	781b      	ldrb	r3, [r3, #0]
 800a664:	461a      	mov	r2, r3
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a66a:	4b20      	ldr	r3, [pc, #128]	; (800a6ec <USBD_SetConfig+0x118>)
 800a66c:	781b      	ldrb	r3, [r3, #0]
 800a66e:	4619      	mov	r1, r3
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f7ff f9e4 	bl	8009a3e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a676:	6878      	ldr	r0, [r7, #4]
 800a678:	f000 f9db 	bl	800aa32 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a67c:	e033      	b.n	800a6e6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a67e:	4b1b      	ldr	r3, [pc, #108]	; (800a6ec <USBD_SetConfig+0x118>)
 800a680:	781b      	ldrb	r3, [r3, #0]
 800a682:	461a      	mov	r2, r3
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	685b      	ldr	r3, [r3, #4]
 800a688:	429a      	cmp	r2, r3
 800a68a:	d01d      	beq.n	800a6c8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	685b      	ldr	r3, [r3, #4]
 800a690:	b2db      	uxtb	r3, r3
 800a692:	4619      	mov	r1, r3
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f7ff f9d2 	bl	8009a3e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a69a:	4b14      	ldr	r3, [pc, #80]	; (800a6ec <USBD_SetConfig+0x118>)
 800a69c:	781b      	ldrb	r3, [r3, #0]
 800a69e:	461a      	mov	r2, r3
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a6a4:	4b11      	ldr	r3, [pc, #68]	; (800a6ec <USBD_SetConfig+0x118>)
 800a6a6:	781b      	ldrb	r3, [r3, #0]
 800a6a8:	4619      	mov	r1, r3
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	f7ff f9a8 	bl	8009a00 <USBD_SetClassConfig>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	2b02      	cmp	r3, #2
 800a6b4:	d104      	bne.n	800a6c0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a6b6:	6839      	ldr	r1, [r7, #0]
 800a6b8:	6878      	ldr	r0, [r7, #4]
 800a6ba:	f000 f8f2 	bl	800a8a2 <USBD_CtlError>
            return;
 800a6be:	e012      	b.n	800a6e6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a6c0:	6878      	ldr	r0, [r7, #4]
 800a6c2:	f000 f9b6 	bl	800aa32 <USBD_CtlSendStatus>
        break;
 800a6c6:	e00e      	b.n	800a6e6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a6c8:	6878      	ldr	r0, [r7, #4]
 800a6ca:	f000 f9b2 	bl	800aa32 <USBD_CtlSendStatus>
        break;
 800a6ce:	e00a      	b.n	800a6e6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a6d0:	6839      	ldr	r1, [r7, #0]
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	f000 f8e5 	bl	800a8a2 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a6d8:	4b04      	ldr	r3, [pc, #16]	; (800a6ec <USBD_SetConfig+0x118>)
 800a6da:	781b      	ldrb	r3, [r3, #0]
 800a6dc:	4619      	mov	r1, r3
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f7ff f9ad 	bl	8009a3e <USBD_ClrClassConfig>
        break;
 800a6e4:	bf00      	nop
    }
  }
}
 800a6e6:	3708      	adds	r7, #8
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bd80      	pop	{r7, pc}
 800a6ec:	20000494 	.word	0x20000494

0800a6f0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b082      	sub	sp, #8
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
 800a6f8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	88db      	ldrh	r3, [r3, #6]
 800a6fe:	2b01      	cmp	r3, #1
 800a700:	d004      	beq.n	800a70c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a702:	6839      	ldr	r1, [r7, #0]
 800a704:	6878      	ldr	r0, [r7, #4]
 800a706:	f000 f8cc 	bl	800a8a2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a70a:	e022      	b.n	800a752 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a712:	2b02      	cmp	r3, #2
 800a714:	dc02      	bgt.n	800a71c <USBD_GetConfig+0x2c>
 800a716:	2b00      	cmp	r3, #0
 800a718:	dc03      	bgt.n	800a722 <USBD_GetConfig+0x32>
 800a71a:	e015      	b.n	800a748 <USBD_GetConfig+0x58>
 800a71c:	2b03      	cmp	r3, #3
 800a71e:	d00b      	beq.n	800a738 <USBD_GetConfig+0x48>
 800a720:	e012      	b.n	800a748 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	2200      	movs	r2, #0
 800a726:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	3308      	adds	r3, #8
 800a72c:	2201      	movs	r2, #1
 800a72e:	4619      	mov	r1, r3
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f000 f920 	bl	800a976 <USBD_CtlSendData>
        break;
 800a736:	e00c      	b.n	800a752 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	3304      	adds	r3, #4
 800a73c:	2201      	movs	r2, #1
 800a73e:	4619      	mov	r1, r3
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f000 f918 	bl	800a976 <USBD_CtlSendData>
        break;
 800a746:	e004      	b.n	800a752 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a748:	6839      	ldr	r1, [r7, #0]
 800a74a:	6878      	ldr	r0, [r7, #4]
 800a74c:	f000 f8a9 	bl	800a8a2 <USBD_CtlError>
        break;
 800a750:	bf00      	nop
}
 800a752:	bf00      	nop
 800a754:	3708      	adds	r7, #8
 800a756:	46bd      	mov	sp, r7
 800a758:	bd80      	pop	{r7, pc}

0800a75a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a75a:	b580      	push	{r7, lr}
 800a75c:	b082      	sub	sp, #8
 800a75e:	af00      	add	r7, sp, #0
 800a760:	6078      	str	r0, [r7, #4]
 800a762:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a76a:	3b01      	subs	r3, #1
 800a76c:	2b02      	cmp	r3, #2
 800a76e:	d81e      	bhi.n	800a7ae <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	88db      	ldrh	r3, [r3, #6]
 800a774:	2b02      	cmp	r3, #2
 800a776:	d004      	beq.n	800a782 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a778:	6839      	ldr	r1, [r7, #0]
 800a77a:	6878      	ldr	r0, [r7, #4]
 800a77c:	f000 f891 	bl	800a8a2 <USBD_CtlError>
        break;
 800a780:	e01a      	b.n	800a7b8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2201      	movs	r2, #1
 800a786:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d005      	beq.n	800a79e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	68db      	ldr	r3, [r3, #12]
 800a796:	f043 0202 	orr.w	r2, r3, #2
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	330c      	adds	r3, #12
 800a7a2:	2202      	movs	r2, #2
 800a7a4:	4619      	mov	r1, r3
 800a7a6:	6878      	ldr	r0, [r7, #4]
 800a7a8:	f000 f8e5 	bl	800a976 <USBD_CtlSendData>
      break;
 800a7ac:	e004      	b.n	800a7b8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a7ae:	6839      	ldr	r1, [r7, #0]
 800a7b0:	6878      	ldr	r0, [r7, #4]
 800a7b2:	f000 f876 	bl	800a8a2 <USBD_CtlError>
      break;
 800a7b6:	bf00      	nop
  }
}
 800a7b8:	bf00      	nop
 800a7ba:	3708      	adds	r7, #8
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	bd80      	pop	{r7, pc}

0800a7c0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b082      	sub	sp, #8
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
 800a7c8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	885b      	ldrh	r3, [r3, #2]
 800a7ce:	2b01      	cmp	r3, #1
 800a7d0:	d106      	bne.n	800a7e0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2201      	movs	r2, #1
 800a7d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800a7da:	6878      	ldr	r0, [r7, #4]
 800a7dc:	f000 f929 	bl	800aa32 <USBD_CtlSendStatus>
  }
}
 800a7e0:	bf00      	nop
 800a7e2:	3708      	adds	r7, #8
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	bd80      	pop	{r7, pc}

0800a7e8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b082      	sub	sp, #8
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
 800a7f0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7f8:	3b01      	subs	r3, #1
 800a7fa:	2b02      	cmp	r3, #2
 800a7fc:	d80b      	bhi.n	800a816 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	885b      	ldrh	r3, [r3, #2]
 800a802:	2b01      	cmp	r3, #1
 800a804:	d10c      	bne.n	800a820 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2200      	movs	r2, #0
 800a80a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	f000 f90f 	bl	800aa32 <USBD_CtlSendStatus>
      }
      break;
 800a814:	e004      	b.n	800a820 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a816:	6839      	ldr	r1, [r7, #0]
 800a818:	6878      	ldr	r0, [r7, #4]
 800a81a:	f000 f842 	bl	800a8a2 <USBD_CtlError>
      break;
 800a81e:	e000      	b.n	800a822 <USBD_ClrFeature+0x3a>
      break;
 800a820:	bf00      	nop
  }
}
 800a822:	bf00      	nop
 800a824:	3708      	adds	r7, #8
 800a826:	46bd      	mov	sp, r7
 800a828:	bd80      	pop	{r7, pc}

0800a82a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a82a:	b480      	push	{r7}
 800a82c:	b083      	sub	sp, #12
 800a82e:	af00      	add	r7, sp, #0
 800a830:	6078      	str	r0, [r7, #4]
 800a832:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	781a      	ldrb	r2, [r3, #0]
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	785a      	ldrb	r2, [r3, #1]
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	3302      	adds	r3, #2
 800a848:	781b      	ldrb	r3, [r3, #0]
 800a84a:	b29a      	uxth	r2, r3
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	3303      	adds	r3, #3
 800a850:	781b      	ldrb	r3, [r3, #0]
 800a852:	b29b      	uxth	r3, r3
 800a854:	021b      	lsls	r3, r3, #8
 800a856:	b29b      	uxth	r3, r3
 800a858:	4413      	add	r3, r2
 800a85a:	b29a      	uxth	r2, r3
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	3304      	adds	r3, #4
 800a864:	781b      	ldrb	r3, [r3, #0]
 800a866:	b29a      	uxth	r2, r3
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	3305      	adds	r3, #5
 800a86c:	781b      	ldrb	r3, [r3, #0]
 800a86e:	b29b      	uxth	r3, r3
 800a870:	021b      	lsls	r3, r3, #8
 800a872:	b29b      	uxth	r3, r3
 800a874:	4413      	add	r3, r2
 800a876:	b29a      	uxth	r2, r3
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	3306      	adds	r3, #6
 800a880:	781b      	ldrb	r3, [r3, #0]
 800a882:	b29a      	uxth	r2, r3
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	3307      	adds	r3, #7
 800a888:	781b      	ldrb	r3, [r3, #0]
 800a88a:	b29b      	uxth	r3, r3
 800a88c:	021b      	lsls	r3, r3, #8
 800a88e:	b29b      	uxth	r3, r3
 800a890:	4413      	add	r3, r2
 800a892:	b29a      	uxth	r2, r3
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	80da      	strh	r2, [r3, #6]

}
 800a898:	bf00      	nop
 800a89a:	370c      	adds	r7, #12
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bc80      	pop	{r7}
 800a8a0:	4770      	bx	lr

0800a8a2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a8a2:	b580      	push	{r7, lr}
 800a8a4:	b082      	sub	sp, #8
 800a8a6:	af00      	add	r7, sp, #0
 800a8a8:	6078      	str	r0, [r7, #4]
 800a8aa:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a8ac:	2180      	movs	r1, #128	; 0x80
 800a8ae:	6878      	ldr	r0, [r7, #4]
 800a8b0:	f003 f904 	bl	800dabc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a8b4:	2100      	movs	r1, #0
 800a8b6:	6878      	ldr	r0, [r7, #4]
 800a8b8:	f003 f900 	bl	800dabc <USBD_LL_StallEP>
}
 800a8bc:	bf00      	nop
 800a8be:	3708      	adds	r7, #8
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bd80      	pop	{r7, pc}

0800a8c4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b086      	sub	sp, #24
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	60f8      	str	r0, [r7, #12]
 800a8cc:	60b9      	str	r1, [r7, #8]
 800a8ce:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d032      	beq.n	800a940 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a8da:	68f8      	ldr	r0, [r7, #12]
 800a8dc:	f000 f834 	bl	800a948 <USBD_GetLen>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	3301      	adds	r3, #1
 800a8e4:	b29b      	uxth	r3, r3
 800a8e6:	005b      	lsls	r3, r3, #1
 800a8e8:	b29a      	uxth	r2, r3
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a8ee:	7dfb      	ldrb	r3, [r7, #23]
 800a8f0:	1c5a      	adds	r2, r3, #1
 800a8f2:	75fa      	strb	r2, [r7, #23]
 800a8f4:	461a      	mov	r2, r3
 800a8f6:	68bb      	ldr	r3, [r7, #8]
 800a8f8:	4413      	add	r3, r2
 800a8fa:	687a      	ldr	r2, [r7, #4]
 800a8fc:	7812      	ldrb	r2, [r2, #0]
 800a8fe:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a900:	7dfb      	ldrb	r3, [r7, #23]
 800a902:	1c5a      	adds	r2, r3, #1
 800a904:	75fa      	strb	r2, [r7, #23]
 800a906:	461a      	mov	r2, r3
 800a908:	68bb      	ldr	r3, [r7, #8]
 800a90a:	4413      	add	r3, r2
 800a90c:	2203      	movs	r2, #3
 800a90e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a910:	e012      	b.n	800a938 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	1c5a      	adds	r2, r3, #1
 800a916:	60fa      	str	r2, [r7, #12]
 800a918:	7dfa      	ldrb	r2, [r7, #23]
 800a91a:	1c51      	adds	r1, r2, #1
 800a91c:	75f9      	strb	r1, [r7, #23]
 800a91e:	4611      	mov	r1, r2
 800a920:	68ba      	ldr	r2, [r7, #8]
 800a922:	440a      	add	r2, r1
 800a924:	781b      	ldrb	r3, [r3, #0]
 800a926:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a928:	7dfb      	ldrb	r3, [r7, #23]
 800a92a:	1c5a      	adds	r2, r3, #1
 800a92c:	75fa      	strb	r2, [r7, #23]
 800a92e:	461a      	mov	r2, r3
 800a930:	68bb      	ldr	r3, [r7, #8]
 800a932:	4413      	add	r3, r2
 800a934:	2200      	movs	r2, #0
 800a936:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	781b      	ldrb	r3, [r3, #0]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d1e8      	bne.n	800a912 <USBD_GetString+0x4e>
    }
  }
}
 800a940:	bf00      	nop
 800a942:	3718      	adds	r7, #24
 800a944:	46bd      	mov	sp, r7
 800a946:	bd80      	pop	{r7, pc}

0800a948 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a948:	b480      	push	{r7}
 800a94a:	b085      	sub	sp, #20
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a950:	2300      	movs	r3, #0
 800a952:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a954:	e005      	b.n	800a962 <USBD_GetLen+0x1a>
  {
    len++;
 800a956:	7bfb      	ldrb	r3, [r7, #15]
 800a958:	3301      	adds	r3, #1
 800a95a:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	3301      	adds	r3, #1
 800a960:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	781b      	ldrb	r3, [r3, #0]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d1f5      	bne.n	800a956 <USBD_GetLen+0xe>
  }

  return len;
 800a96a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a96c:	4618      	mov	r0, r3
 800a96e:	3714      	adds	r7, #20
 800a970:	46bd      	mov	sp, r7
 800a972:	bc80      	pop	{r7}
 800a974:	4770      	bx	lr

0800a976 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a976:	b580      	push	{r7, lr}
 800a978:	b084      	sub	sp, #16
 800a97a:	af00      	add	r7, sp, #0
 800a97c:	60f8      	str	r0, [r7, #12]
 800a97e:	60b9      	str	r1, [r7, #8]
 800a980:	4613      	mov	r3, r2
 800a982:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	2202      	movs	r2, #2
 800a988:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a98c:	88fa      	ldrh	r2, [r7, #6]
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a992:	88fa      	ldrh	r2, [r7, #6]
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a998:	88fb      	ldrh	r3, [r7, #6]
 800a99a:	68ba      	ldr	r2, [r7, #8]
 800a99c:	2100      	movs	r1, #0
 800a99e:	68f8      	ldr	r0, [r7, #12]
 800a9a0:	f003 f915 	bl	800dbce <USBD_LL_Transmit>

  return USBD_OK;
 800a9a4:	2300      	movs	r3, #0
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3710      	adds	r7, #16
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}

0800a9ae <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a9ae:	b580      	push	{r7, lr}
 800a9b0:	b084      	sub	sp, #16
 800a9b2:	af00      	add	r7, sp, #0
 800a9b4:	60f8      	str	r0, [r7, #12]
 800a9b6:	60b9      	str	r1, [r7, #8]
 800a9b8:	4613      	mov	r3, r2
 800a9ba:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a9bc:	88fb      	ldrh	r3, [r7, #6]
 800a9be:	68ba      	ldr	r2, [r7, #8]
 800a9c0:	2100      	movs	r1, #0
 800a9c2:	68f8      	ldr	r0, [r7, #12]
 800a9c4:	f003 f903 	bl	800dbce <USBD_LL_Transmit>

  return USBD_OK;
 800a9c8:	2300      	movs	r3, #0
}
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	3710      	adds	r7, #16
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	bd80      	pop	{r7, pc}

0800a9d2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a9d2:	b580      	push	{r7, lr}
 800a9d4:	b084      	sub	sp, #16
 800a9d6:	af00      	add	r7, sp, #0
 800a9d8:	60f8      	str	r0, [r7, #12]
 800a9da:	60b9      	str	r1, [r7, #8]
 800a9dc:	4613      	mov	r3, r2
 800a9de:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	2203      	movs	r2, #3
 800a9e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a9e8:	88fa      	ldrh	r2, [r7, #6]
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a9f0:	88fa      	ldrh	r2, [r7, #6]
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a9f8:	88fb      	ldrh	r3, [r7, #6]
 800a9fa:	68ba      	ldr	r2, [r7, #8]
 800a9fc:	2100      	movs	r1, #0
 800a9fe:	68f8      	ldr	r0, [r7, #12]
 800aa00:	f003 f908 	bl	800dc14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aa04:	2300      	movs	r3, #0
}
 800aa06:	4618      	mov	r0, r3
 800aa08:	3710      	adds	r7, #16
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	bd80      	pop	{r7, pc}

0800aa0e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800aa0e:	b580      	push	{r7, lr}
 800aa10:	b084      	sub	sp, #16
 800aa12:	af00      	add	r7, sp, #0
 800aa14:	60f8      	str	r0, [r7, #12]
 800aa16:	60b9      	str	r1, [r7, #8]
 800aa18:	4613      	mov	r3, r2
 800aa1a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800aa1c:	88fb      	ldrh	r3, [r7, #6]
 800aa1e:	68ba      	ldr	r2, [r7, #8]
 800aa20:	2100      	movs	r1, #0
 800aa22:	68f8      	ldr	r0, [r7, #12]
 800aa24:	f003 f8f6 	bl	800dc14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aa28:	2300      	movs	r3, #0
}
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	3710      	adds	r7, #16
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}

0800aa32 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800aa32:	b580      	push	{r7, lr}
 800aa34:	b082      	sub	sp, #8
 800aa36:	af00      	add	r7, sp, #0
 800aa38:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2204      	movs	r2, #4
 800aa3e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800aa42:	2300      	movs	r3, #0
 800aa44:	2200      	movs	r2, #0
 800aa46:	2100      	movs	r1, #0
 800aa48:	6878      	ldr	r0, [r7, #4]
 800aa4a:	f003 f8c0 	bl	800dbce <USBD_LL_Transmit>

  return USBD_OK;
 800aa4e:	2300      	movs	r3, #0
}
 800aa50:	4618      	mov	r0, r3
 800aa52:	3708      	adds	r7, #8
 800aa54:	46bd      	mov	sp, r7
 800aa56:	bd80      	pop	{r7, pc}

0800aa58 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b082      	sub	sp, #8
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2205      	movs	r2, #5
 800aa64:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aa68:	2300      	movs	r3, #0
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	2100      	movs	r1, #0
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f003 f8d0 	bl	800dc14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aa74:	2300      	movs	r3, #0
}
 800aa76:	4618      	mov	r0, r3
 800aa78:	3708      	adds	r7, #8
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}
	...

0800aa80 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800aa80:	b480      	push	{r7}
 800aa82:	b085      	sub	sp, #20
 800aa84:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aa86:	f3ef 8305 	mrs	r3, IPSR
 800aa8a:	60bb      	str	r3, [r7, #8]
  return(result);
 800aa8c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d10f      	bne.n	800aab2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa92:	f3ef 8310 	mrs	r3, PRIMASK
 800aa96:	607b      	str	r3, [r7, #4]
  return(result);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d109      	bne.n	800aab2 <osKernelInitialize+0x32>
 800aa9e:	4b10      	ldr	r3, [pc, #64]	; (800aae0 <osKernelInitialize+0x60>)
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	2b02      	cmp	r3, #2
 800aaa4:	d109      	bne.n	800aaba <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800aaa6:	f3ef 8311 	mrs	r3, BASEPRI
 800aaaa:	603b      	str	r3, [r7, #0]
  return(result);
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d003      	beq.n	800aaba <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800aab2:	f06f 0305 	mvn.w	r3, #5
 800aab6:	60fb      	str	r3, [r7, #12]
 800aab8:	e00c      	b.n	800aad4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800aaba:	4b09      	ldr	r3, [pc, #36]	; (800aae0 <osKernelInitialize+0x60>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d105      	bne.n	800aace <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800aac2:	4b07      	ldr	r3, [pc, #28]	; (800aae0 <osKernelInitialize+0x60>)
 800aac4:	2201      	movs	r2, #1
 800aac6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800aac8:	2300      	movs	r3, #0
 800aaca:	60fb      	str	r3, [r7, #12]
 800aacc:	e002      	b.n	800aad4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800aace:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aad2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800aad4:	68fb      	ldr	r3, [r7, #12]
}
 800aad6:	4618      	mov	r0, r3
 800aad8:	3714      	adds	r7, #20
 800aada:	46bd      	mov	sp, r7
 800aadc:	bc80      	pop	{r7}
 800aade:	4770      	bx	lr
 800aae0:	20000498 	.word	0x20000498

0800aae4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b084      	sub	sp, #16
 800aae8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aaea:	f3ef 8305 	mrs	r3, IPSR
 800aaee:	60bb      	str	r3, [r7, #8]
  return(result);
 800aaf0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d10f      	bne.n	800ab16 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aaf6:	f3ef 8310 	mrs	r3, PRIMASK
 800aafa:	607b      	str	r3, [r7, #4]
  return(result);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d109      	bne.n	800ab16 <osKernelStart+0x32>
 800ab02:	4b11      	ldr	r3, [pc, #68]	; (800ab48 <osKernelStart+0x64>)
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	2b02      	cmp	r3, #2
 800ab08:	d109      	bne.n	800ab1e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ab0a:	f3ef 8311 	mrs	r3, BASEPRI
 800ab0e:	603b      	str	r3, [r7, #0]
  return(result);
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d003      	beq.n	800ab1e <osKernelStart+0x3a>
    stat = osErrorISR;
 800ab16:	f06f 0305 	mvn.w	r3, #5
 800ab1a:	60fb      	str	r3, [r7, #12]
 800ab1c:	e00e      	b.n	800ab3c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800ab1e:	4b0a      	ldr	r3, [pc, #40]	; (800ab48 <osKernelStart+0x64>)
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	2b01      	cmp	r3, #1
 800ab24:	d107      	bne.n	800ab36 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800ab26:	4b08      	ldr	r3, [pc, #32]	; (800ab48 <osKernelStart+0x64>)
 800ab28:	2202      	movs	r2, #2
 800ab2a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800ab2c:	f001 f878 	bl	800bc20 <vTaskStartScheduler>
      stat = osOK;
 800ab30:	2300      	movs	r3, #0
 800ab32:	60fb      	str	r3, [r7, #12]
 800ab34:	e002      	b.n	800ab3c <osKernelStart+0x58>
    } else {
      stat = osError;
 800ab36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ab3a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800ab3c:	68fb      	ldr	r3, [r7, #12]
}
 800ab3e:	4618      	mov	r0, r3
 800ab40:	3710      	adds	r7, #16
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd80      	pop	{r7, pc}
 800ab46:	bf00      	nop
 800ab48:	20000498 	.word	0x20000498

0800ab4c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b092      	sub	sp, #72	; 0x48
 800ab50:	af04      	add	r7, sp, #16
 800ab52:	60f8      	str	r0, [r7, #12]
 800ab54:	60b9      	str	r1, [r7, #8]
 800ab56:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ab58:	2300      	movs	r3, #0
 800ab5a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab5c:	f3ef 8305 	mrs	r3, IPSR
 800ab60:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800ab62:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	f040 8094 	bne.w	800ac92 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab6a:	f3ef 8310 	mrs	r3, PRIMASK
 800ab6e:	623b      	str	r3, [r7, #32]
  return(result);
 800ab70:	6a3b      	ldr	r3, [r7, #32]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	f040 808d 	bne.w	800ac92 <osThreadNew+0x146>
 800ab78:	4b48      	ldr	r3, [pc, #288]	; (800ac9c <osThreadNew+0x150>)
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	2b02      	cmp	r3, #2
 800ab7e:	d106      	bne.n	800ab8e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ab80:	f3ef 8311 	mrs	r3, BASEPRI
 800ab84:	61fb      	str	r3, [r7, #28]
  return(result);
 800ab86:	69fb      	ldr	r3, [r7, #28]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	f040 8082 	bne.w	800ac92 <osThreadNew+0x146>
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d07e      	beq.n	800ac92 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800ab94:	2380      	movs	r3, #128	; 0x80
 800ab96:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800ab98:	2318      	movs	r3, #24
 800ab9a:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800aba0:	f107 031b 	add.w	r3, r7, #27
 800aba4:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800aba6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800abaa:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d045      	beq.n	800ac3e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d002      	beq.n	800abc0 <osThreadNew+0x74>
        name = attr->name;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	699b      	ldr	r3, [r3, #24]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d002      	beq.n	800abce <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	699b      	ldr	r3, [r3, #24]
 800abcc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800abce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d008      	beq.n	800abe6 <osThreadNew+0x9a>
 800abd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abd6:	2b38      	cmp	r3, #56	; 0x38
 800abd8:	d805      	bhi.n	800abe6 <osThreadNew+0x9a>
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	685b      	ldr	r3, [r3, #4]
 800abde:	f003 0301 	and.w	r3, r3, #1
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d001      	beq.n	800abea <osThreadNew+0x9e>
        return (NULL);
 800abe6:	2300      	movs	r3, #0
 800abe8:	e054      	b.n	800ac94 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	695b      	ldr	r3, [r3, #20]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d003      	beq.n	800abfa <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	695b      	ldr	r3, [r3, #20]
 800abf6:	089b      	lsrs	r3, r3, #2
 800abf8:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	689b      	ldr	r3, [r3, #8]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d00e      	beq.n	800ac20 <osThreadNew+0xd4>
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	68db      	ldr	r3, [r3, #12]
 800ac06:	2b5b      	cmp	r3, #91	; 0x5b
 800ac08:	d90a      	bls.n	800ac20 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d006      	beq.n	800ac20 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	695b      	ldr	r3, [r3, #20]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d002      	beq.n	800ac20 <osThreadNew+0xd4>
        mem = 1;
 800ac1a:	2301      	movs	r3, #1
 800ac1c:	62bb      	str	r3, [r7, #40]	; 0x28
 800ac1e:	e010      	b.n	800ac42 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	689b      	ldr	r3, [r3, #8]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d10c      	bne.n	800ac42 <osThreadNew+0xf6>
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	68db      	ldr	r3, [r3, #12]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d108      	bne.n	800ac42 <osThreadNew+0xf6>
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	691b      	ldr	r3, [r3, #16]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d104      	bne.n	800ac42 <osThreadNew+0xf6>
          mem = 0;
 800ac38:	2300      	movs	r3, #0
 800ac3a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ac3c:	e001      	b.n	800ac42 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800ac42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac44:	2b01      	cmp	r3, #1
 800ac46:	d110      	bne.n	800ac6a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800ac4c:	687a      	ldr	r2, [r7, #4]
 800ac4e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ac50:	9202      	str	r2, [sp, #8]
 800ac52:	9301      	str	r3, [sp, #4]
 800ac54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac56:	9300      	str	r3, [sp, #0]
 800ac58:	68bb      	ldr	r3, [r7, #8]
 800ac5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac5c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ac5e:	68f8      	ldr	r0, [r7, #12]
 800ac60:	f000 fe12 	bl	800b888 <xTaskCreateStatic>
 800ac64:	4603      	mov	r3, r0
 800ac66:	617b      	str	r3, [r7, #20]
 800ac68:	e013      	b.n	800ac92 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800ac6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d110      	bne.n	800ac92 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ac70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac72:	b29a      	uxth	r2, r3
 800ac74:	f107 0314 	add.w	r3, r7, #20
 800ac78:	9301      	str	r3, [sp, #4]
 800ac7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac7c:	9300      	str	r3, [sp, #0]
 800ac7e:	68bb      	ldr	r3, [r7, #8]
 800ac80:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ac82:	68f8      	ldr	r0, [r7, #12]
 800ac84:	f000 fe5c 	bl	800b940 <xTaskCreate>
 800ac88:	4603      	mov	r3, r0
 800ac8a:	2b01      	cmp	r3, #1
 800ac8c:	d001      	beq.n	800ac92 <osThreadNew+0x146>
          hTask = NULL;
 800ac8e:	2300      	movs	r3, #0
 800ac90:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ac92:	697b      	ldr	r3, [r7, #20]
}
 800ac94:	4618      	mov	r0, r3
 800ac96:	3738      	adds	r7, #56	; 0x38
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bd80      	pop	{r7, pc}
 800ac9c:	20000498 	.word	0x20000498

0800aca0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b086      	sub	sp, #24
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aca8:	f3ef 8305 	mrs	r3, IPSR
 800acac:	613b      	str	r3, [r7, #16]
  return(result);
 800acae:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d10f      	bne.n	800acd4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800acb4:	f3ef 8310 	mrs	r3, PRIMASK
 800acb8:	60fb      	str	r3, [r7, #12]
  return(result);
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d109      	bne.n	800acd4 <osDelay+0x34>
 800acc0:	4b0d      	ldr	r3, [pc, #52]	; (800acf8 <osDelay+0x58>)
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	2b02      	cmp	r3, #2
 800acc6:	d109      	bne.n	800acdc <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800acc8:	f3ef 8311 	mrs	r3, BASEPRI
 800accc:	60bb      	str	r3, [r7, #8]
  return(result);
 800acce:	68bb      	ldr	r3, [r7, #8]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d003      	beq.n	800acdc <osDelay+0x3c>
    stat = osErrorISR;
 800acd4:	f06f 0305 	mvn.w	r3, #5
 800acd8:	617b      	str	r3, [r7, #20]
 800acda:	e007      	b.n	800acec <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800acdc:	2300      	movs	r3, #0
 800acde:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d002      	beq.n	800acec <osDelay+0x4c>
      vTaskDelay(ticks);
 800ace6:	6878      	ldr	r0, [r7, #4]
 800ace8:	f000 ff66 	bl	800bbb8 <vTaskDelay>
    }
  }

  return (stat);
 800acec:	697b      	ldr	r3, [r7, #20]
}
 800acee:	4618      	mov	r0, r3
 800acf0:	3718      	adds	r7, #24
 800acf2:	46bd      	mov	sp, r7
 800acf4:	bd80      	pop	{r7, pc}
 800acf6:	bf00      	nop
 800acf8:	20000498 	.word	0x20000498

0800acfc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800acfc:	b480      	push	{r7}
 800acfe:	b085      	sub	sp, #20
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	60f8      	str	r0, [r7, #12]
 800ad04:	60b9      	str	r1, [r7, #8]
 800ad06:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	4a06      	ldr	r2, [pc, #24]	; (800ad24 <vApplicationGetIdleTaskMemory+0x28>)
 800ad0c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ad0e:	68bb      	ldr	r3, [r7, #8]
 800ad10:	4a05      	ldr	r2, [pc, #20]	; (800ad28 <vApplicationGetIdleTaskMemory+0x2c>)
 800ad12:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2280      	movs	r2, #128	; 0x80
 800ad18:	601a      	str	r2, [r3, #0]
}
 800ad1a:	bf00      	nop
 800ad1c:	3714      	adds	r7, #20
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bc80      	pop	{r7}
 800ad22:	4770      	bx	lr
 800ad24:	2000049c 	.word	0x2000049c
 800ad28:	200004f8 	.word	0x200004f8

0800ad2c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ad2c:	b480      	push	{r7}
 800ad2e:	b085      	sub	sp, #20
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	60f8      	str	r0, [r7, #12]
 800ad34:	60b9      	str	r1, [r7, #8]
 800ad36:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	4a07      	ldr	r2, [pc, #28]	; (800ad58 <vApplicationGetTimerTaskMemory+0x2c>)
 800ad3c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ad3e:	68bb      	ldr	r3, [r7, #8]
 800ad40:	4a06      	ldr	r2, [pc, #24]	; (800ad5c <vApplicationGetTimerTaskMemory+0x30>)
 800ad42:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ad4a:	601a      	str	r2, [r3, #0]
}
 800ad4c:	bf00      	nop
 800ad4e:	3714      	adds	r7, #20
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bc80      	pop	{r7}
 800ad54:	4770      	bx	lr
 800ad56:	bf00      	nop
 800ad58:	200006f8 	.word	0x200006f8
 800ad5c:	20000754 	.word	0x20000754

0800ad60 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ad60:	b480      	push	{r7}
 800ad62:	b083      	sub	sp, #12
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f103 0208 	add.w	r2, r3, #8
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ad78:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	f103 0208 	add.w	r2, r3, #8
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f103 0208 	add.w	r2, r3, #8
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	2200      	movs	r2, #0
 800ad92:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ad94:	bf00      	nop
 800ad96:	370c      	adds	r7, #12
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	bc80      	pop	{r7}
 800ad9c:	4770      	bx	lr

0800ad9e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ad9e:	b480      	push	{r7}
 800ada0:	b083      	sub	sp, #12
 800ada2:	af00      	add	r7, sp, #0
 800ada4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	2200      	movs	r2, #0
 800adaa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800adac:	bf00      	nop
 800adae:	370c      	adds	r7, #12
 800adb0:	46bd      	mov	sp, r7
 800adb2:	bc80      	pop	{r7}
 800adb4:	4770      	bx	lr

0800adb6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800adb6:	b480      	push	{r7}
 800adb8:	b085      	sub	sp, #20
 800adba:	af00      	add	r7, sp, #0
 800adbc:	6078      	str	r0, [r7, #4]
 800adbe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	685b      	ldr	r3, [r3, #4]
 800adc4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	68fa      	ldr	r2, [r7, #12]
 800adca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	689a      	ldr	r2, [r3, #8]
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	689b      	ldr	r3, [r3, #8]
 800add8:	683a      	ldr	r2, [r7, #0]
 800adda:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	683a      	ldr	r2, [r7, #0]
 800ade0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800ade2:	683b      	ldr	r3, [r7, #0]
 800ade4:	687a      	ldr	r2, [r7, #4]
 800ade6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	1c5a      	adds	r2, r3, #1
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	601a      	str	r2, [r3, #0]
}
 800adf2:	bf00      	nop
 800adf4:	3714      	adds	r7, #20
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bc80      	pop	{r7}
 800adfa:	4770      	bx	lr

0800adfc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800adfc:	b480      	push	{r7}
 800adfe:	b085      	sub	sp, #20
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
 800ae04:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae12:	d103      	bne.n	800ae1c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	691b      	ldr	r3, [r3, #16]
 800ae18:	60fb      	str	r3, [r7, #12]
 800ae1a:	e00c      	b.n	800ae36 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	3308      	adds	r3, #8
 800ae20:	60fb      	str	r3, [r7, #12]
 800ae22:	e002      	b.n	800ae2a <vListInsert+0x2e>
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	685b      	ldr	r3, [r3, #4]
 800ae28:	60fb      	str	r3, [r7, #12]
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	685b      	ldr	r3, [r3, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	68ba      	ldr	r2, [r7, #8]
 800ae32:	429a      	cmp	r2, r3
 800ae34:	d2f6      	bcs.n	800ae24 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	685a      	ldr	r2, [r3, #4]
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	685b      	ldr	r3, [r3, #4]
 800ae42:	683a      	ldr	r2, [r7, #0]
 800ae44:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	68fa      	ldr	r2, [r7, #12]
 800ae4a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	683a      	ldr	r2, [r7, #0]
 800ae50:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	687a      	ldr	r2, [r7, #4]
 800ae56:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	1c5a      	adds	r2, r3, #1
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	601a      	str	r2, [r3, #0]
}
 800ae62:	bf00      	nop
 800ae64:	3714      	adds	r7, #20
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bc80      	pop	{r7}
 800ae6a:	4770      	bx	lr

0800ae6c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	b085      	sub	sp, #20
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	691b      	ldr	r3, [r3, #16]
 800ae78:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	685b      	ldr	r3, [r3, #4]
 800ae7e:	687a      	ldr	r2, [r7, #4]
 800ae80:	6892      	ldr	r2, [r2, #8]
 800ae82:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	689b      	ldr	r3, [r3, #8]
 800ae88:	687a      	ldr	r2, [r7, #4]
 800ae8a:	6852      	ldr	r2, [r2, #4]
 800ae8c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	685b      	ldr	r3, [r3, #4]
 800ae92:	687a      	ldr	r2, [r7, #4]
 800ae94:	429a      	cmp	r2, r3
 800ae96:	d103      	bne.n	800aea0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	689a      	ldr	r2, [r3, #8]
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2200      	movs	r2, #0
 800aea4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	1e5a      	subs	r2, r3, #1
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	681b      	ldr	r3, [r3, #0]
}
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	3714      	adds	r7, #20
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	bc80      	pop	{r7}
 800aebc:	4770      	bx	lr
	...

0800aec0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b084      	sub	sp, #16
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
 800aec8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d10a      	bne.n	800aeea <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800aed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aed8:	f383 8811 	msr	BASEPRI, r3
 800aedc:	f3bf 8f6f 	isb	sy
 800aee0:	f3bf 8f4f 	dsb	sy
 800aee4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800aee6:	bf00      	nop
 800aee8:	e7fe      	b.n	800aee8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800aeea:	f001 ffc7 	bl	800ce7c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	681a      	ldr	r2, [r3, #0]
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aef6:	68f9      	ldr	r1, [r7, #12]
 800aef8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800aefa:	fb01 f303 	mul.w	r3, r1, r3
 800aefe:	441a      	add	r2, r3
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	2200      	movs	r2, #0
 800af08:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	681a      	ldr	r2, [r3, #0]
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	681a      	ldr	r2, [r3, #0]
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af1a:	3b01      	subs	r3, #1
 800af1c:	68f9      	ldr	r1, [r7, #12]
 800af1e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800af20:	fb01 f303 	mul.w	r3, r1, r3
 800af24:	441a      	add	r2, r3
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	22ff      	movs	r2, #255	; 0xff
 800af2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	22ff      	movs	r2, #255	; 0xff
 800af36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d114      	bne.n	800af6a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	691b      	ldr	r3, [r3, #16]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d01a      	beq.n	800af7e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	3310      	adds	r3, #16
 800af4c:	4618      	mov	r0, r3
 800af4e:	f001 f8f1 	bl	800c134 <xTaskRemoveFromEventList>
 800af52:	4603      	mov	r3, r0
 800af54:	2b00      	cmp	r3, #0
 800af56:	d012      	beq.n	800af7e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800af58:	4b0c      	ldr	r3, [pc, #48]	; (800af8c <xQueueGenericReset+0xcc>)
 800af5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af5e:	601a      	str	r2, [r3, #0]
 800af60:	f3bf 8f4f 	dsb	sy
 800af64:	f3bf 8f6f 	isb	sy
 800af68:	e009      	b.n	800af7e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	3310      	adds	r3, #16
 800af6e:	4618      	mov	r0, r3
 800af70:	f7ff fef6 	bl	800ad60 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	3324      	adds	r3, #36	; 0x24
 800af78:	4618      	mov	r0, r3
 800af7a:	f7ff fef1 	bl	800ad60 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800af7e:	f001 ffad 	bl	800cedc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800af82:	2301      	movs	r3, #1
}
 800af84:	4618      	mov	r0, r3
 800af86:	3710      	adds	r7, #16
 800af88:	46bd      	mov	sp, r7
 800af8a:	bd80      	pop	{r7, pc}
 800af8c:	e000ed04 	.word	0xe000ed04

0800af90 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800af90:	b580      	push	{r7, lr}
 800af92:	b08e      	sub	sp, #56	; 0x38
 800af94:	af02      	add	r7, sp, #8
 800af96:	60f8      	str	r0, [r7, #12]
 800af98:	60b9      	str	r1, [r7, #8]
 800af9a:	607a      	str	r2, [r7, #4]
 800af9c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d10a      	bne.n	800afba <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800afa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afa8:	f383 8811 	msr	BASEPRI, r3
 800afac:	f3bf 8f6f 	isb	sy
 800afb0:	f3bf 8f4f 	dsb	sy
 800afb4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800afb6:	bf00      	nop
 800afb8:	e7fe      	b.n	800afb8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800afba:	683b      	ldr	r3, [r7, #0]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d10a      	bne.n	800afd6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800afc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afc4:	f383 8811 	msr	BASEPRI, r3
 800afc8:	f3bf 8f6f 	isb	sy
 800afcc:	f3bf 8f4f 	dsb	sy
 800afd0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800afd2:	bf00      	nop
 800afd4:	e7fe      	b.n	800afd4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d002      	beq.n	800afe2 <xQueueGenericCreateStatic+0x52>
 800afdc:	68bb      	ldr	r3, [r7, #8]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d001      	beq.n	800afe6 <xQueueGenericCreateStatic+0x56>
 800afe2:	2301      	movs	r3, #1
 800afe4:	e000      	b.n	800afe8 <xQueueGenericCreateStatic+0x58>
 800afe6:	2300      	movs	r3, #0
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d10a      	bne.n	800b002 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800afec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aff0:	f383 8811 	msr	BASEPRI, r3
 800aff4:	f3bf 8f6f 	isb	sy
 800aff8:	f3bf 8f4f 	dsb	sy
 800affc:	623b      	str	r3, [r7, #32]
}
 800affe:	bf00      	nop
 800b000:	e7fe      	b.n	800b000 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d102      	bne.n	800b00e <xQueueGenericCreateStatic+0x7e>
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d101      	bne.n	800b012 <xQueueGenericCreateStatic+0x82>
 800b00e:	2301      	movs	r3, #1
 800b010:	e000      	b.n	800b014 <xQueueGenericCreateStatic+0x84>
 800b012:	2300      	movs	r3, #0
 800b014:	2b00      	cmp	r3, #0
 800b016:	d10a      	bne.n	800b02e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b01c:	f383 8811 	msr	BASEPRI, r3
 800b020:	f3bf 8f6f 	isb	sy
 800b024:	f3bf 8f4f 	dsb	sy
 800b028:	61fb      	str	r3, [r7, #28]
}
 800b02a:	bf00      	nop
 800b02c:	e7fe      	b.n	800b02c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b02e:	2350      	movs	r3, #80	; 0x50
 800b030:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b032:	697b      	ldr	r3, [r7, #20]
 800b034:	2b50      	cmp	r3, #80	; 0x50
 800b036:	d00a      	beq.n	800b04e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b03c:	f383 8811 	msr	BASEPRI, r3
 800b040:	f3bf 8f6f 	isb	sy
 800b044:	f3bf 8f4f 	dsb	sy
 800b048:	61bb      	str	r3, [r7, #24]
}
 800b04a:	bf00      	nop
 800b04c:	e7fe      	b.n	800b04c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b054:	2b00      	cmp	r3, #0
 800b056:	d00d      	beq.n	800b074 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b05a:	2201      	movs	r2, #1
 800b05c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b060:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b066:	9300      	str	r3, [sp, #0]
 800b068:	4613      	mov	r3, r2
 800b06a:	687a      	ldr	r2, [r7, #4]
 800b06c:	68b9      	ldr	r1, [r7, #8]
 800b06e:	68f8      	ldr	r0, [r7, #12]
 800b070:	f000 f805 	bl	800b07e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800b074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b076:	4618      	mov	r0, r3
 800b078:	3730      	adds	r7, #48	; 0x30
 800b07a:	46bd      	mov	sp, r7
 800b07c:	bd80      	pop	{r7, pc}

0800b07e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b07e:	b580      	push	{r7, lr}
 800b080:	b084      	sub	sp, #16
 800b082:	af00      	add	r7, sp, #0
 800b084:	60f8      	str	r0, [r7, #12]
 800b086:	60b9      	str	r1, [r7, #8]
 800b088:	607a      	str	r2, [r7, #4]
 800b08a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b08c:	68bb      	ldr	r3, [r7, #8]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d103      	bne.n	800b09a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b092:	69bb      	ldr	r3, [r7, #24]
 800b094:	69ba      	ldr	r2, [r7, #24]
 800b096:	601a      	str	r2, [r3, #0]
 800b098:	e002      	b.n	800b0a0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b09a:	69bb      	ldr	r3, [r7, #24]
 800b09c:	687a      	ldr	r2, [r7, #4]
 800b09e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b0a0:	69bb      	ldr	r3, [r7, #24]
 800b0a2:	68fa      	ldr	r2, [r7, #12]
 800b0a4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b0a6:	69bb      	ldr	r3, [r7, #24]
 800b0a8:	68ba      	ldr	r2, [r7, #8]
 800b0aa:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b0ac:	2101      	movs	r1, #1
 800b0ae:	69b8      	ldr	r0, [r7, #24]
 800b0b0:	f7ff ff06 	bl	800aec0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b0b4:	69bb      	ldr	r3, [r7, #24]
 800b0b6:	78fa      	ldrb	r2, [r7, #3]
 800b0b8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b0bc:	bf00      	nop
 800b0be:	3710      	adds	r7, #16
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	bd80      	pop	{r7, pc}

0800b0c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b08e      	sub	sp, #56	; 0x38
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	60f8      	str	r0, [r7, #12]
 800b0cc:	60b9      	str	r1, [r7, #8]
 800b0ce:	607a      	str	r2, [r7, #4]
 800b0d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b0da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d10a      	bne.n	800b0f6 <xQueueGenericSend+0x32>
	__asm volatile
 800b0e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0e4:	f383 8811 	msr	BASEPRI, r3
 800b0e8:	f3bf 8f6f 	isb	sy
 800b0ec:	f3bf 8f4f 	dsb	sy
 800b0f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b0f2:	bf00      	nop
 800b0f4:	e7fe      	b.n	800b0f4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b0f6:	68bb      	ldr	r3, [r7, #8]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d103      	bne.n	800b104 <xQueueGenericSend+0x40>
 800b0fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b100:	2b00      	cmp	r3, #0
 800b102:	d101      	bne.n	800b108 <xQueueGenericSend+0x44>
 800b104:	2301      	movs	r3, #1
 800b106:	e000      	b.n	800b10a <xQueueGenericSend+0x46>
 800b108:	2300      	movs	r3, #0
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d10a      	bne.n	800b124 <xQueueGenericSend+0x60>
	__asm volatile
 800b10e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b112:	f383 8811 	msr	BASEPRI, r3
 800b116:	f3bf 8f6f 	isb	sy
 800b11a:	f3bf 8f4f 	dsb	sy
 800b11e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b120:	bf00      	nop
 800b122:	e7fe      	b.n	800b122 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	2b02      	cmp	r3, #2
 800b128:	d103      	bne.n	800b132 <xQueueGenericSend+0x6e>
 800b12a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b12c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b12e:	2b01      	cmp	r3, #1
 800b130:	d101      	bne.n	800b136 <xQueueGenericSend+0x72>
 800b132:	2301      	movs	r3, #1
 800b134:	e000      	b.n	800b138 <xQueueGenericSend+0x74>
 800b136:	2300      	movs	r3, #0
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d10a      	bne.n	800b152 <xQueueGenericSend+0x8e>
	__asm volatile
 800b13c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b140:	f383 8811 	msr	BASEPRI, r3
 800b144:	f3bf 8f6f 	isb	sy
 800b148:	f3bf 8f4f 	dsb	sy
 800b14c:	623b      	str	r3, [r7, #32]
}
 800b14e:	bf00      	nop
 800b150:	e7fe      	b.n	800b150 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b152:	f001 f9b1 	bl	800c4b8 <xTaskGetSchedulerState>
 800b156:	4603      	mov	r3, r0
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d102      	bne.n	800b162 <xQueueGenericSend+0x9e>
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d101      	bne.n	800b166 <xQueueGenericSend+0xa2>
 800b162:	2301      	movs	r3, #1
 800b164:	e000      	b.n	800b168 <xQueueGenericSend+0xa4>
 800b166:	2300      	movs	r3, #0
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d10a      	bne.n	800b182 <xQueueGenericSend+0xbe>
	__asm volatile
 800b16c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b170:	f383 8811 	msr	BASEPRI, r3
 800b174:	f3bf 8f6f 	isb	sy
 800b178:	f3bf 8f4f 	dsb	sy
 800b17c:	61fb      	str	r3, [r7, #28]
}
 800b17e:	bf00      	nop
 800b180:	e7fe      	b.n	800b180 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b182:	f001 fe7b 	bl	800ce7c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b188:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b18a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b18c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b18e:	429a      	cmp	r2, r3
 800b190:	d302      	bcc.n	800b198 <xQueueGenericSend+0xd4>
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	2b02      	cmp	r3, #2
 800b196:	d129      	bne.n	800b1ec <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b198:	683a      	ldr	r2, [r7, #0]
 800b19a:	68b9      	ldr	r1, [r7, #8]
 800b19c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b19e:	f000 fa07 	bl	800b5b0 <prvCopyDataToQueue>
 800b1a2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b1a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d010      	beq.n	800b1ce <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b1ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ae:	3324      	adds	r3, #36	; 0x24
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	f000 ffbf 	bl	800c134 <xTaskRemoveFromEventList>
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d013      	beq.n	800b1e4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b1bc:	4b3f      	ldr	r3, [pc, #252]	; (800b2bc <xQueueGenericSend+0x1f8>)
 800b1be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1c2:	601a      	str	r2, [r3, #0]
 800b1c4:	f3bf 8f4f 	dsb	sy
 800b1c8:	f3bf 8f6f 	isb	sy
 800b1cc:	e00a      	b.n	800b1e4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b1ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d007      	beq.n	800b1e4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b1d4:	4b39      	ldr	r3, [pc, #228]	; (800b2bc <xQueueGenericSend+0x1f8>)
 800b1d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1da:	601a      	str	r2, [r3, #0]
 800b1dc:	f3bf 8f4f 	dsb	sy
 800b1e0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b1e4:	f001 fe7a 	bl	800cedc <vPortExitCritical>
				return pdPASS;
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	e063      	b.n	800b2b4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d103      	bne.n	800b1fa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b1f2:	f001 fe73 	bl	800cedc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	e05c      	b.n	800b2b4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b1fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d106      	bne.n	800b20e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b200:	f107 0314 	add.w	r3, r7, #20
 800b204:	4618      	mov	r0, r3
 800b206:	f000 fff9 	bl	800c1fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b20a:	2301      	movs	r3, #1
 800b20c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b20e:	f001 fe65 	bl	800cedc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b212:	f000 fd6b 	bl	800bcec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b216:	f001 fe31 	bl	800ce7c <vPortEnterCritical>
 800b21a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b21c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b220:	b25b      	sxtb	r3, r3
 800b222:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b226:	d103      	bne.n	800b230 <xQueueGenericSend+0x16c>
 800b228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b22a:	2200      	movs	r2, #0
 800b22c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b232:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b236:	b25b      	sxtb	r3, r3
 800b238:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b23c:	d103      	bne.n	800b246 <xQueueGenericSend+0x182>
 800b23e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b240:	2200      	movs	r2, #0
 800b242:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b246:	f001 fe49 	bl	800cedc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b24a:	1d3a      	adds	r2, r7, #4
 800b24c:	f107 0314 	add.w	r3, r7, #20
 800b250:	4611      	mov	r1, r2
 800b252:	4618      	mov	r0, r3
 800b254:	f000 ffe8 	bl	800c228 <xTaskCheckForTimeOut>
 800b258:	4603      	mov	r3, r0
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d124      	bne.n	800b2a8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b25e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b260:	f000 fa9e 	bl	800b7a0 <prvIsQueueFull>
 800b264:	4603      	mov	r3, r0
 800b266:	2b00      	cmp	r3, #0
 800b268:	d018      	beq.n	800b29c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b26a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b26c:	3310      	adds	r3, #16
 800b26e:	687a      	ldr	r2, [r7, #4]
 800b270:	4611      	mov	r1, r2
 800b272:	4618      	mov	r0, r3
 800b274:	f000 ff0e 	bl	800c094 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b278:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b27a:	f000 fa29 	bl	800b6d0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b27e:	f000 fd43 	bl	800bd08 <xTaskResumeAll>
 800b282:	4603      	mov	r3, r0
 800b284:	2b00      	cmp	r3, #0
 800b286:	f47f af7c 	bne.w	800b182 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b28a:	4b0c      	ldr	r3, [pc, #48]	; (800b2bc <xQueueGenericSend+0x1f8>)
 800b28c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b290:	601a      	str	r2, [r3, #0]
 800b292:	f3bf 8f4f 	dsb	sy
 800b296:	f3bf 8f6f 	isb	sy
 800b29a:	e772      	b.n	800b182 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b29c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b29e:	f000 fa17 	bl	800b6d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b2a2:	f000 fd31 	bl	800bd08 <xTaskResumeAll>
 800b2a6:	e76c      	b.n	800b182 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b2a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b2aa:	f000 fa11 	bl	800b6d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b2ae:	f000 fd2b 	bl	800bd08 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b2b2:	2300      	movs	r3, #0
		}
	}
}
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	3738      	adds	r7, #56	; 0x38
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	bd80      	pop	{r7, pc}
 800b2bc:	e000ed04 	.word	0xe000ed04

0800b2c0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b08e      	sub	sp, #56	; 0x38
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	60f8      	str	r0, [r7, #12]
 800b2c8:	60b9      	str	r1, [r7, #8]
 800b2ca:	607a      	str	r2, [r7, #4]
 800b2cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b2d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d10a      	bne.n	800b2ee <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b2d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2dc:	f383 8811 	msr	BASEPRI, r3
 800b2e0:	f3bf 8f6f 	isb	sy
 800b2e4:	f3bf 8f4f 	dsb	sy
 800b2e8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b2ea:	bf00      	nop
 800b2ec:	e7fe      	b.n	800b2ec <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b2ee:	68bb      	ldr	r3, [r7, #8]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d103      	bne.n	800b2fc <xQueueGenericSendFromISR+0x3c>
 800b2f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d101      	bne.n	800b300 <xQueueGenericSendFromISR+0x40>
 800b2fc:	2301      	movs	r3, #1
 800b2fe:	e000      	b.n	800b302 <xQueueGenericSendFromISR+0x42>
 800b300:	2300      	movs	r3, #0
 800b302:	2b00      	cmp	r3, #0
 800b304:	d10a      	bne.n	800b31c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b30a:	f383 8811 	msr	BASEPRI, r3
 800b30e:	f3bf 8f6f 	isb	sy
 800b312:	f3bf 8f4f 	dsb	sy
 800b316:	623b      	str	r3, [r7, #32]
}
 800b318:	bf00      	nop
 800b31a:	e7fe      	b.n	800b31a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b31c:	683b      	ldr	r3, [r7, #0]
 800b31e:	2b02      	cmp	r3, #2
 800b320:	d103      	bne.n	800b32a <xQueueGenericSendFromISR+0x6a>
 800b322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b326:	2b01      	cmp	r3, #1
 800b328:	d101      	bne.n	800b32e <xQueueGenericSendFromISR+0x6e>
 800b32a:	2301      	movs	r3, #1
 800b32c:	e000      	b.n	800b330 <xQueueGenericSendFromISR+0x70>
 800b32e:	2300      	movs	r3, #0
 800b330:	2b00      	cmp	r3, #0
 800b332:	d10a      	bne.n	800b34a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b334:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b338:	f383 8811 	msr	BASEPRI, r3
 800b33c:	f3bf 8f6f 	isb	sy
 800b340:	f3bf 8f4f 	dsb	sy
 800b344:	61fb      	str	r3, [r7, #28]
}
 800b346:	bf00      	nop
 800b348:	e7fe      	b.n	800b348 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b34a:	f001 fe59 	bl	800d000 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b34e:	f3ef 8211 	mrs	r2, BASEPRI
 800b352:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b356:	f383 8811 	msr	BASEPRI, r3
 800b35a:	f3bf 8f6f 	isb	sy
 800b35e:	f3bf 8f4f 	dsb	sy
 800b362:	61ba      	str	r2, [r7, #24]
 800b364:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b366:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b368:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b36a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b36c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b36e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b372:	429a      	cmp	r2, r3
 800b374:	d302      	bcc.n	800b37c <xQueueGenericSendFromISR+0xbc>
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	2b02      	cmp	r3, #2
 800b37a:	d12c      	bne.n	800b3d6 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b37c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b37e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b382:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b386:	683a      	ldr	r2, [r7, #0]
 800b388:	68b9      	ldr	r1, [r7, #8]
 800b38a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b38c:	f000 f910 	bl	800b5b0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b390:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800b394:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b398:	d112      	bne.n	800b3c0 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b39a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b39c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d016      	beq.n	800b3d0 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b3a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3a4:	3324      	adds	r3, #36	; 0x24
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	f000 fec4 	bl	800c134 <xTaskRemoveFromEventList>
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d00e      	beq.n	800b3d0 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d00b      	beq.n	800b3d0 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	2201      	movs	r2, #1
 800b3bc:	601a      	str	r2, [r3, #0]
 800b3be:	e007      	b.n	800b3d0 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b3c0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b3c4:	3301      	adds	r3, #1
 800b3c6:	b2db      	uxtb	r3, r3
 800b3c8:	b25a      	sxtb	r2, r3
 800b3ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b3d0:	2301      	movs	r3, #1
 800b3d2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800b3d4:	e001      	b.n	800b3da <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	637b      	str	r3, [r7, #52]	; 0x34
 800b3da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3dc:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b3de:	693b      	ldr	r3, [r7, #16]
 800b3e0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b3e4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b3e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	3738      	adds	r7, #56	; 0x38
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bd80      	pop	{r7, pc}

0800b3f0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b08c      	sub	sp, #48	; 0x30
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	60f8      	str	r0, [r7, #12]
 800b3f8:	60b9      	str	r1, [r7, #8]
 800b3fa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b406:	2b00      	cmp	r3, #0
 800b408:	d10a      	bne.n	800b420 <xQueueReceive+0x30>
	__asm volatile
 800b40a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b40e:	f383 8811 	msr	BASEPRI, r3
 800b412:	f3bf 8f6f 	isb	sy
 800b416:	f3bf 8f4f 	dsb	sy
 800b41a:	623b      	str	r3, [r7, #32]
}
 800b41c:	bf00      	nop
 800b41e:	e7fe      	b.n	800b41e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b420:	68bb      	ldr	r3, [r7, #8]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d103      	bne.n	800b42e <xQueueReceive+0x3e>
 800b426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d101      	bne.n	800b432 <xQueueReceive+0x42>
 800b42e:	2301      	movs	r3, #1
 800b430:	e000      	b.n	800b434 <xQueueReceive+0x44>
 800b432:	2300      	movs	r3, #0
 800b434:	2b00      	cmp	r3, #0
 800b436:	d10a      	bne.n	800b44e <xQueueReceive+0x5e>
	__asm volatile
 800b438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b43c:	f383 8811 	msr	BASEPRI, r3
 800b440:	f3bf 8f6f 	isb	sy
 800b444:	f3bf 8f4f 	dsb	sy
 800b448:	61fb      	str	r3, [r7, #28]
}
 800b44a:	bf00      	nop
 800b44c:	e7fe      	b.n	800b44c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b44e:	f001 f833 	bl	800c4b8 <xTaskGetSchedulerState>
 800b452:	4603      	mov	r3, r0
 800b454:	2b00      	cmp	r3, #0
 800b456:	d102      	bne.n	800b45e <xQueueReceive+0x6e>
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d101      	bne.n	800b462 <xQueueReceive+0x72>
 800b45e:	2301      	movs	r3, #1
 800b460:	e000      	b.n	800b464 <xQueueReceive+0x74>
 800b462:	2300      	movs	r3, #0
 800b464:	2b00      	cmp	r3, #0
 800b466:	d10a      	bne.n	800b47e <xQueueReceive+0x8e>
	__asm volatile
 800b468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b46c:	f383 8811 	msr	BASEPRI, r3
 800b470:	f3bf 8f6f 	isb	sy
 800b474:	f3bf 8f4f 	dsb	sy
 800b478:	61bb      	str	r3, [r7, #24]
}
 800b47a:	bf00      	nop
 800b47c:	e7fe      	b.n	800b47c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800b47e:	f001 fcfd 	bl	800ce7c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b486:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d01f      	beq.n	800b4ce <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b48e:	68b9      	ldr	r1, [r7, #8]
 800b490:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b492:	f000 f8f7 	bl	800b684 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b498:	1e5a      	subs	r2, r3, #1
 800b49a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b49c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b49e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4a0:	691b      	ldr	r3, [r3, #16]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d00f      	beq.n	800b4c6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b4a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4a8:	3310      	adds	r3, #16
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	f000 fe42 	bl	800c134 <xTaskRemoveFromEventList>
 800b4b0:	4603      	mov	r3, r0
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d007      	beq.n	800b4c6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b4b6:	4b3d      	ldr	r3, [pc, #244]	; (800b5ac <xQueueReceive+0x1bc>)
 800b4b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4bc:	601a      	str	r2, [r3, #0]
 800b4be:	f3bf 8f4f 	dsb	sy
 800b4c2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b4c6:	f001 fd09 	bl	800cedc <vPortExitCritical>
				return pdPASS;
 800b4ca:	2301      	movs	r3, #1
 800b4cc:	e069      	b.n	800b5a2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d103      	bne.n	800b4dc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b4d4:	f001 fd02 	bl	800cedc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b4d8:	2300      	movs	r3, #0
 800b4da:	e062      	b.n	800b5a2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b4dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d106      	bne.n	800b4f0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b4e2:	f107 0310 	add.w	r3, r7, #16
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	f000 fe88 	bl	800c1fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b4ec:	2301      	movs	r3, #1
 800b4ee:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b4f0:	f001 fcf4 	bl	800cedc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b4f4:	f000 fbfa 	bl	800bcec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b4f8:	f001 fcc0 	bl	800ce7c <vPortEnterCritical>
 800b4fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b502:	b25b      	sxtb	r3, r3
 800b504:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b508:	d103      	bne.n	800b512 <xQueueReceive+0x122>
 800b50a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b50c:	2200      	movs	r2, #0
 800b50e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b514:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b518:	b25b      	sxtb	r3, r3
 800b51a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b51e:	d103      	bne.n	800b528 <xQueueReceive+0x138>
 800b520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b522:	2200      	movs	r2, #0
 800b524:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b528:	f001 fcd8 	bl	800cedc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b52c:	1d3a      	adds	r2, r7, #4
 800b52e:	f107 0310 	add.w	r3, r7, #16
 800b532:	4611      	mov	r1, r2
 800b534:	4618      	mov	r0, r3
 800b536:	f000 fe77 	bl	800c228 <xTaskCheckForTimeOut>
 800b53a:	4603      	mov	r3, r0
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d123      	bne.n	800b588 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b540:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b542:	f000 f917 	bl	800b774 <prvIsQueueEmpty>
 800b546:	4603      	mov	r3, r0
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d017      	beq.n	800b57c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b54c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b54e:	3324      	adds	r3, #36	; 0x24
 800b550:	687a      	ldr	r2, [r7, #4]
 800b552:	4611      	mov	r1, r2
 800b554:	4618      	mov	r0, r3
 800b556:	f000 fd9d 	bl	800c094 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b55a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b55c:	f000 f8b8 	bl	800b6d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b560:	f000 fbd2 	bl	800bd08 <xTaskResumeAll>
 800b564:	4603      	mov	r3, r0
 800b566:	2b00      	cmp	r3, #0
 800b568:	d189      	bne.n	800b47e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b56a:	4b10      	ldr	r3, [pc, #64]	; (800b5ac <xQueueReceive+0x1bc>)
 800b56c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b570:	601a      	str	r2, [r3, #0]
 800b572:	f3bf 8f4f 	dsb	sy
 800b576:	f3bf 8f6f 	isb	sy
 800b57a:	e780      	b.n	800b47e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b57c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b57e:	f000 f8a7 	bl	800b6d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b582:	f000 fbc1 	bl	800bd08 <xTaskResumeAll>
 800b586:	e77a      	b.n	800b47e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b588:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b58a:	f000 f8a1 	bl	800b6d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b58e:	f000 fbbb 	bl	800bd08 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b592:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b594:	f000 f8ee 	bl	800b774 <prvIsQueueEmpty>
 800b598:	4603      	mov	r3, r0
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	f43f af6f 	beq.w	800b47e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b5a0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	3730      	adds	r7, #48	; 0x30
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	bd80      	pop	{r7, pc}
 800b5aa:	bf00      	nop
 800b5ac:	e000ed04 	.word	0xe000ed04

0800b5b0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b086      	sub	sp, #24
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	60f8      	str	r0, [r7, #12]
 800b5b8:	60b9      	str	r1, [r7, #8]
 800b5ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b5bc:	2300      	movs	r3, #0
 800b5be:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5c4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d10d      	bne.n	800b5ea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d14d      	bne.n	800b672 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	685b      	ldr	r3, [r3, #4]
 800b5da:	4618      	mov	r0, r3
 800b5dc:	f000 ff8a 	bl	800c4f4 <xTaskPriorityDisinherit>
 800b5e0:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	605a      	str	r2, [r3, #4]
 800b5e8:	e043      	b.n	800b672 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d119      	bne.n	800b624 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	6898      	ldr	r0, [r3, #8]
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5f8:	461a      	mov	r2, r3
 800b5fa:	68b9      	ldr	r1, [r7, #8]
 800b5fc:	f002 fc8e 	bl	800df1c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	689a      	ldr	r2, [r3, #8]
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b608:	441a      	add	r2, r3
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	689a      	ldr	r2, [r3, #8]
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	685b      	ldr	r3, [r3, #4]
 800b616:	429a      	cmp	r2, r3
 800b618:	d32b      	bcc.n	800b672 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	681a      	ldr	r2, [r3, #0]
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	609a      	str	r2, [r3, #8]
 800b622:	e026      	b.n	800b672 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	68d8      	ldr	r0, [r3, #12]
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b62c:	461a      	mov	r2, r3
 800b62e:	68b9      	ldr	r1, [r7, #8]
 800b630:	f002 fc74 	bl	800df1c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	68da      	ldr	r2, [r3, #12]
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b63c:	425b      	negs	r3, r3
 800b63e:	441a      	add	r2, r3
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	68da      	ldr	r2, [r3, #12]
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	429a      	cmp	r2, r3
 800b64e:	d207      	bcs.n	800b660 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	685a      	ldr	r2, [r3, #4]
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b658:	425b      	negs	r3, r3
 800b65a:	441a      	add	r2, r3
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2b02      	cmp	r3, #2
 800b664:	d105      	bne.n	800b672 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b666:	693b      	ldr	r3, [r7, #16]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d002      	beq.n	800b672 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b66c:	693b      	ldr	r3, [r7, #16]
 800b66e:	3b01      	subs	r3, #1
 800b670:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b672:	693b      	ldr	r3, [r7, #16]
 800b674:	1c5a      	adds	r2, r3, #1
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b67a:	697b      	ldr	r3, [r7, #20]
}
 800b67c:	4618      	mov	r0, r3
 800b67e:	3718      	adds	r7, #24
 800b680:	46bd      	mov	sp, r7
 800b682:	bd80      	pop	{r7, pc}

0800b684 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b684:	b580      	push	{r7, lr}
 800b686:	b082      	sub	sp, #8
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
 800b68c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b692:	2b00      	cmp	r3, #0
 800b694:	d018      	beq.n	800b6c8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	68da      	ldr	r2, [r3, #12]
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b69e:	441a      	add	r2, r3
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	68da      	ldr	r2, [r3, #12]
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	685b      	ldr	r3, [r3, #4]
 800b6ac:	429a      	cmp	r2, r3
 800b6ae:	d303      	bcc.n	800b6b8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681a      	ldr	r2, [r3, #0]
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	68d9      	ldr	r1, [r3, #12]
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6c0:	461a      	mov	r2, r3
 800b6c2:	6838      	ldr	r0, [r7, #0]
 800b6c4:	f002 fc2a 	bl	800df1c <memcpy>
	}
}
 800b6c8:	bf00      	nop
 800b6ca:	3708      	adds	r7, #8
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	bd80      	pop	{r7, pc}

0800b6d0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b084      	sub	sp, #16
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b6d8:	f001 fbd0 	bl	800ce7c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b6e2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b6e4:	e011      	b.n	800b70a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d012      	beq.n	800b714 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	3324      	adds	r3, #36	; 0x24
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	f000 fd1e 	bl	800c134 <xTaskRemoveFromEventList>
 800b6f8:	4603      	mov	r3, r0
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d001      	beq.n	800b702 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b6fe:	f000 fdf5 	bl	800c2ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b702:	7bfb      	ldrb	r3, [r7, #15]
 800b704:	3b01      	subs	r3, #1
 800b706:	b2db      	uxtb	r3, r3
 800b708:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b70a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	dce9      	bgt.n	800b6e6 <prvUnlockQueue+0x16>
 800b712:	e000      	b.n	800b716 <prvUnlockQueue+0x46>
					break;
 800b714:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	22ff      	movs	r2, #255	; 0xff
 800b71a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b71e:	f001 fbdd 	bl	800cedc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b722:	f001 fbab 	bl	800ce7c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b72c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b72e:	e011      	b.n	800b754 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	691b      	ldr	r3, [r3, #16]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d012      	beq.n	800b75e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	3310      	adds	r3, #16
 800b73c:	4618      	mov	r0, r3
 800b73e:	f000 fcf9 	bl	800c134 <xTaskRemoveFromEventList>
 800b742:	4603      	mov	r3, r0
 800b744:	2b00      	cmp	r3, #0
 800b746:	d001      	beq.n	800b74c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b748:	f000 fdd0 	bl	800c2ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b74c:	7bbb      	ldrb	r3, [r7, #14]
 800b74e:	3b01      	subs	r3, #1
 800b750:	b2db      	uxtb	r3, r3
 800b752:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b754:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	dce9      	bgt.n	800b730 <prvUnlockQueue+0x60>
 800b75c:	e000      	b.n	800b760 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b75e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	22ff      	movs	r2, #255	; 0xff
 800b764:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b768:	f001 fbb8 	bl	800cedc <vPortExitCritical>
}
 800b76c:	bf00      	nop
 800b76e:	3710      	adds	r7, #16
 800b770:	46bd      	mov	sp, r7
 800b772:	bd80      	pop	{r7, pc}

0800b774 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b084      	sub	sp, #16
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b77c:	f001 fb7e 	bl	800ce7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b784:	2b00      	cmp	r3, #0
 800b786:	d102      	bne.n	800b78e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b788:	2301      	movs	r3, #1
 800b78a:	60fb      	str	r3, [r7, #12]
 800b78c:	e001      	b.n	800b792 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b78e:	2300      	movs	r3, #0
 800b790:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b792:	f001 fba3 	bl	800cedc <vPortExitCritical>

	return xReturn;
 800b796:	68fb      	ldr	r3, [r7, #12]
}
 800b798:	4618      	mov	r0, r3
 800b79a:	3710      	adds	r7, #16
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bd80      	pop	{r7, pc}

0800b7a0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b084      	sub	sp, #16
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b7a8:	f001 fb68 	bl	800ce7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7b4:	429a      	cmp	r2, r3
 800b7b6:	d102      	bne.n	800b7be <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b7b8:	2301      	movs	r3, #1
 800b7ba:	60fb      	str	r3, [r7, #12]
 800b7bc:	e001      	b.n	800b7c2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b7be:	2300      	movs	r3, #0
 800b7c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b7c2:	f001 fb8b 	bl	800cedc <vPortExitCritical>

	return xReturn;
 800b7c6:	68fb      	ldr	r3, [r7, #12]
}
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	3710      	adds	r7, #16
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	bd80      	pop	{r7, pc}

0800b7d0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b7d0:	b480      	push	{r7}
 800b7d2:	b085      	sub	sp, #20
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
 800b7d8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b7da:	2300      	movs	r3, #0
 800b7dc:	60fb      	str	r3, [r7, #12]
 800b7de:	e014      	b.n	800b80a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b7e0:	4a0e      	ldr	r2, [pc, #56]	; (800b81c <vQueueAddToRegistry+0x4c>)
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d10b      	bne.n	800b804 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b7ec:	490b      	ldr	r1, [pc, #44]	; (800b81c <vQueueAddToRegistry+0x4c>)
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	683a      	ldr	r2, [r7, #0]
 800b7f2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b7f6:	4a09      	ldr	r2, [pc, #36]	; (800b81c <vQueueAddToRegistry+0x4c>)
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	00db      	lsls	r3, r3, #3
 800b7fc:	4413      	add	r3, r2
 800b7fe:	687a      	ldr	r2, [r7, #4]
 800b800:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b802:	e006      	b.n	800b812 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	3301      	adds	r3, #1
 800b808:	60fb      	str	r3, [r7, #12]
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	2b07      	cmp	r3, #7
 800b80e:	d9e7      	bls.n	800b7e0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b810:	bf00      	nop
 800b812:	bf00      	nop
 800b814:	3714      	adds	r7, #20
 800b816:	46bd      	mov	sp, r7
 800b818:	bc80      	pop	{r7}
 800b81a:	4770      	bx	lr
 800b81c:	20000b54 	.word	0x20000b54

0800b820 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b820:	b580      	push	{r7, lr}
 800b822:	b086      	sub	sp, #24
 800b824:	af00      	add	r7, sp, #0
 800b826:	60f8      	str	r0, [r7, #12]
 800b828:	60b9      	str	r1, [r7, #8]
 800b82a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b830:	f001 fb24 	bl	800ce7c <vPortEnterCritical>
 800b834:	697b      	ldr	r3, [r7, #20]
 800b836:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b83a:	b25b      	sxtb	r3, r3
 800b83c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b840:	d103      	bne.n	800b84a <vQueueWaitForMessageRestricted+0x2a>
 800b842:	697b      	ldr	r3, [r7, #20]
 800b844:	2200      	movs	r2, #0
 800b846:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b84a:	697b      	ldr	r3, [r7, #20]
 800b84c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b850:	b25b      	sxtb	r3, r3
 800b852:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b856:	d103      	bne.n	800b860 <vQueueWaitForMessageRestricted+0x40>
 800b858:	697b      	ldr	r3, [r7, #20]
 800b85a:	2200      	movs	r2, #0
 800b85c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b860:	f001 fb3c 	bl	800cedc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b864:	697b      	ldr	r3, [r7, #20]
 800b866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d106      	bne.n	800b87a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b86c:	697b      	ldr	r3, [r7, #20]
 800b86e:	3324      	adds	r3, #36	; 0x24
 800b870:	687a      	ldr	r2, [r7, #4]
 800b872:	68b9      	ldr	r1, [r7, #8]
 800b874:	4618      	mov	r0, r3
 800b876:	f000 fc31 	bl	800c0dc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b87a:	6978      	ldr	r0, [r7, #20]
 800b87c:	f7ff ff28 	bl	800b6d0 <prvUnlockQueue>
	}
 800b880:	bf00      	nop
 800b882:	3718      	adds	r7, #24
 800b884:	46bd      	mov	sp, r7
 800b886:	bd80      	pop	{r7, pc}

0800b888 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b08e      	sub	sp, #56	; 0x38
 800b88c:	af04      	add	r7, sp, #16
 800b88e:	60f8      	str	r0, [r7, #12]
 800b890:	60b9      	str	r1, [r7, #8]
 800b892:	607a      	str	r2, [r7, #4]
 800b894:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d10a      	bne.n	800b8b2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800b89c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8a0:	f383 8811 	msr	BASEPRI, r3
 800b8a4:	f3bf 8f6f 	isb	sy
 800b8a8:	f3bf 8f4f 	dsb	sy
 800b8ac:	623b      	str	r3, [r7, #32]
}
 800b8ae:	bf00      	nop
 800b8b0:	e7fe      	b.n	800b8b0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b8b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d10a      	bne.n	800b8ce <xTaskCreateStatic+0x46>
	__asm volatile
 800b8b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8bc:	f383 8811 	msr	BASEPRI, r3
 800b8c0:	f3bf 8f6f 	isb	sy
 800b8c4:	f3bf 8f4f 	dsb	sy
 800b8c8:	61fb      	str	r3, [r7, #28]
}
 800b8ca:	bf00      	nop
 800b8cc:	e7fe      	b.n	800b8cc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b8ce:	235c      	movs	r3, #92	; 0x5c
 800b8d0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b8d2:	693b      	ldr	r3, [r7, #16]
 800b8d4:	2b5c      	cmp	r3, #92	; 0x5c
 800b8d6:	d00a      	beq.n	800b8ee <xTaskCreateStatic+0x66>
	__asm volatile
 800b8d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8dc:	f383 8811 	msr	BASEPRI, r3
 800b8e0:	f3bf 8f6f 	isb	sy
 800b8e4:	f3bf 8f4f 	dsb	sy
 800b8e8:	61bb      	str	r3, [r7, #24]
}
 800b8ea:	bf00      	nop
 800b8ec:	e7fe      	b.n	800b8ec <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b8ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d01e      	beq.n	800b932 <xTaskCreateStatic+0xaa>
 800b8f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d01b      	beq.n	800b932 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b8fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8fc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b8fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b900:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b902:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b906:	2202      	movs	r2, #2
 800b908:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b90c:	2300      	movs	r3, #0
 800b90e:	9303      	str	r3, [sp, #12]
 800b910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b912:	9302      	str	r3, [sp, #8]
 800b914:	f107 0314 	add.w	r3, r7, #20
 800b918:	9301      	str	r3, [sp, #4]
 800b91a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b91c:	9300      	str	r3, [sp, #0]
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	687a      	ldr	r2, [r7, #4]
 800b922:	68b9      	ldr	r1, [r7, #8]
 800b924:	68f8      	ldr	r0, [r7, #12]
 800b926:	f000 f850 	bl	800b9ca <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b92a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b92c:	f000 f8d4 	bl	800bad8 <prvAddNewTaskToReadyList>
 800b930:	e001      	b.n	800b936 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800b932:	2300      	movs	r3, #0
 800b934:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b936:	697b      	ldr	r3, [r7, #20]
	}
 800b938:	4618      	mov	r0, r3
 800b93a:	3728      	adds	r7, #40	; 0x28
 800b93c:	46bd      	mov	sp, r7
 800b93e:	bd80      	pop	{r7, pc}

0800b940 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b940:	b580      	push	{r7, lr}
 800b942:	b08c      	sub	sp, #48	; 0x30
 800b944:	af04      	add	r7, sp, #16
 800b946:	60f8      	str	r0, [r7, #12]
 800b948:	60b9      	str	r1, [r7, #8]
 800b94a:	603b      	str	r3, [r7, #0]
 800b94c:	4613      	mov	r3, r2
 800b94e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b950:	88fb      	ldrh	r3, [r7, #6]
 800b952:	009b      	lsls	r3, r3, #2
 800b954:	4618      	mov	r0, r3
 800b956:	f001 fb91 	bl	800d07c <pvPortMalloc>
 800b95a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b95c:	697b      	ldr	r3, [r7, #20]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d00e      	beq.n	800b980 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800b962:	205c      	movs	r0, #92	; 0x5c
 800b964:	f001 fb8a 	bl	800d07c <pvPortMalloc>
 800b968:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b96a:	69fb      	ldr	r3, [r7, #28]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d003      	beq.n	800b978 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b970:	69fb      	ldr	r3, [r7, #28]
 800b972:	697a      	ldr	r2, [r7, #20]
 800b974:	631a      	str	r2, [r3, #48]	; 0x30
 800b976:	e005      	b.n	800b984 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b978:	6978      	ldr	r0, [r7, #20]
 800b97a:	f001 fc43 	bl	800d204 <vPortFree>
 800b97e:	e001      	b.n	800b984 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b980:	2300      	movs	r3, #0
 800b982:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b984:	69fb      	ldr	r3, [r7, #28]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d017      	beq.n	800b9ba <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b98a:	69fb      	ldr	r3, [r7, #28]
 800b98c:	2200      	movs	r2, #0
 800b98e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b992:	88fa      	ldrh	r2, [r7, #6]
 800b994:	2300      	movs	r3, #0
 800b996:	9303      	str	r3, [sp, #12]
 800b998:	69fb      	ldr	r3, [r7, #28]
 800b99a:	9302      	str	r3, [sp, #8]
 800b99c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b99e:	9301      	str	r3, [sp, #4]
 800b9a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9a2:	9300      	str	r3, [sp, #0]
 800b9a4:	683b      	ldr	r3, [r7, #0]
 800b9a6:	68b9      	ldr	r1, [r7, #8]
 800b9a8:	68f8      	ldr	r0, [r7, #12]
 800b9aa:	f000 f80e 	bl	800b9ca <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b9ae:	69f8      	ldr	r0, [r7, #28]
 800b9b0:	f000 f892 	bl	800bad8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b9b4:	2301      	movs	r3, #1
 800b9b6:	61bb      	str	r3, [r7, #24]
 800b9b8:	e002      	b.n	800b9c0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b9ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b9be:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b9c0:	69bb      	ldr	r3, [r7, #24]
	}
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	3720      	adds	r7, #32
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	bd80      	pop	{r7, pc}

0800b9ca <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b9ca:	b580      	push	{r7, lr}
 800b9cc:	b088      	sub	sp, #32
 800b9ce:	af00      	add	r7, sp, #0
 800b9d0:	60f8      	str	r0, [r7, #12]
 800b9d2:	60b9      	str	r1, [r7, #8]
 800b9d4:	607a      	str	r2, [r7, #4]
 800b9d6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b9d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9da:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	009b      	lsls	r3, r3, #2
 800b9e0:	461a      	mov	r2, r3
 800b9e2:	21a5      	movs	r1, #165	; 0xa5
 800b9e4:	f002 faa8 	bl	800df38 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800b9e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b9f2:	3b01      	subs	r3, #1
 800b9f4:	009b      	lsls	r3, r3, #2
 800b9f6:	4413      	add	r3, r2
 800b9f8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800b9fa:	69bb      	ldr	r3, [r7, #24]
 800b9fc:	f023 0307 	bic.w	r3, r3, #7
 800ba00:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ba02:	69bb      	ldr	r3, [r7, #24]
 800ba04:	f003 0307 	and.w	r3, r3, #7
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d00a      	beq.n	800ba22 <prvInitialiseNewTask+0x58>
	__asm volatile
 800ba0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba10:	f383 8811 	msr	BASEPRI, r3
 800ba14:	f3bf 8f6f 	isb	sy
 800ba18:	f3bf 8f4f 	dsb	sy
 800ba1c:	617b      	str	r3, [r7, #20]
}
 800ba1e:	bf00      	nop
 800ba20:	e7fe      	b.n	800ba20 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ba22:	2300      	movs	r3, #0
 800ba24:	61fb      	str	r3, [r7, #28]
 800ba26:	e012      	b.n	800ba4e <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ba28:	68ba      	ldr	r2, [r7, #8]
 800ba2a:	69fb      	ldr	r3, [r7, #28]
 800ba2c:	4413      	add	r3, r2
 800ba2e:	7819      	ldrb	r1, [r3, #0]
 800ba30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba32:	69fb      	ldr	r3, [r7, #28]
 800ba34:	4413      	add	r3, r2
 800ba36:	3334      	adds	r3, #52	; 0x34
 800ba38:	460a      	mov	r2, r1
 800ba3a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800ba3c:	68ba      	ldr	r2, [r7, #8]
 800ba3e:	69fb      	ldr	r3, [r7, #28]
 800ba40:	4413      	add	r3, r2
 800ba42:	781b      	ldrb	r3, [r3, #0]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d006      	beq.n	800ba56 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ba48:	69fb      	ldr	r3, [r7, #28]
 800ba4a:	3301      	adds	r3, #1
 800ba4c:	61fb      	str	r3, [r7, #28]
 800ba4e:	69fb      	ldr	r3, [r7, #28]
 800ba50:	2b0f      	cmp	r3, #15
 800ba52:	d9e9      	bls.n	800ba28 <prvInitialiseNewTask+0x5e>
 800ba54:	e000      	b.n	800ba58 <prvInitialiseNewTask+0x8e>
		{
			break;
 800ba56:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ba58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ba60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba62:	2b37      	cmp	r3, #55	; 0x37
 800ba64:	d901      	bls.n	800ba6a <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ba66:	2337      	movs	r3, #55	; 0x37
 800ba68:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ba6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba6e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ba70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba74:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ba76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba78:	2200      	movs	r2, #0
 800ba7a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ba7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba7e:	3304      	adds	r3, #4
 800ba80:	4618      	mov	r0, r3
 800ba82:	f7ff f98c 	bl	800ad9e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ba86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba88:	3318      	adds	r3, #24
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	f7ff f987 	bl	800ad9e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ba90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba94:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba98:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ba9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba9e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800baa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baa2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800baa4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800baa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baa8:	2200      	movs	r2, #0
 800baaa:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800baac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baae:	2200      	movs	r2, #0
 800bab0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bab4:	683a      	ldr	r2, [r7, #0]
 800bab6:	68f9      	ldr	r1, [r7, #12]
 800bab8:	69b8      	ldr	r0, [r7, #24]
 800baba:	f001 f8ef 	bl	800cc9c <pxPortInitialiseStack>
 800babe:	4602      	mov	r2, r0
 800bac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bac2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800bac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d002      	beq.n	800bad0 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800baca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bacc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bace:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bad0:	bf00      	nop
 800bad2:	3720      	adds	r7, #32
 800bad4:	46bd      	mov	sp, r7
 800bad6:	bd80      	pop	{r7, pc}

0800bad8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b082      	sub	sp, #8
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bae0:	f001 f9cc 	bl	800ce7c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bae4:	4b2d      	ldr	r3, [pc, #180]	; (800bb9c <prvAddNewTaskToReadyList+0xc4>)
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	3301      	adds	r3, #1
 800baea:	4a2c      	ldr	r2, [pc, #176]	; (800bb9c <prvAddNewTaskToReadyList+0xc4>)
 800baec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800baee:	4b2c      	ldr	r3, [pc, #176]	; (800bba0 <prvAddNewTaskToReadyList+0xc8>)
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d109      	bne.n	800bb0a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800baf6:	4a2a      	ldr	r2, [pc, #168]	; (800bba0 <prvAddNewTaskToReadyList+0xc8>)
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bafc:	4b27      	ldr	r3, [pc, #156]	; (800bb9c <prvAddNewTaskToReadyList+0xc4>)
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	2b01      	cmp	r3, #1
 800bb02:	d110      	bne.n	800bb26 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bb04:	f000 fc16 	bl	800c334 <prvInitialiseTaskLists>
 800bb08:	e00d      	b.n	800bb26 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bb0a:	4b26      	ldr	r3, [pc, #152]	; (800bba4 <prvAddNewTaskToReadyList+0xcc>)
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d109      	bne.n	800bb26 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bb12:	4b23      	ldr	r3, [pc, #140]	; (800bba0 <prvAddNewTaskToReadyList+0xc8>)
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb1c:	429a      	cmp	r2, r3
 800bb1e:	d802      	bhi.n	800bb26 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bb20:	4a1f      	ldr	r2, [pc, #124]	; (800bba0 <prvAddNewTaskToReadyList+0xc8>)
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bb26:	4b20      	ldr	r3, [pc, #128]	; (800bba8 <prvAddNewTaskToReadyList+0xd0>)
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	3301      	adds	r3, #1
 800bb2c:	4a1e      	ldr	r2, [pc, #120]	; (800bba8 <prvAddNewTaskToReadyList+0xd0>)
 800bb2e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800bb30:	4b1d      	ldr	r3, [pc, #116]	; (800bba8 <prvAddNewTaskToReadyList+0xd0>)
 800bb32:	681a      	ldr	r2, [r3, #0]
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb3c:	4b1b      	ldr	r3, [pc, #108]	; (800bbac <prvAddNewTaskToReadyList+0xd4>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	429a      	cmp	r2, r3
 800bb42:	d903      	bls.n	800bb4c <prvAddNewTaskToReadyList+0x74>
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb48:	4a18      	ldr	r2, [pc, #96]	; (800bbac <prvAddNewTaskToReadyList+0xd4>)
 800bb4a:	6013      	str	r3, [r2, #0]
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb50:	4613      	mov	r3, r2
 800bb52:	009b      	lsls	r3, r3, #2
 800bb54:	4413      	add	r3, r2
 800bb56:	009b      	lsls	r3, r3, #2
 800bb58:	4a15      	ldr	r2, [pc, #84]	; (800bbb0 <prvAddNewTaskToReadyList+0xd8>)
 800bb5a:	441a      	add	r2, r3
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	3304      	adds	r3, #4
 800bb60:	4619      	mov	r1, r3
 800bb62:	4610      	mov	r0, r2
 800bb64:	f7ff f927 	bl	800adb6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bb68:	f001 f9b8 	bl	800cedc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bb6c:	4b0d      	ldr	r3, [pc, #52]	; (800bba4 <prvAddNewTaskToReadyList+0xcc>)
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d00e      	beq.n	800bb92 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bb74:	4b0a      	ldr	r3, [pc, #40]	; (800bba0 <prvAddNewTaskToReadyList+0xc8>)
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb7e:	429a      	cmp	r2, r3
 800bb80:	d207      	bcs.n	800bb92 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bb82:	4b0c      	ldr	r3, [pc, #48]	; (800bbb4 <prvAddNewTaskToReadyList+0xdc>)
 800bb84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb88:	601a      	str	r2, [r3, #0]
 800bb8a:	f3bf 8f4f 	dsb	sy
 800bb8e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bb92:	bf00      	nop
 800bb94:	3708      	adds	r7, #8
 800bb96:	46bd      	mov	sp, r7
 800bb98:	bd80      	pop	{r7, pc}
 800bb9a:	bf00      	nop
 800bb9c:	20001068 	.word	0x20001068
 800bba0:	20000b94 	.word	0x20000b94
 800bba4:	20001074 	.word	0x20001074
 800bba8:	20001084 	.word	0x20001084
 800bbac:	20001070 	.word	0x20001070
 800bbb0:	20000b98 	.word	0x20000b98
 800bbb4:	e000ed04 	.word	0xe000ed04

0800bbb8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b084      	sub	sp, #16
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d017      	beq.n	800bbfa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bbca:	4b13      	ldr	r3, [pc, #76]	; (800bc18 <vTaskDelay+0x60>)
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d00a      	beq.n	800bbe8 <vTaskDelay+0x30>
	__asm volatile
 800bbd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbd6:	f383 8811 	msr	BASEPRI, r3
 800bbda:	f3bf 8f6f 	isb	sy
 800bbde:	f3bf 8f4f 	dsb	sy
 800bbe2:	60bb      	str	r3, [r7, #8]
}
 800bbe4:	bf00      	nop
 800bbe6:	e7fe      	b.n	800bbe6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800bbe8:	f000 f880 	bl	800bcec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bbec:	2100      	movs	r1, #0
 800bbee:	6878      	ldr	r0, [r7, #4]
 800bbf0:	f000 fcee 	bl	800c5d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bbf4:	f000 f888 	bl	800bd08 <xTaskResumeAll>
 800bbf8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d107      	bne.n	800bc10 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800bc00:	4b06      	ldr	r3, [pc, #24]	; (800bc1c <vTaskDelay+0x64>)
 800bc02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc06:	601a      	str	r2, [r3, #0]
 800bc08:	f3bf 8f4f 	dsb	sy
 800bc0c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bc10:	bf00      	nop
 800bc12:	3710      	adds	r7, #16
 800bc14:	46bd      	mov	sp, r7
 800bc16:	bd80      	pop	{r7, pc}
 800bc18:	20001090 	.word	0x20001090
 800bc1c:	e000ed04 	.word	0xe000ed04

0800bc20 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b08a      	sub	sp, #40	; 0x28
 800bc24:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bc26:	2300      	movs	r3, #0
 800bc28:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bc2e:	463a      	mov	r2, r7
 800bc30:	1d39      	adds	r1, r7, #4
 800bc32:	f107 0308 	add.w	r3, r7, #8
 800bc36:	4618      	mov	r0, r3
 800bc38:	f7ff f860 	bl	800acfc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bc3c:	6839      	ldr	r1, [r7, #0]
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	68ba      	ldr	r2, [r7, #8]
 800bc42:	9202      	str	r2, [sp, #8]
 800bc44:	9301      	str	r3, [sp, #4]
 800bc46:	2300      	movs	r3, #0
 800bc48:	9300      	str	r3, [sp, #0]
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	460a      	mov	r2, r1
 800bc4e:	4921      	ldr	r1, [pc, #132]	; (800bcd4 <vTaskStartScheduler+0xb4>)
 800bc50:	4821      	ldr	r0, [pc, #132]	; (800bcd8 <vTaskStartScheduler+0xb8>)
 800bc52:	f7ff fe19 	bl	800b888 <xTaskCreateStatic>
 800bc56:	4603      	mov	r3, r0
 800bc58:	4a20      	ldr	r2, [pc, #128]	; (800bcdc <vTaskStartScheduler+0xbc>)
 800bc5a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bc5c:	4b1f      	ldr	r3, [pc, #124]	; (800bcdc <vTaskStartScheduler+0xbc>)
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d002      	beq.n	800bc6a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bc64:	2301      	movs	r3, #1
 800bc66:	617b      	str	r3, [r7, #20]
 800bc68:	e001      	b.n	800bc6e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800bc6e:	697b      	ldr	r3, [r7, #20]
 800bc70:	2b01      	cmp	r3, #1
 800bc72:	d102      	bne.n	800bc7a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800bc74:	f000 fd00 	bl	800c678 <xTimerCreateTimerTask>
 800bc78:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bc7a:	697b      	ldr	r3, [r7, #20]
 800bc7c:	2b01      	cmp	r3, #1
 800bc7e:	d116      	bne.n	800bcae <vTaskStartScheduler+0x8e>
	__asm volatile
 800bc80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc84:	f383 8811 	msr	BASEPRI, r3
 800bc88:	f3bf 8f6f 	isb	sy
 800bc8c:	f3bf 8f4f 	dsb	sy
 800bc90:	613b      	str	r3, [r7, #16]
}
 800bc92:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bc94:	4b12      	ldr	r3, [pc, #72]	; (800bce0 <vTaskStartScheduler+0xc0>)
 800bc96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bc9a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bc9c:	4b11      	ldr	r3, [pc, #68]	; (800bce4 <vTaskStartScheduler+0xc4>)
 800bc9e:	2201      	movs	r2, #1
 800bca0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800bca2:	4b11      	ldr	r3, [pc, #68]	; (800bce8 <vTaskStartScheduler+0xc8>)
 800bca4:	2200      	movs	r2, #0
 800bca6:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bca8:	f001 f876 	bl	800cd98 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bcac:	e00e      	b.n	800bccc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bcae:	697b      	ldr	r3, [r7, #20]
 800bcb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bcb4:	d10a      	bne.n	800bccc <vTaskStartScheduler+0xac>
	__asm volatile
 800bcb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcba:	f383 8811 	msr	BASEPRI, r3
 800bcbe:	f3bf 8f6f 	isb	sy
 800bcc2:	f3bf 8f4f 	dsb	sy
 800bcc6:	60fb      	str	r3, [r7, #12]
}
 800bcc8:	bf00      	nop
 800bcca:	e7fe      	b.n	800bcca <vTaskStartScheduler+0xaa>
}
 800bccc:	bf00      	nop
 800bcce:	3718      	adds	r7, #24
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	bd80      	pop	{r7, pc}
 800bcd4:	0800e214 	.word	0x0800e214
 800bcd8:	0800c305 	.word	0x0800c305
 800bcdc:	2000108c 	.word	0x2000108c
 800bce0:	20001088 	.word	0x20001088
 800bce4:	20001074 	.word	0x20001074
 800bce8:	2000106c 	.word	0x2000106c

0800bcec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bcec:	b480      	push	{r7}
 800bcee:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800bcf0:	4b04      	ldr	r3, [pc, #16]	; (800bd04 <vTaskSuspendAll+0x18>)
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	3301      	adds	r3, #1
 800bcf6:	4a03      	ldr	r2, [pc, #12]	; (800bd04 <vTaskSuspendAll+0x18>)
 800bcf8:	6013      	str	r3, [r2, #0]
}
 800bcfa:	bf00      	nop
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	bc80      	pop	{r7}
 800bd00:	4770      	bx	lr
 800bd02:	bf00      	nop
 800bd04:	20001090 	.word	0x20001090

0800bd08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b084      	sub	sp, #16
 800bd0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bd0e:	2300      	movs	r3, #0
 800bd10:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bd12:	2300      	movs	r3, #0
 800bd14:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bd16:	4b42      	ldr	r3, [pc, #264]	; (800be20 <xTaskResumeAll+0x118>)
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d10a      	bne.n	800bd34 <xTaskResumeAll+0x2c>
	__asm volatile
 800bd1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd22:	f383 8811 	msr	BASEPRI, r3
 800bd26:	f3bf 8f6f 	isb	sy
 800bd2a:	f3bf 8f4f 	dsb	sy
 800bd2e:	603b      	str	r3, [r7, #0]
}
 800bd30:	bf00      	nop
 800bd32:	e7fe      	b.n	800bd32 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bd34:	f001 f8a2 	bl	800ce7c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bd38:	4b39      	ldr	r3, [pc, #228]	; (800be20 <xTaskResumeAll+0x118>)
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	3b01      	subs	r3, #1
 800bd3e:	4a38      	ldr	r2, [pc, #224]	; (800be20 <xTaskResumeAll+0x118>)
 800bd40:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd42:	4b37      	ldr	r3, [pc, #220]	; (800be20 <xTaskResumeAll+0x118>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d162      	bne.n	800be10 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bd4a:	4b36      	ldr	r3, [pc, #216]	; (800be24 <xTaskResumeAll+0x11c>)
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d05e      	beq.n	800be10 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bd52:	e02f      	b.n	800bdb4 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800bd54:	4b34      	ldr	r3, [pc, #208]	; (800be28 <xTaskResumeAll+0x120>)
 800bd56:	68db      	ldr	r3, [r3, #12]
 800bd58:	68db      	ldr	r3, [r3, #12]
 800bd5a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	3318      	adds	r3, #24
 800bd60:	4618      	mov	r0, r3
 800bd62:	f7ff f883 	bl	800ae6c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	3304      	adds	r3, #4
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	f7ff f87e 	bl	800ae6c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd74:	4b2d      	ldr	r3, [pc, #180]	; (800be2c <xTaskResumeAll+0x124>)
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	429a      	cmp	r2, r3
 800bd7a:	d903      	bls.n	800bd84 <xTaskResumeAll+0x7c>
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd80:	4a2a      	ldr	r2, [pc, #168]	; (800be2c <xTaskResumeAll+0x124>)
 800bd82:	6013      	str	r3, [r2, #0]
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd88:	4613      	mov	r3, r2
 800bd8a:	009b      	lsls	r3, r3, #2
 800bd8c:	4413      	add	r3, r2
 800bd8e:	009b      	lsls	r3, r3, #2
 800bd90:	4a27      	ldr	r2, [pc, #156]	; (800be30 <xTaskResumeAll+0x128>)
 800bd92:	441a      	add	r2, r3
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	3304      	adds	r3, #4
 800bd98:	4619      	mov	r1, r3
 800bd9a:	4610      	mov	r0, r2
 800bd9c:	f7ff f80b 	bl	800adb6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bda4:	4b23      	ldr	r3, [pc, #140]	; (800be34 <xTaskResumeAll+0x12c>)
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdaa:	429a      	cmp	r2, r3
 800bdac:	d302      	bcc.n	800bdb4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800bdae:	4b22      	ldr	r3, [pc, #136]	; (800be38 <xTaskResumeAll+0x130>)
 800bdb0:	2201      	movs	r2, #1
 800bdb2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bdb4:	4b1c      	ldr	r3, [pc, #112]	; (800be28 <xTaskResumeAll+0x120>)
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d1cb      	bne.n	800bd54 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d001      	beq.n	800bdc6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bdc2:	f000 fb55 	bl	800c470 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800bdc6:	4b1d      	ldr	r3, [pc, #116]	; (800be3c <xTaskResumeAll+0x134>)
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d010      	beq.n	800bdf4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bdd2:	f000 f845 	bl	800be60 <xTaskIncrementTick>
 800bdd6:	4603      	mov	r3, r0
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d002      	beq.n	800bde2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800bddc:	4b16      	ldr	r3, [pc, #88]	; (800be38 <xTaskResumeAll+0x130>)
 800bdde:	2201      	movs	r2, #1
 800bde0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	3b01      	subs	r3, #1
 800bde6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d1f1      	bne.n	800bdd2 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800bdee:	4b13      	ldr	r3, [pc, #76]	; (800be3c <xTaskResumeAll+0x134>)
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bdf4:	4b10      	ldr	r3, [pc, #64]	; (800be38 <xTaskResumeAll+0x130>)
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d009      	beq.n	800be10 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bdfc:	2301      	movs	r3, #1
 800bdfe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800be00:	4b0f      	ldr	r3, [pc, #60]	; (800be40 <xTaskResumeAll+0x138>)
 800be02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be06:	601a      	str	r2, [r3, #0]
 800be08:	f3bf 8f4f 	dsb	sy
 800be0c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800be10:	f001 f864 	bl	800cedc <vPortExitCritical>

	return xAlreadyYielded;
 800be14:	68bb      	ldr	r3, [r7, #8]
}
 800be16:	4618      	mov	r0, r3
 800be18:	3710      	adds	r7, #16
 800be1a:	46bd      	mov	sp, r7
 800be1c:	bd80      	pop	{r7, pc}
 800be1e:	bf00      	nop
 800be20:	20001090 	.word	0x20001090
 800be24:	20001068 	.word	0x20001068
 800be28:	20001028 	.word	0x20001028
 800be2c:	20001070 	.word	0x20001070
 800be30:	20000b98 	.word	0x20000b98
 800be34:	20000b94 	.word	0x20000b94
 800be38:	2000107c 	.word	0x2000107c
 800be3c:	20001078 	.word	0x20001078
 800be40:	e000ed04 	.word	0xe000ed04

0800be44 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800be44:	b480      	push	{r7}
 800be46:	b083      	sub	sp, #12
 800be48:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800be4a:	4b04      	ldr	r3, [pc, #16]	; (800be5c <xTaskGetTickCount+0x18>)
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800be50:	687b      	ldr	r3, [r7, #4]
}
 800be52:	4618      	mov	r0, r3
 800be54:	370c      	adds	r7, #12
 800be56:	46bd      	mov	sp, r7
 800be58:	bc80      	pop	{r7}
 800be5a:	4770      	bx	lr
 800be5c:	2000106c 	.word	0x2000106c

0800be60 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b086      	sub	sp, #24
 800be64:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800be66:	2300      	movs	r3, #0
 800be68:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be6a:	4b51      	ldr	r3, [pc, #324]	; (800bfb0 <xTaskIncrementTick+0x150>)
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	f040 808e 	bne.w	800bf90 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800be74:	4b4f      	ldr	r3, [pc, #316]	; (800bfb4 <xTaskIncrementTick+0x154>)
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	3301      	adds	r3, #1
 800be7a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800be7c:	4a4d      	ldr	r2, [pc, #308]	; (800bfb4 <xTaskIncrementTick+0x154>)
 800be7e:	693b      	ldr	r3, [r7, #16]
 800be80:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800be82:	693b      	ldr	r3, [r7, #16]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d120      	bne.n	800beca <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800be88:	4b4b      	ldr	r3, [pc, #300]	; (800bfb8 <xTaskIncrementTick+0x158>)
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d00a      	beq.n	800bea8 <xTaskIncrementTick+0x48>
	__asm volatile
 800be92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be96:	f383 8811 	msr	BASEPRI, r3
 800be9a:	f3bf 8f6f 	isb	sy
 800be9e:	f3bf 8f4f 	dsb	sy
 800bea2:	603b      	str	r3, [r7, #0]
}
 800bea4:	bf00      	nop
 800bea6:	e7fe      	b.n	800bea6 <xTaskIncrementTick+0x46>
 800bea8:	4b43      	ldr	r3, [pc, #268]	; (800bfb8 <xTaskIncrementTick+0x158>)
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	60fb      	str	r3, [r7, #12]
 800beae:	4b43      	ldr	r3, [pc, #268]	; (800bfbc <xTaskIncrementTick+0x15c>)
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	4a41      	ldr	r2, [pc, #260]	; (800bfb8 <xTaskIncrementTick+0x158>)
 800beb4:	6013      	str	r3, [r2, #0]
 800beb6:	4a41      	ldr	r2, [pc, #260]	; (800bfbc <xTaskIncrementTick+0x15c>)
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	6013      	str	r3, [r2, #0]
 800bebc:	4b40      	ldr	r3, [pc, #256]	; (800bfc0 <xTaskIncrementTick+0x160>)
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	3301      	adds	r3, #1
 800bec2:	4a3f      	ldr	r2, [pc, #252]	; (800bfc0 <xTaskIncrementTick+0x160>)
 800bec4:	6013      	str	r3, [r2, #0]
 800bec6:	f000 fad3 	bl	800c470 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800beca:	4b3e      	ldr	r3, [pc, #248]	; (800bfc4 <xTaskIncrementTick+0x164>)
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	693a      	ldr	r2, [r7, #16]
 800bed0:	429a      	cmp	r2, r3
 800bed2:	d34e      	bcc.n	800bf72 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bed4:	4b38      	ldr	r3, [pc, #224]	; (800bfb8 <xTaskIncrementTick+0x158>)
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d101      	bne.n	800bee2 <xTaskIncrementTick+0x82>
 800bede:	2301      	movs	r3, #1
 800bee0:	e000      	b.n	800bee4 <xTaskIncrementTick+0x84>
 800bee2:	2300      	movs	r3, #0
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d004      	beq.n	800bef2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bee8:	4b36      	ldr	r3, [pc, #216]	; (800bfc4 <xTaskIncrementTick+0x164>)
 800beea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800beee:	601a      	str	r2, [r3, #0]
					break;
 800bef0:	e03f      	b.n	800bf72 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800bef2:	4b31      	ldr	r3, [pc, #196]	; (800bfb8 <xTaskIncrementTick+0x158>)
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	68db      	ldr	r3, [r3, #12]
 800bef8:	68db      	ldr	r3, [r3, #12]
 800befa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800befc:	68bb      	ldr	r3, [r7, #8]
 800befe:	685b      	ldr	r3, [r3, #4]
 800bf00:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bf02:	693a      	ldr	r2, [r7, #16]
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	429a      	cmp	r2, r3
 800bf08:	d203      	bcs.n	800bf12 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bf0a:	4a2e      	ldr	r2, [pc, #184]	; (800bfc4 <xTaskIncrementTick+0x164>)
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	6013      	str	r3, [r2, #0]
						break;
 800bf10:	e02f      	b.n	800bf72 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bf12:	68bb      	ldr	r3, [r7, #8]
 800bf14:	3304      	adds	r3, #4
 800bf16:	4618      	mov	r0, r3
 800bf18:	f7fe ffa8 	bl	800ae6c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bf1c:	68bb      	ldr	r3, [r7, #8]
 800bf1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d004      	beq.n	800bf2e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bf24:	68bb      	ldr	r3, [r7, #8]
 800bf26:	3318      	adds	r3, #24
 800bf28:	4618      	mov	r0, r3
 800bf2a:	f7fe ff9f 	bl	800ae6c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bf2e:	68bb      	ldr	r3, [r7, #8]
 800bf30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf32:	4b25      	ldr	r3, [pc, #148]	; (800bfc8 <xTaskIncrementTick+0x168>)
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	429a      	cmp	r2, r3
 800bf38:	d903      	bls.n	800bf42 <xTaskIncrementTick+0xe2>
 800bf3a:	68bb      	ldr	r3, [r7, #8]
 800bf3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf3e:	4a22      	ldr	r2, [pc, #136]	; (800bfc8 <xTaskIncrementTick+0x168>)
 800bf40:	6013      	str	r3, [r2, #0]
 800bf42:	68bb      	ldr	r3, [r7, #8]
 800bf44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf46:	4613      	mov	r3, r2
 800bf48:	009b      	lsls	r3, r3, #2
 800bf4a:	4413      	add	r3, r2
 800bf4c:	009b      	lsls	r3, r3, #2
 800bf4e:	4a1f      	ldr	r2, [pc, #124]	; (800bfcc <xTaskIncrementTick+0x16c>)
 800bf50:	441a      	add	r2, r3
 800bf52:	68bb      	ldr	r3, [r7, #8]
 800bf54:	3304      	adds	r3, #4
 800bf56:	4619      	mov	r1, r3
 800bf58:	4610      	mov	r0, r2
 800bf5a:	f7fe ff2c 	bl	800adb6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bf5e:	68bb      	ldr	r3, [r7, #8]
 800bf60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf62:	4b1b      	ldr	r3, [pc, #108]	; (800bfd0 <xTaskIncrementTick+0x170>)
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf68:	429a      	cmp	r2, r3
 800bf6a:	d3b3      	bcc.n	800bed4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bf6c:	2301      	movs	r3, #1
 800bf6e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bf70:	e7b0      	b.n	800bed4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bf72:	4b17      	ldr	r3, [pc, #92]	; (800bfd0 <xTaskIncrementTick+0x170>)
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf78:	4914      	ldr	r1, [pc, #80]	; (800bfcc <xTaskIncrementTick+0x16c>)
 800bf7a:	4613      	mov	r3, r2
 800bf7c:	009b      	lsls	r3, r3, #2
 800bf7e:	4413      	add	r3, r2
 800bf80:	009b      	lsls	r3, r3, #2
 800bf82:	440b      	add	r3, r1
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	2b01      	cmp	r3, #1
 800bf88:	d907      	bls.n	800bf9a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800bf8a:	2301      	movs	r3, #1
 800bf8c:	617b      	str	r3, [r7, #20]
 800bf8e:	e004      	b.n	800bf9a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800bf90:	4b10      	ldr	r3, [pc, #64]	; (800bfd4 <xTaskIncrementTick+0x174>)
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	3301      	adds	r3, #1
 800bf96:	4a0f      	ldr	r2, [pc, #60]	; (800bfd4 <xTaskIncrementTick+0x174>)
 800bf98:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800bf9a:	4b0f      	ldr	r3, [pc, #60]	; (800bfd8 <xTaskIncrementTick+0x178>)
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d001      	beq.n	800bfa6 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800bfa2:	2301      	movs	r3, #1
 800bfa4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800bfa6:	697b      	ldr	r3, [r7, #20]
}
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	3718      	adds	r7, #24
 800bfac:	46bd      	mov	sp, r7
 800bfae:	bd80      	pop	{r7, pc}
 800bfb0:	20001090 	.word	0x20001090
 800bfb4:	2000106c 	.word	0x2000106c
 800bfb8:	20001020 	.word	0x20001020
 800bfbc:	20001024 	.word	0x20001024
 800bfc0:	20001080 	.word	0x20001080
 800bfc4:	20001088 	.word	0x20001088
 800bfc8:	20001070 	.word	0x20001070
 800bfcc:	20000b98 	.word	0x20000b98
 800bfd0:	20000b94 	.word	0x20000b94
 800bfd4:	20001078 	.word	0x20001078
 800bfd8:	2000107c 	.word	0x2000107c

0800bfdc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bfdc:	b480      	push	{r7}
 800bfde:	b085      	sub	sp, #20
 800bfe0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bfe2:	4b27      	ldr	r3, [pc, #156]	; (800c080 <vTaskSwitchContext+0xa4>)
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d003      	beq.n	800bff2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bfea:	4b26      	ldr	r3, [pc, #152]	; (800c084 <vTaskSwitchContext+0xa8>)
 800bfec:	2201      	movs	r2, #1
 800bfee:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bff0:	e041      	b.n	800c076 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800bff2:	4b24      	ldr	r3, [pc, #144]	; (800c084 <vTaskSwitchContext+0xa8>)
 800bff4:	2200      	movs	r2, #0
 800bff6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800bff8:	4b23      	ldr	r3, [pc, #140]	; (800c088 <vTaskSwitchContext+0xac>)
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	60fb      	str	r3, [r7, #12]
 800bffe:	e010      	b.n	800c022 <vTaskSwitchContext+0x46>
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d10a      	bne.n	800c01c <vTaskSwitchContext+0x40>
	__asm volatile
 800c006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c00a:	f383 8811 	msr	BASEPRI, r3
 800c00e:	f3bf 8f6f 	isb	sy
 800c012:	f3bf 8f4f 	dsb	sy
 800c016:	607b      	str	r3, [r7, #4]
}
 800c018:	bf00      	nop
 800c01a:	e7fe      	b.n	800c01a <vTaskSwitchContext+0x3e>
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	3b01      	subs	r3, #1
 800c020:	60fb      	str	r3, [r7, #12]
 800c022:	491a      	ldr	r1, [pc, #104]	; (800c08c <vTaskSwitchContext+0xb0>)
 800c024:	68fa      	ldr	r2, [r7, #12]
 800c026:	4613      	mov	r3, r2
 800c028:	009b      	lsls	r3, r3, #2
 800c02a:	4413      	add	r3, r2
 800c02c:	009b      	lsls	r3, r3, #2
 800c02e:	440b      	add	r3, r1
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d0e4      	beq.n	800c000 <vTaskSwitchContext+0x24>
 800c036:	68fa      	ldr	r2, [r7, #12]
 800c038:	4613      	mov	r3, r2
 800c03a:	009b      	lsls	r3, r3, #2
 800c03c:	4413      	add	r3, r2
 800c03e:	009b      	lsls	r3, r3, #2
 800c040:	4a12      	ldr	r2, [pc, #72]	; (800c08c <vTaskSwitchContext+0xb0>)
 800c042:	4413      	add	r3, r2
 800c044:	60bb      	str	r3, [r7, #8]
 800c046:	68bb      	ldr	r3, [r7, #8]
 800c048:	685b      	ldr	r3, [r3, #4]
 800c04a:	685a      	ldr	r2, [r3, #4]
 800c04c:	68bb      	ldr	r3, [r7, #8]
 800c04e:	605a      	str	r2, [r3, #4]
 800c050:	68bb      	ldr	r3, [r7, #8]
 800c052:	685a      	ldr	r2, [r3, #4]
 800c054:	68bb      	ldr	r3, [r7, #8]
 800c056:	3308      	adds	r3, #8
 800c058:	429a      	cmp	r2, r3
 800c05a:	d104      	bne.n	800c066 <vTaskSwitchContext+0x8a>
 800c05c:	68bb      	ldr	r3, [r7, #8]
 800c05e:	685b      	ldr	r3, [r3, #4]
 800c060:	685a      	ldr	r2, [r3, #4]
 800c062:	68bb      	ldr	r3, [r7, #8]
 800c064:	605a      	str	r2, [r3, #4]
 800c066:	68bb      	ldr	r3, [r7, #8]
 800c068:	685b      	ldr	r3, [r3, #4]
 800c06a:	68db      	ldr	r3, [r3, #12]
 800c06c:	4a08      	ldr	r2, [pc, #32]	; (800c090 <vTaskSwitchContext+0xb4>)
 800c06e:	6013      	str	r3, [r2, #0]
 800c070:	4a05      	ldr	r2, [pc, #20]	; (800c088 <vTaskSwitchContext+0xac>)
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	6013      	str	r3, [r2, #0]
}
 800c076:	bf00      	nop
 800c078:	3714      	adds	r7, #20
 800c07a:	46bd      	mov	sp, r7
 800c07c:	bc80      	pop	{r7}
 800c07e:	4770      	bx	lr
 800c080:	20001090 	.word	0x20001090
 800c084:	2000107c 	.word	0x2000107c
 800c088:	20001070 	.word	0x20001070
 800c08c:	20000b98 	.word	0x20000b98
 800c090:	20000b94 	.word	0x20000b94

0800c094 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c094:	b580      	push	{r7, lr}
 800c096:	b084      	sub	sp, #16
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
 800c09c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d10a      	bne.n	800c0ba <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c0a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0a8:	f383 8811 	msr	BASEPRI, r3
 800c0ac:	f3bf 8f6f 	isb	sy
 800c0b0:	f3bf 8f4f 	dsb	sy
 800c0b4:	60fb      	str	r3, [r7, #12]
}
 800c0b6:	bf00      	nop
 800c0b8:	e7fe      	b.n	800c0b8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c0ba:	4b07      	ldr	r3, [pc, #28]	; (800c0d8 <vTaskPlaceOnEventList+0x44>)
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	3318      	adds	r3, #24
 800c0c0:	4619      	mov	r1, r3
 800c0c2:	6878      	ldr	r0, [r7, #4]
 800c0c4:	f7fe fe9a 	bl	800adfc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c0c8:	2101      	movs	r1, #1
 800c0ca:	6838      	ldr	r0, [r7, #0]
 800c0cc:	f000 fa80 	bl	800c5d0 <prvAddCurrentTaskToDelayedList>
}
 800c0d0:	bf00      	nop
 800c0d2:	3710      	adds	r7, #16
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	bd80      	pop	{r7, pc}
 800c0d8:	20000b94 	.word	0x20000b94

0800c0dc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b086      	sub	sp, #24
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	60f8      	str	r0, [r7, #12]
 800c0e4:	60b9      	str	r1, [r7, #8]
 800c0e6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d10a      	bne.n	800c104 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800c0ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0f2:	f383 8811 	msr	BASEPRI, r3
 800c0f6:	f3bf 8f6f 	isb	sy
 800c0fa:	f3bf 8f4f 	dsb	sy
 800c0fe:	617b      	str	r3, [r7, #20]
}
 800c100:	bf00      	nop
 800c102:	e7fe      	b.n	800c102 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c104:	4b0a      	ldr	r3, [pc, #40]	; (800c130 <vTaskPlaceOnEventListRestricted+0x54>)
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	3318      	adds	r3, #24
 800c10a:	4619      	mov	r1, r3
 800c10c:	68f8      	ldr	r0, [r7, #12]
 800c10e:	f7fe fe52 	bl	800adb6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d002      	beq.n	800c11e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800c118:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c11c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c11e:	6879      	ldr	r1, [r7, #4]
 800c120:	68b8      	ldr	r0, [r7, #8]
 800c122:	f000 fa55 	bl	800c5d0 <prvAddCurrentTaskToDelayedList>
	}
 800c126:	bf00      	nop
 800c128:	3718      	adds	r7, #24
 800c12a:	46bd      	mov	sp, r7
 800c12c:	bd80      	pop	{r7, pc}
 800c12e:	bf00      	nop
 800c130:	20000b94 	.word	0x20000b94

0800c134 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b086      	sub	sp, #24
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	68db      	ldr	r3, [r3, #12]
 800c140:	68db      	ldr	r3, [r3, #12]
 800c142:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c144:	693b      	ldr	r3, [r7, #16]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d10a      	bne.n	800c160 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c14a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c14e:	f383 8811 	msr	BASEPRI, r3
 800c152:	f3bf 8f6f 	isb	sy
 800c156:	f3bf 8f4f 	dsb	sy
 800c15a:	60fb      	str	r3, [r7, #12]
}
 800c15c:	bf00      	nop
 800c15e:	e7fe      	b.n	800c15e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c160:	693b      	ldr	r3, [r7, #16]
 800c162:	3318      	adds	r3, #24
 800c164:	4618      	mov	r0, r3
 800c166:	f7fe fe81 	bl	800ae6c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c16a:	4b1e      	ldr	r3, [pc, #120]	; (800c1e4 <xTaskRemoveFromEventList+0xb0>)
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d11d      	bne.n	800c1ae <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c172:	693b      	ldr	r3, [r7, #16]
 800c174:	3304      	adds	r3, #4
 800c176:	4618      	mov	r0, r3
 800c178:	f7fe fe78 	bl	800ae6c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c17c:	693b      	ldr	r3, [r7, #16]
 800c17e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c180:	4b19      	ldr	r3, [pc, #100]	; (800c1e8 <xTaskRemoveFromEventList+0xb4>)
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	429a      	cmp	r2, r3
 800c186:	d903      	bls.n	800c190 <xTaskRemoveFromEventList+0x5c>
 800c188:	693b      	ldr	r3, [r7, #16]
 800c18a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c18c:	4a16      	ldr	r2, [pc, #88]	; (800c1e8 <xTaskRemoveFromEventList+0xb4>)
 800c18e:	6013      	str	r3, [r2, #0]
 800c190:	693b      	ldr	r3, [r7, #16]
 800c192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c194:	4613      	mov	r3, r2
 800c196:	009b      	lsls	r3, r3, #2
 800c198:	4413      	add	r3, r2
 800c19a:	009b      	lsls	r3, r3, #2
 800c19c:	4a13      	ldr	r2, [pc, #76]	; (800c1ec <xTaskRemoveFromEventList+0xb8>)
 800c19e:	441a      	add	r2, r3
 800c1a0:	693b      	ldr	r3, [r7, #16]
 800c1a2:	3304      	adds	r3, #4
 800c1a4:	4619      	mov	r1, r3
 800c1a6:	4610      	mov	r0, r2
 800c1a8:	f7fe fe05 	bl	800adb6 <vListInsertEnd>
 800c1ac:	e005      	b.n	800c1ba <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c1ae:	693b      	ldr	r3, [r7, #16]
 800c1b0:	3318      	adds	r3, #24
 800c1b2:	4619      	mov	r1, r3
 800c1b4:	480e      	ldr	r0, [pc, #56]	; (800c1f0 <xTaskRemoveFromEventList+0xbc>)
 800c1b6:	f7fe fdfe 	bl	800adb6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c1ba:	693b      	ldr	r3, [r7, #16]
 800c1bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1be:	4b0d      	ldr	r3, [pc, #52]	; (800c1f4 <xTaskRemoveFromEventList+0xc0>)
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1c4:	429a      	cmp	r2, r3
 800c1c6:	d905      	bls.n	800c1d4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c1c8:	2301      	movs	r3, #1
 800c1ca:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c1cc:	4b0a      	ldr	r3, [pc, #40]	; (800c1f8 <xTaskRemoveFromEventList+0xc4>)
 800c1ce:	2201      	movs	r2, #1
 800c1d0:	601a      	str	r2, [r3, #0]
 800c1d2:	e001      	b.n	800c1d8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800c1d8:	697b      	ldr	r3, [r7, #20]
}
 800c1da:	4618      	mov	r0, r3
 800c1dc:	3718      	adds	r7, #24
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	bd80      	pop	{r7, pc}
 800c1e2:	bf00      	nop
 800c1e4:	20001090 	.word	0x20001090
 800c1e8:	20001070 	.word	0x20001070
 800c1ec:	20000b98 	.word	0x20000b98
 800c1f0:	20001028 	.word	0x20001028
 800c1f4:	20000b94 	.word	0x20000b94
 800c1f8:	2000107c 	.word	0x2000107c

0800c1fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c1fc:	b480      	push	{r7}
 800c1fe:	b083      	sub	sp, #12
 800c200:	af00      	add	r7, sp, #0
 800c202:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c204:	4b06      	ldr	r3, [pc, #24]	; (800c220 <vTaskInternalSetTimeOutState+0x24>)
 800c206:	681a      	ldr	r2, [r3, #0]
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c20c:	4b05      	ldr	r3, [pc, #20]	; (800c224 <vTaskInternalSetTimeOutState+0x28>)
 800c20e:	681a      	ldr	r2, [r3, #0]
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	605a      	str	r2, [r3, #4]
}
 800c214:	bf00      	nop
 800c216:	370c      	adds	r7, #12
 800c218:	46bd      	mov	sp, r7
 800c21a:	bc80      	pop	{r7}
 800c21c:	4770      	bx	lr
 800c21e:	bf00      	nop
 800c220:	20001080 	.word	0x20001080
 800c224:	2000106c 	.word	0x2000106c

0800c228 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c228:	b580      	push	{r7, lr}
 800c22a:	b088      	sub	sp, #32
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	6078      	str	r0, [r7, #4]
 800c230:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d10a      	bne.n	800c24e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c23c:	f383 8811 	msr	BASEPRI, r3
 800c240:	f3bf 8f6f 	isb	sy
 800c244:	f3bf 8f4f 	dsb	sy
 800c248:	613b      	str	r3, [r7, #16]
}
 800c24a:	bf00      	nop
 800c24c:	e7fe      	b.n	800c24c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c24e:	683b      	ldr	r3, [r7, #0]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d10a      	bne.n	800c26a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c254:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c258:	f383 8811 	msr	BASEPRI, r3
 800c25c:	f3bf 8f6f 	isb	sy
 800c260:	f3bf 8f4f 	dsb	sy
 800c264:	60fb      	str	r3, [r7, #12]
}
 800c266:	bf00      	nop
 800c268:	e7fe      	b.n	800c268 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c26a:	f000 fe07 	bl	800ce7c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c26e:	4b1d      	ldr	r3, [pc, #116]	; (800c2e4 <xTaskCheckForTimeOut+0xbc>)
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	685b      	ldr	r3, [r3, #4]
 800c278:	69ba      	ldr	r2, [r7, #24]
 800c27a:	1ad3      	subs	r3, r2, r3
 800c27c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c27e:	683b      	ldr	r3, [r7, #0]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c286:	d102      	bne.n	800c28e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c288:	2300      	movs	r3, #0
 800c28a:	61fb      	str	r3, [r7, #28]
 800c28c:	e023      	b.n	800c2d6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	681a      	ldr	r2, [r3, #0]
 800c292:	4b15      	ldr	r3, [pc, #84]	; (800c2e8 <xTaskCheckForTimeOut+0xc0>)
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	429a      	cmp	r2, r3
 800c298:	d007      	beq.n	800c2aa <xTaskCheckForTimeOut+0x82>
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	685b      	ldr	r3, [r3, #4]
 800c29e:	69ba      	ldr	r2, [r7, #24]
 800c2a0:	429a      	cmp	r2, r3
 800c2a2:	d302      	bcc.n	800c2aa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c2a4:	2301      	movs	r3, #1
 800c2a6:	61fb      	str	r3, [r7, #28]
 800c2a8:	e015      	b.n	800c2d6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	697a      	ldr	r2, [r7, #20]
 800c2b0:	429a      	cmp	r2, r3
 800c2b2:	d20b      	bcs.n	800c2cc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c2b4:	683b      	ldr	r3, [r7, #0]
 800c2b6:	681a      	ldr	r2, [r3, #0]
 800c2b8:	697b      	ldr	r3, [r7, #20]
 800c2ba:	1ad2      	subs	r2, r2, r3
 800c2bc:	683b      	ldr	r3, [r7, #0]
 800c2be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c2c0:	6878      	ldr	r0, [r7, #4]
 800c2c2:	f7ff ff9b 	bl	800c1fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	61fb      	str	r3, [r7, #28]
 800c2ca:	e004      	b.n	800c2d6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c2cc:	683b      	ldr	r3, [r7, #0]
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c2d2:	2301      	movs	r3, #1
 800c2d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c2d6:	f000 fe01 	bl	800cedc <vPortExitCritical>

	return xReturn;
 800c2da:	69fb      	ldr	r3, [r7, #28]
}
 800c2dc:	4618      	mov	r0, r3
 800c2de:	3720      	adds	r7, #32
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	bd80      	pop	{r7, pc}
 800c2e4:	2000106c 	.word	0x2000106c
 800c2e8:	20001080 	.word	0x20001080

0800c2ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c2ec:	b480      	push	{r7}
 800c2ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c2f0:	4b03      	ldr	r3, [pc, #12]	; (800c300 <vTaskMissedYield+0x14>)
 800c2f2:	2201      	movs	r2, #1
 800c2f4:	601a      	str	r2, [r3, #0]
}
 800c2f6:	bf00      	nop
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	bc80      	pop	{r7}
 800c2fc:	4770      	bx	lr
 800c2fe:	bf00      	nop
 800c300:	2000107c 	.word	0x2000107c

0800c304 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c304:	b580      	push	{r7, lr}
 800c306:	b082      	sub	sp, #8
 800c308:	af00      	add	r7, sp, #0
 800c30a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c30c:	f000 f852 	bl	800c3b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c310:	4b06      	ldr	r3, [pc, #24]	; (800c32c <prvIdleTask+0x28>)
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	2b01      	cmp	r3, #1
 800c316:	d9f9      	bls.n	800c30c <prvIdleTask+0x8>
			{
				taskYIELD();
 800c318:	4b05      	ldr	r3, [pc, #20]	; (800c330 <prvIdleTask+0x2c>)
 800c31a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c31e:	601a      	str	r2, [r3, #0]
 800c320:	f3bf 8f4f 	dsb	sy
 800c324:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c328:	e7f0      	b.n	800c30c <prvIdleTask+0x8>
 800c32a:	bf00      	nop
 800c32c:	20000b98 	.word	0x20000b98
 800c330:	e000ed04 	.word	0xe000ed04

0800c334 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c334:	b580      	push	{r7, lr}
 800c336:	b082      	sub	sp, #8
 800c338:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c33a:	2300      	movs	r3, #0
 800c33c:	607b      	str	r3, [r7, #4]
 800c33e:	e00c      	b.n	800c35a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c340:	687a      	ldr	r2, [r7, #4]
 800c342:	4613      	mov	r3, r2
 800c344:	009b      	lsls	r3, r3, #2
 800c346:	4413      	add	r3, r2
 800c348:	009b      	lsls	r3, r3, #2
 800c34a:	4a12      	ldr	r2, [pc, #72]	; (800c394 <prvInitialiseTaskLists+0x60>)
 800c34c:	4413      	add	r3, r2
 800c34e:	4618      	mov	r0, r3
 800c350:	f7fe fd06 	bl	800ad60 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	3301      	adds	r3, #1
 800c358:	607b      	str	r3, [r7, #4]
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	2b37      	cmp	r3, #55	; 0x37
 800c35e:	d9ef      	bls.n	800c340 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c360:	480d      	ldr	r0, [pc, #52]	; (800c398 <prvInitialiseTaskLists+0x64>)
 800c362:	f7fe fcfd 	bl	800ad60 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c366:	480d      	ldr	r0, [pc, #52]	; (800c39c <prvInitialiseTaskLists+0x68>)
 800c368:	f7fe fcfa 	bl	800ad60 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c36c:	480c      	ldr	r0, [pc, #48]	; (800c3a0 <prvInitialiseTaskLists+0x6c>)
 800c36e:	f7fe fcf7 	bl	800ad60 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c372:	480c      	ldr	r0, [pc, #48]	; (800c3a4 <prvInitialiseTaskLists+0x70>)
 800c374:	f7fe fcf4 	bl	800ad60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c378:	480b      	ldr	r0, [pc, #44]	; (800c3a8 <prvInitialiseTaskLists+0x74>)
 800c37a:	f7fe fcf1 	bl	800ad60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c37e:	4b0b      	ldr	r3, [pc, #44]	; (800c3ac <prvInitialiseTaskLists+0x78>)
 800c380:	4a05      	ldr	r2, [pc, #20]	; (800c398 <prvInitialiseTaskLists+0x64>)
 800c382:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c384:	4b0a      	ldr	r3, [pc, #40]	; (800c3b0 <prvInitialiseTaskLists+0x7c>)
 800c386:	4a05      	ldr	r2, [pc, #20]	; (800c39c <prvInitialiseTaskLists+0x68>)
 800c388:	601a      	str	r2, [r3, #0]
}
 800c38a:	bf00      	nop
 800c38c:	3708      	adds	r7, #8
 800c38e:	46bd      	mov	sp, r7
 800c390:	bd80      	pop	{r7, pc}
 800c392:	bf00      	nop
 800c394:	20000b98 	.word	0x20000b98
 800c398:	20000ff8 	.word	0x20000ff8
 800c39c:	2000100c 	.word	0x2000100c
 800c3a0:	20001028 	.word	0x20001028
 800c3a4:	2000103c 	.word	0x2000103c
 800c3a8:	20001054 	.word	0x20001054
 800c3ac:	20001020 	.word	0x20001020
 800c3b0:	20001024 	.word	0x20001024

0800c3b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b082      	sub	sp, #8
 800c3b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c3ba:	e019      	b.n	800c3f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c3bc:	f000 fd5e 	bl	800ce7c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800c3c0:	4b10      	ldr	r3, [pc, #64]	; (800c404 <prvCheckTasksWaitingTermination+0x50>)
 800c3c2:	68db      	ldr	r3, [r3, #12]
 800c3c4:	68db      	ldr	r3, [r3, #12]
 800c3c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	3304      	adds	r3, #4
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	f7fe fd4d 	bl	800ae6c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c3d2:	4b0d      	ldr	r3, [pc, #52]	; (800c408 <prvCheckTasksWaitingTermination+0x54>)
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	3b01      	subs	r3, #1
 800c3d8:	4a0b      	ldr	r2, [pc, #44]	; (800c408 <prvCheckTasksWaitingTermination+0x54>)
 800c3da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c3dc:	4b0b      	ldr	r3, [pc, #44]	; (800c40c <prvCheckTasksWaitingTermination+0x58>)
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	3b01      	subs	r3, #1
 800c3e2:	4a0a      	ldr	r2, [pc, #40]	; (800c40c <prvCheckTasksWaitingTermination+0x58>)
 800c3e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c3e6:	f000 fd79 	bl	800cedc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c3ea:	6878      	ldr	r0, [r7, #4]
 800c3ec:	f000 f810 	bl	800c410 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c3f0:	4b06      	ldr	r3, [pc, #24]	; (800c40c <prvCheckTasksWaitingTermination+0x58>)
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d1e1      	bne.n	800c3bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c3f8:	bf00      	nop
 800c3fa:	bf00      	nop
 800c3fc:	3708      	adds	r7, #8
 800c3fe:	46bd      	mov	sp, r7
 800c400:	bd80      	pop	{r7, pc}
 800c402:	bf00      	nop
 800c404:	2000103c 	.word	0x2000103c
 800c408:	20001068 	.word	0x20001068
 800c40c:	20001050 	.word	0x20001050

0800c410 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c410:	b580      	push	{r7, lr}
 800c412:	b084      	sub	sp, #16
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d108      	bne.n	800c434 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c426:	4618      	mov	r0, r3
 800c428:	f000 feec 	bl	800d204 <vPortFree>
				vPortFree( pxTCB );
 800c42c:	6878      	ldr	r0, [r7, #4]
 800c42e:	f000 fee9 	bl	800d204 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c432:	e018      	b.n	800c466 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c43a:	2b01      	cmp	r3, #1
 800c43c:	d103      	bne.n	800c446 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c43e:	6878      	ldr	r0, [r7, #4]
 800c440:	f000 fee0 	bl	800d204 <vPortFree>
	}
 800c444:	e00f      	b.n	800c466 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c44c:	2b02      	cmp	r3, #2
 800c44e:	d00a      	beq.n	800c466 <prvDeleteTCB+0x56>
	__asm volatile
 800c450:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c454:	f383 8811 	msr	BASEPRI, r3
 800c458:	f3bf 8f6f 	isb	sy
 800c45c:	f3bf 8f4f 	dsb	sy
 800c460:	60fb      	str	r3, [r7, #12]
}
 800c462:	bf00      	nop
 800c464:	e7fe      	b.n	800c464 <prvDeleteTCB+0x54>
	}
 800c466:	bf00      	nop
 800c468:	3710      	adds	r7, #16
 800c46a:	46bd      	mov	sp, r7
 800c46c:	bd80      	pop	{r7, pc}
	...

0800c470 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c470:	b480      	push	{r7}
 800c472:	b083      	sub	sp, #12
 800c474:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c476:	4b0e      	ldr	r3, [pc, #56]	; (800c4b0 <prvResetNextTaskUnblockTime+0x40>)
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d101      	bne.n	800c484 <prvResetNextTaskUnblockTime+0x14>
 800c480:	2301      	movs	r3, #1
 800c482:	e000      	b.n	800c486 <prvResetNextTaskUnblockTime+0x16>
 800c484:	2300      	movs	r3, #0
 800c486:	2b00      	cmp	r3, #0
 800c488:	d004      	beq.n	800c494 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c48a:	4b0a      	ldr	r3, [pc, #40]	; (800c4b4 <prvResetNextTaskUnblockTime+0x44>)
 800c48c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c490:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c492:	e008      	b.n	800c4a6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800c494:	4b06      	ldr	r3, [pc, #24]	; (800c4b0 <prvResetNextTaskUnblockTime+0x40>)
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	68db      	ldr	r3, [r3, #12]
 800c49a:	68db      	ldr	r3, [r3, #12]
 800c49c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	685b      	ldr	r3, [r3, #4]
 800c4a2:	4a04      	ldr	r2, [pc, #16]	; (800c4b4 <prvResetNextTaskUnblockTime+0x44>)
 800c4a4:	6013      	str	r3, [r2, #0]
}
 800c4a6:	bf00      	nop
 800c4a8:	370c      	adds	r7, #12
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	bc80      	pop	{r7}
 800c4ae:	4770      	bx	lr
 800c4b0:	20001020 	.word	0x20001020
 800c4b4:	20001088 	.word	0x20001088

0800c4b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c4b8:	b480      	push	{r7}
 800c4ba:	b083      	sub	sp, #12
 800c4bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c4be:	4b0b      	ldr	r3, [pc, #44]	; (800c4ec <xTaskGetSchedulerState+0x34>)
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d102      	bne.n	800c4cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c4c6:	2301      	movs	r3, #1
 800c4c8:	607b      	str	r3, [r7, #4]
 800c4ca:	e008      	b.n	800c4de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c4cc:	4b08      	ldr	r3, [pc, #32]	; (800c4f0 <xTaskGetSchedulerState+0x38>)
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d102      	bne.n	800c4da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c4d4:	2302      	movs	r3, #2
 800c4d6:	607b      	str	r3, [r7, #4]
 800c4d8:	e001      	b.n	800c4de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c4da:	2300      	movs	r3, #0
 800c4dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c4de:	687b      	ldr	r3, [r7, #4]
	}
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	370c      	adds	r7, #12
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	bc80      	pop	{r7}
 800c4e8:	4770      	bx	lr
 800c4ea:	bf00      	nop
 800c4ec:	20001074 	.word	0x20001074
 800c4f0:	20001090 	.word	0x20001090

0800c4f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	b086      	sub	sp, #24
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c500:	2300      	movs	r3, #0
 800c502:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d056      	beq.n	800c5b8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c50a:	4b2e      	ldr	r3, [pc, #184]	; (800c5c4 <xTaskPriorityDisinherit+0xd0>)
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	693a      	ldr	r2, [r7, #16]
 800c510:	429a      	cmp	r2, r3
 800c512:	d00a      	beq.n	800c52a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c514:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c518:	f383 8811 	msr	BASEPRI, r3
 800c51c:	f3bf 8f6f 	isb	sy
 800c520:	f3bf 8f4f 	dsb	sy
 800c524:	60fb      	str	r3, [r7, #12]
}
 800c526:	bf00      	nop
 800c528:	e7fe      	b.n	800c528 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c52a:	693b      	ldr	r3, [r7, #16]
 800c52c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d10a      	bne.n	800c548 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c532:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c536:	f383 8811 	msr	BASEPRI, r3
 800c53a:	f3bf 8f6f 	isb	sy
 800c53e:	f3bf 8f4f 	dsb	sy
 800c542:	60bb      	str	r3, [r7, #8]
}
 800c544:	bf00      	nop
 800c546:	e7fe      	b.n	800c546 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c548:	693b      	ldr	r3, [r7, #16]
 800c54a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c54c:	1e5a      	subs	r2, r3, #1
 800c54e:	693b      	ldr	r3, [r7, #16]
 800c550:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c552:	693b      	ldr	r3, [r7, #16]
 800c554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c556:	693b      	ldr	r3, [r7, #16]
 800c558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c55a:	429a      	cmp	r2, r3
 800c55c:	d02c      	beq.n	800c5b8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c55e:	693b      	ldr	r3, [r7, #16]
 800c560:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c562:	2b00      	cmp	r3, #0
 800c564:	d128      	bne.n	800c5b8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c566:	693b      	ldr	r3, [r7, #16]
 800c568:	3304      	adds	r3, #4
 800c56a:	4618      	mov	r0, r3
 800c56c:	f7fe fc7e 	bl	800ae6c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c570:	693b      	ldr	r3, [r7, #16]
 800c572:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c574:	693b      	ldr	r3, [r7, #16]
 800c576:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c578:	693b      	ldr	r3, [r7, #16]
 800c57a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c57c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c580:	693b      	ldr	r3, [r7, #16]
 800c582:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c584:	693b      	ldr	r3, [r7, #16]
 800c586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c588:	4b0f      	ldr	r3, [pc, #60]	; (800c5c8 <xTaskPriorityDisinherit+0xd4>)
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	429a      	cmp	r2, r3
 800c58e:	d903      	bls.n	800c598 <xTaskPriorityDisinherit+0xa4>
 800c590:	693b      	ldr	r3, [r7, #16]
 800c592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c594:	4a0c      	ldr	r2, [pc, #48]	; (800c5c8 <xTaskPriorityDisinherit+0xd4>)
 800c596:	6013      	str	r3, [r2, #0]
 800c598:	693b      	ldr	r3, [r7, #16]
 800c59a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c59c:	4613      	mov	r3, r2
 800c59e:	009b      	lsls	r3, r3, #2
 800c5a0:	4413      	add	r3, r2
 800c5a2:	009b      	lsls	r3, r3, #2
 800c5a4:	4a09      	ldr	r2, [pc, #36]	; (800c5cc <xTaskPriorityDisinherit+0xd8>)
 800c5a6:	441a      	add	r2, r3
 800c5a8:	693b      	ldr	r3, [r7, #16]
 800c5aa:	3304      	adds	r3, #4
 800c5ac:	4619      	mov	r1, r3
 800c5ae:	4610      	mov	r0, r2
 800c5b0:	f7fe fc01 	bl	800adb6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c5b4:	2301      	movs	r3, #1
 800c5b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c5b8:	697b      	ldr	r3, [r7, #20]
	}
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	3718      	adds	r7, #24
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	bd80      	pop	{r7, pc}
 800c5c2:	bf00      	nop
 800c5c4:	20000b94 	.word	0x20000b94
 800c5c8:	20001070 	.word	0x20001070
 800c5cc:	20000b98 	.word	0x20000b98

0800c5d0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b084      	sub	sp, #16
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
 800c5d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c5da:	4b21      	ldr	r3, [pc, #132]	; (800c660 <prvAddCurrentTaskToDelayedList+0x90>)
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c5e0:	4b20      	ldr	r3, [pc, #128]	; (800c664 <prvAddCurrentTaskToDelayedList+0x94>)
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	3304      	adds	r3, #4
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	f7fe fc40 	bl	800ae6c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c5f2:	d10a      	bne.n	800c60a <prvAddCurrentTaskToDelayedList+0x3a>
 800c5f4:	683b      	ldr	r3, [r7, #0]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d007      	beq.n	800c60a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c5fa:	4b1a      	ldr	r3, [pc, #104]	; (800c664 <prvAddCurrentTaskToDelayedList+0x94>)
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	3304      	adds	r3, #4
 800c600:	4619      	mov	r1, r3
 800c602:	4819      	ldr	r0, [pc, #100]	; (800c668 <prvAddCurrentTaskToDelayedList+0x98>)
 800c604:	f7fe fbd7 	bl	800adb6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c608:	e026      	b.n	800c658 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c60a:	68fa      	ldr	r2, [r7, #12]
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	4413      	add	r3, r2
 800c610:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c612:	4b14      	ldr	r3, [pc, #80]	; (800c664 <prvAddCurrentTaskToDelayedList+0x94>)
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	68ba      	ldr	r2, [r7, #8]
 800c618:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c61a:	68ba      	ldr	r2, [r7, #8]
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	429a      	cmp	r2, r3
 800c620:	d209      	bcs.n	800c636 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c622:	4b12      	ldr	r3, [pc, #72]	; (800c66c <prvAddCurrentTaskToDelayedList+0x9c>)
 800c624:	681a      	ldr	r2, [r3, #0]
 800c626:	4b0f      	ldr	r3, [pc, #60]	; (800c664 <prvAddCurrentTaskToDelayedList+0x94>)
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	3304      	adds	r3, #4
 800c62c:	4619      	mov	r1, r3
 800c62e:	4610      	mov	r0, r2
 800c630:	f7fe fbe4 	bl	800adfc <vListInsert>
}
 800c634:	e010      	b.n	800c658 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c636:	4b0e      	ldr	r3, [pc, #56]	; (800c670 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c638:	681a      	ldr	r2, [r3, #0]
 800c63a:	4b0a      	ldr	r3, [pc, #40]	; (800c664 <prvAddCurrentTaskToDelayedList+0x94>)
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	3304      	adds	r3, #4
 800c640:	4619      	mov	r1, r3
 800c642:	4610      	mov	r0, r2
 800c644:	f7fe fbda 	bl	800adfc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c648:	4b0a      	ldr	r3, [pc, #40]	; (800c674 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	68ba      	ldr	r2, [r7, #8]
 800c64e:	429a      	cmp	r2, r3
 800c650:	d202      	bcs.n	800c658 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c652:	4a08      	ldr	r2, [pc, #32]	; (800c674 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c654:	68bb      	ldr	r3, [r7, #8]
 800c656:	6013      	str	r3, [r2, #0]
}
 800c658:	bf00      	nop
 800c65a:	3710      	adds	r7, #16
 800c65c:	46bd      	mov	sp, r7
 800c65e:	bd80      	pop	{r7, pc}
 800c660:	2000106c 	.word	0x2000106c
 800c664:	20000b94 	.word	0x20000b94
 800c668:	20001054 	.word	0x20001054
 800c66c:	20001024 	.word	0x20001024
 800c670:	20001020 	.word	0x20001020
 800c674:	20001088 	.word	0x20001088

0800c678 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	b08a      	sub	sp, #40	; 0x28
 800c67c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c67e:	2300      	movs	r3, #0
 800c680:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c682:	f000 facb 	bl	800cc1c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c686:	4b1c      	ldr	r3, [pc, #112]	; (800c6f8 <xTimerCreateTimerTask+0x80>)
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d021      	beq.n	800c6d2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c68e:	2300      	movs	r3, #0
 800c690:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c692:	2300      	movs	r3, #0
 800c694:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c696:	1d3a      	adds	r2, r7, #4
 800c698:	f107 0108 	add.w	r1, r7, #8
 800c69c:	f107 030c 	add.w	r3, r7, #12
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	f7fe fb43 	bl	800ad2c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c6a6:	6879      	ldr	r1, [r7, #4]
 800c6a8:	68bb      	ldr	r3, [r7, #8]
 800c6aa:	68fa      	ldr	r2, [r7, #12]
 800c6ac:	9202      	str	r2, [sp, #8]
 800c6ae:	9301      	str	r3, [sp, #4]
 800c6b0:	2302      	movs	r3, #2
 800c6b2:	9300      	str	r3, [sp, #0]
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	460a      	mov	r2, r1
 800c6b8:	4910      	ldr	r1, [pc, #64]	; (800c6fc <xTimerCreateTimerTask+0x84>)
 800c6ba:	4811      	ldr	r0, [pc, #68]	; (800c700 <xTimerCreateTimerTask+0x88>)
 800c6bc:	f7ff f8e4 	bl	800b888 <xTaskCreateStatic>
 800c6c0:	4603      	mov	r3, r0
 800c6c2:	4a10      	ldr	r2, [pc, #64]	; (800c704 <xTimerCreateTimerTask+0x8c>)
 800c6c4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c6c6:	4b0f      	ldr	r3, [pc, #60]	; (800c704 <xTimerCreateTimerTask+0x8c>)
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d001      	beq.n	800c6d2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c6ce:	2301      	movs	r3, #1
 800c6d0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c6d2:	697b      	ldr	r3, [r7, #20]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d10a      	bne.n	800c6ee <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c6d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6dc:	f383 8811 	msr	BASEPRI, r3
 800c6e0:	f3bf 8f6f 	isb	sy
 800c6e4:	f3bf 8f4f 	dsb	sy
 800c6e8:	613b      	str	r3, [r7, #16]
}
 800c6ea:	bf00      	nop
 800c6ec:	e7fe      	b.n	800c6ec <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c6ee:	697b      	ldr	r3, [r7, #20]
}
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	3718      	adds	r7, #24
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	bd80      	pop	{r7, pc}
 800c6f8:	200010c4 	.word	0x200010c4
 800c6fc:	0800e21c 	.word	0x0800e21c
 800c700:	0800c825 	.word	0x0800c825
 800c704:	200010c8 	.word	0x200010c8

0800c708 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b08a      	sub	sp, #40	; 0x28
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	60f8      	str	r0, [r7, #12]
 800c710:	60b9      	str	r1, [r7, #8]
 800c712:	607a      	str	r2, [r7, #4]
 800c714:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c716:	2300      	movs	r3, #0
 800c718:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d10a      	bne.n	800c736 <xTimerGenericCommand+0x2e>
	__asm volatile
 800c720:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c724:	f383 8811 	msr	BASEPRI, r3
 800c728:	f3bf 8f6f 	isb	sy
 800c72c:	f3bf 8f4f 	dsb	sy
 800c730:	623b      	str	r3, [r7, #32]
}
 800c732:	bf00      	nop
 800c734:	e7fe      	b.n	800c734 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c736:	4b1a      	ldr	r3, [pc, #104]	; (800c7a0 <xTimerGenericCommand+0x98>)
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d02a      	beq.n	800c794 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c73e:	68bb      	ldr	r3, [r7, #8]
 800c740:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c74a:	68bb      	ldr	r3, [r7, #8]
 800c74c:	2b05      	cmp	r3, #5
 800c74e:	dc18      	bgt.n	800c782 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c750:	f7ff feb2 	bl	800c4b8 <xTaskGetSchedulerState>
 800c754:	4603      	mov	r3, r0
 800c756:	2b02      	cmp	r3, #2
 800c758:	d109      	bne.n	800c76e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c75a:	4b11      	ldr	r3, [pc, #68]	; (800c7a0 <xTimerGenericCommand+0x98>)
 800c75c:	6818      	ldr	r0, [r3, #0]
 800c75e:	f107 0110 	add.w	r1, r7, #16
 800c762:	2300      	movs	r3, #0
 800c764:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c766:	f7fe fcad 	bl	800b0c4 <xQueueGenericSend>
 800c76a:	6278      	str	r0, [r7, #36]	; 0x24
 800c76c:	e012      	b.n	800c794 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c76e:	4b0c      	ldr	r3, [pc, #48]	; (800c7a0 <xTimerGenericCommand+0x98>)
 800c770:	6818      	ldr	r0, [r3, #0]
 800c772:	f107 0110 	add.w	r1, r7, #16
 800c776:	2300      	movs	r3, #0
 800c778:	2200      	movs	r2, #0
 800c77a:	f7fe fca3 	bl	800b0c4 <xQueueGenericSend>
 800c77e:	6278      	str	r0, [r7, #36]	; 0x24
 800c780:	e008      	b.n	800c794 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c782:	4b07      	ldr	r3, [pc, #28]	; (800c7a0 <xTimerGenericCommand+0x98>)
 800c784:	6818      	ldr	r0, [r3, #0]
 800c786:	f107 0110 	add.w	r1, r7, #16
 800c78a:	2300      	movs	r3, #0
 800c78c:	683a      	ldr	r2, [r7, #0]
 800c78e:	f7fe fd97 	bl	800b2c0 <xQueueGenericSendFromISR>
 800c792:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c796:	4618      	mov	r0, r3
 800c798:	3728      	adds	r7, #40	; 0x28
 800c79a:	46bd      	mov	sp, r7
 800c79c:	bd80      	pop	{r7, pc}
 800c79e:	bf00      	nop
 800c7a0:	200010c4 	.word	0x200010c4

0800c7a4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b088      	sub	sp, #32
 800c7a8:	af02      	add	r7, sp, #8
 800c7aa:	6078      	str	r0, [r7, #4]
 800c7ac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c7ae:	4b1c      	ldr	r3, [pc, #112]	; (800c820 <prvProcessExpiredTimer+0x7c>)
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	68db      	ldr	r3, [r3, #12]
 800c7b4:	68db      	ldr	r3, [r3, #12]
 800c7b6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c7b8:	697b      	ldr	r3, [r7, #20]
 800c7ba:	3304      	adds	r3, #4
 800c7bc:	4618      	mov	r0, r3
 800c7be:	f7fe fb55 	bl	800ae6c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c7c2:	697b      	ldr	r3, [r7, #20]
 800c7c4:	69db      	ldr	r3, [r3, #28]
 800c7c6:	2b01      	cmp	r3, #1
 800c7c8:	d122      	bne.n	800c810 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c7ca:	697b      	ldr	r3, [r7, #20]
 800c7cc:	699a      	ldr	r2, [r3, #24]
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	18d1      	adds	r1, r2, r3
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	683a      	ldr	r2, [r7, #0]
 800c7d6:	6978      	ldr	r0, [r7, #20]
 800c7d8:	f000 f8c8 	bl	800c96c <prvInsertTimerInActiveList>
 800c7dc:	4603      	mov	r3, r0
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d016      	beq.n	800c810 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	9300      	str	r3, [sp, #0]
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	687a      	ldr	r2, [r7, #4]
 800c7ea:	2100      	movs	r1, #0
 800c7ec:	6978      	ldr	r0, [r7, #20]
 800c7ee:	f7ff ff8b 	bl	800c708 <xTimerGenericCommand>
 800c7f2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c7f4:	693b      	ldr	r3, [r7, #16]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d10a      	bne.n	800c810 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800c7fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7fe:	f383 8811 	msr	BASEPRI, r3
 800c802:	f3bf 8f6f 	isb	sy
 800c806:	f3bf 8f4f 	dsb	sy
 800c80a:	60fb      	str	r3, [r7, #12]
}
 800c80c:	bf00      	nop
 800c80e:	e7fe      	b.n	800c80e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c810:	697b      	ldr	r3, [r7, #20]
 800c812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c814:	6978      	ldr	r0, [r7, #20]
 800c816:	4798      	blx	r3
}
 800c818:	bf00      	nop
 800c81a:	3718      	adds	r7, #24
 800c81c:	46bd      	mov	sp, r7
 800c81e:	bd80      	pop	{r7, pc}
 800c820:	200010bc 	.word	0x200010bc

0800c824 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800c824:	b580      	push	{r7, lr}
 800c826:	b084      	sub	sp, #16
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c82c:	f107 0308 	add.w	r3, r7, #8
 800c830:	4618      	mov	r0, r3
 800c832:	f000 f857 	bl	800c8e4 <prvGetNextExpireTime>
 800c836:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c838:	68bb      	ldr	r3, [r7, #8]
 800c83a:	4619      	mov	r1, r3
 800c83c:	68f8      	ldr	r0, [r7, #12]
 800c83e:	f000 f803 	bl	800c848 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c842:	f000 f8d5 	bl	800c9f0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c846:	e7f1      	b.n	800c82c <prvTimerTask+0x8>

0800c848 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	b084      	sub	sp, #16
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
 800c850:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c852:	f7ff fa4b 	bl	800bcec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c856:	f107 0308 	add.w	r3, r7, #8
 800c85a:	4618      	mov	r0, r3
 800c85c:	f000 f866 	bl	800c92c <prvSampleTimeNow>
 800c860:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c862:	68bb      	ldr	r3, [r7, #8]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d130      	bne.n	800c8ca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c868:	683b      	ldr	r3, [r7, #0]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d10a      	bne.n	800c884 <prvProcessTimerOrBlockTask+0x3c>
 800c86e:	687a      	ldr	r2, [r7, #4]
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	429a      	cmp	r2, r3
 800c874:	d806      	bhi.n	800c884 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c876:	f7ff fa47 	bl	800bd08 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c87a:	68f9      	ldr	r1, [r7, #12]
 800c87c:	6878      	ldr	r0, [r7, #4]
 800c87e:	f7ff ff91 	bl	800c7a4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c882:	e024      	b.n	800c8ce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c884:	683b      	ldr	r3, [r7, #0]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d008      	beq.n	800c89c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c88a:	4b13      	ldr	r3, [pc, #76]	; (800c8d8 <prvProcessTimerOrBlockTask+0x90>)
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	2b00      	cmp	r3, #0
 800c892:	bf0c      	ite	eq
 800c894:	2301      	moveq	r3, #1
 800c896:	2300      	movne	r3, #0
 800c898:	b2db      	uxtb	r3, r3
 800c89a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c89c:	4b0f      	ldr	r3, [pc, #60]	; (800c8dc <prvProcessTimerOrBlockTask+0x94>)
 800c89e:	6818      	ldr	r0, [r3, #0]
 800c8a0:	687a      	ldr	r2, [r7, #4]
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	1ad3      	subs	r3, r2, r3
 800c8a6:	683a      	ldr	r2, [r7, #0]
 800c8a8:	4619      	mov	r1, r3
 800c8aa:	f7fe ffb9 	bl	800b820 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c8ae:	f7ff fa2b 	bl	800bd08 <xTaskResumeAll>
 800c8b2:	4603      	mov	r3, r0
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d10a      	bne.n	800c8ce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c8b8:	4b09      	ldr	r3, [pc, #36]	; (800c8e0 <prvProcessTimerOrBlockTask+0x98>)
 800c8ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8be:	601a      	str	r2, [r3, #0]
 800c8c0:	f3bf 8f4f 	dsb	sy
 800c8c4:	f3bf 8f6f 	isb	sy
}
 800c8c8:	e001      	b.n	800c8ce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c8ca:	f7ff fa1d 	bl	800bd08 <xTaskResumeAll>
}
 800c8ce:	bf00      	nop
 800c8d0:	3710      	adds	r7, #16
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	bd80      	pop	{r7, pc}
 800c8d6:	bf00      	nop
 800c8d8:	200010c0 	.word	0x200010c0
 800c8dc:	200010c4 	.word	0x200010c4
 800c8e0:	e000ed04 	.word	0xe000ed04

0800c8e4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c8e4:	b480      	push	{r7}
 800c8e6:	b085      	sub	sp, #20
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c8ec:	4b0e      	ldr	r3, [pc, #56]	; (800c928 <prvGetNextExpireTime+0x44>)
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	bf0c      	ite	eq
 800c8f6:	2301      	moveq	r3, #1
 800c8f8:	2300      	movne	r3, #0
 800c8fa:	b2db      	uxtb	r3, r3
 800c8fc:	461a      	mov	r2, r3
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d105      	bne.n	800c916 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c90a:	4b07      	ldr	r3, [pc, #28]	; (800c928 <prvGetNextExpireTime+0x44>)
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	68db      	ldr	r3, [r3, #12]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	60fb      	str	r3, [r7, #12]
 800c914:	e001      	b.n	800c91a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c916:	2300      	movs	r3, #0
 800c918:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c91a:	68fb      	ldr	r3, [r7, #12]
}
 800c91c:	4618      	mov	r0, r3
 800c91e:	3714      	adds	r7, #20
 800c920:	46bd      	mov	sp, r7
 800c922:	bc80      	pop	{r7}
 800c924:	4770      	bx	lr
 800c926:	bf00      	nop
 800c928:	200010bc 	.word	0x200010bc

0800c92c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b084      	sub	sp, #16
 800c930:	af00      	add	r7, sp, #0
 800c932:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c934:	f7ff fa86 	bl	800be44 <xTaskGetTickCount>
 800c938:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c93a:	4b0b      	ldr	r3, [pc, #44]	; (800c968 <prvSampleTimeNow+0x3c>)
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	68fa      	ldr	r2, [r7, #12]
 800c940:	429a      	cmp	r2, r3
 800c942:	d205      	bcs.n	800c950 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c944:	f000 f908 	bl	800cb58 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	2201      	movs	r2, #1
 800c94c:	601a      	str	r2, [r3, #0]
 800c94e:	e002      	b.n	800c956 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	2200      	movs	r2, #0
 800c954:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c956:	4a04      	ldr	r2, [pc, #16]	; (800c968 <prvSampleTimeNow+0x3c>)
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c95c:	68fb      	ldr	r3, [r7, #12]
}
 800c95e:	4618      	mov	r0, r3
 800c960:	3710      	adds	r7, #16
 800c962:	46bd      	mov	sp, r7
 800c964:	bd80      	pop	{r7, pc}
 800c966:	bf00      	nop
 800c968:	200010cc 	.word	0x200010cc

0800c96c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b086      	sub	sp, #24
 800c970:	af00      	add	r7, sp, #0
 800c972:	60f8      	str	r0, [r7, #12]
 800c974:	60b9      	str	r1, [r7, #8]
 800c976:	607a      	str	r2, [r7, #4]
 800c978:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c97a:	2300      	movs	r3, #0
 800c97c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	68ba      	ldr	r2, [r7, #8]
 800c982:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	68fa      	ldr	r2, [r7, #12]
 800c988:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c98a:	68ba      	ldr	r2, [r7, #8]
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	429a      	cmp	r2, r3
 800c990:	d812      	bhi.n	800c9b8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c992:	687a      	ldr	r2, [r7, #4]
 800c994:	683b      	ldr	r3, [r7, #0]
 800c996:	1ad2      	subs	r2, r2, r3
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	699b      	ldr	r3, [r3, #24]
 800c99c:	429a      	cmp	r2, r3
 800c99e:	d302      	bcc.n	800c9a6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c9a0:	2301      	movs	r3, #1
 800c9a2:	617b      	str	r3, [r7, #20]
 800c9a4:	e01b      	b.n	800c9de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c9a6:	4b10      	ldr	r3, [pc, #64]	; (800c9e8 <prvInsertTimerInActiveList+0x7c>)
 800c9a8:	681a      	ldr	r2, [r3, #0]
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	3304      	adds	r3, #4
 800c9ae:	4619      	mov	r1, r3
 800c9b0:	4610      	mov	r0, r2
 800c9b2:	f7fe fa23 	bl	800adfc <vListInsert>
 800c9b6:	e012      	b.n	800c9de <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c9b8:	687a      	ldr	r2, [r7, #4]
 800c9ba:	683b      	ldr	r3, [r7, #0]
 800c9bc:	429a      	cmp	r2, r3
 800c9be:	d206      	bcs.n	800c9ce <prvInsertTimerInActiveList+0x62>
 800c9c0:	68ba      	ldr	r2, [r7, #8]
 800c9c2:	683b      	ldr	r3, [r7, #0]
 800c9c4:	429a      	cmp	r2, r3
 800c9c6:	d302      	bcc.n	800c9ce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c9c8:	2301      	movs	r3, #1
 800c9ca:	617b      	str	r3, [r7, #20]
 800c9cc:	e007      	b.n	800c9de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c9ce:	4b07      	ldr	r3, [pc, #28]	; (800c9ec <prvInsertTimerInActiveList+0x80>)
 800c9d0:	681a      	ldr	r2, [r3, #0]
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	3304      	adds	r3, #4
 800c9d6:	4619      	mov	r1, r3
 800c9d8:	4610      	mov	r0, r2
 800c9da:	f7fe fa0f 	bl	800adfc <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c9de:	697b      	ldr	r3, [r7, #20]
}
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	3718      	adds	r7, #24
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	bd80      	pop	{r7, pc}
 800c9e8:	200010c0 	.word	0x200010c0
 800c9ec:	200010bc 	.word	0x200010bc

0800c9f0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b08e      	sub	sp, #56	; 0x38
 800c9f4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c9f6:	e09d      	b.n	800cb34 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	da18      	bge.n	800ca30 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c9fe:	1d3b      	adds	r3, r7, #4
 800ca00:	3304      	adds	r3, #4
 800ca02:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ca04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d10a      	bne.n	800ca20 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ca0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca0e:	f383 8811 	msr	BASEPRI, r3
 800ca12:	f3bf 8f6f 	isb	sy
 800ca16:	f3bf 8f4f 	dsb	sy
 800ca1a:	61fb      	str	r3, [r7, #28]
}
 800ca1c:	bf00      	nop
 800ca1e:	e7fe      	b.n	800ca1e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ca20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca26:	6850      	ldr	r0, [r2, #4]
 800ca28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca2a:	6892      	ldr	r2, [r2, #8]
 800ca2c:	4611      	mov	r1, r2
 800ca2e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	db7d      	blt.n	800cb32 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ca3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca3c:	695b      	ldr	r3, [r3, #20]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d004      	beq.n	800ca4c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ca42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca44:	3304      	adds	r3, #4
 800ca46:	4618      	mov	r0, r3
 800ca48:	f7fe fa10 	bl	800ae6c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ca4c:	463b      	mov	r3, r7
 800ca4e:	4618      	mov	r0, r3
 800ca50:	f7ff ff6c 	bl	800c92c <prvSampleTimeNow>
 800ca54:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	2b09      	cmp	r3, #9
 800ca5a:	d86b      	bhi.n	800cb34 <prvProcessReceivedCommands+0x144>
 800ca5c:	a201      	add	r2, pc, #4	; (adr r2, 800ca64 <prvProcessReceivedCommands+0x74>)
 800ca5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca62:	bf00      	nop
 800ca64:	0800ca8d 	.word	0x0800ca8d
 800ca68:	0800ca8d 	.word	0x0800ca8d
 800ca6c:	0800ca8d 	.word	0x0800ca8d
 800ca70:	0800cb35 	.word	0x0800cb35
 800ca74:	0800cae9 	.word	0x0800cae9
 800ca78:	0800cb21 	.word	0x0800cb21
 800ca7c:	0800ca8d 	.word	0x0800ca8d
 800ca80:	0800ca8d 	.word	0x0800ca8d
 800ca84:	0800cb35 	.word	0x0800cb35
 800ca88:	0800cae9 	.word	0x0800cae9
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ca8c:	68ba      	ldr	r2, [r7, #8]
 800ca8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca90:	699b      	ldr	r3, [r3, #24]
 800ca92:	18d1      	adds	r1, r2, r3
 800ca94:	68bb      	ldr	r3, [r7, #8]
 800ca96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca9a:	f7ff ff67 	bl	800c96c <prvInsertTimerInActiveList>
 800ca9e:	4603      	mov	r3, r0
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d047      	beq.n	800cb34 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800caa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caa8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800caaa:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800caac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caae:	69db      	ldr	r3, [r3, #28]
 800cab0:	2b01      	cmp	r3, #1
 800cab2:	d13f      	bne.n	800cb34 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800cab4:	68ba      	ldr	r2, [r7, #8]
 800cab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cab8:	699b      	ldr	r3, [r3, #24]
 800caba:	441a      	add	r2, r3
 800cabc:	2300      	movs	r3, #0
 800cabe:	9300      	str	r3, [sp, #0]
 800cac0:	2300      	movs	r3, #0
 800cac2:	2100      	movs	r1, #0
 800cac4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cac6:	f7ff fe1f 	bl	800c708 <xTimerGenericCommand>
 800caca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800cacc:	6a3b      	ldr	r3, [r7, #32]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d130      	bne.n	800cb34 <prvProcessReceivedCommands+0x144>
	__asm volatile
 800cad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cad6:	f383 8811 	msr	BASEPRI, r3
 800cada:	f3bf 8f6f 	isb	sy
 800cade:	f3bf 8f4f 	dsb	sy
 800cae2:	61bb      	str	r3, [r7, #24]
}
 800cae4:	bf00      	nop
 800cae6:	e7fe      	b.n	800cae6 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800cae8:	68ba      	ldr	r2, [r7, #8]
 800caea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caec:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800caee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caf0:	699b      	ldr	r3, [r3, #24]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d10a      	bne.n	800cb0c <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800caf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cafa:	f383 8811 	msr	BASEPRI, r3
 800cafe:	f3bf 8f6f 	isb	sy
 800cb02:	f3bf 8f4f 	dsb	sy
 800cb06:	617b      	str	r3, [r7, #20]
}
 800cb08:	bf00      	nop
 800cb0a:	e7fe      	b.n	800cb0a <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800cb0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb0e:	699a      	ldr	r2, [r3, #24]
 800cb10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb12:	18d1      	adds	r1, r2, r3
 800cb14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb1a:	f7ff ff27 	bl	800c96c <prvInsertTimerInActiveList>
					break;
 800cb1e:	e009      	b.n	800cb34 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800cb20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb22:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d104      	bne.n	800cb34 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800cb2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb2c:	f000 fb6a 	bl	800d204 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800cb30:	e000      	b.n	800cb34 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800cb32:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cb34:	4b07      	ldr	r3, [pc, #28]	; (800cb54 <prvProcessReceivedCommands+0x164>)
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	1d39      	adds	r1, r7, #4
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	f7fe fc57 	bl	800b3f0 <xQueueReceive>
 800cb42:	4603      	mov	r3, r0
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	f47f af57 	bne.w	800c9f8 <prvProcessReceivedCommands+0x8>
	}
}
 800cb4a:	bf00      	nop
 800cb4c:	bf00      	nop
 800cb4e:	3730      	adds	r7, #48	; 0x30
 800cb50:	46bd      	mov	sp, r7
 800cb52:	bd80      	pop	{r7, pc}
 800cb54:	200010c4 	.word	0x200010c4

0800cb58 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cb58:	b580      	push	{r7, lr}
 800cb5a:	b088      	sub	sp, #32
 800cb5c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cb5e:	e045      	b.n	800cbec <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cb60:	4b2c      	ldr	r3, [pc, #176]	; (800cc14 <prvSwitchTimerLists+0xbc>)
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	68db      	ldr	r3, [r3, #12]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cb6a:	4b2a      	ldr	r3, [pc, #168]	; (800cc14 <prvSwitchTimerLists+0xbc>)
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	68db      	ldr	r3, [r3, #12]
 800cb70:	68db      	ldr	r3, [r3, #12]
 800cb72:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	3304      	adds	r3, #4
 800cb78:	4618      	mov	r0, r3
 800cb7a:	f7fe f977 	bl	800ae6c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb82:	68f8      	ldr	r0, [r7, #12]
 800cb84:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	69db      	ldr	r3, [r3, #28]
 800cb8a:	2b01      	cmp	r3, #1
 800cb8c:	d12e      	bne.n	800cbec <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	699b      	ldr	r3, [r3, #24]
 800cb92:	693a      	ldr	r2, [r7, #16]
 800cb94:	4413      	add	r3, r2
 800cb96:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cb98:	68ba      	ldr	r2, [r7, #8]
 800cb9a:	693b      	ldr	r3, [r7, #16]
 800cb9c:	429a      	cmp	r2, r3
 800cb9e:	d90e      	bls.n	800cbbe <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	68ba      	ldr	r2, [r7, #8]
 800cba4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	68fa      	ldr	r2, [r7, #12]
 800cbaa:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cbac:	4b19      	ldr	r3, [pc, #100]	; (800cc14 <prvSwitchTimerLists+0xbc>)
 800cbae:	681a      	ldr	r2, [r3, #0]
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	3304      	adds	r3, #4
 800cbb4:	4619      	mov	r1, r3
 800cbb6:	4610      	mov	r0, r2
 800cbb8:	f7fe f920 	bl	800adfc <vListInsert>
 800cbbc:	e016      	b.n	800cbec <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	9300      	str	r3, [sp, #0]
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	693a      	ldr	r2, [r7, #16]
 800cbc6:	2100      	movs	r1, #0
 800cbc8:	68f8      	ldr	r0, [r7, #12]
 800cbca:	f7ff fd9d 	bl	800c708 <xTimerGenericCommand>
 800cbce:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d10a      	bne.n	800cbec <prvSwitchTimerLists+0x94>
	__asm volatile
 800cbd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbda:	f383 8811 	msr	BASEPRI, r3
 800cbde:	f3bf 8f6f 	isb	sy
 800cbe2:	f3bf 8f4f 	dsb	sy
 800cbe6:	603b      	str	r3, [r7, #0]
}
 800cbe8:	bf00      	nop
 800cbea:	e7fe      	b.n	800cbea <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cbec:	4b09      	ldr	r3, [pc, #36]	; (800cc14 <prvSwitchTimerLists+0xbc>)
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d1b4      	bne.n	800cb60 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800cbf6:	4b07      	ldr	r3, [pc, #28]	; (800cc14 <prvSwitchTimerLists+0xbc>)
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800cbfc:	4b06      	ldr	r3, [pc, #24]	; (800cc18 <prvSwitchTimerLists+0xc0>)
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	4a04      	ldr	r2, [pc, #16]	; (800cc14 <prvSwitchTimerLists+0xbc>)
 800cc02:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800cc04:	4a04      	ldr	r2, [pc, #16]	; (800cc18 <prvSwitchTimerLists+0xc0>)
 800cc06:	697b      	ldr	r3, [r7, #20]
 800cc08:	6013      	str	r3, [r2, #0]
}
 800cc0a:	bf00      	nop
 800cc0c:	3718      	adds	r7, #24
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	bd80      	pop	{r7, pc}
 800cc12:	bf00      	nop
 800cc14:	200010bc 	.word	0x200010bc
 800cc18:	200010c0 	.word	0x200010c0

0800cc1c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	b082      	sub	sp, #8
 800cc20:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800cc22:	f000 f92b 	bl	800ce7c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cc26:	4b15      	ldr	r3, [pc, #84]	; (800cc7c <prvCheckForValidListAndQueue+0x60>)
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d120      	bne.n	800cc70 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800cc2e:	4814      	ldr	r0, [pc, #80]	; (800cc80 <prvCheckForValidListAndQueue+0x64>)
 800cc30:	f7fe f896 	bl	800ad60 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cc34:	4813      	ldr	r0, [pc, #76]	; (800cc84 <prvCheckForValidListAndQueue+0x68>)
 800cc36:	f7fe f893 	bl	800ad60 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cc3a:	4b13      	ldr	r3, [pc, #76]	; (800cc88 <prvCheckForValidListAndQueue+0x6c>)
 800cc3c:	4a10      	ldr	r2, [pc, #64]	; (800cc80 <prvCheckForValidListAndQueue+0x64>)
 800cc3e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cc40:	4b12      	ldr	r3, [pc, #72]	; (800cc8c <prvCheckForValidListAndQueue+0x70>)
 800cc42:	4a10      	ldr	r2, [pc, #64]	; (800cc84 <prvCheckForValidListAndQueue+0x68>)
 800cc44:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800cc46:	2300      	movs	r3, #0
 800cc48:	9300      	str	r3, [sp, #0]
 800cc4a:	4b11      	ldr	r3, [pc, #68]	; (800cc90 <prvCheckForValidListAndQueue+0x74>)
 800cc4c:	4a11      	ldr	r2, [pc, #68]	; (800cc94 <prvCheckForValidListAndQueue+0x78>)
 800cc4e:	2110      	movs	r1, #16
 800cc50:	200a      	movs	r0, #10
 800cc52:	f7fe f99d 	bl	800af90 <xQueueGenericCreateStatic>
 800cc56:	4603      	mov	r3, r0
 800cc58:	4a08      	ldr	r2, [pc, #32]	; (800cc7c <prvCheckForValidListAndQueue+0x60>)
 800cc5a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800cc5c:	4b07      	ldr	r3, [pc, #28]	; (800cc7c <prvCheckForValidListAndQueue+0x60>)
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d005      	beq.n	800cc70 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cc64:	4b05      	ldr	r3, [pc, #20]	; (800cc7c <prvCheckForValidListAndQueue+0x60>)
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	490b      	ldr	r1, [pc, #44]	; (800cc98 <prvCheckForValidListAndQueue+0x7c>)
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	f7fe fdb0 	bl	800b7d0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cc70:	f000 f934 	bl	800cedc <vPortExitCritical>
}
 800cc74:	bf00      	nop
 800cc76:	46bd      	mov	sp, r7
 800cc78:	bd80      	pop	{r7, pc}
 800cc7a:	bf00      	nop
 800cc7c:	200010c4 	.word	0x200010c4
 800cc80:	20001094 	.word	0x20001094
 800cc84:	200010a8 	.word	0x200010a8
 800cc88:	200010bc 	.word	0x200010bc
 800cc8c:	200010c0 	.word	0x200010c0
 800cc90:	20001170 	.word	0x20001170
 800cc94:	200010d0 	.word	0x200010d0
 800cc98:	0800e224 	.word	0x0800e224

0800cc9c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cc9c:	b480      	push	{r7}
 800cc9e:	b085      	sub	sp, #20
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	60f8      	str	r0, [r7, #12]
 800cca4:	60b9      	str	r1, [r7, #8]
 800cca6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	3b04      	subs	r3, #4
 800ccac:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ccb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	3b04      	subs	r3, #4
 800ccba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ccbc:	68bb      	ldr	r3, [r7, #8]
 800ccbe:	f023 0201 	bic.w	r2, r3, #1
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	3b04      	subs	r3, #4
 800ccca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cccc:	4a08      	ldr	r2, [pc, #32]	; (800ccf0 <pxPortInitialiseStack+0x54>)
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	3b14      	subs	r3, #20
 800ccd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ccd8:	687a      	ldr	r2, [r7, #4]
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	3b20      	subs	r3, #32
 800cce2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cce4:	68fb      	ldr	r3, [r7, #12]
}
 800cce6:	4618      	mov	r0, r3
 800cce8:	3714      	adds	r7, #20
 800ccea:	46bd      	mov	sp, r7
 800ccec:	bc80      	pop	{r7}
 800ccee:	4770      	bx	lr
 800ccf0:	0800ccf5 	.word	0x0800ccf5

0800ccf4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ccf4:	b480      	push	{r7}
 800ccf6:	b085      	sub	sp, #20
 800ccf8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ccfe:	4b12      	ldr	r3, [pc, #72]	; (800cd48 <prvTaskExitError+0x54>)
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cd06:	d00a      	beq.n	800cd1e <prvTaskExitError+0x2a>
	__asm volatile
 800cd08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd0c:	f383 8811 	msr	BASEPRI, r3
 800cd10:	f3bf 8f6f 	isb	sy
 800cd14:	f3bf 8f4f 	dsb	sy
 800cd18:	60fb      	str	r3, [r7, #12]
}
 800cd1a:	bf00      	nop
 800cd1c:	e7fe      	b.n	800cd1c <prvTaskExitError+0x28>
	__asm volatile
 800cd1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd22:	f383 8811 	msr	BASEPRI, r3
 800cd26:	f3bf 8f6f 	isb	sy
 800cd2a:	f3bf 8f4f 	dsb	sy
 800cd2e:	60bb      	str	r3, [r7, #8]
}
 800cd30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cd32:	bf00      	nop
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d0fc      	beq.n	800cd34 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cd3a:	bf00      	nop
 800cd3c:	bf00      	nop
 800cd3e:	3714      	adds	r7, #20
 800cd40:	46bd      	mov	sp, r7
 800cd42:	bc80      	pop	{r7}
 800cd44:	4770      	bx	lr
 800cd46:	bf00      	nop
 800cd48:	20000120 	.word	0x20000120
 800cd4c:	00000000 	.word	0x00000000

0800cd50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cd50:	4b07      	ldr	r3, [pc, #28]	; (800cd70 <pxCurrentTCBConst2>)
 800cd52:	6819      	ldr	r1, [r3, #0]
 800cd54:	6808      	ldr	r0, [r1, #0]
 800cd56:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800cd5a:	f380 8809 	msr	PSP, r0
 800cd5e:	f3bf 8f6f 	isb	sy
 800cd62:	f04f 0000 	mov.w	r0, #0
 800cd66:	f380 8811 	msr	BASEPRI, r0
 800cd6a:	f04e 0e0d 	orr.w	lr, lr, #13
 800cd6e:	4770      	bx	lr

0800cd70 <pxCurrentTCBConst2>:
 800cd70:	20000b94 	.word	0x20000b94
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cd74:	bf00      	nop
 800cd76:	bf00      	nop

0800cd78 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800cd78:	4806      	ldr	r0, [pc, #24]	; (800cd94 <prvPortStartFirstTask+0x1c>)
 800cd7a:	6800      	ldr	r0, [r0, #0]
 800cd7c:	6800      	ldr	r0, [r0, #0]
 800cd7e:	f380 8808 	msr	MSP, r0
 800cd82:	b662      	cpsie	i
 800cd84:	b661      	cpsie	f
 800cd86:	f3bf 8f4f 	dsb	sy
 800cd8a:	f3bf 8f6f 	isb	sy
 800cd8e:	df00      	svc	0
 800cd90:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cd92:	bf00      	nop
 800cd94:	e000ed08 	.word	0xe000ed08

0800cd98 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b084      	sub	sp, #16
 800cd9c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cd9e:	4b32      	ldr	r3, [pc, #200]	; (800ce68 <xPortStartScheduler+0xd0>)
 800cda0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	781b      	ldrb	r3, [r3, #0]
 800cda6:	b2db      	uxtb	r3, r3
 800cda8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	22ff      	movs	r2, #255	; 0xff
 800cdae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	781b      	ldrb	r3, [r3, #0]
 800cdb4:	b2db      	uxtb	r3, r3
 800cdb6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cdb8:	78fb      	ldrb	r3, [r7, #3]
 800cdba:	b2db      	uxtb	r3, r3
 800cdbc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cdc0:	b2da      	uxtb	r2, r3
 800cdc2:	4b2a      	ldr	r3, [pc, #168]	; (800ce6c <xPortStartScheduler+0xd4>)
 800cdc4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cdc6:	4b2a      	ldr	r3, [pc, #168]	; (800ce70 <xPortStartScheduler+0xd8>)
 800cdc8:	2207      	movs	r2, #7
 800cdca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cdcc:	e009      	b.n	800cde2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800cdce:	4b28      	ldr	r3, [pc, #160]	; (800ce70 <xPortStartScheduler+0xd8>)
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	3b01      	subs	r3, #1
 800cdd4:	4a26      	ldr	r2, [pc, #152]	; (800ce70 <xPortStartScheduler+0xd8>)
 800cdd6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cdd8:	78fb      	ldrb	r3, [r7, #3]
 800cdda:	b2db      	uxtb	r3, r3
 800cddc:	005b      	lsls	r3, r3, #1
 800cdde:	b2db      	uxtb	r3, r3
 800cde0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cde2:	78fb      	ldrb	r3, [r7, #3]
 800cde4:	b2db      	uxtb	r3, r3
 800cde6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cdea:	2b80      	cmp	r3, #128	; 0x80
 800cdec:	d0ef      	beq.n	800cdce <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cdee:	4b20      	ldr	r3, [pc, #128]	; (800ce70 <xPortStartScheduler+0xd8>)
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	f1c3 0307 	rsb	r3, r3, #7
 800cdf6:	2b04      	cmp	r3, #4
 800cdf8:	d00a      	beq.n	800ce10 <xPortStartScheduler+0x78>
	__asm volatile
 800cdfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdfe:	f383 8811 	msr	BASEPRI, r3
 800ce02:	f3bf 8f6f 	isb	sy
 800ce06:	f3bf 8f4f 	dsb	sy
 800ce0a:	60bb      	str	r3, [r7, #8]
}
 800ce0c:	bf00      	nop
 800ce0e:	e7fe      	b.n	800ce0e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ce10:	4b17      	ldr	r3, [pc, #92]	; (800ce70 <xPortStartScheduler+0xd8>)
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	021b      	lsls	r3, r3, #8
 800ce16:	4a16      	ldr	r2, [pc, #88]	; (800ce70 <xPortStartScheduler+0xd8>)
 800ce18:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ce1a:	4b15      	ldr	r3, [pc, #84]	; (800ce70 <xPortStartScheduler+0xd8>)
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ce22:	4a13      	ldr	r2, [pc, #76]	; (800ce70 <xPortStartScheduler+0xd8>)
 800ce24:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	b2da      	uxtb	r2, r3
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ce2e:	4b11      	ldr	r3, [pc, #68]	; (800ce74 <xPortStartScheduler+0xdc>)
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	4a10      	ldr	r2, [pc, #64]	; (800ce74 <xPortStartScheduler+0xdc>)
 800ce34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ce38:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ce3a:	4b0e      	ldr	r3, [pc, #56]	; (800ce74 <xPortStartScheduler+0xdc>)
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	4a0d      	ldr	r2, [pc, #52]	; (800ce74 <xPortStartScheduler+0xdc>)
 800ce40:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ce44:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ce46:	f000 f8b9 	bl	800cfbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ce4a:	4b0b      	ldr	r3, [pc, #44]	; (800ce78 <xPortStartScheduler+0xe0>)
 800ce4c:	2200      	movs	r2, #0
 800ce4e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ce50:	f7ff ff92 	bl	800cd78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ce54:	f7ff f8c2 	bl	800bfdc <vTaskSwitchContext>
	prvTaskExitError();
 800ce58:	f7ff ff4c 	bl	800ccf4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ce5c:	2300      	movs	r3, #0
}
 800ce5e:	4618      	mov	r0, r3
 800ce60:	3710      	adds	r7, #16
 800ce62:	46bd      	mov	sp, r7
 800ce64:	bd80      	pop	{r7, pc}
 800ce66:	bf00      	nop
 800ce68:	e000e400 	.word	0xe000e400
 800ce6c:	200011c0 	.word	0x200011c0
 800ce70:	200011c4 	.word	0x200011c4
 800ce74:	e000ed20 	.word	0xe000ed20
 800ce78:	20000120 	.word	0x20000120

0800ce7c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ce7c:	b480      	push	{r7}
 800ce7e:	b083      	sub	sp, #12
 800ce80:	af00      	add	r7, sp, #0
	__asm volatile
 800ce82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce86:	f383 8811 	msr	BASEPRI, r3
 800ce8a:	f3bf 8f6f 	isb	sy
 800ce8e:	f3bf 8f4f 	dsb	sy
 800ce92:	607b      	str	r3, [r7, #4]
}
 800ce94:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ce96:	4b0f      	ldr	r3, [pc, #60]	; (800ced4 <vPortEnterCritical+0x58>)
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	3301      	adds	r3, #1
 800ce9c:	4a0d      	ldr	r2, [pc, #52]	; (800ced4 <vPortEnterCritical+0x58>)
 800ce9e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cea0:	4b0c      	ldr	r3, [pc, #48]	; (800ced4 <vPortEnterCritical+0x58>)
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	2b01      	cmp	r3, #1
 800cea6:	d10f      	bne.n	800cec8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cea8:	4b0b      	ldr	r3, [pc, #44]	; (800ced8 <vPortEnterCritical+0x5c>)
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	b2db      	uxtb	r3, r3
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d00a      	beq.n	800cec8 <vPortEnterCritical+0x4c>
	__asm volatile
 800ceb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceb6:	f383 8811 	msr	BASEPRI, r3
 800ceba:	f3bf 8f6f 	isb	sy
 800cebe:	f3bf 8f4f 	dsb	sy
 800cec2:	603b      	str	r3, [r7, #0]
}
 800cec4:	bf00      	nop
 800cec6:	e7fe      	b.n	800cec6 <vPortEnterCritical+0x4a>
	}
}
 800cec8:	bf00      	nop
 800ceca:	370c      	adds	r7, #12
 800cecc:	46bd      	mov	sp, r7
 800cece:	bc80      	pop	{r7}
 800ced0:	4770      	bx	lr
 800ced2:	bf00      	nop
 800ced4:	20000120 	.word	0x20000120
 800ced8:	e000ed04 	.word	0xe000ed04

0800cedc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cedc:	b480      	push	{r7}
 800cede:	b083      	sub	sp, #12
 800cee0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cee2:	4b11      	ldr	r3, [pc, #68]	; (800cf28 <vPortExitCritical+0x4c>)
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d10a      	bne.n	800cf00 <vPortExitCritical+0x24>
	__asm volatile
 800ceea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceee:	f383 8811 	msr	BASEPRI, r3
 800cef2:	f3bf 8f6f 	isb	sy
 800cef6:	f3bf 8f4f 	dsb	sy
 800cefa:	607b      	str	r3, [r7, #4]
}
 800cefc:	bf00      	nop
 800cefe:	e7fe      	b.n	800cefe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cf00:	4b09      	ldr	r3, [pc, #36]	; (800cf28 <vPortExitCritical+0x4c>)
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	3b01      	subs	r3, #1
 800cf06:	4a08      	ldr	r2, [pc, #32]	; (800cf28 <vPortExitCritical+0x4c>)
 800cf08:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cf0a:	4b07      	ldr	r3, [pc, #28]	; (800cf28 <vPortExitCritical+0x4c>)
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d105      	bne.n	800cf1e <vPortExitCritical+0x42>
 800cf12:	2300      	movs	r3, #0
 800cf14:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cf16:	683b      	ldr	r3, [r7, #0]
 800cf18:	f383 8811 	msr	BASEPRI, r3
}
 800cf1c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cf1e:	bf00      	nop
 800cf20:	370c      	adds	r7, #12
 800cf22:	46bd      	mov	sp, r7
 800cf24:	bc80      	pop	{r7}
 800cf26:	4770      	bx	lr
 800cf28:	20000120 	.word	0x20000120
 800cf2c:	00000000 	.word	0x00000000

0800cf30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cf30:	f3ef 8009 	mrs	r0, PSP
 800cf34:	f3bf 8f6f 	isb	sy
 800cf38:	4b0d      	ldr	r3, [pc, #52]	; (800cf70 <pxCurrentTCBConst>)
 800cf3a:	681a      	ldr	r2, [r3, #0]
 800cf3c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800cf40:	6010      	str	r0, [r2, #0]
 800cf42:	e92d 4008 	stmdb	sp!, {r3, lr}
 800cf46:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cf4a:	f380 8811 	msr	BASEPRI, r0
 800cf4e:	f7ff f845 	bl	800bfdc <vTaskSwitchContext>
 800cf52:	f04f 0000 	mov.w	r0, #0
 800cf56:	f380 8811 	msr	BASEPRI, r0
 800cf5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800cf5e:	6819      	ldr	r1, [r3, #0]
 800cf60:	6808      	ldr	r0, [r1, #0]
 800cf62:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800cf66:	f380 8809 	msr	PSP, r0
 800cf6a:	f3bf 8f6f 	isb	sy
 800cf6e:	4770      	bx	lr

0800cf70 <pxCurrentTCBConst>:
 800cf70:	20000b94 	.word	0x20000b94
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cf74:	bf00      	nop
 800cf76:	bf00      	nop

0800cf78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b082      	sub	sp, #8
 800cf7c:	af00      	add	r7, sp, #0
	__asm volatile
 800cf7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf82:	f383 8811 	msr	BASEPRI, r3
 800cf86:	f3bf 8f6f 	isb	sy
 800cf8a:	f3bf 8f4f 	dsb	sy
 800cf8e:	607b      	str	r3, [r7, #4]
}
 800cf90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cf92:	f7fe ff65 	bl	800be60 <xTaskIncrementTick>
 800cf96:	4603      	mov	r3, r0
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d003      	beq.n	800cfa4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cf9c:	4b06      	ldr	r3, [pc, #24]	; (800cfb8 <xPortSysTickHandler+0x40>)
 800cf9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cfa2:	601a      	str	r2, [r3, #0]
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cfa8:	683b      	ldr	r3, [r7, #0]
 800cfaa:	f383 8811 	msr	BASEPRI, r3
}
 800cfae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cfb0:	bf00      	nop
 800cfb2:	3708      	adds	r7, #8
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	bd80      	pop	{r7, pc}
 800cfb8:	e000ed04 	.word	0xe000ed04

0800cfbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cfbc:	b480      	push	{r7}
 800cfbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cfc0:	4b0a      	ldr	r3, [pc, #40]	; (800cfec <vPortSetupTimerInterrupt+0x30>)
 800cfc2:	2200      	movs	r2, #0
 800cfc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cfc6:	4b0a      	ldr	r3, [pc, #40]	; (800cff0 <vPortSetupTimerInterrupt+0x34>)
 800cfc8:	2200      	movs	r2, #0
 800cfca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cfcc:	4b09      	ldr	r3, [pc, #36]	; (800cff4 <vPortSetupTimerInterrupt+0x38>)
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	4a09      	ldr	r2, [pc, #36]	; (800cff8 <vPortSetupTimerInterrupt+0x3c>)
 800cfd2:	fba2 2303 	umull	r2, r3, r2, r3
 800cfd6:	099b      	lsrs	r3, r3, #6
 800cfd8:	4a08      	ldr	r2, [pc, #32]	; (800cffc <vPortSetupTimerInterrupt+0x40>)
 800cfda:	3b01      	subs	r3, #1
 800cfdc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cfde:	4b03      	ldr	r3, [pc, #12]	; (800cfec <vPortSetupTimerInterrupt+0x30>)
 800cfe0:	2207      	movs	r2, #7
 800cfe2:	601a      	str	r2, [r3, #0]
}
 800cfe4:	bf00      	nop
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	bc80      	pop	{r7}
 800cfea:	4770      	bx	lr
 800cfec:	e000e010 	.word	0xe000e010
 800cff0:	e000e018 	.word	0xe000e018
 800cff4:	20000004 	.word	0x20000004
 800cff8:	10624dd3 	.word	0x10624dd3
 800cffc:	e000e014 	.word	0xe000e014

0800d000 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d000:	b480      	push	{r7}
 800d002:	b085      	sub	sp, #20
 800d004:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d006:	f3ef 8305 	mrs	r3, IPSR
 800d00a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	2b0f      	cmp	r3, #15
 800d010:	d914      	bls.n	800d03c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d012:	4a16      	ldr	r2, [pc, #88]	; (800d06c <vPortValidateInterruptPriority+0x6c>)
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	4413      	add	r3, r2
 800d018:	781b      	ldrb	r3, [r3, #0]
 800d01a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d01c:	4b14      	ldr	r3, [pc, #80]	; (800d070 <vPortValidateInterruptPriority+0x70>)
 800d01e:	781b      	ldrb	r3, [r3, #0]
 800d020:	7afa      	ldrb	r2, [r7, #11]
 800d022:	429a      	cmp	r2, r3
 800d024:	d20a      	bcs.n	800d03c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d02a:	f383 8811 	msr	BASEPRI, r3
 800d02e:	f3bf 8f6f 	isb	sy
 800d032:	f3bf 8f4f 	dsb	sy
 800d036:	607b      	str	r3, [r7, #4]
}
 800d038:	bf00      	nop
 800d03a:	e7fe      	b.n	800d03a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d03c:	4b0d      	ldr	r3, [pc, #52]	; (800d074 <vPortValidateInterruptPriority+0x74>)
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d044:	4b0c      	ldr	r3, [pc, #48]	; (800d078 <vPortValidateInterruptPriority+0x78>)
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	429a      	cmp	r2, r3
 800d04a:	d90a      	bls.n	800d062 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d04c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d050:	f383 8811 	msr	BASEPRI, r3
 800d054:	f3bf 8f6f 	isb	sy
 800d058:	f3bf 8f4f 	dsb	sy
 800d05c:	603b      	str	r3, [r7, #0]
}
 800d05e:	bf00      	nop
 800d060:	e7fe      	b.n	800d060 <vPortValidateInterruptPriority+0x60>
	}
 800d062:	bf00      	nop
 800d064:	3714      	adds	r7, #20
 800d066:	46bd      	mov	sp, r7
 800d068:	bc80      	pop	{r7}
 800d06a:	4770      	bx	lr
 800d06c:	e000e3f0 	.word	0xe000e3f0
 800d070:	200011c0 	.word	0x200011c0
 800d074:	e000ed0c 	.word	0xe000ed0c
 800d078:	200011c4 	.word	0x200011c4

0800d07c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b08a      	sub	sp, #40	; 0x28
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d084:	2300      	movs	r3, #0
 800d086:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d088:	f7fe fe30 	bl	800bcec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d08c:	4b58      	ldr	r3, [pc, #352]	; (800d1f0 <pvPortMalloc+0x174>)
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d101      	bne.n	800d098 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d094:	f000 f910 	bl	800d2b8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d098:	4b56      	ldr	r3, [pc, #344]	; (800d1f4 <pvPortMalloc+0x178>)
 800d09a:	681a      	ldr	r2, [r3, #0]
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	4013      	ands	r3, r2
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	f040 808e 	bne.w	800d1c2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d01d      	beq.n	800d0e8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d0ac:	2208      	movs	r2, #8
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	4413      	add	r3, r2
 800d0b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	f003 0307 	and.w	r3, r3, #7
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d014      	beq.n	800d0e8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	f023 0307 	bic.w	r3, r3, #7
 800d0c4:	3308      	adds	r3, #8
 800d0c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	f003 0307 	and.w	r3, r3, #7
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d00a      	beq.n	800d0e8 <pvPortMalloc+0x6c>
	__asm volatile
 800d0d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0d6:	f383 8811 	msr	BASEPRI, r3
 800d0da:	f3bf 8f6f 	isb	sy
 800d0de:	f3bf 8f4f 	dsb	sy
 800d0e2:	617b      	str	r3, [r7, #20]
}
 800d0e4:	bf00      	nop
 800d0e6:	e7fe      	b.n	800d0e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d069      	beq.n	800d1c2 <pvPortMalloc+0x146>
 800d0ee:	4b42      	ldr	r3, [pc, #264]	; (800d1f8 <pvPortMalloc+0x17c>)
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	687a      	ldr	r2, [r7, #4]
 800d0f4:	429a      	cmp	r2, r3
 800d0f6:	d864      	bhi.n	800d1c2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d0f8:	4b40      	ldr	r3, [pc, #256]	; (800d1fc <pvPortMalloc+0x180>)
 800d0fa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d0fc:	4b3f      	ldr	r3, [pc, #252]	; (800d1fc <pvPortMalloc+0x180>)
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d102:	e004      	b.n	800d10e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d106:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d10e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d110:	685b      	ldr	r3, [r3, #4]
 800d112:	687a      	ldr	r2, [r7, #4]
 800d114:	429a      	cmp	r2, r3
 800d116:	d903      	bls.n	800d120 <pvPortMalloc+0xa4>
 800d118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d1f1      	bne.n	800d104 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d120:	4b33      	ldr	r3, [pc, #204]	; (800d1f0 <pvPortMalloc+0x174>)
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d126:	429a      	cmp	r2, r3
 800d128:	d04b      	beq.n	800d1c2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d12a:	6a3b      	ldr	r3, [r7, #32]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	2208      	movs	r2, #8
 800d130:	4413      	add	r3, r2
 800d132:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d136:	681a      	ldr	r2, [r3, #0]
 800d138:	6a3b      	ldr	r3, [r7, #32]
 800d13a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d13c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d13e:	685a      	ldr	r2, [r3, #4]
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	1ad2      	subs	r2, r2, r3
 800d144:	2308      	movs	r3, #8
 800d146:	005b      	lsls	r3, r3, #1
 800d148:	429a      	cmp	r2, r3
 800d14a:	d91f      	bls.n	800d18c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d14c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	4413      	add	r3, r2
 800d152:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d154:	69bb      	ldr	r3, [r7, #24]
 800d156:	f003 0307 	and.w	r3, r3, #7
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d00a      	beq.n	800d174 <pvPortMalloc+0xf8>
	__asm volatile
 800d15e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d162:	f383 8811 	msr	BASEPRI, r3
 800d166:	f3bf 8f6f 	isb	sy
 800d16a:	f3bf 8f4f 	dsb	sy
 800d16e:	613b      	str	r3, [r7, #16]
}
 800d170:	bf00      	nop
 800d172:	e7fe      	b.n	800d172 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d176:	685a      	ldr	r2, [r3, #4]
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	1ad2      	subs	r2, r2, r3
 800d17c:	69bb      	ldr	r3, [r7, #24]
 800d17e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d182:	687a      	ldr	r2, [r7, #4]
 800d184:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d186:	69b8      	ldr	r0, [r7, #24]
 800d188:	f000 f8f8 	bl	800d37c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d18c:	4b1a      	ldr	r3, [pc, #104]	; (800d1f8 <pvPortMalloc+0x17c>)
 800d18e:	681a      	ldr	r2, [r3, #0]
 800d190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d192:	685b      	ldr	r3, [r3, #4]
 800d194:	1ad3      	subs	r3, r2, r3
 800d196:	4a18      	ldr	r2, [pc, #96]	; (800d1f8 <pvPortMalloc+0x17c>)
 800d198:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d19a:	4b17      	ldr	r3, [pc, #92]	; (800d1f8 <pvPortMalloc+0x17c>)
 800d19c:	681a      	ldr	r2, [r3, #0]
 800d19e:	4b18      	ldr	r3, [pc, #96]	; (800d200 <pvPortMalloc+0x184>)
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	429a      	cmp	r2, r3
 800d1a4:	d203      	bcs.n	800d1ae <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d1a6:	4b14      	ldr	r3, [pc, #80]	; (800d1f8 <pvPortMalloc+0x17c>)
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	4a15      	ldr	r2, [pc, #84]	; (800d200 <pvPortMalloc+0x184>)
 800d1ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d1ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1b0:	685a      	ldr	r2, [r3, #4]
 800d1b2:	4b10      	ldr	r3, [pc, #64]	; (800d1f4 <pvPortMalloc+0x178>)
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	431a      	orrs	r2, r3
 800d1b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1be:	2200      	movs	r2, #0
 800d1c0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d1c2:	f7fe fda1 	bl	800bd08 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d1c6:	69fb      	ldr	r3, [r7, #28]
 800d1c8:	f003 0307 	and.w	r3, r3, #7
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d00a      	beq.n	800d1e6 <pvPortMalloc+0x16a>
	__asm volatile
 800d1d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1d4:	f383 8811 	msr	BASEPRI, r3
 800d1d8:	f3bf 8f6f 	isb	sy
 800d1dc:	f3bf 8f4f 	dsb	sy
 800d1e0:	60fb      	str	r3, [r7, #12]
}
 800d1e2:	bf00      	nop
 800d1e4:	e7fe      	b.n	800d1e4 <pvPortMalloc+0x168>
	return pvReturn;
 800d1e6:	69fb      	ldr	r3, [r7, #28]
}
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	3728      	adds	r7, #40	; 0x28
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	bd80      	pop	{r7, pc}
 800d1f0:	20001dd0 	.word	0x20001dd0
 800d1f4:	20001ddc 	.word	0x20001ddc
 800d1f8:	20001dd4 	.word	0x20001dd4
 800d1fc:	20001dc8 	.word	0x20001dc8
 800d200:	20001dd8 	.word	0x20001dd8

0800d204 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d204:	b580      	push	{r7, lr}
 800d206:	b086      	sub	sp, #24
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d048      	beq.n	800d2a8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d216:	2308      	movs	r3, #8
 800d218:	425b      	negs	r3, r3
 800d21a:	697a      	ldr	r2, [r7, #20]
 800d21c:	4413      	add	r3, r2
 800d21e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d220:	697b      	ldr	r3, [r7, #20]
 800d222:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d224:	693b      	ldr	r3, [r7, #16]
 800d226:	685a      	ldr	r2, [r3, #4]
 800d228:	4b21      	ldr	r3, [pc, #132]	; (800d2b0 <vPortFree+0xac>)
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	4013      	ands	r3, r2
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d10a      	bne.n	800d248 <vPortFree+0x44>
	__asm volatile
 800d232:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d236:	f383 8811 	msr	BASEPRI, r3
 800d23a:	f3bf 8f6f 	isb	sy
 800d23e:	f3bf 8f4f 	dsb	sy
 800d242:	60fb      	str	r3, [r7, #12]
}
 800d244:	bf00      	nop
 800d246:	e7fe      	b.n	800d246 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d248:	693b      	ldr	r3, [r7, #16]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d00a      	beq.n	800d266 <vPortFree+0x62>
	__asm volatile
 800d250:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d254:	f383 8811 	msr	BASEPRI, r3
 800d258:	f3bf 8f6f 	isb	sy
 800d25c:	f3bf 8f4f 	dsb	sy
 800d260:	60bb      	str	r3, [r7, #8]
}
 800d262:	bf00      	nop
 800d264:	e7fe      	b.n	800d264 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d266:	693b      	ldr	r3, [r7, #16]
 800d268:	685a      	ldr	r2, [r3, #4]
 800d26a:	4b11      	ldr	r3, [pc, #68]	; (800d2b0 <vPortFree+0xac>)
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	4013      	ands	r3, r2
 800d270:	2b00      	cmp	r3, #0
 800d272:	d019      	beq.n	800d2a8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d274:	693b      	ldr	r3, [r7, #16]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d115      	bne.n	800d2a8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d27c:	693b      	ldr	r3, [r7, #16]
 800d27e:	685a      	ldr	r2, [r3, #4]
 800d280:	4b0b      	ldr	r3, [pc, #44]	; (800d2b0 <vPortFree+0xac>)
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	43db      	mvns	r3, r3
 800d286:	401a      	ands	r2, r3
 800d288:	693b      	ldr	r3, [r7, #16]
 800d28a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d28c:	f7fe fd2e 	bl	800bcec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d290:	693b      	ldr	r3, [r7, #16]
 800d292:	685a      	ldr	r2, [r3, #4]
 800d294:	4b07      	ldr	r3, [pc, #28]	; (800d2b4 <vPortFree+0xb0>)
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	4413      	add	r3, r2
 800d29a:	4a06      	ldr	r2, [pc, #24]	; (800d2b4 <vPortFree+0xb0>)
 800d29c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d29e:	6938      	ldr	r0, [r7, #16]
 800d2a0:	f000 f86c 	bl	800d37c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800d2a4:	f7fe fd30 	bl	800bd08 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d2a8:	bf00      	nop
 800d2aa:	3718      	adds	r7, #24
 800d2ac:	46bd      	mov	sp, r7
 800d2ae:	bd80      	pop	{r7, pc}
 800d2b0:	20001ddc 	.word	0x20001ddc
 800d2b4:	20001dd4 	.word	0x20001dd4

0800d2b8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d2b8:	b480      	push	{r7}
 800d2ba:	b085      	sub	sp, #20
 800d2bc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d2be:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800d2c2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d2c4:	4b27      	ldr	r3, [pc, #156]	; (800d364 <prvHeapInit+0xac>)
 800d2c6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	f003 0307 	and.w	r3, r3, #7
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d00c      	beq.n	800d2ec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	3307      	adds	r3, #7
 800d2d6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	f023 0307 	bic.w	r3, r3, #7
 800d2de:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d2e0:	68ba      	ldr	r2, [r7, #8]
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	1ad3      	subs	r3, r2, r3
 800d2e6:	4a1f      	ldr	r2, [pc, #124]	; (800d364 <prvHeapInit+0xac>)
 800d2e8:	4413      	add	r3, r2
 800d2ea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d2f0:	4a1d      	ldr	r2, [pc, #116]	; (800d368 <prvHeapInit+0xb0>)
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d2f6:	4b1c      	ldr	r3, [pc, #112]	; (800d368 <prvHeapInit+0xb0>)
 800d2f8:	2200      	movs	r2, #0
 800d2fa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	68ba      	ldr	r2, [r7, #8]
 800d300:	4413      	add	r3, r2
 800d302:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d304:	2208      	movs	r2, #8
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	1a9b      	subs	r3, r3, r2
 800d30a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	f023 0307 	bic.w	r3, r3, #7
 800d312:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	4a15      	ldr	r2, [pc, #84]	; (800d36c <prvHeapInit+0xb4>)
 800d318:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d31a:	4b14      	ldr	r3, [pc, #80]	; (800d36c <prvHeapInit+0xb4>)
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	2200      	movs	r2, #0
 800d320:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d322:	4b12      	ldr	r3, [pc, #72]	; (800d36c <prvHeapInit+0xb4>)
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	2200      	movs	r2, #0
 800d328:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d32e:	683b      	ldr	r3, [r7, #0]
 800d330:	68fa      	ldr	r2, [r7, #12]
 800d332:	1ad2      	subs	r2, r2, r3
 800d334:	683b      	ldr	r3, [r7, #0]
 800d336:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d338:	4b0c      	ldr	r3, [pc, #48]	; (800d36c <prvHeapInit+0xb4>)
 800d33a:	681a      	ldr	r2, [r3, #0]
 800d33c:	683b      	ldr	r3, [r7, #0]
 800d33e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d340:	683b      	ldr	r3, [r7, #0]
 800d342:	685b      	ldr	r3, [r3, #4]
 800d344:	4a0a      	ldr	r2, [pc, #40]	; (800d370 <prvHeapInit+0xb8>)
 800d346:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d348:	683b      	ldr	r3, [r7, #0]
 800d34a:	685b      	ldr	r3, [r3, #4]
 800d34c:	4a09      	ldr	r2, [pc, #36]	; (800d374 <prvHeapInit+0xbc>)
 800d34e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d350:	4b09      	ldr	r3, [pc, #36]	; (800d378 <prvHeapInit+0xc0>)
 800d352:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d356:	601a      	str	r2, [r3, #0]
}
 800d358:	bf00      	nop
 800d35a:	3714      	adds	r7, #20
 800d35c:	46bd      	mov	sp, r7
 800d35e:	bc80      	pop	{r7}
 800d360:	4770      	bx	lr
 800d362:	bf00      	nop
 800d364:	200011c8 	.word	0x200011c8
 800d368:	20001dc8 	.word	0x20001dc8
 800d36c:	20001dd0 	.word	0x20001dd0
 800d370:	20001dd8 	.word	0x20001dd8
 800d374:	20001dd4 	.word	0x20001dd4
 800d378:	20001ddc 	.word	0x20001ddc

0800d37c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d37c:	b480      	push	{r7}
 800d37e:	b085      	sub	sp, #20
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d384:	4b27      	ldr	r3, [pc, #156]	; (800d424 <prvInsertBlockIntoFreeList+0xa8>)
 800d386:	60fb      	str	r3, [r7, #12]
 800d388:	e002      	b.n	800d390 <prvInsertBlockIntoFreeList+0x14>
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	60fb      	str	r3, [r7, #12]
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	687a      	ldr	r2, [r7, #4]
 800d396:	429a      	cmp	r2, r3
 800d398:	d8f7      	bhi.n	800d38a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	685b      	ldr	r3, [r3, #4]
 800d3a2:	68ba      	ldr	r2, [r7, #8]
 800d3a4:	4413      	add	r3, r2
 800d3a6:	687a      	ldr	r2, [r7, #4]
 800d3a8:	429a      	cmp	r2, r3
 800d3aa:	d108      	bne.n	800d3be <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	685a      	ldr	r2, [r3, #4]
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	685b      	ldr	r3, [r3, #4]
 800d3b4:	441a      	add	r2, r3
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	685b      	ldr	r3, [r3, #4]
 800d3c6:	68ba      	ldr	r2, [r7, #8]
 800d3c8:	441a      	add	r2, r3
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	429a      	cmp	r2, r3
 800d3d0:	d118      	bne.n	800d404 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	681a      	ldr	r2, [r3, #0]
 800d3d6:	4b14      	ldr	r3, [pc, #80]	; (800d428 <prvInsertBlockIntoFreeList+0xac>)
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	429a      	cmp	r2, r3
 800d3dc:	d00d      	beq.n	800d3fa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	685a      	ldr	r2, [r3, #4]
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	685b      	ldr	r3, [r3, #4]
 800d3e8:	441a      	add	r2, r3
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	681a      	ldr	r2, [r3, #0]
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	601a      	str	r2, [r3, #0]
 800d3f8:	e008      	b.n	800d40c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d3fa:	4b0b      	ldr	r3, [pc, #44]	; (800d428 <prvInsertBlockIntoFreeList+0xac>)
 800d3fc:	681a      	ldr	r2, [r3, #0]
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	601a      	str	r2, [r3, #0]
 800d402:	e003      	b.n	800d40c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	681a      	ldr	r2, [r3, #0]
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d40c:	68fa      	ldr	r2, [r7, #12]
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	429a      	cmp	r2, r3
 800d412:	d002      	beq.n	800d41a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	687a      	ldr	r2, [r7, #4]
 800d418:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d41a:	bf00      	nop
 800d41c:	3714      	adds	r7, #20
 800d41e:	46bd      	mov	sp, r7
 800d420:	bc80      	pop	{r7}
 800d422:	4770      	bx	lr
 800d424:	20001dc8 	.word	0x20001dc8
 800d428:	20001dd0 	.word	0x20001dd0

0800d42c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d42c:	b580      	push	{r7, lr}
 800d42e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d430:	2200      	movs	r2, #0
 800d432:	4912      	ldr	r1, [pc, #72]	; (800d47c <MX_USB_DEVICE_Init+0x50>)
 800d434:	4812      	ldr	r0, [pc, #72]	; (800d480 <MX_USB_DEVICE_Init+0x54>)
 800d436:	f7fc fa89 	bl	800994c <USBD_Init>
 800d43a:	4603      	mov	r3, r0
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d001      	beq.n	800d444 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d440:	f7f4 ffe0 	bl	8002404 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d444:	490f      	ldr	r1, [pc, #60]	; (800d484 <MX_USB_DEVICE_Init+0x58>)
 800d446:	480e      	ldr	r0, [pc, #56]	; (800d480 <MX_USB_DEVICE_Init+0x54>)
 800d448:	f7fc faab 	bl	80099a2 <USBD_RegisterClass>
 800d44c:	4603      	mov	r3, r0
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d001      	beq.n	800d456 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d452:	f7f4 ffd7 	bl	8002404 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d456:	490c      	ldr	r1, [pc, #48]	; (800d488 <MX_USB_DEVICE_Init+0x5c>)
 800d458:	4809      	ldr	r0, [pc, #36]	; (800d480 <MX_USB_DEVICE_Init+0x54>)
 800d45a:	f7fc fa0b 	bl	8009874 <USBD_CDC_RegisterInterface>
 800d45e:	4603      	mov	r3, r0
 800d460:	2b00      	cmp	r3, #0
 800d462:	d001      	beq.n	800d468 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d464:	f7f4 ffce 	bl	8002404 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d468:	4805      	ldr	r0, [pc, #20]	; (800d480 <MX_USB_DEVICE_Init+0x54>)
 800d46a:	f7fc fab3 	bl	80099d4 <USBD_Start>
 800d46e:	4603      	mov	r3, r0
 800d470:	2b00      	cmp	r3, #0
 800d472:	d001      	beq.n	800d478 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d474:	f7f4 ffc6 	bl	8002404 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d478:	bf00      	nop
 800d47a:	bd80      	pop	{r7, pc}
 800d47c:	20000134 	.word	0x20000134
 800d480:	20001de0 	.word	0x20001de0
 800d484:	2000001c 	.word	0x2000001c
 800d488:	20000124 	.word	0x20000124

0800d48c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d48c:	b580      	push	{r7, lr}
 800d48e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d490:	2200      	movs	r2, #0
 800d492:	4905      	ldr	r1, [pc, #20]	; (800d4a8 <CDC_Init_FS+0x1c>)
 800d494:	4805      	ldr	r0, [pc, #20]	; (800d4ac <CDC_Init_FS+0x20>)
 800d496:	f7fc fa03 	bl	80098a0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d49a:	4905      	ldr	r1, [pc, #20]	; (800d4b0 <CDC_Init_FS+0x24>)
 800d49c:	4803      	ldr	r0, [pc, #12]	; (800d4ac <CDC_Init_FS+0x20>)
 800d49e:	f7fc fa18 	bl	80098d2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d4a2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d4a4:	4618      	mov	r0, r3
 800d4a6:	bd80      	pop	{r7, pc}
 800d4a8:	2000248c 	.word	0x2000248c
 800d4ac:	20001de0 	.word	0x20001de0
 800d4b0:	200020a4 	.word	0x200020a4

0800d4b4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d4b4:	b480      	push	{r7}
 800d4b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d4b8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	bc80      	pop	{r7}
 800d4c0:	4770      	bx	lr
	...

0800d4c4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d4c4:	b480      	push	{r7}
 800d4c6:	b083      	sub	sp, #12
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	4603      	mov	r3, r0
 800d4cc:	6039      	str	r1, [r7, #0]
 800d4ce:	71fb      	strb	r3, [r7, #7]
 800d4d0:	4613      	mov	r3, r2
 800d4d2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d4d4:	79fb      	ldrb	r3, [r7, #7]
 800d4d6:	2b23      	cmp	r3, #35	; 0x23
 800d4d8:	d84a      	bhi.n	800d570 <CDC_Control_FS+0xac>
 800d4da:	a201      	add	r2, pc, #4	; (adr r2, 800d4e0 <CDC_Control_FS+0x1c>)
 800d4dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4e0:	0800d571 	.word	0x0800d571
 800d4e4:	0800d571 	.word	0x0800d571
 800d4e8:	0800d571 	.word	0x0800d571
 800d4ec:	0800d571 	.word	0x0800d571
 800d4f0:	0800d571 	.word	0x0800d571
 800d4f4:	0800d571 	.word	0x0800d571
 800d4f8:	0800d571 	.word	0x0800d571
 800d4fc:	0800d571 	.word	0x0800d571
 800d500:	0800d571 	.word	0x0800d571
 800d504:	0800d571 	.word	0x0800d571
 800d508:	0800d571 	.word	0x0800d571
 800d50c:	0800d571 	.word	0x0800d571
 800d510:	0800d571 	.word	0x0800d571
 800d514:	0800d571 	.word	0x0800d571
 800d518:	0800d571 	.word	0x0800d571
 800d51c:	0800d571 	.word	0x0800d571
 800d520:	0800d571 	.word	0x0800d571
 800d524:	0800d571 	.word	0x0800d571
 800d528:	0800d571 	.word	0x0800d571
 800d52c:	0800d571 	.word	0x0800d571
 800d530:	0800d571 	.word	0x0800d571
 800d534:	0800d571 	.word	0x0800d571
 800d538:	0800d571 	.word	0x0800d571
 800d53c:	0800d571 	.word	0x0800d571
 800d540:	0800d571 	.word	0x0800d571
 800d544:	0800d571 	.word	0x0800d571
 800d548:	0800d571 	.word	0x0800d571
 800d54c:	0800d571 	.word	0x0800d571
 800d550:	0800d571 	.word	0x0800d571
 800d554:	0800d571 	.word	0x0800d571
 800d558:	0800d571 	.word	0x0800d571
 800d55c:	0800d571 	.word	0x0800d571
 800d560:	0800d571 	.word	0x0800d571
 800d564:	0800d571 	.word	0x0800d571
 800d568:	0800d571 	.word	0x0800d571
 800d56c:	0800d571 	.word	0x0800d571
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d570:	bf00      	nop
  }

  return (USBD_OK);
 800d572:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d574:	4618      	mov	r0, r3
 800d576:	370c      	adds	r7, #12
 800d578:	46bd      	mov	sp, r7
 800d57a:	bc80      	pop	{r7}
 800d57c:	4770      	bx	lr
 800d57e:	bf00      	nop

0800d580 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d580:	b580      	push	{r7, lr}
 800d582:	b082      	sub	sp, #8
 800d584:	af00      	add	r7, sp, #0
 800d586:	6078      	str	r0, [r7, #4]
 800d588:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d58a:	6879      	ldr	r1, [r7, #4]
 800d58c:	4805      	ldr	r0, [pc, #20]	; (800d5a4 <CDC_Receive_FS+0x24>)
 800d58e:	f7fc f9a0 	bl	80098d2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d592:	4804      	ldr	r0, [pc, #16]	; (800d5a4 <CDC_Receive_FS+0x24>)
 800d594:	f7fc f9b0 	bl	80098f8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d598:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d59a:	4618      	mov	r0, r3
 800d59c:	3708      	adds	r7, #8
 800d59e:	46bd      	mov	sp, r7
 800d5a0:	bd80      	pop	{r7, pc}
 800d5a2:	bf00      	nop
 800d5a4:	20001de0 	.word	0x20001de0

0800d5a8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d5a8:	b480      	push	{r7}
 800d5aa:	b083      	sub	sp, #12
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	4603      	mov	r3, r0
 800d5b0:	6039      	str	r1, [r7, #0]
 800d5b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d5b4:	683b      	ldr	r3, [r7, #0]
 800d5b6:	2212      	movs	r2, #18
 800d5b8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d5ba:	4b03      	ldr	r3, [pc, #12]	; (800d5c8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d5bc:	4618      	mov	r0, r3
 800d5be:	370c      	adds	r7, #12
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	bc80      	pop	{r7}
 800d5c4:	4770      	bx	lr
 800d5c6:	bf00      	nop
 800d5c8:	20000150 	.word	0x20000150

0800d5cc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d5cc:	b480      	push	{r7}
 800d5ce:	b083      	sub	sp, #12
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	4603      	mov	r3, r0
 800d5d4:	6039      	str	r1, [r7, #0]
 800d5d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d5d8:	683b      	ldr	r3, [r7, #0]
 800d5da:	2204      	movs	r2, #4
 800d5dc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d5de:	4b03      	ldr	r3, [pc, #12]	; (800d5ec <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	370c      	adds	r7, #12
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	bc80      	pop	{r7}
 800d5e8:	4770      	bx	lr
 800d5ea:	bf00      	nop
 800d5ec:	20000164 	.word	0x20000164

0800d5f0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b082      	sub	sp, #8
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	4603      	mov	r3, r0
 800d5f8:	6039      	str	r1, [r7, #0]
 800d5fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d5fc:	79fb      	ldrb	r3, [r7, #7]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d105      	bne.n	800d60e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d602:	683a      	ldr	r2, [r7, #0]
 800d604:	4907      	ldr	r1, [pc, #28]	; (800d624 <USBD_FS_ProductStrDescriptor+0x34>)
 800d606:	4808      	ldr	r0, [pc, #32]	; (800d628 <USBD_FS_ProductStrDescriptor+0x38>)
 800d608:	f7fd f95c 	bl	800a8c4 <USBD_GetString>
 800d60c:	e004      	b.n	800d618 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d60e:	683a      	ldr	r2, [r7, #0]
 800d610:	4904      	ldr	r1, [pc, #16]	; (800d624 <USBD_FS_ProductStrDescriptor+0x34>)
 800d612:	4805      	ldr	r0, [pc, #20]	; (800d628 <USBD_FS_ProductStrDescriptor+0x38>)
 800d614:	f7fd f956 	bl	800a8c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d618:	4b02      	ldr	r3, [pc, #8]	; (800d624 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d61a:	4618      	mov	r0, r3
 800d61c:	3708      	adds	r7, #8
 800d61e:	46bd      	mov	sp, r7
 800d620:	bd80      	pop	{r7, pc}
 800d622:	bf00      	nop
 800d624:	20002874 	.word	0x20002874
 800d628:	0800e22c 	.word	0x0800e22c

0800d62c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d62c:	b580      	push	{r7, lr}
 800d62e:	b082      	sub	sp, #8
 800d630:	af00      	add	r7, sp, #0
 800d632:	4603      	mov	r3, r0
 800d634:	6039      	str	r1, [r7, #0]
 800d636:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d638:	683a      	ldr	r2, [r7, #0]
 800d63a:	4904      	ldr	r1, [pc, #16]	; (800d64c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d63c:	4804      	ldr	r0, [pc, #16]	; (800d650 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d63e:	f7fd f941 	bl	800a8c4 <USBD_GetString>
  return USBD_StrDesc;
 800d642:	4b02      	ldr	r3, [pc, #8]	; (800d64c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d644:	4618      	mov	r0, r3
 800d646:	3708      	adds	r7, #8
 800d648:	46bd      	mov	sp, r7
 800d64a:	bd80      	pop	{r7, pc}
 800d64c:	20002874 	.word	0x20002874
 800d650:	0800e244 	.word	0x0800e244

0800d654 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d654:	b580      	push	{r7, lr}
 800d656:	b082      	sub	sp, #8
 800d658:	af00      	add	r7, sp, #0
 800d65a:	4603      	mov	r3, r0
 800d65c:	6039      	str	r1, [r7, #0]
 800d65e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d660:	683b      	ldr	r3, [r7, #0]
 800d662:	221a      	movs	r2, #26
 800d664:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d666:	f000 f843 	bl	800d6f0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d66a:	4b02      	ldr	r3, [pc, #8]	; (800d674 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d66c:	4618      	mov	r0, r3
 800d66e:	3708      	adds	r7, #8
 800d670:	46bd      	mov	sp, r7
 800d672:	bd80      	pop	{r7, pc}
 800d674:	20000168 	.word	0x20000168

0800d678 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d678:	b580      	push	{r7, lr}
 800d67a:	b082      	sub	sp, #8
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	4603      	mov	r3, r0
 800d680:	6039      	str	r1, [r7, #0]
 800d682:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d684:	79fb      	ldrb	r3, [r7, #7]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d105      	bne.n	800d696 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d68a:	683a      	ldr	r2, [r7, #0]
 800d68c:	4907      	ldr	r1, [pc, #28]	; (800d6ac <USBD_FS_ConfigStrDescriptor+0x34>)
 800d68e:	4808      	ldr	r0, [pc, #32]	; (800d6b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d690:	f7fd f918 	bl	800a8c4 <USBD_GetString>
 800d694:	e004      	b.n	800d6a0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d696:	683a      	ldr	r2, [r7, #0]
 800d698:	4904      	ldr	r1, [pc, #16]	; (800d6ac <USBD_FS_ConfigStrDescriptor+0x34>)
 800d69a:	4805      	ldr	r0, [pc, #20]	; (800d6b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d69c:	f7fd f912 	bl	800a8c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d6a0:	4b02      	ldr	r3, [pc, #8]	; (800d6ac <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	3708      	adds	r7, #8
 800d6a6:	46bd      	mov	sp, r7
 800d6a8:	bd80      	pop	{r7, pc}
 800d6aa:	bf00      	nop
 800d6ac:	20002874 	.word	0x20002874
 800d6b0:	0800e258 	.word	0x0800e258

0800d6b4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d6b4:	b580      	push	{r7, lr}
 800d6b6:	b082      	sub	sp, #8
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	4603      	mov	r3, r0
 800d6bc:	6039      	str	r1, [r7, #0]
 800d6be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d6c0:	79fb      	ldrb	r3, [r7, #7]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d105      	bne.n	800d6d2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d6c6:	683a      	ldr	r2, [r7, #0]
 800d6c8:	4907      	ldr	r1, [pc, #28]	; (800d6e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d6ca:	4808      	ldr	r0, [pc, #32]	; (800d6ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d6cc:	f7fd f8fa 	bl	800a8c4 <USBD_GetString>
 800d6d0:	e004      	b.n	800d6dc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d6d2:	683a      	ldr	r2, [r7, #0]
 800d6d4:	4904      	ldr	r1, [pc, #16]	; (800d6e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d6d6:	4805      	ldr	r0, [pc, #20]	; (800d6ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d6d8:	f7fd f8f4 	bl	800a8c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d6dc:	4b02      	ldr	r3, [pc, #8]	; (800d6e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d6de:	4618      	mov	r0, r3
 800d6e0:	3708      	adds	r7, #8
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	bd80      	pop	{r7, pc}
 800d6e6:	bf00      	nop
 800d6e8:	20002874 	.word	0x20002874
 800d6ec:	0800e264 	.word	0x0800e264

0800d6f0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	b084      	sub	sp, #16
 800d6f4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d6f6:	4b0f      	ldr	r3, [pc, #60]	; (800d734 <Get_SerialNum+0x44>)
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d6fc:	4b0e      	ldr	r3, [pc, #56]	; (800d738 <Get_SerialNum+0x48>)
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d702:	4b0e      	ldr	r3, [pc, #56]	; (800d73c <Get_SerialNum+0x4c>)
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d708:	68fa      	ldr	r2, [r7, #12]
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	4413      	add	r3, r2
 800d70e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	2b00      	cmp	r3, #0
 800d714:	d009      	beq.n	800d72a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d716:	2208      	movs	r2, #8
 800d718:	4909      	ldr	r1, [pc, #36]	; (800d740 <Get_SerialNum+0x50>)
 800d71a:	68f8      	ldr	r0, [r7, #12]
 800d71c:	f000 f814 	bl	800d748 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d720:	2204      	movs	r2, #4
 800d722:	4908      	ldr	r1, [pc, #32]	; (800d744 <Get_SerialNum+0x54>)
 800d724:	68b8      	ldr	r0, [r7, #8]
 800d726:	f000 f80f 	bl	800d748 <IntToUnicode>
  }
}
 800d72a:	bf00      	nop
 800d72c:	3710      	adds	r7, #16
 800d72e:	46bd      	mov	sp, r7
 800d730:	bd80      	pop	{r7, pc}
 800d732:	bf00      	nop
 800d734:	1ffff7e8 	.word	0x1ffff7e8
 800d738:	1ffff7ec 	.word	0x1ffff7ec
 800d73c:	1ffff7f0 	.word	0x1ffff7f0
 800d740:	2000016a 	.word	0x2000016a
 800d744:	2000017a 	.word	0x2000017a

0800d748 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d748:	b480      	push	{r7}
 800d74a:	b087      	sub	sp, #28
 800d74c:	af00      	add	r7, sp, #0
 800d74e:	60f8      	str	r0, [r7, #12]
 800d750:	60b9      	str	r1, [r7, #8]
 800d752:	4613      	mov	r3, r2
 800d754:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d756:	2300      	movs	r3, #0
 800d758:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d75a:	2300      	movs	r3, #0
 800d75c:	75fb      	strb	r3, [r7, #23]
 800d75e:	e027      	b.n	800d7b0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	0f1b      	lsrs	r3, r3, #28
 800d764:	2b09      	cmp	r3, #9
 800d766:	d80b      	bhi.n	800d780 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	0f1b      	lsrs	r3, r3, #28
 800d76c:	b2da      	uxtb	r2, r3
 800d76e:	7dfb      	ldrb	r3, [r7, #23]
 800d770:	005b      	lsls	r3, r3, #1
 800d772:	4619      	mov	r1, r3
 800d774:	68bb      	ldr	r3, [r7, #8]
 800d776:	440b      	add	r3, r1
 800d778:	3230      	adds	r2, #48	; 0x30
 800d77a:	b2d2      	uxtb	r2, r2
 800d77c:	701a      	strb	r2, [r3, #0]
 800d77e:	e00a      	b.n	800d796 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	0f1b      	lsrs	r3, r3, #28
 800d784:	b2da      	uxtb	r2, r3
 800d786:	7dfb      	ldrb	r3, [r7, #23]
 800d788:	005b      	lsls	r3, r3, #1
 800d78a:	4619      	mov	r1, r3
 800d78c:	68bb      	ldr	r3, [r7, #8]
 800d78e:	440b      	add	r3, r1
 800d790:	3237      	adds	r2, #55	; 0x37
 800d792:	b2d2      	uxtb	r2, r2
 800d794:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	011b      	lsls	r3, r3, #4
 800d79a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d79c:	7dfb      	ldrb	r3, [r7, #23]
 800d79e:	005b      	lsls	r3, r3, #1
 800d7a0:	3301      	adds	r3, #1
 800d7a2:	68ba      	ldr	r2, [r7, #8]
 800d7a4:	4413      	add	r3, r2
 800d7a6:	2200      	movs	r2, #0
 800d7a8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d7aa:	7dfb      	ldrb	r3, [r7, #23]
 800d7ac:	3301      	adds	r3, #1
 800d7ae:	75fb      	strb	r3, [r7, #23]
 800d7b0:	7dfa      	ldrb	r2, [r7, #23]
 800d7b2:	79fb      	ldrb	r3, [r7, #7]
 800d7b4:	429a      	cmp	r2, r3
 800d7b6:	d3d3      	bcc.n	800d760 <IntToUnicode+0x18>
  }
}
 800d7b8:	bf00      	nop
 800d7ba:	bf00      	nop
 800d7bc:	371c      	adds	r7, #28
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	bc80      	pop	{r7}
 800d7c2:	4770      	bx	lr

0800d7c4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	b084      	sub	sp, #16
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	4a0d      	ldr	r2, [pc, #52]	; (800d808 <HAL_PCD_MspInit+0x44>)
 800d7d2:	4293      	cmp	r3, r2
 800d7d4:	d113      	bne.n	800d7fe <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800d7d6:	4b0d      	ldr	r3, [pc, #52]	; (800d80c <HAL_PCD_MspInit+0x48>)
 800d7d8:	69db      	ldr	r3, [r3, #28]
 800d7da:	4a0c      	ldr	r2, [pc, #48]	; (800d80c <HAL_PCD_MspInit+0x48>)
 800d7dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d7e0:	61d3      	str	r3, [r2, #28]
 800d7e2:	4b0a      	ldr	r3, [pc, #40]	; (800d80c <HAL_PCD_MspInit+0x48>)
 800d7e4:	69db      	ldr	r3, [r3, #28]
 800d7e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d7ea:	60fb      	str	r3, [r7, #12]
 800d7ec:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800d7ee:	2200      	movs	r2, #0
 800d7f0:	2105      	movs	r1, #5
 800d7f2:	2014      	movs	r0, #20
 800d7f4:	f7f5 fa09 	bl	8002c0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800d7f8:	2014      	movs	r0, #20
 800d7fa:	f7f5 fa22 	bl	8002c42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800d7fe:	bf00      	nop
 800d800:	3710      	adds	r7, #16
 800d802:	46bd      	mov	sp, r7
 800d804:	bd80      	pop	{r7, pc}
 800d806:	bf00      	nop
 800d808:	40005c00 	.word	0x40005c00
 800d80c:	40021000 	.word	0x40021000

0800d810 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d810:	b580      	push	{r7, lr}
 800d812:	b082      	sub	sp, #8
 800d814:	af00      	add	r7, sp, #0
 800d816:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800d824:	4619      	mov	r1, r3
 800d826:	4610      	mov	r0, r2
 800d828:	f7fc f91c 	bl	8009a64 <USBD_LL_SetupStage>
}
 800d82c:	bf00      	nop
 800d82e:	3708      	adds	r7, #8
 800d830:	46bd      	mov	sp, r7
 800d832:	bd80      	pop	{r7, pc}

0800d834 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d834:	b580      	push	{r7, lr}
 800d836:	b082      	sub	sp, #8
 800d838:	af00      	add	r7, sp, #0
 800d83a:	6078      	str	r0, [r7, #4]
 800d83c:	460b      	mov	r3, r1
 800d83e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800d846:	78fa      	ldrb	r2, [r7, #3]
 800d848:	6879      	ldr	r1, [r7, #4]
 800d84a:	4613      	mov	r3, r2
 800d84c:	009b      	lsls	r3, r3, #2
 800d84e:	4413      	add	r3, r2
 800d850:	00db      	lsls	r3, r3, #3
 800d852:	440b      	add	r3, r1
 800d854:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800d858:	681a      	ldr	r2, [r3, #0]
 800d85a:	78fb      	ldrb	r3, [r7, #3]
 800d85c:	4619      	mov	r1, r3
 800d85e:	f7fc f94e 	bl	8009afe <USBD_LL_DataOutStage>
}
 800d862:	bf00      	nop
 800d864:	3708      	adds	r7, #8
 800d866:	46bd      	mov	sp, r7
 800d868:	bd80      	pop	{r7, pc}

0800d86a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d86a:	b580      	push	{r7, lr}
 800d86c:	b082      	sub	sp, #8
 800d86e:	af00      	add	r7, sp, #0
 800d870:	6078      	str	r0, [r7, #4]
 800d872:	460b      	mov	r3, r1
 800d874:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800d87c:	78fa      	ldrb	r2, [r7, #3]
 800d87e:	6879      	ldr	r1, [r7, #4]
 800d880:	4613      	mov	r3, r2
 800d882:	009b      	lsls	r3, r3, #2
 800d884:	4413      	add	r3, r2
 800d886:	00db      	lsls	r3, r3, #3
 800d888:	440b      	add	r3, r1
 800d88a:	333c      	adds	r3, #60	; 0x3c
 800d88c:	681a      	ldr	r2, [r3, #0]
 800d88e:	78fb      	ldrb	r3, [r7, #3]
 800d890:	4619      	mov	r1, r3
 800d892:	f7fc f9a5 	bl	8009be0 <USBD_LL_DataInStage>
}
 800d896:	bf00      	nop
 800d898:	3708      	adds	r7, #8
 800d89a:	46bd      	mov	sp, r7
 800d89c:	bd80      	pop	{r7, pc}

0800d89e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d89e:	b580      	push	{r7, lr}
 800d8a0:	b082      	sub	sp, #8
 800d8a2:	af00      	add	r7, sp, #0
 800d8a4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	f7fc fab5 	bl	8009e1c <USBD_LL_SOF>
}
 800d8b2:	bf00      	nop
 800d8b4:	3708      	adds	r7, #8
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	bd80      	pop	{r7, pc}

0800d8ba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8ba:	b580      	push	{r7, lr}
 800d8bc:	b084      	sub	sp, #16
 800d8be:	af00      	add	r7, sp, #0
 800d8c0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d8c2:	2301      	movs	r3, #1
 800d8c4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	689b      	ldr	r3, [r3, #8]
 800d8ca:	2b02      	cmp	r3, #2
 800d8cc:	d001      	beq.n	800d8d2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d8ce:	f7f4 fd99 	bl	8002404 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d8d8:	7bfa      	ldrb	r2, [r7, #15]
 800d8da:	4611      	mov	r1, r2
 800d8dc:	4618      	mov	r0, r3
 800d8de:	f7fc fa65 	bl	8009dac <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	f7fc fa1e 	bl	8009d2a <USBD_LL_Reset>
}
 800d8ee:	bf00      	nop
 800d8f0:	3710      	adds	r7, #16
 800d8f2:	46bd      	mov	sp, r7
 800d8f4:	bd80      	pop	{r7, pc}
	...

0800d8f8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	b082      	sub	sp, #8
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d906:	4618      	mov	r0, r3
 800d908:	f7fc fa5f 	bl	8009dca <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	699b      	ldr	r3, [r3, #24]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d005      	beq.n	800d920 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d914:	4b04      	ldr	r3, [pc, #16]	; (800d928 <HAL_PCD_SuspendCallback+0x30>)
 800d916:	691b      	ldr	r3, [r3, #16]
 800d918:	4a03      	ldr	r2, [pc, #12]	; (800d928 <HAL_PCD_SuspendCallback+0x30>)
 800d91a:	f043 0306 	orr.w	r3, r3, #6
 800d91e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d920:	bf00      	nop
 800d922:	3708      	adds	r7, #8
 800d924:	46bd      	mov	sp, r7
 800d926:	bd80      	pop	{r7, pc}
 800d928:	e000ed00 	.word	0xe000ed00

0800d92c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d92c:	b580      	push	{r7, lr}
 800d92e:	b082      	sub	sp, #8
 800d930:	af00      	add	r7, sp, #0
 800d932:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d93a:	4618      	mov	r0, r3
 800d93c:	f7fc fa59 	bl	8009df2 <USBD_LL_Resume>
}
 800d940:	bf00      	nop
 800d942:	3708      	adds	r7, #8
 800d944:	46bd      	mov	sp, r7
 800d946:	bd80      	pop	{r7, pc}

0800d948 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b082      	sub	sp, #8
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800d950:	4a28      	ldr	r2, [pc, #160]	; (800d9f4 <USBD_LL_Init+0xac>)
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	4a26      	ldr	r2, [pc, #152]	; (800d9f4 <USBD_LL_Init+0xac>)
 800d95c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800d960:	4b24      	ldr	r3, [pc, #144]	; (800d9f4 <USBD_LL_Init+0xac>)
 800d962:	4a25      	ldr	r2, [pc, #148]	; (800d9f8 <USBD_LL_Init+0xb0>)
 800d964:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d966:	4b23      	ldr	r3, [pc, #140]	; (800d9f4 <USBD_LL_Init+0xac>)
 800d968:	2208      	movs	r2, #8
 800d96a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d96c:	4b21      	ldr	r3, [pc, #132]	; (800d9f4 <USBD_LL_Init+0xac>)
 800d96e:	2202      	movs	r2, #2
 800d970:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d972:	4b20      	ldr	r3, [pc, #128]	; (800d9f4 <USBD_LL_Init+0xac>)
 800d974:	2200      	movs	r2, #0
 800d976:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800d978:	4b1e      	ldr	r3, [pc, #120]	; (800d9f4 <USBD_LL_Init+0xac>)
 800d97a:	2200      	movs	r2, #0
 800d97c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d97e:	4b1d      	ldr	r3, [pc, #116]	; (800d9f4 <USBD_LL_Init+0xac>)
 800d980:	2200      	movs	r2, #0
 800d982:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d984:	481b      	ldr	r0, [pc, #108]	; (800d9f4 <USBD_LL_Init+0xac>)
 800d986:	f7f6 faf1 	bl	8003f6c <HAL_PCD_Init>
 800d98a:	4603      	mov	r3, r0
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d001      	beq.n	800d994 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800d990:	f7f4 fd38 	bl	8002404 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d99a:	2318      	movs	r3, #24
 800d99c:	2200      	movs	r2, #0
 800d99e:	2100      	movs	r1, #0
 800d9a0:	f7f7 ff65 	bl	800586e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d9aa:	2358      	movs	r3, #88	; 0x58
 800d9ac:	2200      	movs	r2, #0
 800d9ae:	2180      	movs	r1, #128	; 0x80
 800d9b0:	f7f7 ff5d 	bl	800586e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d9ba:	23c0      	movs	r3, #192	; 0xc0
 800d9bc:	2200      	movs	r2, #0
 800d9be:	2181      	movs	r1, #129	; 0x81
 800d9c0:	f7f7 ff55 	bl	800586e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d9ca:	f44f 7388 	mov.w	r3, #272	; 0x110
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	2101      	movs	r1, #1
 800d9d2:	f7f7 ff4c 	bl	800586e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d9dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d9e0:	2200      	movs	r2, #0
 800d9e2:	2182      	movs	r1, #130	; 0x82
 800d9e4:	f7f7 ff43 	bl	800586e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800d9e8:	2300      	movs	r3, #0
}
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	3708      	adds	r7, #8
 800d9ee:	46bd      	mov	sp, r7
 800d9f0:	bd80      	pop	{r7, pc}
 800d9f2:	bf00      	nop
 800d9f4:	20002a74 	.word	0x20002a74
 800d9f8:	40005c00 	.word	0x40005c00

0800d9fc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b084      	sub	sp, #16
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da04:	2300      	movs	r3, #0
 800da06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da08:	2300      	movs	r3, #0
 800da0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800da12:	4618      	mov	r0, r3
 800da14:	f7f6 fbb5 	bl	8004182 <HAL_PCD_Start>
 800da18:	4603      	mov	r3, r0
 800da1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da1c:	7bfb      	ldrb	r3, [r7, #15]
 800da1e:	4618      	mov	r0, r3
 800da20:	f000 f94e 	bl	800dcc0 <USBD_Get_USB_Status>
 800da24:	4603      	mov	r3, r0
 800da26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800da28:	7bbb      	ldrb	r3, [r7, #14]
}
 800da2a:	4618      	mov	r0, r3
 800da2c:	3710      	adds	r7, #16
 800da2e:	46bd      	mov	sp, r7
 800da30:	bd80      	pop	{r7, pc}

0800da32 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800da32:	b580      	push	{r7, lr}
 800da34:	b084      	sub	sp, #16
 800da36:	af00      	add	r7, sp, #0
 800da38:	6078      	str	r0, [r7, #4]
 800da3a:	4608      	mov	r0, r1
 800da3c:	4611      	mov	r1, r2
 800da3e:	461a      	mov	r2, r3
 800da40:	4603      	mov	r3, r0
 800da42:	70fb      	strb	r3, [r7, #3]
 800da44:	460b      	mov	r3, r1
 800da46:	70bb      	strb	r3, [r7, #2]
 800da48:	4613      	mov	r3, r2
 800da4a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da4c:	2300      	movs	r3, #0
 800da4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da50:	2300      	movs	r3, #0
 800da52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800da5a:	78bb      	ldrb	r3, [r7, #2]
 800da5c:	883a      	ldrh	r2, [r7, #0]
 800da5e:	78f9      	ldrb	r1, [r7, #3]
 800da60:	f7f6 fd2d 	bl	80044be <HAL_PCD_EP_Open>
 800da64:	4603      	mov	r3, r0
 800da66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da68:	7bfb      	ldrb	r3, [r7, #15]
 800da6a:	4618      	mov	r0, r3
 800da6c:	f000 f928 	bl	800dcc0 <USBD_Get_USB_Status>
 800da70:	4603      	mov	r3, r0
 800da72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800da74:	7bbb      	ldrb	r3, [r7, #14]
}
 800da76:	4618      	mov	r0, r3
 800da78:	3710      	adds	r7, #16
 800da7a:	46bd      	mov	sp, r7
 800da7c:	bd80      	pop	{r7, pc}

0800da7e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800da7e:	b580      	push	{r7, lr}
 800da80:	b084      	sub	sp, #16
 800da82:	af00      	add	r7, sp, #0
 800da84:	6078      	str	r0, [r7, #4]
 800da86:	460b      	mov	r3, r1
 800da88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da8a:	2300      	movs	r3, #0
 800da8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da8e:	2300      	movs	r3, #0
 800da90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800da98:	78fa      	ldrb	r2, [r7, #3]
 800da9a:	4611      	mov	r1, r2
 800da9c:	4618      	mov	r0, r3
 800da9e:	f7f6 fd74 	bl	800458a <HAL_PCD_EP_Close>
 800daa2:	4603      	mov	r3, r0
 800daa4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800daa6:	7bfb      	ldrb	r3, [r7, #15]
 800daa8:	4618      	mov	r0, r3
 800daaa:	f000 f909 	bl	800dcc0 <USBD_Get_USB_Status>
 800daae:	4603      	mov	r3, r0
 800dab0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dab2:	7bbb      	ldrb	r3, [r7, #14]
}
 800dab4:	4618      	mov	r0, r3
 800dab6:	3710      	adds	r7, #16
 800dab8:	46bd      	mov	sp, r7
 800daba:	bd80      	pop	{r7, pc}

0800dabc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dabc:	b580      	push	{r7, lr}
 800dabe:	b084      	sub	sp, #16
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	6078      	str	r0, [r7, #4]
 800dac4:	460b      	mov	r3, r1
 800dac6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dac8:	2300      	movs	r3, #0
 800daca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dacc:	2300      	movs	r3, #0
 800dace:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dad6:	78fa      	ldrb	r2, [r7, #3]
 800dad8:	4611      	mov	r1, r2
 800dada:	4618      	mov	r0, r3
 800dadc:	f7f6 fe34 	bl	8004748 <HAL_PCD_EP_SetStall>
 800dae0:	4603      	mov	r3, r0
 800dae2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dae4:	7bfb      	ldrb	r3, [r7, #15]
 800dae6:	4618      	mov	r0, r3
 800dae8:	f000 f8ea 	bl	800dcc0 <USBD_Get_USB_Status>
 800daec:	4603      	mov	r3, r0
 800daee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800daf0:	7bbb      	ldrb	r3, [r7, #14]
}
 800daf2:	4618      	mov	r0, r3
 800daf4:	3710      	adds	r7, #16
 800daf6:	46bd      	mov	sp, r7
 800daf8:	bd80      	pop	{r7, pc}

0800dafa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dafa:	b580      	push	{r7, lr}
 800dafc:	b084      	sub	sp, #16
 800dafe:	af00      	add	r7, sp, #0
 800db00:	6078      	str	r0, [r7, #4]
 800db02:	460b      	mov	r3, r1
 800db04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db06:	2300      	movs	r3, #0
 800db08:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db0a:	2300      	movs	r3, #0
 800db0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800db14:	78fa      	ldrb	r2, [r7, #3]
 800db16:	4611      	mov	r1, r2
 800db18:	4618      	mov	r0, r3
 800db1a:	f7f6 fe75 	bl	8004808 <HAL_PCD_EP_ClrStall>
 800db1e:	4603      	mov	r3, r0
 800db20:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db22:	7bfb      	ldrb	r3, [r7, #15]
 800db24:	4618      	mov	r0, r3
 800db26:	f000 f8cb 	bl	800dcc0 <USBD_Get_USB_Status>
 800db2a:	4603      	mov	r3, r0
 800db2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db2e:	7bbb      	ldrb	r3, [r7, #14]
}
 800db30:	4618      	mov	r0, r3
 800db32:	3710      	adds	r7, #16
 800db34:	46bd      	mov	sp, r7
 800db36:	bd80      	pop	{r7, pc}

0800db38 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800db38:	b480      	push	{r7}
 800db3a:	b085      	sub	sp, #20
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	6078      	str	r0, [r7, #4]
 800db40:	460b      	mov	r3, r1
 800db42:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800db4a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800db4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800db50:	2b00      	cmp	r3, #0
 800db52:	da0c      	bge.n	800db6e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800db54:	78fb      	ldrb	r3, [r7, #3]
 800db56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db5a:	68f9      	ldr	r1, [r7, #12]
 800db5c:	1c5a      	adds	r2, r3, #1
 800db5e:	4613      	mov	r3, r2
 800db60:	009b      	lsls	r3, r3, #2
 800db62:	4413      	add	r3, r2
 800db64:	00db      	lsls	r3, r3, #3
 800db66:	440b      	add	r3, r1
 800db68:	3302      	adds	r3, #2
 800db6a:	781b      	ldrb	r3, [r3, #0]
 800db6c:	e00b      	b.n	800db86 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800db6e:	78fb      	ldrb	r3, [r7, #3]
 800db70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800db74:	68f9      	ldr	r1, [r7, #12]
 800db76:	4613      	mov	r3, r2
 800db78:	009b      	lsls	r3, r3, #2
 800db7a:	4413      	add	r3, r2
 800db7c:	00db      	lsls	r3, r3, #3
 800db7e:	440b      	add	r3, r1
 800db80:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800db84:	781b      	ldrb	r3, [r3, #0]
  }
}
 800db86:	4618      	mov	r0, r3
 800db88:	3714      	adds	r7, #20
 800db8a:	46bd      	mov	sp, r7
 800db8c:	bc80      	pop	{r7}
 800db8e:	4770      	bx	lr

0800db90 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800db90:	b580      	push	{r7, lr}
 800db92:	b084      	sub	sp, #16
 800db94:	af00      	add	r7, sp, #0
 800db96:	6078      	str	r0, [r7, #4]
 800db98:	460b      	mov	r3, r1
 800db9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db9c:	2300      	movs	r3, #0
 800db9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dba0:	2300      	movs	r3, #0
 800dba2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dbaa:	78fa      	ldrb	r2, [r7, #3]
 800dbac:	4611      	mov	r1, r2
 800dbae:	4618      	mov	r0, r3
 800dbb0:	f7f6 fc60 	bl	8004474 <HAL_PCD_SetAddress>
 800dbb4:	4603      	mov	r3, r0
 800dbb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dbb8:	7bfb      	ldrb	r3, [r7, #15]
 800dbba:	4618      	mov	r0, r3
 800dbbc:	f000 f880 	bl	800dcc0 <USBD_Get_USB_Status>
 800dbc0:	4603      	mov	r3, r0
 800dbc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dbc4:	7bbb      	ldrb	r3, [r7, #14]
}
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	3710      	adds	r7, #16
 800dbca:	46bd      	mov	sp, r7
 800dbcc:	bd80      	pop	{r7, pc}

0800dbce <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800dbce:	b580      	push	{r7, lr}
 800dbd0:	b086      	sub	sp, #24
 800dbd2:	af00      	add	r7, sp, #0
 800dbd4:	60f8      	str	r0, [r7, #12]
 800dbd6:	607a      	str	r2, [r7, #4]
 800dbd8:	461a      	mov	r2, r3
 800dbda:	460b      	mov	r3, r1
 800dbdc:	72fb      	strb	r3, [r7, #11]
 800dbde:	4613      	mov	r3, r2
 800dbe0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dbe2:	2300      	movs	r3, #0
 800dbe4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800dbf0:	893b      	ldrh	r3, [r7, #8]
 800dbf2:	7af9      	ldrb	r1, [r7, #11]
 800dbf4:	687a      	ldr	r2, [r7, #4]
 800dbf6:	f7f6 fd64 	bl	80046c2 <HAL_PCD_EP_Transmit>
 800dbfa:	4603      	mov	r3, r0
 800dbfc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dbfe:	7dfb      	ldrb	r3, [r7, #23]
 800dc00:	4618      	mov	r0, r3
 800dc02:	f000 f85d 	bl	800dcc0 <USBD_Get_USB_Status>
 800dc06:	4603      	mov	r3, r0
 800dc08:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dc0a:	7dbb      	ldrb	r3, [r7, #22]
}
 800dc0c:	4618      	mov	r0, r3
 800dc0e:	3718      	adds	r7, #24
 800dc10:	46bd      	mov	sp, r7
 800dc12:	bd80      	pop	{r7, pc}

0800dc14 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800dc14:	b580      	push	{r7, lr}
 800dc16:	b086      	sub	sp, #24
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	60f8      	str	r0, [r7, #12]
 800dc1c:	607a      	str	r2, [r7, #4]
 800dc1e:	461a      	mov	r2, r3
 800dc20:	460b      	mov	r3, r1
 800dc22:	72fb      	strb	r3, [r7, #11]
 800dc24:	4613      	mov	r3, r2
 800dc26:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc28:	2300      	movs	r3, #0
 800dc2a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800dc36:	893b      	ldrh	r3, [r7, #8]
 800dc38:	7af9      	ldrb	r1, [r7, #11]
 800dc3a:	687a      	ldr	r2, [r7, #4]
 800dc3c:	f7f6 fced 	bl	800461a <HAL_PCD_EP_Receive>
 800dc40:	4603      	mov	r3, r0
 800dc42:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc44:	7dfb      	ldrb	r3, [r7, #23]
 800dc46:	4618      	mov	r0, r3
 800dc48:	f000 f83a 	bl	800dcc0 <USBD_Get_USB_Status>
 800dc4c:	4603      	mov	r3, r0
 800dc4e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dc50:	7dbb      	ldrb	r3, [r7, #22]
}
 800dc52:	4618      	mov	r0, r3
 800dc54:	3718      	adds	r7, #24
 800dc56:	46bd      	mov	sp, r7
 800dc58:	bd80      	pop	{r7, pc}

0800dc5a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dc5a:	b580      	push	{r7, lr}
 800dc5c:	b082      	sub	sp, #8
 800dc5e:	af00      	add	r7, sp, #0
 800dc60:	6078      	str	r0, [r7, #4]
 800dc62:	460b      	mov	r3, r1
 800dc64:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dc6c:	78fa      	ldrb	r2, [r7, #3]
 800dc6e:	4611      	mov	r1, r2
 800dc70:	4618      	mov	r0, r3
 800dc72:	f7f6 fd0f 	bl	8004694 <HAL_PCD_EP_GetRxCount>
 800dc76:	4603      	mov	r3, r0
}
 800dc78:	4618      	mov	r0, r3
 800dc7a:	3708      	adds	r7, #8
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	bd80      	pop	{r7, pc}

0800dc80 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800dc80:	b480      	push	{r7}
 800dc82:	b083      	sub	sp, #12
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800dc88:	4b02      	ldr	r3, [pc, #8]	; (800dc94 <USBD_static_malloc+0x14>)
}
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	370c      	adds	r7, #12
 800dc8e:	46bd      	mov	sp, r7
 800dc90:	bc80      	pop	{r7}
 800dc92:	4770      	bx	lr
 800dc94:	20002d60 	.word	0x20002d60

0800dc98 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800dc98:	b480      	push	{r7}
 800dc9a:	b083      	sub	sp, #12
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	6078      	str	r0, [r7, #4]

}
 800dca0:	bf00      	nop
 800dca2:	370c      	adds	r7, #12
 800dca4:	46bd      	mov	sp, r7
 800dca6:	bc80      	pop	{r7}
 800dca8:	4770      	bx	lr

0800dcaa <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dcaa:	b480      	push	{r7}
 800dcac:	b083      	sub	sp, #12
 800dcae:	af00      	add	r7, sp, #0
 800dcb0:	6078      	str	r0, [r7, #4]
 800dcb2:	460b      	mov	r3, r1
 800dcb4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800dcb6:	bf00      	nop
 800dcb8:	370c      	adds	r7, #12
 800dcba:	46bd      	mov	sp, r7
 800dcbc:	bc80      	pop	{r7}
 800dcbe:	4770      	bx	lr

0800dcc0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800dcc0:	b480      	push	{r7}
 800dcc2:	b085      	sub	sp, #20
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	4603      	mov	r3, r0
 800dcc8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dcca:	2300      	movs	r3, #0
 800dccc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800dcce:	79fb      	ldrb	r3, [r7, #7]
 800dcd0:	2b03      	cmp	r3, #3
 800dcd2:	d817      	bhi.n	800dd04 <USBD_Get_USB_Status+0x44>
 800dcd4:	a201      	add	r2, pc, #4	; (adr r2, 800dcdc <USBD_Get_USB_Status+0x1c>)
 800dcd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcda:	bf00      	nop
 800dcdc:	0800dced 	.word	0x0800dced
 800dce0:	0800dcf3 	.word	0x0800dcf3
 800dce4:	0800dcf9 	.word	0x0800dcf9
 800dce8:	0800dcff 	.word	0x0800dcff
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800dcec:	2300      	movs	r3, #0
 800dcee:	73fb      	strb	r3, [r7, #15]
    break;
 800dcf0:	e00b      	b.n	800dd0a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dcf2:	2302      	movs	r3, #2
 800dcf4:	73fb      	strb	r3, [r7, #15]
    break;
 800dcf6:	e008      	b.n	800dd0a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dcf8:	2301      	movs	r3, #1
 800dcfa:	73fb      	strb	r3, [r7, #15]
    break;
 800dcfc:	e005      	b.n	800dd0a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dcfe:	2302      	movs	r3, #2
 800dd00:	73fb      	strb	r3, [r7, #15]
    break;
 800dd02:	e002      	b.n	800dd0a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800dd04:	2302      	movs	r3, #2
 800dd06:	73fb      	strb	r3, [r7, #15]
    break;
 800dd08:	bf00      	nop
  }
  return usb_status;
 800dd0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd0c:	4618      	mov	r0, r3
 800dd0e:	3714      	adds	r7, #20
 800dd10:	46bd      	mov	sp, r7
 800dd12:	bc80      	pop	{r7}
 800dd14:	4770      	bx	lr
 800dd16:	bf00      	nop

0800dd18 <__aeabi_atexit>:
 800dd18:	460b      	mov	r3, r1
 800dd1a:	4601      	mov	r1, r0
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	f000 b8b5 	b.w	800de8c <__cxa_atexit>

0800dd22 <_ZdlPvj>:
 800dd22:	f000 b886 	b.w	800de32 <_ZdlPv>

0800dd26 <_Znwj>:
 800dd26:	2801      	cmp	r0, #1
 800dd28:	bf38      	it	cc
 800dd2a:	2001      	movcc	r0, #1
 800dd2c:	b510      	push	{r4, lr}
 800dd2e:	4604      	mov	r4, r0
 800dd30:	4620      	mov	r0, r4
 800dd32:	f000 f8e3 	bl	800defc <malloc>
 800dd36:	b930      	cbnz	r0, 800dd46 <_Znwj+0x20>
 800dd38:	f000 f890 	bl	800de5c <_ZSt15get_new_handlerv>
 800dd3c:	b908      	cbnz	r0, 800dd42 <_Znwj+0x1c>
 800dd3e:	f000 f89e 	bl	800de7e <abort>
 800dd42:	4780      	blx	r0
 800dd44:	e7f4      	b.n	800dd30 <_Znwj+0xa>
 800dd46:	bd10      	pop	{r4, pc}

0800dd48 <__cxa_pure_virtual>:
 800dd48:	b508      	push	{r3, lr}
 800dd4a:	f000 f881 	bl	800de50 <_ZSt9terminatev>

0800dd4e <_ZNSaIcEC1Ev>:
 800dd4e:	4770      	bx	lr

0800dd50 <_ZNSaIcED1Ev>:
 800dd50:	4770      	bx	lr

0800dd52 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 800dd52:	b10a      	cbz	r2, 800dd58 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 800dd54:	f000 b8e2 	b.w	800df1c <memcpy>
 800dd58:	4770      	bx	lr
	...

0800dd5c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 800dd5c:	b508      	push	{r3, lr}
 800dd5e:	680b      	ldr	r3, [r1, #0]
 800dd60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dd64:	d302      	bcc.n	800dd6c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 800dd66:	480d      	ldr	r0, [pc, #52]	; (800dd9c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 800dd68:	f000 f886 	bl	800de78 <_ZSt20__throw_length_errorPKc>
 800dd6c:	4293      	cmp	r3, r2
 800dd6e:	d90b      	bls.n	800dd88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800dd70:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 800dd74:	ea4f 0042 	mov.w	r0, r2, lsl #1
 800dd78:	d206      	bcs.n	800dd88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800dd7a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800dd7e:	bf2a      	itet	cs
 800dd80:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 800dd84:	6008      	strcc	r0, [r1, #0]
 800dd86:	600b      	strcs	r3, [r1, #0]
 800dd88:	6808      	ldr	r0, [r1, #0]
 800dd8a:	3001      	adds	r0, #1
 800dd8c:	d501      	bpl.n	800dd92 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 800dd8e:	f000 f86d 	bl	800de6c <_ZSt17__throw_bad_allocv>
 800dd92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800dd96:	f7ff bfc6 	b.w	800dd26 <_Znwj>
 800dd9a:	bf00      	nop
 800dd9c:	0800e430 	.word	0x0800e430

0800dda0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 800dda0:	2a01      	cmp	r2, #1
 800dda2:	b410      	push	{r4}
 800dda4:	d103      	bne.n	800ddae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xe>
 800dda6:	780a      	ldrb	r2, [r1, #0]
 800dda8:	bc10      	pop	{r4}
 800ddaa:	7002      	strb	r2, [r0, #0]
 800ddac:	4770      	bx	lr
 800ddae:	bc10      	pop	{r4}
 800ddb0:	f7ff bfcf 	b.w	800dd52 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

0800ddb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 800ddb4:	b508      	push	{r3, lr}
 800ddb6:	1a52      	subs	r2, r2, r1
 800ddb8:	f7ff fff2 	bl	800dda0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800ddbc:	bd08      	pop	{r3, pc}
	...

0800ddc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 800ddc0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ddc2:	4604      	mov	r4, r0
 800ddc4:	4616      	mov	r6, r2
 800ddc6:	460d      	mov	r5, r1
 800ddc8:	b919      	cbnz	r1, 800ddd2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800ddca:	b112      	cbz	r2, 800ddd2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800ddcc:	480d      	ldr	r0, [pc, #52]	; (800de04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 800ddce:	f000 f850 	bl	800de72 <_ZSt19__throw_logic_errorPKc>
 800ddd2:	1b73      	subs	r3, r6, r5
 800ddd4:	2b0f      	cmp	r3, #15
 800ddd6:	9301      	str	r3, [sp, #4]
 800ddd8:	d907      	bls.n	800ddea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 800ddda:	2200      	movs	r2, #0
 800dddc:	4620      	mov	r0, r4
 800ddde:	a901      	add	r1, sp, #4
 800dde0:	f7ff ffbc 	bl	800dd5c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800dde4:	9b01      	ldr	r3, [sp, #4]
 800dde6:	6020      	str	r0, [r4, #0]
 800dde8:	60a3      	str	r3, [r4, #8]
 800ddea:	4632      	mov	r2, r6
 800ddec:	4629      	mov	r1, r5
 800ddee:	6820      	ldr	r0, [r4, #0]
 800ddf0:	f7ff ffe0 	bl	800ddb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 800ddf4:	2100      	movs	r1, #0
 800ddf6:	9b01      	ldr	r3, [sp, #4]
 800ddf8:	6822      	ldr	r2, [r4, #0]
 800ddfa:	6063      	str	r3, [r4, #4]
 800ddfc:	54d1      	strb	r1, [r2, r3]
 800ddfe:	b002      	add	sp, #8
 800de00:	bd70      	pop	{r4, r5, r6, pc}
 800de02:	bf00      	nop
 800de04:	0800e448 	.word	0x0800e448

0800de08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 800de08:	b538      	push	{r3, r4, r5, lr}
 800de0a:	f100 0308 	add.w	r3, r0, #8
 800de0e:	4604      	mov	r4, r0
 800de10:	460d      	mov	r5, r1
 800de12:	6003      	str	r3, [r0, #0]
 800de14:	b159      	cbz	r1, 800de2e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 800de16:	4608      	mov	r0, r1
 800de18:	f7f2 fa0a 	bl	8000230 <strlen>
 800de1c:	182a      	adds	r2, r5, r0
 800de1e:	4620      	mov	r0, r4
 800de20:	f04f 0300 	mov.w	r3, #0
 800de24:	4629      	mov	r1, r5
 800de26:	f7ff ffcb 	bl	800ddc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 800de2a:	4620      	mov	r0, r4
 800de2c:	bd38      	pop	{r3, r4, r5, pc}
 800de2e:	2201      	movs	r2, #1
 800de30:	e7f5      	b.n	800de1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

0800de32 <_ZdlPv>:
 800de32:	f000 b86b 	b.w	800df0c <free>

0800de36 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800de36:	b508      	push	{r3, lr}
 800de38:	4780      	blx	r0
 800de3a:	f000 f820 	bl	800de7e <abort>
	...

0800de40 <_ZSt13get_terminatev>:
 800de40:	4b02      	ldr	r3, [pc, #8]	; (800de4c <_ZSt13get_terminatev+0xc>)
 800de42:	6818      	ldr	r0, [r3, #0]
 800de44:	f3bf 8f5b 	dmb	ish
 800de48:	4770      	bx	lr
 800de4a:	bf00      	nop
 800de4c:	20000184 	.word	0x20000184

0800de50 <_ZSt9terminatev>:
 800de50:	b508      	push	{r3, lr}
 800de52:	f7ff fff5 	bl	800de40 <_ZSt13get_terminatev>
 800de56:	f7ff ffee 	bl	800de36 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0800de5c <_ZSt15get_new_handlerv>:
 800de5c:	4b02      	ldr	r3, [pc, #8]	; (800de68 <_ZSt15get_new_handlerv+0xc>)
 800de5e:	6818      	ldr	r0, [r3, #0]
 800de60:	f3bf 8f5b 	dmb	ish
 800de64:	4770      	bx	lr
 800de66:	bf00      	nop
 800de68:	20002f80 	.word	0x20002f80

0800de6c <_ZSt17__throw_bad_allocv>:
 800de6c:	b508      	push	{r3, lr}
 800de6e:	f000 f806 	bl	800de7e <abort>

0800de72 <_ZSt19__throw_logic_errorPKc>:
 800de72:	b508      	push	{r3, lr}
 800de74:	f000 f803 	bl	800de7e <abort>

0800de78 <_ZSt20__throw_length_errorPKc>:
 800de78:	b508      	push	{r3, lr}
 800de7a:	f000 f800 	bl	800de7e <abort>

0800de7e <abort>:
 800de7e:	2006      	movs	r0, #6
 800de80:	b508      	push	{r3, lr}
 800de82:	f000 f975 	bl	800e170 <raise>
 800de86:	2001      	movs	r0, #1
 800de88:	f7f4 fd19 	bl	80028be <_exit>

0800de8c <__cxa_atexit>:
 800de8c:	b510      	push	{r4, lr}
 800de8e:	4604      	mov	r4, r0
 800de90:	4804      	ldr	r0, [pc, #16]	; (800dea4 <__cxa_atexit+0x18>)
 800de92:	4613      	mov	r3, r2
 800de94:	b120      	cbz	r0, 800dea0 <__cxa_atexit+0x14>
 800de96:	460a      	mov	r2, r1
 800de98:	2002      	movs	r0, #2
 800de9a:	4621      	mov	r1, r4
 800de9c:	f3af 8000 	nop.w
 800dea0:	bd10      	pop	{r4, pc}
 800dea2:	bf00      	nop
 800dea4:	00000000 	.word	0x00000000

0800dea8 <__errno>:
 800dea8:	4b01      	ldr	r3, [pc, #4]	; (800deb0 <__errno+0x8>)
 800deaa:	6818      	ldr	r0, [r3, #0]
 800deac:	4770      	bx	lr
 800deae:	bf00      	nop
 800deb0:	20000188 	.word	0x20000188

0800deb4 <__libc_init_array>:
 800deb4:	b570      	push	{r4, r5, r6, lr}
 800deb6:	2600      	movs	r6, #0
 800deb8:	4d0c      	ldr	r5, [pc, #48]	; (800deec <__libc_init_array+0x38>)
 800deba:	4c0d      	ldr	r4, [pc, #52]	; (800def0 <__libc_init_array+0x3c>)
 800debc:	1b64      	subs	r4, r4, r5
 800debe:	10a4      	asrs	r4, r4, #2
 800dec0:	42a6      	cmp	r6, r4
 800dec2:	d109      	bne.n	800ded8 <__libc_init_array+0x24>
 800dec4:	f000 f97e 	bl	800e1c4 <_init>
 800dec8:	2600      	movs	r6, #0
 800deca:	4d0a      	ldr	r5, [pc, #40]	; (800def4 <__libc_init_array+0x40>)
 800decc:	4c0a      	ldr	r4, [pc, #40]	; (800def8 <__libc_init_array+0x44>)
 800dece:	1b64      	subs	r4, r4, r5
 800ded0:	10a4      	asrs	r4, r4, #2
 800ded2:	42a6      	cmp	r6, r4
 800ded4:	d105      	bne.n	800dee2 <__libc_init_array+0x2e>
 800ded6:	bd70      	pop	{r4, r5, r6, pc}
 800ded8:	f855 3b04 	ldr.w	r3, [r5], #4
 800dedc:	4798      	blx	r3
 800dede:	3601      	adds	r6, #1
 800dee0:	e7ee      	b.n	800dec0 <__libc_init_array+0xc>
 800dee2:	f855 3b04 	ldr.w	r3, [r5], #4
 800dee6:	4798      	blx	r3
 800dee8:	3601      	adds	r6, #1
 800deea:	e7f2      	b.n	800ded2 <__libc_init_array+0x1e>
 800deec:	0800e610 	.word	0x0800e610
 800def0:	0800e610 	.word	0x0800e610
 800def4:	0800e610 	.word	0x0800e610
 800def8:	0800e618 	.word	0x0800e618

0800defc <malloc>:
 800defc:	4b02      	ldr	r3, [pc, #8]	; (800df08 <malloc+0xc>)
 800defe:	4601      	mov	r1, r0
 800df00:	6818      	ldr	r0, [r3, #0]
 800df02:	f000 b889 	b.w	800e018 <_malloc_r>
 800df06:	bf00      	nop
 800df08:	20000188 	.word	0x20000188

0800df0c <free>:
 800df0c:	4b02      	ldr	r3, [pc, #8]	; (800df18 <free+0xc>)
 800df0e:	4601      	mov	r1, r0
 800df10:	6818      	ldr	r0, [r3, #0]
 800df12:	f000 b819 	b.w	800df48 <_free_r>
 800df16:	bf00      	nop
 800df18:	20000188 	.word	0x20000188

0800df1c <memcpy>:
 800df1c:	440a      	add	r2, r1
 800df1e:	4291      	cmp	r1, r2
 800df20:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800df24:	d100      	bne.n	800df28 <memcpy+0xc>
 800df26:	4770      	bx	lr
 800df28:	b510      	push	{r4, lr}
 800df2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800df2e:	4291      	cmp	r1, r2
 800df30:	f803 4f01 	strb.w	r4, [r3, #1]!
 800df34:	d1f9      	bne.n	800df2a <memcpy+0xe>
 800df36:	bd10      	pop	{r4, pc}

0800df38 <memset>:
 800df38:	4603      	mov	r3, r0
 800df3a:	4402      	add	r2, r0
 800df3c:	4293      	cmp	r3, r2
 800df3e:	d100      	bne.n	800df42 <memset+0xa>
 800df40:	4770      	bx	lr
 800df42:	f803 1b01 	strb.w	r1, [r3], #1
 800df46:	e7f9      	b.n	800df3c <memset+0x4>

0800df48 <_free_r>:
 800df48:	b538      	push	{r3, r4, r5, lr}
 800df4a:	4605      	mov	r5, r0
 800df4c:	2900      	cmp	r1, #0
 800df4e:	d040      	beq.n	800dfd2 <_free_r+0x8a>
 800df50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df54:	1f0c      	subs	r4, r1, #4
 800df56:	2b00      	cmp	r3, #0
 800df58:	bfb8      	it	lt
 800df5a:	18e4      	addlt	r4, r4, r3
 800df5c:	f000 f924 	bl	800e1a8 <__malloc_lock>
 800df60:	4a1c      	ldr	r2, [pc, #112]	; (800dfd4 <_free_r+0x8c>)
 800df62:	6813      	ldr	r3, [r2, #0]
 800df64:	b933      	cbnz	r3, 800df74 <_free_r+0x2c>
 800df66:	6063      	str	r3, [r4, #4]
 800df68:	6014      	str	r4, [r2, #0]
 800df6a:	4628      	mov	r0, r5
 800df6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800df70:	f000 b920 	b.w	800e1b4 <__malloc_unlock>
 800df74:	42a3      	cmp	r3, r4
 800df76:	d908      	bls.n	800df8a <_free_r+0x42>
 800df78:	6820      	ldr	r0, [r4, #0]
 800df7a:	1821      	adds	r1, r4, r0
 800df7c:	428b      	cmp	r3, r1
 800df7e:	bf01      	itttt	eq
 800df80:	6819      	ldreq	r1, [r3, #0]
 800df82:	685b      	ldreq	r3, [r3, #4]
 800df84:	1809      	addeq	r1, r1, r0
 800df86:	6021      	streq	r1, [r4, #0]
 800df88:	e7ed      	b.n	800df66 <_free_r+0x1e>
 800df8a:	461a      	mov	r2, r3
 800df8c:	685b      	ldr	r3, [r3, #4]
 800df8e:	b10b      	cbz	r3, 800df94 <_free_r+0x4c>
 800df90:	42a3      	cmp	r3, r4
 800df92:	d9fa      	bls.n	800df8a <_free_r+0x42>
 800df94:	6811      	ldr	r1, [r2, #0]
 800df96:	1850      	adds	r0, r2, r1
 800df98:	42a0      	cmp	r0, r4
 800df9a:	d10b      	bne.n	800dfb4 <_free_r+0x6c>
 800df9c:	6820      	ldr	r0, [r4, #0]
 800df9e:	4401      	add	r1, r0
 800dfa0:	1850      	adds	r0, r2, r1
 800dfa2:	4283      	cmp	r3, r0
 800dfa4:	6011      	str	r1, [r2, #0]
 800dfa6:	d1e0      	bne.n	800df6a <_free_r+0x22>
 800dfa8:	6818      	ldr	r0, [r3, #0]
 800dfaa:	685b      	ldr	r3, [r3, #4]
 800dfac:	4401      	add	r1, r0
 800dfae:	6011      	str	r1, [r2, #0]
 800dfb0:	6053      	str	r3, [r2, #4]
 800dfb2:	e7da      	b.n	800df6a <_free_r+0x22>
 800dfb4:	d902      	bls.n	800dfbc <_free_r+0x74>
 800dfb6:	230c      	movs	r3, #12
 800dfb8:	602b      	str	r3, [r5, #0]
 800dfba:	e7d6      	b.n	800df6a <_free_r+0x22>
 800dfbc:	6820      	ldr	r0, [r4, #0]
 800dfbe:	1821      	adds	r1, r4, r0
 800dfc0:	428b      	cmp	r3, r1
 800dfc2:	bf01      	itttt	eq
 800dfc4:	6819      	ldreq	r1, [r3, #0]
 800dfc6:	685b      	ldreq	r3, [r3, #4]
 800dfc8:	1809      	addeq	r1, r1, r0
 800dfca:	6021      	streq	r1, [r4, #0]
 800dfcc:	6063      	str	r3, [r4, #4]
 800dfce:	6054      	str	r4, [r2, #4]
 800dfd0:	e7cb      	b.n	800df6a <_free_r+0x22>
 800dfd2:	bd38      	pop	{r3, r4, r5, pc}
 800dfd4:	20002f84 	.word	0x20002f84

0800dfd8 <sbrk_aligned>:
 800dfd8:	b570      	push	{r4, r5, r6, lr}
 800dfda:	4e0e      	ldr	r6, [pc, #56]	; (800e014 <sbrk_aligned+0x3c>)
 800dfdc:	460c      	mov	r4, r1
 800dfde:	6831      	ldr	r1, [r6, #0]
 800dfe0:	4605      	mov	r5, r0
 800dfe2:	b911      	cbnz	r1, 800dfea <sbrk_aligned+0x12>
 800dfe4:	f000 f88c 	bl	800e100 <_sbrk_r>
 800dfe8:	6030      	str	r0, [r6, #0]
 800dfea:	4621      	mov	r1, r4
 800dfec:	4628      	mov	r0, r5
 800dfee:	f000 f887 	bl	800e100 <_sbrk_r>
 800dff2:	1c43      	adds	r3, r0, #1
 800dff4:	d00a      	beq.n	800e00c <sbrk_aligned+0x34>
 800dff6:	1cc4      	adds	r4, r0, #3
 800dff8:	f024 0403 	bic.w	r4, r4, #3
 800dffc:	42a0      	cmp	r0, r4
 800dffe:	d007      	beq.n	800e010 <sbrk_aligned+0x38>
 800e000:	1a21      	subs	r1, r4, r0
 800e002:	4628      	mov	r0, r5
 800e004:	f000 f87c 	bl	800e100 <_sbrk_r>
 800e008:	3001      	adds	r0, #1
 800e00a:	d101      	bne.n	800e010 <sbrk_aligned+0x38>
 800e00c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800e010:	4620      	mov	r0, r4
 800e012:	bd70      	pop	{r4, r5, r6, pc}
 800e014:	20002f88 	.word	0x20002f88

0800e018 <_malloc_r>:
 800e018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e01c:	1ccd      	adds	r5, r1, #3
 800e01e:	f025 0503 	bic.w	r5, r5, #3
 800e022:	3508      	adds	r5, #8
 800e024:	2d0c      	cmp	r5, #12
 800e026:	bf38      	it	cc
 800e028:	250c      	movcc	r5, #12
 800e02a:	2d00      	cmp	r5, #0
 800e02c:	4607      	mov	r7, r0
 800e02e:	db01      	blt.n	800e034 <_malloc_r+0x1c>
 800e030:	42a9      	cmp	r1, r5
 800e032:	d905      	bls.n	800e040 <_malloc_r+0x28>
 800e034:	230c      	movs	r3, #12
 800e036:	2600      	movs	r6, #0
 800e038:	603b      	str	r3, [r7, #0]
 800e03a:	4630      	mov	r0, r6
 800e03c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e040:	4e2e      	ldr	r6, [pc, #184]	; (800e0fc <_malloc_r+0xe4>)
 800e042:	f000 f8b1 	bl	800e1a8 <__malloc_lock>
 800e046:	6833      	ldr	r3, [r6, #0]
 800e048:	461c      	mov	r4, r3
 800e04a:	bb34      	cbnz	r4, 800e09a <_malloc_r+0x82>
 800e04c:	4629      	mov	r1, r5
 800e04e:	4638      	mov	r0, r7
 800e050:	f7ff ffc2 	bl	800dfd8 <sbrk_aligned>
 800e054:	1c43      	adds	r3, r0, #1
 800e056:	4604      	mov	r4, r0
 800e058:	d14d      	bne.n	800e0f6 <_malloc_r+0xde>
 800e05a:	6834      	ldr	r4, [r6, #0]
 800e05c:	4626      	mov	r6, r4
 800e05e:	2e00      	cmp	r6, #0
 800e060:	d140      	bne.n	800e0e4 <_malloc_r+0xcc>
 800e062:	6823      	ldr	r3, [r4, #0]
 800e064:	4631      	mov	r1, r6
 800e066:	4638      	mov	r0, r7
 800e068:	eb04 0803 	add.w	r8, r4, r3
 800e06c:	f000 f848 	bl	800e100 <_sbrk_r>
 800e070:	4580      	cmp	r8, r0
 800e072:	d13a      	bne.n	800e0ea <_malloc_r+0xd2>
 800e074:	6821      	ldr	r1, [r4, #0]
 800e076:	3503      	adds	r5, #3
 800e078:	1a6d      	subs	r5, r5, r1
 800e07a:	f025 0503 	bic.w	r5, r5, #3
 800e07e:	3508      	adds	r5, #8
 800e080:	2d0c      	cmp	r5, #12
 800e082:	bf38      	it	cc
 800e084:	250c      	movcc	r5, #12
 800e086:	4638      	mov	r0, r7
 800e088:	4629      	mov	r1, r5
 800e08a:	f7ff ffa5 	bl	800dfd8 <sbrk_aligned>
 800e08e:	3001      	adds	r0, #1
 800e090:	d02b      	beq.n	800e0ea <_malloc_r+0xd2>
 800e092:	6823      	ldr	r3, [r4, #0]
 800e094:	442b      	add	r3, r5
 800e096:	6023      	str	r3, [r4, #0]
 800e098:	e00e      	b.n	800e0b8 <_malloc_r+0xa0>
 800e09a:	6822      	ldr	r2, [r4, #0]
 800e09c:	1b52      	subs	r2, r2, r5
 800e09e:	d41e      	bmi.n	800e0de <_malloc_r+0xc6>
 800e0a0:	2a0b      	cmp	r2, #11
 800e0a2:	d916      	bls.n	800e0d2 <_malloc_r+0xba>
 800e0a4:	1961      	adds	r1, r4, r5
 800e0a6:	42a3      	cmp	r3, r4
 800e0a8:	6025      	str	r5, [r4, #0]
 800e0aa:	bf18      	it	ne
 800e0ac:	6059      	strne	r1, [r3, #4]
 800e0ae:	6863      	ldr	r3, [r4, #4]
 800e0b0:	bf08      	it	eq
 800e0b2:	6031      	streq	r1, [r6, #0]
 800e0b4:	5162      	str	r2, [r4, r5]
 800e0b6:	604b      	str	r3, [r1, #4]
 800e0b8:	4638      	mov	r0, r7
 800e0ba:	f104 060b 	add.w	r6, r4, #11
 800e0be:	f000 f879 	bl	800e1b4 <__malloc_unlock>
 800e0c2:	f026 0607 	bic.w	r6, r6, #7
 800e0c6:	1d23      	adds	r3, r4, #4
 800e0c8:	1af2      	subs	r2, r6, r3
 800e0ca:	d0b6      	beq.n	800e03a <_malloc_r+0x22>
 800e0cc:	1b9b      	subs	r3, r3, r6
 800e0ce:	50a3      	str	r3, [r4, r2]
 800e0d0:	e7b3      	b.n	800e03a <_malloc_r+0x22>
 800e0d2:	6862      	ldr	r2, [r4, #4]
 800e0d4:	42a3      	cmp	r3, r4
 800e0d6:	bf0c      	ite	eq
 800e0d8:	6032      	streq	r2, [r6, #0]
 800e0da:	605a      	strne	r2, [r3, #4]
 800e0dc:	e7ec      	b.n	800e0b8 <_malloc_r+0xa0>
 800e0de:	4623      	mov	r3, r4
 800e0e0:	6864      	ldr	r4, [r4, #4]
 800e0e2:	e7b2      	b.n	800e04a <_malloc_r+0x32>
 800e0e4:	4634      	mov	r4, r6
 800e0e6:	6876      	ldr	r6, [r6, #4]
 800e0e8:	e7b9      	b.n	800e05e <_malloc_r+0x46>
 800e0ea:	230c      	movs	r3, #12
 800e0ec:	4638      	mov	r0, r7
 800e0ee:	603b      	str	r3, [r7, #0]
 800e0f0:	f000 f860 	bl	800e1b4 <__malloc_unlock>
 800e0f4:	e7a1      	b.n	800e03a <_malloc_r+0x22>
 800e0f6:	6025      	str	r5, [r4, #0]
 800e0f8:	e7de      	b.n	800e0b8 <_malloc_r+0xa0>
 800e0fa:	bf00      	nop
 800e0fc:	20002f84 	.word	0x20002f84

0800e100 <_sbrk_r>:
 800e100:	b538      	push	{r3, r4, r5, lr}
 800e102:	2300      	movs	r3, #0
 800e104:	4d05      	ldr	r5, [pc, #20]	; (800e11c <_sbrk_r+0x1c>)
 800e106:	4604      	mov	r4, r0
 800e108:	4608      	mov	r0, r1
 800e10a:	602b      	str	r3, [r5, #0]
 800e10c:	f7f4 fbe2 	bl	80028d4 <_sbrk>
 800e110:	1c43      	adds	r3, r0, #1
 800e112:	d102      	bne.n	800e11a <_sbrk_r+0x1a>
 800e114:	682b      	ldr	r3, [r5, #0]
 800e116:	b103      	cbz	r3, 800e11a <_sbrk_r+0x1a>
 800e118:	6023      	str	r3, [r4, #0]
 800e11a:	bd38      	pop	{r3, r4, r5, pc}
 800e11c:	20002f8c 	.word	0x20002f8c

0800e120 <_raise_r>:
 800e120:	291f      	cmp	r1, #31
 800e122:	b538      	push	{r3, r4, r5, lr}
 800e124:	4604      	mov	r4, r0
 800e126:	460d      	mov	r5, r1
 800e128:	d904      	bls.n	800e134 <_raise_r+0x14>
 800e12a:	2316      	movs	r3, #22
 800e12c:	6003      	str	r3, [r0, #0]
 800e12e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e132:	bd38      	pop	{r3, r4, r5, pc}
 800e134:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e136:	b112      	cbz	r2, 800e13e <_raise_r+0x1e>
 800e138:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e13c:	b94b      	cbnz	r3, 800e152 <_raise_r+0x32>
 800e13e:	4620      	mov	r0, r4
 800e140:	f000 f830 	bl	800e1a4 <_getpid_r>
 800e144:	462a      	mov	r2, r5
 800e146:	4601      	mov	r1, r0
 800e148:	4620      	mov	r0, r4
 800e14a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e14e:	f000 b817 	b.w	800e180 <_kill_r>
 800e152:	2b01      	cmp	r3, #1
 800e154:	d00a      	beq.n	800e16c <_raise_r+0x4c>
 800e156:	1c59      	adds	r1, r3, #1
 800e158:	d103      	bne.n	800e162 <_raise_r+0x42>
 800e15a:	2316      	movs	r3, #22
 800e15c:	6003      	str	r3, [r0, #0]
 800e15e:	2001      	movs	r0, #1
 800e160:	e7e7      	b.n	800e132 <_raise_r+0x12>
 800e162:	2400      	movs	r4, #0
 800e164:	4628      	mov	r0, r5
 800e166:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e16a:	4798      	blx	r3
 800e16c:	2000      	movs	r0, #0
 800e16e:	e7e0      	b.n	800e132 <_raise_r+0x12>

0800e170 <raise>:
 800e170:	4b02      	ldr	r3, [pc, #8]	; (800e17c <raise+0xc>)
 800e172:	4601      	mov	r1, r0
 800e174:	6818      	ldr	r0, [r3, #0]
 800e176:	f7ff bfd3 	b.w	800e120 <_raise_r>
 800e17a:	bf00      	nop
 800e17c:	20000188 	.word	0x20000188

0800e180 <_kill_r>:
 800e180:	b538      	push	{r3, r4, r5, lr}
 800e182:	2300      	movs	r3, #0
 800e184:	4d06      	ldr	r5, [pc, #24]	; (800e1a0 <_kill_r+0x20>)
 800e186:	4604      	mov	r4, r0
 800e188:	4608      	mov	r0, r1
 800e18a:	4611      	mov	r1, r2
 800e18c:	602b      	str	r3, [r5, #0]
 800e18e:	f7f4 fb86 	bl	800289e <_kill>
 800e192:	1c43      	adds	r3, r0, #1
 800e194:	d102      	bne.n	800e19c <_kill_r+0x1c>
 800e196:	682b      	ldr	r3, [r5, #0]
 800e198:	b103      	cbz	r3, 800e19c <_kill_r+0x1c>
 800e19a:	6023      	str	r3, [r4, #0]
 800e19c:	bd38      	pop	{r3, r4, r5, pc}
 800e19e:	bf00      	nop
 800e1a0:	20002f8c 	.word	0x20002f8c

0800e1a4 <_getpid_r>:
 800e1a4:	f7f4 bb74 	b.w	8002890 <_getpid>

0800e1a8 <__malloc_lock>:
 800e1a8:	4801      	ldr	r0, [pc, #4]	; (800e1b0 <__malloc_lock+0x8>)
 800e1aa:	f000 b809 	b.w	800e1c0 <__retarget_lock_acquire_recursive>
 800e1ae:	bf00      	nop
 800e1b0:	20002f90 	.word	0x20002f90

0800e1b4 <__malloc_unlock>:
 800e1b4:	4801      	ldr	r0, [pc, #4]	; (800e1bc <__malloc_unlock+0x8>)
 800e1b6:	f000 b804 	b.w	800e1c2 <__retarget_lock_release_recursive>
 800e1ba:	bf00      	nop
 800e1bc:	20002f90 	.word	0x20002f90

0800e1c0 <__retarget_lock_acquire_recursive>:
 800e1c0:	4770      	bx	lr

0800e1c2 <__retarget_lock_release_recursive>:
 800e1c2:	4770      	bx	lr

0800e1c4 <_init>:
 800e1c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1c6:	bf00      	nop
 800e1c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1ca:	bc08      	pop	{r3}
 800e1cc:	469e      	mov	lr, r3
 800e1ce:	4770      	bx	lr

0800e1d0 <_fini>:
 800e1d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1d2:	bf00      	nop
 800e1d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1d6:	bc08      	pop	{r3}
 800e1d8:	469e      	mov	lr, r3
 800e1da:	4770      	bx	lr
