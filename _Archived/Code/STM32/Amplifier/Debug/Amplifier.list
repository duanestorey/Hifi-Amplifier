
Amplifier.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1e4  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ac  0800a3d4  0800a3d4  0001a3d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000060  0800a880  0800a880  0001a880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000108  0800a8e0  0800a8e0  0001a8e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a9e8  0800a9e8  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800a9e8  0800a9e8  0001a9e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a9f0  0800a9f0  0001a9f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800a9f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002744  2000007c  0800aa70  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200027c0  0800aa70  000227c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005c552  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000a3a7  00000000  00000000  0007c5f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cb8  00000000  00000000  000869a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a80  00000000  00000000  00088658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000258d6  00000000  00000000  0008a0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002ab24  00000000  00000000  000af9ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b6a81  00000000  00000000  000da4d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00190f53  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009678  00000000  00000000  00190fa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	2000007c 	.word	0x2000007c
 800020c:	00000000 	.word	0x00000000
 8000210:	0800a3bc 	.word	0x0800a3bc

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000080 	.word	0x20000080
 800022c:	0800a3bc 	.word	0x0800a3bc

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <selfrel_offset31>:
 8000240:	6803      	ldr	r3, [r0, #0]
 8000242:	005a      	lsls	r2, r3, #1
 8000244:	bf4c      	ite	mi
 8000246:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800024a:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 800024e:	4418      	add	r0, r3
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop

08000254 <search_EIT_table>:
 8000254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000258:	b339      	cbz	r1, 80002aa <search_EIT_table+0x56>
 800025a:	1e4f      	subs	r7, r1, #1
 800025c:	4604      	mov	r4, r0
 800025e:	4615      	mov	r5, r2
 8000260:	463e      	mov	r6, r7
 8000262:	f04f 0800 	mov.w	r8, #0
 8000266:	eb08 0106 	add.w	r1, r8, r6
 800026a:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 800026e:	1049      	asrs	r1, r1, #1
 8000270:	eb04 09c1 	add.w	r9, r4, r1, lsl #3
 8000274:	4648      	mov	r0, r9
 8000276:	f7ff ffe3 	bl	8000240 <selfrel_offset31>
 800027a:	4603      	mov	r3, r0
 800027c:	00c8      	lsls	r0, r1, #3
 800027e:	3008      	adds	r0, #8
 8000280:	428f      	cmp	r7, r1
 8000282:	4420      	add	r0, r4
 8000284:	d00b      	beq.n	800029e <search_EIT_table+0x4a>
 8000286:	42ab      	cmp	r3, r5
 8000288:	d80b      	bhi.n	80002a2 <search_EIT_table+0x4e>
 800028a:	f7ff ffd9 	bl	8000240 <selfrel_offset31>
 800028e:	3801      	subs	r0, #1
 8000290:	42a8      	cmp	r0, r5
 8000292:	f101 0801 	add.w	r8, r1, #1
 8000296:	d3e6      	bcc.n	8000266 <search_EIT_table+0x12>
 8000298:	4648      	mov	r0, r9
 800029a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800029e:	42ab      	cmp	r3, r5
 80002a0:	d9fa      	bls.n	8000298 <search_EIT_table+0x44>
 80002a2:	4588      	cmp	r8, r1
 80002a4:	d001      	beq.n	80002aa <search_EIT_table+0x56>
 80002a6:	1e4e      	subs	r6, r1, #1
 80002a8:	e7dd      	b.n	8000266 <search_EIT_table+0x12>
 80002aa:	f04f 0900 	mov.w	r9, #0
 80002ae:	4648      	mov	r0, r9
 80002b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080002b4 <__gnu_unwind_get_pr_addr>:
 80002b4:	2801      	cmp	r0, #1
 80002b6:	d007      	beq.n	80002c8 <__gnu_unwind_get_pr_addr+0x14>
 80002b8:	2802      	cmp	r0, #2
 80002ba:	d007      	beq.n	80002cc <__gnu_unwind_get_pr_addr+0x18>
 80002bc:	4b04      	ldr	r3, [pc, #16]	; (80002d0 <__gnu_unwind_get_pr_addr+0x1c>)
 80002be:	2800      	cmp	r0, #0
 80002c0:	bf0c      	ite	eq
 80002c2:	4618      	moveq	r0, r3
 80002c4:	2000      	movne	r0, #0
 80002c6:	4770      	bx	lr
 80002c8:	4802      	ldr	r0, [pc, #8]	; (80002d4 <__gnu_unwind_get_pr_addr+0x20>)
 80002ca:	4770      	bx	lr
 80002cc:	4802      	ldr	r0, [pc, #8]	; (80002d8 <__gnu_unwind_get_pr_addr+0x24>)
 80002ce:	4770      	bx	lr
 80002d0:	080009a5 	.word	0x080009a5
 80002d4:	080009a9 	.word	0x080009a9
 80002d8:	080009ad 	.word	0x080009ad

080002dc <get_eit_entry>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	4b24      	ldr	r3, [pc, #144]	; (8000370 <get_eit_entry+0x94>)
 80002e0:	4604      	mov	r4, r0
 80002e2:	b083      	sub	sp, #12
 80002e4:	1e8d      	subs	r5, r1, #2
 80002e6:	b33b      	cbz	r3, 8000338 <get_eit_entry+0x5c>
 80002e8:	4628      	mov	r0, r5
 80002ea:	a901      	add	r1, sp, #4
 80002ec:	f3af 8000 	nop.w
 80002f0:	b1e8      	cbz	r0, 800032e <get_eit_entry+0x52>
 80002f2:	9901      	ldr	r1, [sp, #4]
 80002f4:	462a      	mov	r2, r5
 80002f6:	f7ff ffad 	bl	8000254 <search_EIT_table>
 80002fa:	4601      	mov	r1, r0
 80002fc:	b1b8      	cbz	r0, 800032e <get_eit_entry+0x52>
 80002fe:	f7ff ff9f 	bl	8000240 <selfrel_offset31>
 8000302:	684b      	ldr	r3, [r1, #4]
 8000304:	64a0      	str	r0, [r4, #72]	; 0x48
 8000306:	2b01      	cmp	r3, #1
 8000308:	d02e      	beq.n	8000368 <get_eit_entry+0x8c>
 800030a:	2b00      	cmp	r3, #0
 800030c:	db27      	blt.n	800035e <get_eit_entry+0x82>
 800030e:	1d08      	adds	r0, r1, #4
 8000310:	f7ff ff96 	bl	8000240 <selfrel_offset31>
 8000314:	2300      	movs	r3, #0
 8000316:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 800031a:	6803      	ldr	r3, [r0, #0]
 800031c:	2b00      	cmp	r3, #0
 800031e:	db12      	blt.n	8000346 <get_eit_entry+0x6a>
 8000320:	f7ff ff8e 	bl	8000240 <selfrel_offset31>
 8000324:	4603      	mov	r3, r0
 8000326:	2000      	movs	r0, #0
 8000328:	6123      	str	r3, [r4, #16]
 800032a:	b003      	add	sp, #12
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	2300      	movs	r3, #0
 8000330:	2009      	movs	r0, #9
 8000332:	6123      	str	r3, [r4, #16]
 8000334:	b003      	add	sp, #12
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	4b0e      	ldr	r3, [pc, #56]	; (8000374 <get_eit_entry+0x98>)
 800033a:	490f      	ldr	r1, [pc, #60]	; (8000378 <get_eit_entry+0x9c>)
 800033c:	4618      	mov	r0, r3
 800033e:	1ac9      	subs	r1, r1, r3
 8000340:	10c9      	asrs	r1, r1, #3
 8000342:	9101      	str	r1, [sp, #4]
 8000344:	e7d6      	b.n	80002f4 <get_eit_entry+0x18>
 8000346:	f3c3 6003 	ubfx	r0, r3, #24, #4
 800034a:	f7ff ffb3 	bl	80002b4 <__gnu_unwind_get_pr_addr>
 800034e:	2800      	cmp	r0, #0
 8000350:	4603      	mov	r3, r0
 8000352:	bf14      	ite	ne
 8000354:	2000      	movne	r0, #0
 8000356:	2009      	moveq	r0, #9
 8000358:	6123      	str	r3, [r4, #16]
 800035a:	b003      	add	sp, #12
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	2301      	movs	r3, #1
 8000360:	1d08      	adds	r0, r1, #4
 8000362:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 8000366:	e7d8      	b.n	800031a <get_eit_entry+0x3e>
 8000368:	2300      	movs	r3, #0
 800036a:	2005      	movs	r0, #5
 800036c:	6123      	str	r3, [r4, #16]
 800036e:	e7dc      	b.n	800032a <get_eit_entry+0x4e>
 8000370:	00000000 	.word	0x00000000
 8000374:	0800a8e0 	.word	0x0800a8e0
 8000378:	0800a9e8 	.word	0x0800a9e8

0800037c <restore_non_core_regs>:
 800037c:	6803      	ldr	r3, [r0, #0]
 800037e:	b510      	push	{r4, lr}
 8000380:	07da      	lsls	r2, r3, #31
 8000382:	4604      	mov	r4, r0
 8000384:	d406      	bmi.n	8000394 <restore_non_core_regs+0x18>
 8000386:	079b      	lsls	r3, r3, #30
 8000388:	f100 0048 	add.w	r0, r0, #72	; 0x48
 800038c:	d509      	bpl.n	80003a2 <restore_non_core_regs+0x26>
 800038e:	f000 fc5d 	bl	8000c4c <__gnu_Unwind_Restore_VFP_D>
 8000392:	6823      	ldr	r3, [r4, #0]
 8000394:	0759      	lsls	r1, r3, #29
 8000396:	d509      	bpl.n	80003ac <restore_non_core_regs+0x30>
 8000398:	071a      	lsls	r2, r3, #28
 800039a:	d50e      	bpl.n	80003ba <restore_non_core_regs+0x3e>
 800039c:	06db      	lsls	r3, r3, #27
 800039e:	d513      	bpl.n	80003c8 <restore_non_core_regs+0x4c>
 80003a0:	bd10      	pop	{r4, pc}
 80003a2:	f000 fc4b 	bl	8000c3c <__gnu_Unwind_Restore_VFP>
 80003a6:	6823      	ldr	r3, [r4, #0]
 80003a8:	0759      	lsls	r1, r3, #29
 80003aa:	d4f5      	bmi.n	8000398 <restore_non_core_regs+0x1c>
 80003ac:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80003b0:	f000 fc54 	bl	8000c5c <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80003b4:	6823      	ldr	r3, [r4, #0]
 80003b6:	071a      	lsls	r2, r3, #28
 80003b8:	d4f0      	bmi.n	800039c <restore_non_core_regs+0x20>
 80003ba:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 80003be:	f000 fc55 	bl	8000c6c <__gnu_Unwind_Restore_WMMXD>
 80003c2:	6823      	ldr	r3, [r4, #0]
 80003c4:	06db      	lsls	r3, r3, #27
 80003c6:	d4eb      	bmi.n	80003a0 <restore_non_core_regs+0x24>
 80003c8:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 80003cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80003d0:	f000 bc90 	b.w	8000cf4 <__gnu_Unwind_Restore_WMMXC>

080003d4 <__gnu_unwind_24bit.constprop.0>:
 80003d4:	2009      	movs	r0, #9
 80003d6:	4770      	bx	lr

080003d8 <_Unwind_decode_typeinfo_ptr.constprop.0>:
 80003d8:	4603      	mov	r3, r0
 80003da:	6800      	ldr	r0, [r0, #0]
 80003dc:	b100      	cbz	r0, 80003e0 <_Unwind_decode_typeinfo_ptr.constprop.0+0x8>
 80003de:	4418      	add	r0, r3
 80003e0:	4770      	bx	lr
 80003e2:	bf00      	nop

080003e4 <_Unwind_DebugHook>:
 80003e4:	4770      	bx	lr
 80003e6:	bf00      	nop

080003e8 <unwind_phase2>:
 80003e8:	b570      	push	{r4, r5, r6, lr}
 80003ea:	4604      	mov	r4, r0
 80003ec:	460e      	mov	r6, r1
 80003ee:	4620      	mov	r0, r4
 80003f0:	6c31      	ldr	r1, [r6, #64]	; 0x40
 80003f2:	f7ff ff73 	bl	80002dc <get_eit_entry>
 80003f6:	4605      	mov	r5, r0
 80003f8:	b998      	cbnz	r0, 8000422 <unwind_phase2+0x3a>
 80003fa:	f8d6 c040 	ldr.w	ip, [r6, #64]	; 0x40
 80003fe:	4632      	mov	r2, r6
 8000400:	4621      	mov	r1, r4
 8000402:	2001      	movs	r0, #1
 8000404:	6923      	ldr	r3, [r4, #16]
 8000406:	f8c4 c014 	str.w	ip, [r4, #20]
 800040a:	4798      	blx	r3
 800040c:	2808      	cmp	r0, #8
 800040e:	d0ee      	beq.n	80003ee <unwind_phase2+0x6>
 8000410:	2807      	cmp	r0, #7
 8000412:	d106      	bne.n	8000422 <unwind_phase2+0x3a>
 8000414:	4628      	mov	r0, r5
 8000416:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8000418:	f7ff ffe4 	bl	80003e4 <_Unwind_DebugHook>
 800041c:	1d30      	adds	r0, r6, #4
 800041e:	f000 fc01 	bl	8000c24 <__restore_core_regs>
 8000422:	f009 fa3c 	bl	800989e <abort>
 8000426:	bf00      	nop

08000428 <unwind_phase2_forced>:
 8000428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800042c:	f04f 0a00 	mov.w	sl, #0
 8000430:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8000434:	f10d 0e0c 	add.w	lr, sp, #12
 8000438:	f101 0c04 	add.w	ip, r1, #4
 800043c:	68c7      	ldr	r7, [r0, #12]
 800043e:	f8d0 8018 	ldr.w	r8, [r0, #24]
 8000442:	4606      	mov	r6, r0
 8000444:	4614      	mov	r4, r2
 8000446:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800044a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800044e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000452:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000456:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800045a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800045e:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8000462:	ad02      	add	r5, sp, #8
 8000464:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8000468:	f8c5 a000 	str.w	sl, [r5]
 800046c:	e021      	b.n	80004b2 <unwind_phase2_forced+0x8a>
 800046e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8000470:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000474:	4629      	mov	r1, r5
 8000476:	6173      	str	r3, [r6, #20]
 8000478:	a87a      	add	r0, sp, #488	; 0x1e8
 800047a:	f009 fa7f 	bl	800997c <memcpy>
 800047e:	4631      	mov	r1, r6
 8000480:	4650      	mov	r0, sl
 8000482:	6933      	ldr	r3, [r6, #16]
 8000484:	aa7a      	add	r2, sp, #488	; 0x1e8
 8000486:	4798      	blx	r3
 8000488:	9c88      	ldr	r4, [sp, #544]	; 0x220
 800048a:	4682      	mov	sl, r0
 800048c:	646c      	str	r4, [r5, #68]	; 0x44
 800048e:	4633      	mov	r3, r6
 8000490:	4632      	mov	r2, r6
 8000492:	4649      	mov	r1, r9
 8000494:	2001      	movs	r0, #1
 8000496:	e9cd 5800 	strd	r5, r8, [sp]
 800049a:	47b8      	blx	r7
 800049c:	4604      	mov	r4, r0
 800049e:	b9f0      	cbnz	r0, 80004de <unwind_phase2_forced+0xb6>
 80004a0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80004a4:	4628      	mov	r0, r5
 80004a6:	a97a      	add	r1, sp, #488	; 0x1e8
 80004a8:	f009 fa68 	bl	800997c <memcpy>
 80004ac:	f1ba 0f08 	cmp.w	sl, #8
 80004b0:	d11b      	bne.n	80004ea <unwind_phase2_forced+0xc2>
 80004b2:	4630      	mov	r0, r6
 80004b4:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80004b6:	f7ff ff11 	bl	80002dc <get_eit_entry>
 80004ba:	f104 0909 	add.w	r9, r4, #9
 80004be:	fa5f fa89 	uxtb.w	sl, r9
 80004c2:	4604      	mov	r4, r0
 80004c4:	2800      	cmp	r0, #0
 80004c6:	d0d2      	beq.n	800046e <unwind_phase2_forced+0x46>
 80004c8:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 80004ca:	4633      	mov	r3, r6
 80004cc:	6469      	str	r1, [r5, #68]	; 0x44
 80004ce:	4632      	mov	r2, r6
 80004d0:	2001      	movs	r0, #1
 80004d2:	e9cd 5800 	strd	r5, r8, [sp]
 80004d6:	f04a 0110 	orr.w	r1, sl, #16
 80004da:	47b8      	blx	r7
 80004dc:	b100      	cbz	r0, 80004e0 <unwind_phase2_forced+0xb8>
 80004de:	2409      	movs	r4, #9
 80004e0:	4620      	mov	r0, r4
 80004e2:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1ba 0f07 	cmp.w	sl, #7
 80004ee:	d1f6      	bne.n	80004de <unwind_phase2_forced+0xb6>
 80004f0:	4620      	mov	r0, r4
 80004f2:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80004f4:	f7ff ff76 	bl	80003e4 <_Unwind_DebugHook>
 80004f8:	a803      	add	r0, sp, #12
 80004fa:	f000 fb93 	bl	8000c24 <__restore_core_regs>
 80004fe:	bf00      	nop

08000500 <_Unwind_GetCFA>:
 8000500:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8000502:	4770      	bx	lr

08000504 <__gnu_Unwind_RaiseException>:
 8000504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000506:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800050a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800050c:	b0f9      	sub	sp, #484	; 0x1e4
 800050e:	640b      	str	r3, [r1, #64]	; 0x40
 8000510:	ac01      	add	r4, sp, #4
 8000512:	f101 0c04 	add.w	ip, r1, #4
 8000516:	460e      	mov	r6, r1
 8000518:	4605      	mov	r5, r0
 800051a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800051e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000520:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000524:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000526:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800052a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800052c:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8000530:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000534:	9700      	str	r7, [sp, #0]
 8000536:	e006      	b.n	8000546 <__gnu_Unwind_RaiseException+0x42>
 8000538:	466a      	mov	r2, sp
 800053a:	4629      	mov	r1, r5
 800053c:	692b      	ldr	r3, [r5, #16]
 800053e:	4798      	blx	r3
 8000540:	2808      	cmp	r0, #8
 8000542:	4604      	mov	r4, r0
 8000544:	d108      	bne.n	8000558 <__gnu_Unwind_RaiseException+0x54>
 8000546:	4628      	mov	r0, r5
 8000548:	9910      	ldr	r1, [sp, #64]	; 0x40
 800054a:	f7ff fec7 	bl	80002dc <get_eit_entry>
 800054e:	2800      	cmp	r0, #0
 8000550:	d0f2      	beq.n	8000538 <__gnu_Unwind_RaiseException+0x34>
 8000552:	2009      	movs	r0, #9
 8000554:	b079      	add	sp, #484	; 0x1e4
 8000556:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000558:	4668      	mov	r0, sp
 800055a:	f7ff ff0f 	bl	800037c <restore_non_core_regs>
 800055e:	2c06      	cmp	r4, #6
 8000560:	d1f7      	bne.n	8000552 <__gnu_Unwind_RaiseException+0x4e>
 8000562:	4631      	mov	r1, r6
 8000564:	4628      	mov	r0, r5
 8000566:	f7ff ff3f 	bl	80003e8 <unwind_phase2>
 800056a:	bf00      	nop

0800056c <__gnu_Unwind_ForcedUnwind>:
 800056c:	b410      	push	{r4}
 800056e:	4614      	mov	r4, r2
 8000570:	6184      	str	r4, [r0, #24]
 8000572:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8000574:	60c1      	str	r1, [r0, #12]
 8000576:	2200      	movs	r2, #0
 8000578:	641c      	str	r4, [r3, #64]	; 0x40
 800057a:	4619      	mov	r1, r3
 800057c:	bc10      	pop	{r4}
 800057e:	e753      	b.n	8000428 <unwind_phase2_forced>

08000580 <__gnu_Unwind_Resume>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	6943      	ldr	r3, [r0, #20]
 8000584:	68c6      	ldr	r6, [r0, #12]
 8000586:	640b      	str	r3, [r1, #64]	; 0x40
 8000588:	b9ae      	cbnz	r6, 80005b6 <__gnu_Unwind_Resume+0x36>
 800058a:	460a      	mov	r2, r1
 800058c:	6903      	ldr	r3, [r0, #16]
 800058e:	4604      	mov	r4, r0
 8000590:	460d      	mov	r5, r1
 8000592:	4601      	mov	r1, r0
 8000594:	2002      	movs	r0, #2
 8000596:	4798      	blx	r3
 8000598:	2807      	cmp	r0, #7
 800059a:	d005      	beq.n	80005a8 <__gnu_Unwind_Resume+0x28>
 800059c:	2808      	cmp	r0, #8
 800059e:	d10f      	bne.n	80005c0 <__gnu_Unwind_Resume+0x40>
 80005a0:	4629      	mov	r1, r5
 80005a2:	4620      	mov	r0, r4
 80005a4:	f7ff ff20 	bl	80003e8 <unwind_phase2>
 80005a8:	4630      	mov	r0, r6
 80005aa:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80005ac:	f7ff ff1a 	bl	80003e4 <_Unwind_DebugHook>
 80005b0:	1d28      	adds	r0, r5, #4
 80005b2:	f000 fb37 	bl	8000c24 <__restore_core_regs>
 80005b6:	2201      	movs	r2, #1
 80005b8:	f7ff ff36 	bl	8000428 <unwind_phase2_forced>
 80005bc:	f009 f96f 	bl	800989e <abort>
 80005c0:	f009 f96d 	bl	800989e <abort>

080005c4 <__gnu_Unwind_Resume_or_Rethrow>:
 80005c4:	68c2      	ldr	r2, [r0, #12]
 80005c6:	b12a      	cbz	r2, 80005d4 <__gnu_Unwind_Resume_or_Rethrow+0x10>
 80005c8:	f8d1 c03c 	ldr.w	ip, [r1, #60]	; 0x3c
 80005cc:	2200      	movs	r2, #0
 80005ce:	f8c1 c040 	str.w	ip, [r1, #64]	; 0x40
 80005d2:	e729      	b.n	8000428 <unwind_phase2_forced>
 80005d4:	e796      	b.n	8000504 <__gnu_Unwind_RaiseException>
 80005d6:	bf00      	nop

080005d8 <_Unwind_Complete>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <_Unwind_DeleteException>:
 80005dc:	6883      	ldr	r3, [r0, #8]
 80005de:	4601      	mov	r1, r0
 80005e0:	b10b      	cbz	r3, 80005e6 <_Unwind_DeleteException+0xa>
 80005e2:	2001      	movs	r0, #1
 80005e4:	4718      	bx	r3
 80005e6:	4770      	bx	lr

080005e8 <_Unwind_VRS_Get>:
 80005e8:	2901      	cmp	r1, #1
 80005ea:	d012      	beq.n	8000612 <_Unwind_VRS_Get+0x2a>
 80005ec:	d809      	bhi.n	8000602 <_Unwind_VRS_Get+0x1a>
 80005ee:	b973      	cbnz	r3, 800060e <_Unwind_VRS_Get+0x26>
 80005f0:	2a0f      	cmp	r2, #15
 80005f2:	d80c      	bhi.n	800060e <_Unwind_VRS_Get+0x26>
 80005f4:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80005f8:	6842      	ldr	r2, [r0, #4]
 80005fa:	4618      	mov	r0, r3
 80005fc:	9b00      	ldr	r3, [sp, #0]
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	4770      	bx	lr
 8000602:	3903      	subs	r1, #3
 8000604:	2901      	cmp	r1, #1
 8000606:	bf94      	ite	ls
 8000608:	2001      	movls	r0, #1
 800060a:	2002      	movhi	r0, #2
 800060c:	4770      	bx	lr
 800060e:	2002      	movs	r0, #2
 8000610:	4770      	bx	lr
 8000612:	4608      	mov	r0, r1
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop

08000618 <_Unwind_GetGR>:
 8000618:	2300      	movs	r3, #0
 800061a:	b500      	push	{lr}
 800061c:	b085      	sub	sp, #20
 800061e:	460a      	mov	r2, r1
 8000620:	a903      	add	r1, sp, #12
 8000622:	9100      	str	r1, [sp, #0]
 8000624:	4619      	mov	r1, r3
 8000626:	f7ff ffdf 	bl	80005e8 <_Unwind_VRS_Get>
 800062a:	9803      	ldr	r0, [sp, #12]
 800062c:	b005      	add	sp, #20
 800062e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000632:	bf00      	nop

08000634 <_Unwind_VRS_Set>:
 8000634:	2901      	cmp	r1, #1
 8000636:	d012      	beq.n	800065e <_Unwind_VRS_Set+0x2a>
 8000638:	d809      	bhi.n	800064e <_Unwind_VRS_Set+0x1a>
 800063a:	b973      	cbnz	r3, 800065a <_Unwind_VRS_Set+0x26>
 800063c:	2a0f      	cmp	r2, #15
 800063e:	d80c      	bhi.n	800065a <_Unwind_VRS_Set+0x26>
 8000640:	9900      	ldr	r1, [sp, #0]
 8000642:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000646:	6809      	ldr	r1, [r1, #0]
 8000648:	4618      	mov	r0, r3
 800064a:	6051      	str	r1, [r2, #4]
 800064c:	4770      	bx	lr
 800064e:	3903      	subs	r1, #3
 8000650:	2901      	cmp	r1, #1
 8000652:	bf94      	ite	ls
 8000654:	2001      	movls	r0, #1
 8000656:	2002      	movhi	r0, #2
 8000658:	4770      	bx	lr
 800065a:	2002      	movs	r0, #2
 800065c:	4770      	bx	lr
 800065e:	4608      	mov	r0, r1
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop

08000664 <_Unwind_SetGR>:
 8000664:	2300      	movs	r3, #0
 8000666:	b510      	push	{r4, lr}
 8000668:	b084      	sub	sp, #16
 800066a:	ac03      	add	r4, sp, #12
 800066c:	9203      	str	r2, [sp, #12]
 800066e:	9400      	str	r4, [sp, #0]
 8000670:	460a      	mov	r2, r1
 8000672:	4619      	mov	r1, r3
 8000674:	f7ff ffde 	bl	8000634 <_Unwind_VRS_Set>
 8000678:	b004      	add	sp, #16
 800067a:	bd10      	pop	{r4, pc}

0800067c <__gnu_Unwind_Backtrace>:
 800067c:	b570      	push	{r4, r5, r6, lr}
 800067e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8000682:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8000684:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 8000688:	6413      	str	r3, [r2, #64]	; 0x40
 800068a:	f10d 0e5c 	add.w	lr, sp, #92	; 0x5c
 800068e:	f102 0c04 	add.w	ip, r2, #4
 8000692:	4605      	mov	r5, r0
 8000694:	460c      	mov	r4, r1
 8000696:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800069a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800069e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80006a2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80006a6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80006aa:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80006ae:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80006b2:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 80006b6:	9616      	str	r6, [sp, #88]	; 0x58
 80006b8:	e012      	b.n	80006e0 <__gnu_Unwind_Backtrace+0x64>
 80006ba:	210c      	movs	r1, #12
 80006bc:	a816      	add	r0, sp, #88	; 0x58
 80006be:	466a      	mov	r2, sp
 80006c0:	f7ff ffd0 	bl	8000664 <_Unwind_SetGR>
 80006c4:	4621      	mov	r1, r4
 80006c6:	a816      	add	r0, sp, #88	; 0x58
 80006c8:	47a8      	blx	r5
 80006ca:	b978      	cbnz	r0, 80006ec <__gnu_Unwind_Backtrace+0x70>
 80006cc:	4669      	mov	r1, sp
 80006ce:	2008      	movs	r0, #8
 80006d0:	9b04      	ldr	r3, [sp, #16]
 80006d2:	aa16      	add	r2, sp, #88	; 0x58
 80006d4:	4798      	blx	r3
 80006d6:	2805      	cmp	r0, #5
 80006d8:	4606      	mov	r6, r0
 80006da:	d008      	beq.n	80006ee <__gnu_Unwind_Backtrace+0x72>
 80006dc:	2809      	cmp	r0, #9
 80006de:	d005      	beq.n	80006ec <__gnu_Unwind_Backtrace+0x70>
 80006e0:	4668      	mov	r0, sp
 80006e2:	9926      	ldr	r1, [sp, #152]	; 0x98
 80006e4:	f7ff fdfa 	bl	80002dc <get_eit_entry>
 80006e8:	2800      	cmp	r0, #0
 80006ea:	d0e6      	beq.n	80006ba <__gnu_Unwind_Backtrace+0x3e>
 80006ec:	2609      	movs	r6, #9
 80006ee:	a816      	add	r0, sp, #88	; 0x58
 80006f0:	f7ff fe44 	bl	800037c <restore_non_core_regs>
 80006f4:	4630      	mov	r0, r6
 80006f6:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
 80006fa:	bd70      	pop	{r4, r5, r6, pc}

080006fc <__gnu_unwind_pr_common>:
 80006fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000700:	461e      	mov	r6, r3
 8000702:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 8000704:	b089      	sub	sp, #36	; 0x24
 8000706:	f854 3b04 	ldr.w	r3, [r4], #4
 800070a:	460d      	mov	r5, r1
 800070c:	4617      	mov	r7, r2
 800070e:	f000 0803 	and.w	r8, r0, #3
 8000712:	9406      	str	r4, [sp, #24]
 8000714:	2e00      	cmp	r6, #0
 8000716:	d079      	beq.n	800080c <__gnu_unwind_pr_common+0x110>
 8000718:	2202      	movs	r2, #2
 800071a:	f88d 201c 	strb.w	r2, [sp, #28]
 800071e:	0c1a      	lsrs	r2, r3, #16
 8000720:	f88d 201d 	strb.w	r2, [sp, #29]
 8000724:	041b      	lsls	r3, r3, #16
 8000726:	b2d2      	uxtb	r2, r2
 8000728:	9305      	str	r3, [sp, #20]
 800072a:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 800072e:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000730:	f1b8 0f02 	cmp.w	r8, #2
 8000734:	bf08      	it	eq
 8000736:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8000738:	f013 0301 	ands.w	r3, r3, #1
 800073c:	d00c      	beq.n	8000758 <__gnu_unwind_pr_common+0x5c>
 800073e:	4638      	mov	r0, r7
 8000740:	a905      	add	r1, sp, #20
 8000742:	f000 fb71 	bl	8000e28 <__gnu_unwind_execute>
 8000746:	b918      	cbnz	r0, 8000750 <__gnu_unwind_pr_common+0x54>
 8000748:	2008      	movs	r0, #8
 800074a:	b009      	add	sp, #36	; 0x24
 800074c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000750:	2009      	movs	r0, #9
 8000752:	b009      	add	sp, #36	; 0x24
 8000754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000758:	f8d4 a000 	ldr.w	sl, [r4]
 800075c:	f1ba 0f00 	cmp.w	sl, #0
 8000760:	d0ed      	beq.n	800073e <__gnu_unwind_pr_common+0x42>
 8000762:	9301      	str	r3, [sp, #4]
 8000764:	f000 0308 	and.w	r3, r0, #8
 8000768:	9302      	str	r3, [sp, #8]
 800076a:	2e02      	cmp	r6, #2
 800076c:	d04a      	beq.n	8000804 <__gnu_unwind_pr_common+0x108>
 800076e:	f8b4 a000 	ldrh.w	sl, [r4]
 8000772:	f8b4 9002 	ldrh.w	r9, [r4, #2]
 8000776:	3404      	adds	r4, #4
 8000778:	6caa      	ldr	r2, [r5, #72]	; 0x48
 800077a:	210f      	movs	r1, #15
 800077c:	4638      	mov	r0, r7
 800077e:	f029 0b01 	bic.w	fp, r9, #1
 8000782:	4493      	add	fp, r2
 8000784:	f7ff ff48 	bl	8000618 <_Unwind_GetGR>
 8000788:	4583      	cmp	fp, r0
 800078a:	d839      	bhi.n	8000800 <__gnu_unwind_pr_common+0x104>
 800078c:	f02a 0201 	bic.w	r2, sl, #1
 8000790:	445a      	add	r2, fp
 8000792:	4282      	cmp	r2, r0
 8000794:	bf94      	ite	ls
 8000796:	2000      	movls	r0, #0
 8000798:	2001      	movhi	r0, #1
 800079a:	ea4f 0349 	mov.w	r3, r9, lsl #1
 800079e:	f003 0302 	and.w	r3, r3, #2
 80007a2:	f00a 0a01 	and.w	sl, sl, #1
 80007a6:	ea43 030a 	orr.w	r3, r3, sl
 80007aa:	2b01      	cmp	r3, #1
 80007ac:	d049      	beq.n	8000842 <__gnu_unwind_pr_common+0x146>
 80007ae:	2b02      	cmp	r3, #2
 80007b0:	d032      	beq.n	8000818 <__gnu_unwind_pr_common+0x11c>
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d1cc      	bne.n	8000750 <__gnu_unwind_pr_common+0x54>
 80007b6:	f1b8 0f00 	cmp.w	r8, #0
 80007ba:	d002      	beq.n	80007c2 <__gnu_unwind_pr_common+0xc6>
 80007bc:	2800      	cmp	r0, #0
 80007be:	f040 80ce 	bne.w	800095e <__gnu_unwind_pr_common+0x262>
 80007c2:	3404      	adds	r4, #4
 80007c4:	f8d4 a000 	ldr.w	sl, [r4]
 80007c8:	f1ba 0f00 	cmp.w	sl, #0
 80007cc:	d1cd      	bne.n	800076a <__gnu_unwind_pr_common+0x6e>
 80007ce:	4638      	mov	r0, r7
 80007d0:	a905      	add	r1, sp, #20
 80007d2:	f000 fb29 	bl	8000e28 <__gnu_unwind_execute>
 80007d6:	2800      	cmp	r0, #0
 80007d8:	d1ba      	bne.n	8000750 <__gnu_unwind_pr_common+0x54>
 80007da:	9b01      	ldr	r3, [sp, #4]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d0b3      	beq.n	8000748 <__gnu_unwind_pr_common+0x4c>
 80007e0:	210f      	movs	r1, #15
 80007e2:	4638      	mov	r0, r7
 80007e4:	f7ff ff18 	bl	8000618 <_Unwind_GetGR>
 80007e8:	210e      	movs	r1, #14
 80007ea:	4602      	mov	r2, r0
 80007ec:	4638      	mov	r0, r7
 80007ee:	f7ff ff39 	bl	8000664 <_Unwind_SetGR>
 80007f2:	4638      	mov	r0, r7
 80007f4:	210f      	movs	r1, #15
 80007f6:	4a6a      	ldr	r2, [pc, #424]	; (80009a0 <__gnu_unwind_pr_common+0x2a4>)
 80007f8:	f7ff ff34 	bl	8000664 <_Unwind_SetGR>
 80007fc:	2007      	movs	r0, #7
 80007fe:	e7a8      	b.n	8000752 <__gnu_unwind_pr_common+0x56>
 8000800:	2000      	movs	r0, #0
 8000802:	e7ca      	b.n	800079a <__gnu_unwind_pr_common+0x9e>
 8000804:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8000808:	3408      	adds	r4, #8
 800080a:	e7b5      	b.n	8000778 <__gnu_unwind_pr_common+0x7c>
 800080c:	021b      	lsls	r3, r3, #8
 800080e:	9305      	str	r3, [sp, #20]
 8000810:	2303      	movs	r3, #3
 8000812:	f8ad 301c 	strh.w	r3, [sp, #28]
 8000816:	e78a      	b.n	800072e <__gnu_unwind_pr_common+0x32>
 8000818:	6823      	ldr	r3, [r4, #0]
 800081a:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 800081e:	f1b8 0f00 	cmp.w	r8, #0
 8000822:	d145      	bne.n	80008b0 <__gnu_unwind_pr_common+0x1b4>
 8000824:	b128      	cbz	r0, 8000832 <__gnu_unwind_pr_common+0x136>
 8000826:	9a02      	ldr	r2, [sp, #8]
 8000828:	2a00      	cmp	r2, #0
 800082a:	d05c      	beq.n	80008e6 <__gnu_unwind_pr_common+0x1ea>
 800082c:	f1bb 0f00 	cmp.w	fp, #0
 8000830:	d074      	beq.n	800091c <__gnu_unwind_pr_common+0x220>
 8000832:	2b00      	cmp	r3, #0
 8000834:	da00      	bge.n	8000838 <__gnu_unwind_pr_common+0x13c>
 8000836:	3404      	adds	r4, #4
 8000838:	f10b 0b01 	add.w	fp, fp, #1
 800083c:	eb04 048b 	add.w	r4, r4, fp, lsl #2
 8000840:	e7c0      	b.n	80007c4 <__gnu_unwind_pr_common+0xc8>
 8000842:	f1b8 0f00 	cmp.w	r8, #0
 8000846:	d119      	bne.n	800087c <__gnu_unwind_pr_common+0x180>
 8000848:	b1b0      	cbz	r0, 8000878 <__gnu_unwind_pr_common+0x17c>
 800084a:	6863      	ldr	r3, [r4, #4]
 800084c:	6822      	ldr	r2, [r4, #0]
 800084e:	1c99      	adds	r1, r3, #2
 8000850:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8000854:	f43f af7c 	beq.w	8000750 <__gnu_unwind_pr_common+0x54>
 8000858:	f105 0158 	add.w	r1, r5, #88	; 0x58
 800085c:	3301      	adds	r3, #1
 800085e:	9104      	str	r1, [sp, #16]
 8000860:	f000 8091 	beq.w	8000986 <__gnu_unwind_pr_common+0x28a>
 8000864:	1d20      	adds	r0, r4, #4
 8000866:	f7ff fdb7 	bl	80003d8 <_Unwind_decode_typeinfo_ptr.constprop.0>
 800086a:	ab04      	add	r3, sp, #16
 800086c:	4601      	mov	r1, r0
 800086e:	4628      	mov	r0, r5
 8000870:	f3af 8000 	nop.w
 8000874:	2800      	cmp	r0, #0
 8000876:	d15c      	bne.n	8000932 <__gnu_unwind_pr_common+0x236>
 8000878:	3408      	adds	r4, #8
 800087a:	e7a3      	b.n	80007c4 <__gnu_unwind_pr_common+0xc8>
 800087c:	210d      	movs	r1, #13
 800087e:	4638      	mov	r0, r7
 8000880:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8000884:	f7ff fec8 	bl	8000618 <_Unwind_GetGR>
 8000888:	4581      	cmp	r9, r0
 800088a:	d1f5      	bne.n	8000878 <__gnu_unwind_pr_common+0x17c>
 800088c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800088e:	429c      	cmp	r4, r3
 8000890:	d1f2      	bne.n	8000878 <__gnu_unwind_pr_common+0x17c>
 8000892:	4620      	mov	r0, r4
 8000894:	f7ff fcd4 	bl	8000240 <selfrel_offset31>
 8000898:	210f      	movs	r1, #15
 800089a:	4602      	mov	r2, r0
 800089c:	4638      	mov	r0, r7
 800089e:	f7ff fee1 	bl	8000664 <_Unwind_SetGR>
 80008a2:	4638      	mov	r0, r7
 80008a4:	462a      	mov	r2, r5
 80008a6:	2100      	movs	r1, #0
 80008a8:	f7ff fedc 	bl	8000664 <_Unwind_SetGR>
 80008ac:	2007      	movs	r0, #7
 80008ae:	e750      	b.n	8000752 <__gnu_unwind_pr_common+0x56>
 80008b0:	210d      	movs	r1, #13
 80008b2:	4638      	mov	r0, r7
 80008b4:	f8d5 9020 	ldr.w	r9, [r5, #32]
 80008b8:	f7ff feae 	bl	8000618 <_Unwind_GetGR>
 80008bc:	4581      	cmp	r9, r0
 80008be:	d001      	beq.n	80008c4 <__gnu_unwind_pr_common+0x1c8>
 80008c0:	6823      	ldr	r3, [r4, #0]
 80008c2:	e7b6      	b.n	8000832 <__gnu_unwind_pr_common+0x136>
 80008c4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80008c6:	429c      	cmp	r4, r3
 80008c8:	d1fa      	bne.n	80008c0 <__gnu_unwind_pr_common+0x1c4>
 80008ca:	2304      	movs	r3, #4
 80008cc:	2200      	movs	r2, #0
 80008ce:	e9c5 230b 	strd	r2, r3, [r5, #44]	; 0x2c
 80008d2:	18e3      	adds	r3, r4, r3
 80008d4:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
 80008d8:	636b      	str	r3, [r5, #52]	; 0x34
 80008da:	6823      	ldr	r3, [r4, #0]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	db5a      	blt.n	8000996 <__gnu_unwind_pr_common+0x29a>
 80008e0:	2301      	movs	r3, #1
 80008e2:	9301      	str	r3, [sp, #4]
 80008e4:	e7a8      	b.n	8000838 <__gnu_unwind_pr_common+0x13c>
 80008e6:	f105 0358 	add.w	r3, r5, #88	; 0x58
 80008ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80008ee:	4691      	mov	r9, r2
 80008f0:	46b0      	mov	r8, r6
 80008f2:	f104 0a04 	add.w	sl, r4, #4
 80008f6:	461e      	mov	r6, r3
 80008f8:	e00e      	b.n	8000918 <__gnu_unwind_pr_common+0x21c>
 80008fa:	4650      	mov	r0, sl
 80008fc:	9604      	str	r6, [sp, #16]
 80008fe:	f7ff fd6b 	bl	80003d8 <_Unwind_decode_typeinfo_ptr.constprop.0>
 8000902:	2200      	movs	r2, #0
 8000904:	4601      	mov	r1, r0
 8000906:	ab04      	add	r3, sp, #16
 8000908:	4628      	mov	r0, r5
 800090a:	f109 0901 	add.w	r9, r9, #1
 800090e:	f10a 0a04 	add.w	sl, sl, #4
 8000912:	f3af 8000 	nop.w
 8000916:	b9e8      	cbnz	r0, 8000954 <__gnu_unwind_pr_common+0x258>
 8000918:	45d9      	cmp	r9, fp
 800091a:	d1ee      	bne.n	80008fa <__gnu_unwind_pr_common+0x1fe>
 800091c:	210d      	movs	r1, #13
 800091e:	4638      	mov	r0, r7
 8000920:	f7ff fe7a 	bl	8000618 <_Unwind_GetGR>
 8000924:	4603      	mov	r3, r0
 8000926:	9a04      	ldr	r2, [sp, #16]
 8000928:	2006      	movs	r0, #6
 800092a:	e9c5 2409 	strd	r2, r4, [r5, #36]	; 0x24
 800092e:	622b      	str	r3, [r5, #32]
 8000930:	e70f      	b.n	8000752 <__gnu_unwind_pr_common+0x56>
 8000932:	4681      	mov	r9, r0
 8000934:	210d      	movs	r1, #13
 8000936:	4638      	mov	r0, r7
 8000938:	f7ff fe6e 	bl	8000618 <_Unwind_GetGR>
 800093c:	f1b9 0f02 	cmp.w	r9, #2
 8000940:	6228      	str	r0, [r5, #32]
 8000942:	d125      	bne.n	8000990 <__gnu_unwind_pr_common+0x294>
 8000944:	462b      	mov	r3, r5
 8000946:	9a04      	ldr	r2, [sp, #16]
 8000948:	f843 2f2c 	str.w	r2, [r3, #44]!
 800094c:	626b      	str	r3, [r5, #36]	; 0x24
 800094e:	2006      	movs	r0, #6
 8000950:	62ac      	str	r4, [r5, #40]	; 0x28
 8000952:	e6fe      	b.n	8000752 <__gnu_unwind_pr_common+0x56>
 8000954:	4646      	mov	r6, r8
 8000956:	6823      	ldr	r3, [r4, #0]
 8000958:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800095c:	e769      	b.n	8000832 <__gnu_unwind_pr_common+0x136>
 800095e:	4620      	mov	r0, r4
 8000960:	f7ff fc6e 	bl	8000240 <selfrel_offset31>
 8000964:	4602      	mov	r2, r0
 8000966:	3404      	adds	r4, #4
 8000968:	63ac      	str	r4, [r5, #56]	; 0x38
 800096a:	4628      	mov	r0, r5
 800096c:	4614      	mov	r4, r2
 800096e:	f3af 8000 	nop.w
 8000972:	2800      	cmp	r0, #0
 8000974:	f43f aeec 	beq.w	8000750 <__gnu_unwind_pr_common+0x54>
 8000978:	4638      	mov	r0, r7
 800097a:	4622      	mov	r2, r4
 800097c:	210f      	movs	r1, #15
 800097e:	f7ff fe71 	bl	8000664 <_Unwind_SetGR>
 8000982:	2007      	movs	r0, #7
 8000984:	e6e5      	b.n	8000752 <__gnu_unwind_pr_common+0x56>
 8000986:	210d      	movs	r1, #13
 8000988:	4638      	mov	r0, r7
 800098a:	f7ff fe45 	bl	8000618 <_Unwind_GetGR>
 800098e:	6228      	str	r0, [r5, #32]
 8000990:	9b04      	ldr	r3, [sp, #16]
 8000992:	626b      	str	r3, [r5, #36]	; 0x24
 8000994:	e7db      	b.n	800094e <__gnu_unwind_pr_common+0x252>
 8000996:	f10b 0001 	add.w	r0, fp, #1
 800099a:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800099e:	e779      	b.n	8000894 <__gnu_unwind_pr_common+0x198>
 80009a0:	00000000 	.word	0x00000000

080009a4 <__aeabi_unwind_cpp_pr0>:
 80009a4:	2300      	movs	r3, #0
 80009a6:	e6a9      	b.n	80006fc <__gnu_unwind_pr_common>

080009a8 <__aeabi_unwind_cpp_pr1>:
 80009a8:	2301      	movs	r3, #1
 80009aa:	e6a7      	b.n	80006fc <__gnu_unwind_pr_common>

080009ac <__aeabi_unwind_cpp_pr2>:
 80009ac:	2302      	movs	r3, #2
 80009ae:	e6a5      	b.n	80006fc <__gnu_unwind_pr_common>

080009b0 <_Unwind_VRS_Pop>:
 80009b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80009b4:	4606      	mov	r6, r0
 80009b6:	4615      	mov	r5, r2
 80009b8:	461c      	mov	r4, r3
 80009ba:	b0c3      	sub	sp, #268	; 0x10c
 80009bc:	2904      	cmp	r1, #4
 80009be:	f200 80b8 	bhi.w	8000b32 <_Unwind_VRS_Pop+0x182>
 80009c2:	e8df f001 	tbb	[pc, r1]
 80009c6:	569c      	.short	0x569c
 80009c8:	2db6      	.short	0x2db6
 80009ca:	03          	.byte	0x03
 80009cb:	00          	.byte	0x00
 80009cc:	2c00      	cmp	r4, #0
 80009ce:	f040 80b0 	bne.w	8000b32 <_Unwind_VRS_Pop+0x182>
 80009d2:	2a10      	cmp	r2, #16
 80009d4:	f200 80ad 	bhi.w	8000b32 <_Unwind_VRS_Pop+0x182>
 80009d8:	6803      	ldr	r3, [r0, #0]
 80009da:	06d8      	lsls	r0, r3, #27
 80009dc:	f100 80f1 	bmi.w	8000bc2 <_Unwind_VRS_Pop+0x212>
 80009e0:	af20      	add	r7, sp, #128	; 0x80
 80009e2:	4638      	mov	r0, r7
 80009e4:	f000 f990 	bl	8000d08 <__gnu_Unwind_Save_WMMXC>
 80009e8:	2401      	movs	r4, #1
 80009ea:	4638      	mov	r0, r7
 80009ec:	2300      	movs	r3, #0
 80009ee:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 80009f0:	fa04 f203 	lsl.w	r2, r4, r3
 80009f4:	422a      	tst	r2, r5
 80009f6:	f103 0301 	add.w	r3, r3, #1
 80009fa:	d005      	beq.n	8000a08 <_Unwind_VRS_Pop+0x58>
 80009fc:	460a      	mov	r2, r1
 80009fe:	f852 cb04 	ldr.w	ip, [r2], #4
 8000a02:	4611      	mov	r1, r2
 8000a04:	f8c0 c000 	str.w	ip, [r0]
 8000a08:	2b04      	cmp	r3, #4
 8000a0a:	f100 0004 	add.w	r0, r0, #4
 8000a0e:	d1ef      	bne.n	80009f0 <_Unwind_VRS_Pop+0x40>
 8000a10:	4638      	mov	r0, r7
 8000a12:	63b1      	str	r1, [r6, #56]	; 0x38
 8000a14:	f000 f96e 	bl	8000cf4 <__gnu_Unwind_Restore_WMMXC>
 8000a18:	2000      	movs	r0, #0
 8000a1a:	b043      	add	sp, #268	; 0x10c
 8000a1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000a20:	2c03      	cmp	r4, #3
 8000a22:	f040 8086 	bne.w	8000b32 <_Unwind_VRS_Pop+0x182>
 8000a26:	b294      	uxth	r4, r2
 8000a28:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 8000a2c:	2b10      	cmp	r3, #16
 8000a2e:	ea4f 4512 	mov.w	r5, r2, lsr #16
 8000a32:	d87e      	bhi.n	8000b32 <_Unwind_VRS_Pop+0x182>
 8000a34:	6803      	ldr	r3, [r0, #0]
 8000a36:	071f      	lsls	r7, r3, #28
 8000a38:	f100 80cb 	bmi.w	8000bd2 <_Unwind_VRS_Pop+0x222>
 8000a3c:	af20      	add	r7, sp, #128	; 0x80
 8000a3e:	4638      	mov	r0, r7
 8000a40:	f000 f936 	bl	8000cb0 <__gnu_Unwind_Save_WMMXD>
 8000a44:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8000a46:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
 8000a4a:	b154      	cbz	r4, 8000a62 <_Unwind_VRS_Pop+0xb2>
 8000a4c:	460b      	mov	r3, r1
 8000a4e:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8000a52:	1ad0      	subs	r0, r2, r3
 8000a54:	00e4      	lsls	r4, r4, #3
 8000a56:	581d      	ldr	r5, [r3, r0]
 8000a58:	f843 5b04 	str.w	r5, [r3], #4
 8000a5c:	428b      	cmp	r3, r1
 8000a5e:	d1fa      	bne.n	8000a56 <_Unwind_VRS_Pop+0xa6>
 8000a60:	4422      	add	r2, r4
 8000a62:	4638      	mov	r0, r7
 8000a64:	63b2      	str	r2, [r6, #56]	; 0x38
 8000a66:	f000 f901 	bl	8000c6c <__gnu_Unwind_Restore_WMMXD>
 8000a6a:	2000      	movs	r0, #0
 8000a6c:	b043      	add	sp, #268	; 0x10c
 8000a6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000a72:	2c01      	cmp	r4, #1
 8000a74:	ea4f 4812 	mov.w	r8, r2, lsr #16
 8000a78:	b295      	uxth	r5, r2
 8000a7a:	d056      	beq.n	8000b2a <_Unwind_VRS_Pop+0x17a>
 8000a7c:	2c05      	cmp	r4, #5
 8000a7e:	d158      	bne.n	8000b32 <_Unwind_VRS_Pop+0x182>
 8000a80:	eb08 0905 	add.w	r9, r8, r5
 8000a84:	f1b9 0f20 	cmp.w	r9, #32
 8000a88:	d853      	bhi.n	8000b32 <_Unwind_VRS_Pop+0x182>
 8000a8a:	f1b8 0f0f 	cmp.w	r8, #15
 8000a8e:	d973      	bls.n	8000b78 <_Unwind_VRS_Pop+0x1c8>
 8000a90:	46a9      	mov	r9, r5
 8000a92:	2d00      	cmp	r5, #0
 8000a94:	f040 8084 	bne.w	8000ba0 <_Unwind_VRS_Pop+0x1f0>
 8000a98:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000a9a:	b365      	cbz	r5, 8000af6 <_Unwind_VRS_Pop+0x146>
 8000a9c:	af20      	add	r7, sp, #128	; 0x80
 8000a9e:	f04f 0900 	mov.w	r9, #0
 8000aa2:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 8000aa6:	3f04      	subs	r7, #4
 8000aa8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8000aac:	f853 1b04 	ldr.w	r1, [r3], #4
 8000ab0:	42ab      	cmp	r3, r5
 8000ab2:	f847 1f04 	str.w	r1, [r7, #4]!
 8000ab6:	d1f9      	bne.n	8000aac <_Unwind_VRS_Pop+0xfc>
 8000ab8:	f1b9 0f00 	cmp.w	r9, #0
 8000abc:	d00f      	beq.n	8000ade <_Unwind_VRS_Pop+0x12e>
 8000abe:	466f      	mov	r7, sp
 8000ac0:	4641      	mov	r1, r8
 8000ac2:	2910      	cmp	r1, #16
 8000ac4:	bf38      	it	cc
 8000ac6:	2110      	movcc	r1, #16
 8000ac8:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8000acc:	3984      	subs	r1, #132	; 0x84
 8000ace:	eb03 05c9 	add.w	r5, r3, r9, lsl #3
 8000ad2:	f853 0b04 	ldr.w	r0, [r3], #4
 8000ad6:	42ab      	cmp	r3, r5
 8000ad8:	f841 0f04 	str.w	r0, [r1, #4]!
 8000adc:	d1f9      	bne.n	8000ad2 <_Unwind_VRS_Pop+0x122>
 8000ade:	2c01      	cmp	r4, #1
 8000ae0:	d07f      	beq.n	8000be2 <_Unwind_VRS_Pop+0x232>
 8000ae2:	f1b8 0f0f 	cmp.w	r8, #15
 8000ae6:	63b5      	str	r5, [r6, #56]	; 0x38
 8000ae8:	d942      	bls.n	8000b70 <_Unwind_VRS_Pop+0x1c0>
 8000aea:	f1b9 0f00 	cmp.w	r9, #0
 8000aee:	d002      	beq.n	8000af6 <_Unwind_VRS_Pop+0x146>
 8000af0:	4668      	mov	r0, sp
 8000af2:	f000 f8b3 	bl	8000c5c <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000af6:	2000      	movs	r0, #0
 8000af8:	b043      	add	sp, #268	; 0x10c
 8000afa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000afe:	b9c4      	cbnz	r4, 8000b32 <_Unwind_VRS_Pop+0x182>
 8000b00:	4623      	mov	r3, r4
 8000b02:	2401      	movs	r4, #1
 8000b04:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8000b06:	1d37      	adds	r7, r6, #4
 8000b08:	b2a8      	uxth	r0, r5
 8000b0a:	fa04 f103 	lsl.w	r1, r4, r3
 8000b0e:	4201      	tst	r1, r0
 8000b10:	bf1c      	itt	ne
 8000b12:	f852 1b04 	ldrne.w	r1, [r2], #4
 8000b16:	f847 1023 	strne.w	r1, [r7, r3, lsl #2]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	2b10      	cmp	r3, #16
 8000b1e:	d1f4      	bne.n	8000b0a <_Unwind_VRS_Pop+0x15a>
 8000b20:	f415 5000 	ands.w	r0, r5, #8192	; 0x2000
 8000b24:	d1e7      	bne.n	8000af6 <_Unwind_VRS_Pop+0x146>
 8000b26:	63b2      	str	r2, [r6, #56]	; 0x38
 8000b28:	e004      	b.n	8000b34 <_Unwind_VRS_Pop+0x184>
 8000b2a:	eb08 0305 	add.w	r3, r8, r5
 8000b2e:	2b10      	cmp	r3, #16
 8000b30:	d903      	bls.n	8000b3a <_Unwind_VRS_Pop+0x18a>
 8000b32:	2002      	movs	r0, #2
 8000b34:	b043      	add	sp, #268	; 0x10c
 8000b36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000b3a:	f1b8 0f0f 	cmp.w	r8, #15
 8000b3e:	d8f8      	bhi.n	8000b32 <_Unwind_VRS_Pop+0x182>
 8000b40:	6833      	ldr	r3, [r6, #0]
 8000b42:	07da      	lsls	r2, r3, #31
 8000b44:	d506      	bpl.n	8000b54 <_Unwind_VRS_Pop+0x1a4>
 8000b46:	4630      	mov	r0, r6
 8000b48:	f023 0303 	bic.w	r3, r3, #3
 8000b4c:	f840 3b48 	str.w	r3, [r0], #72
 8000b50:	f000 f878 	bl	8000c44 <__gnu_Unwind_Save_VFP>
 8000b54:	af20      	add	r7, sp, #128	; 0x80
 8000b56:	4638      	mov	r0, r7
 8000b58:	f000 f874 	bl	8000c44 <__gnu_Unwind_Save_VFP>
 8000b5c:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000b5e:	2d00      	cmp	r5, #0
 8000b60:	d19d      	bne.n	8000a9e <_Unwind_VRS_Pop+0xee>
 8000b62:	461d      	mov	r5, r3
 8000b64:	3504      	adds	r5, #4
 8000b66:	4638      	mov	r0, r7
 8000b68:	63b5      	str	r5, [r6, #56]	; 0x38
 8000b6a:	f000 f867 	bl	8000c3c <__gnu_Unwind_Restore_VFP>
 8000b6e:	e7c2      	b.n	8000af6 <_Unwind_VRS_Pop+0x146>
 8000b70:	a820      	add	r0, sp, #128	; 0x80
 8000b72:	f000 f86b 	bl	8000c4c <__gnu_Unwind_Restore_VFP_D>
 8000b76:	e7b8      	b.n	8000aea <_Unwind_VRS_Pop+0x13a>
 8000b78:	f1b9 0f10 	cmp.w	r9, #16
 8000b7c:	d93f      	bls.n	8000bfe <_Unwind_VRS_Pop+0x24e>
 8000b7e:	f1a9 0910 	sub.w	r9, r9, #16
 8000b82:	6833      	ldr	r3, [r6, #0]
 8000b84:	07d9      	lsls	r1, r3, #31
 8000b86:	d508      	bpl.n	8000b9a <_Unwind_VRS_Pop+0x1ea>
 8000b88:	4630      	mov	r0, r6
 8000b8a:	f023 0301 	bic.w	r3, r3, #1
 8000b8e:	f043 0302 	orr.w	r3, r3, #2
 8000b92:	f840 3b48 	str.w	r3, [r0], #72
 8000b96:	f000 f85d 	bl	8000c54 <__gnu_Unwind_Save_VFP_D>
 8000b9a:	f1b9 0f00 	cmp.w	r9, #0
 8000b9e:	d031      	beq.n	8000c04 <_Unwind_VRS_Pop+0x254>
 8000ba0:	6833      	ldr	r3, [r6, #0]
 8000ba2:	075a      	lsls	r2, r3, #29
 8000ba4:	d41f      	bmi.n	8000be6 <_Unwind_VRS_Pop+0x236>
 8000ba6:	f1b8 0f0f 	cmp.w	r8, #15
 8000baa:	d924      	bls.n	8000bf6 <_Unwind_VRS_Pop+0x246>
 8000bac:	466f      	mov	r7, sp
 8000bae:	f1c8 0510 	rsb	r5, r8, #16
 8000bb2:	4638      	mov	r0, r7
 8000bb4:	f000 f856 	bl	8000c64 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000bb8:	2d00      	cmp	r5, #0
 8000bba:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000bbc:	dd80      	ble.n	8000ac0 <_Unwind_VRS_Pop+0x110>
 8000bbe:	af20      	add	r7, sp, #128	; 0x80
 8000bc0:	e76f      	b.n	8000aa2 <_Unwind_VRS_Pop+0xf2>
 8000bc2:	f023 0310 	bic.w	r3, r3, #16
 8000bc6:	6033      	str	r3, [r6, #0]
 8000bc8:	f506 70e8 	add.w	r0, r6, #464	; 0x1d0
 8000bcc:	f000 f89c 	bl	8000d08 <__gnu_Unwind_Save_WMMXC>
 8000bd0:	e706      	b.n	80009e0 <_Unwind_VRS_Pop+0x30>
 8000bd2:	f023 0308 	bic.w	r3, r3, #8
 8000bd6:	6003      	str	r3, [r0, #0]
 8000bd8:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 8000bdc:	f000 f868 	bl	8000cb0 <__gnu_Unwind_Save_WMMXD>
 8000be0:	e72c      	b.n	8000a3c <_Unwind_VRS_Pop+0x8c>
 8000be2:	af20      	add	r7, sp, #128	; 0x80
 8000be4:	e7be      	b.n	8000b64 <_Unwind_VRS_Pop+0x1b4>
 8000be6:	4630      	mov	r0, r6
 8000be8:	f023 0304 	bic.w	r3, r3, #4
 8000bec:	f840 3bd0 	str.w	r3, [r0], #208
 8000bf0:	f000 f838 	bl	8000c64 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000bf4:	e7d7      	b.n	8000ba6 <_Unwind_VRS_Pop+0x1f6>
 8000bf6:	a820      	add	r0, sp, #128	; 0x80
 8000bf8:	f000 f82c 	bl	8000c54 <__gnu_Unwind_Save_VFP_D>
 8000bfc:	e7d6      	b.n	8000bac <_Unwind_VRS_Pop+0x1fc>
 8000bfe:	f04f 0900 	mov.w	r9, #0
 8000c02:	e7be      	b.n	8000b82 <_Unwind_VRS_Pop+0x1d2>
 8000c04:	f1b8 0f0f 	cmp.w	r8, #15
 8000c08:	f63f af46 	bhi.w	8000a98 <_Unwind_VRS_Pop+0xe8>
 8000c0c:	af20      	add	r7, sp, #128	; 0x80
 8000c0e:	4638      	mov	r0, r7
 8000c10:	f000 f820 	bl	8000c54 <__gnu_Unwind_Save_VFP_D>
 8000c14:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000c16:	2d00      	cmp	r5, #0
 8000c18:	f47f af41 	bne.w	8000a9e <_Unwind_VRS_Pop+0xee>
 8000c1c:	4638      	mov	r0, r7
 8000c1e:	f000 f815 	bl	8000c4c <__gnu_Unwind_Restore_VFP_D>
 8000c22:	e768      	b.n	8000af6 <_Unwind_VRS_Pop+0x146>

08000c24 <__restore_core_regs>:
 8000c24:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8000c28:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8000c2c:	469c      	mov	ip, r3
 8000c2e:	46a6      	mov	lr, r4
 8000c30:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8000c34:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8000c38:	46e5      	mov	sp, ip
 8000c3a:	bd00      	pop	{pc}

08000c3c <__gnu_Unwind_Restore_VFP>:
 8000c3c:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop

08000c44 <__gnu_Unwind_Save_VFP>:
 8000c44:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <__gnu_Unwind_Restore_VFP_D>:
 8000c4c:	ec90 0b20 	vldmia	r0, {d0-d15}
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop

08000c54 <__gnu_Unwind_Save_VFP_D>:
 8000c54:	ec80 0b20 	vstmia	r0, {d0-d15}
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8000c5c:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop

08000c64 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8000c64:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop

08000c6c <__gnu_Unwind_Restore_WMMXD>:
 8000c6c:	ecf0 0102 	ldfe	f0, [r0], #8
 8000c70:	ecf0 1102 	ldfe	f1, [r0], #8
 8000c74:	ecf0 2102 	ldfe	f2, [r0], #8
 8000c78:	ecf0 3102 	ldfe	f3, [r0], #8
 8000c7c:	ecf0 4102 	ldfe	f4, [r0], #8
 8000c80:	ecf0 5102 	ldfe	f5, [r0], #8
 8000c84:	ecf0 6102 	ldfe	f6, [r0], #8
 8000c88:	ecf0 7102 	ldfe	f7, [r0], #8
 8000c8c:	ecf0 8102 	ldfp	f0, [r0], #8
 8000c90:	ecf0 9102 	ldfp	f1, [r0], #8
 8000c94:	ecf0 a102 	ldfp	f2, [r0], #8
 8000c98:	ecf0 b102 	ldfp	f3, [r0], #8
 8000c9c:	ecf0 c102 	ldfp	f4, [r0], #8
 8000ca0:	ecf0 d102 	ldfp	f5, [r0], #8
 8000ca4:	ecf0 e102 	ldfp	f6, [r0], #8
 8000ca8:	ecf0 f102 	ldfp	f7, [r0], #8
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop

08000cb0 <__gnu_Unwind_Save_WMMXD>:
 8000cb0:	ece0 0102 	stfe	f0, [r0], #8
 8000cb4:	ece0 1102 	stfe	f1, [r0], #8
 8000cb8:	ece0 2102 	stfe	f2, [r0], #8
 8000cbc:	ece0 3102 	stfe	f3, [r0], #8
 8000cc0:	ece0 4102 	stfe	f4, [r0], #8
 8000cc4:	ece0 5102 	stfe	f5, [r0], #8
 8000cc8:	ece0 6102 	stfe	f6, [r0], #8
 8000ccc:	ece0 7102 	stfe	f7, [r0], #8
 8000cd0:	ece0 8102 	stfp	f0, [r0], #8
 8000cd4:	ece0 9102 	stfp	f1, [r0], #8
 8000cd8:	ece0 a102 	stfp	f2, [r0], #8
 8000cdc:	ece0 b102 	stfp	f3, [r0], #8
 8000ce0:	ece0 c102 	stfp	f4, [r0], #8
 8000ce4:	ece0 d102 	stfp	f5, [r0], #8
 8000ce8:	ece0 e102 	stfp	f6, [r0], #8
 8000cec:	ece0 f102 	stfp	f7, [r0], #8
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop

08000cf4 <__gnu_Unwind_Restore_WMMXC>:
 8000cf4:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8000cf8:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8000cfc:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8000d00:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop

08000d08 <__gnu_Unwind_Save_WMMXC>:
 8000d08:	fca0 8101 	stc2	1, cr8, [r0], #4
 8000d0c:	fca0 9101 	stc2	1, cr9, [r0], #4
 8000d10:	fca0 a101 	stc2	1, cr10, [r0], #4
 8000d14:	fca0 b101 	stc2	1, cr11, [r0], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop

08000d1c <_Unwind_RaiseException>:
 8000d1c:	46ec      	mov	ip, sp
 8000d1e:	b500      	push	{lr}
 8000d20:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000d24:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000d28:	f04f 0300 	mov.w	r3, #0
 8000d2c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000d30:	a901      	add	r1, sp, #4
 8000d32:	f7ff fbe7 	bl	8000504 <__gnu_Unwind_RaiseException>
 8000d36:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000d3a:	b012      	add	sp, #72	; 0x48
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop

08000d40 <_Unwind_Resume>:
 8000d40:	46ec      	mov	ip, sp
 8000d42:	b500      	push	{lr}
 8000d44:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000d48:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000d4c:	f04f 0300 	mov.w	r3, #0
 8000d50:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000d54:	a901      	add	r1, sp, #4
 8000d56:	f7ff fc13 	bl	8000580 <__gnu_Unwind_Resume>
 8000d5a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000d5e:	b012      	add	sp, #72	; 0x48
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop

08000d64 <_Unwind_Resume_or_Rethrow>:
 8000d64:	46ec      	mov	ip, sp
 8000d66:	b500      	push	{lr}
 8000d68:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000d6c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000d78:	a901      	add	r1, sp, #4
 8000d7a:	f7ff fc23 	bl	80005c4 <__gnu_Unwind_Resume_or_Rethrow>
 8000d7e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000d82:	b012      	add	sp, #72	; 0x48
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop

08000d88 <_Unwind_ForcedUnwind>:
 8000d88:	46ec      	mov	ip, sp
 8000d8a:	b500      	push	{lr}
 8000d8c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000d90:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000d94:	f04f 0300 	mov.w	r3, #0
 8000d98:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000d9c:	ab01      	add	r3, sp, #4
 8000d9e:	f7ff fbe5 	bl	800056c <__gnu_Unwind_ForcedUnwind>
 8000da2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000da6:	b012      	add	sp, #72	; 0x48
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop

08000dac <_Unwind_Backtrace>:
 8000dac:	46ec      	mov	ip, sp
 8000dae:	b500      	push	{lr}
 8000db0:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000db4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000db8:	f04f 0300 	mov.w	r3, #0
 8000dbc:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000dc0:	aa01      	add	r2, sp, #4
 8000dc2:	f7ff fc5b 	bl	800067c <__gnu_Unwind_Backtrace>
 8000dc6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000dca:	b012      	add	sp, #72	; 0x48
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop

08000dd0 <next_unwind_byte>:
 8000dd0:	7a02      	ldrb	r2, [r0, #8]
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	b97a      	cbnz	r2, 8000df6 <next_unwind_byte+0x26>
 8000dd6:	7a42      	ldrb	r2, [r0, #9]
 8000dd8:	b1a2      	cbz	r2, 8000e04 <next_unwind_byte+0x34>
 8000dda:	f04f 0c03 	mov.w	ip, #3
 8000dde:	6841      	ldr	r1, [r0, #4]
 8000de0:	3a01      	subs	r2, #1
 8000de2:	7242      	strb	r2, [r0, #9]
 8000de4:	6808      	ldr	r0, [r1, #0]
 8000de6:	1d0a      	adds	r2, r1, #4
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	0202      	lsls	r2, r0, #8
 8000dec:	f883 c008 	strb.w	ip, [r3, #8]
 8000df0:	0e00      	lsrs	r0, r0, #24
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	4770      	bx	lr
 8000df6:	6800      	ldr	r0, [r0, #0]
 8000df8:	3a01      	subs	r2, #1
 8000dfa:	721a      	strb	r2, [r3, #8]
 8000dfc:	0202      	lsls	r2, r0, #8
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	0e00      	lsrs	r0, r0, #24
 8000e02:	4770      	bx	lr
 8000e04:	20b0      	movs	r0, #176	; 0xb0
 8000e06:	4770      	bx	lr

08000e08 <_Unwind_GetGR.constprop.0>:
 8000e08:	2300      	movs	r3, #0
 8000e0a:	b500      	push	{lr}
 8000e0c:	b085      	sub	sp, #20
 8000e0e:	a903      	add	r1, sp, #12
 8000e10:	9100      	str	r1, [sp, #0]
 8000e12:	220c      	movs	r2, #12
 8000e14:	4619      	mov	r1, r3
 8000e16:	f7ff fbe7 	bl	80005e8 <_Unwind_VRS_Get>
 8000e1a:	9803      	ldr	r0, [sp, #12]
 8000e1c:	b005      	add	sp, #20
 8000e1e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e22:	bf00      	nop

08000e24 <unwind_UCB_from_context>:
 8000e24:	e7f0      	b.n	8000e08 <_Unwind_GetGR.constprop.0>
 8000e26:	bf00      	nop

08000e28 <__gnu_unwind_execute>:
 8000e28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e2c:	f04f 0800 	mov.w	r8, #0
 8000e30:	4605      	mov	r5, r0
 8000e32:	460e      	mov	r6, r1
 8000e34:	b085      	sub	sp, #20
 8000e36:	4630      	mov	r0, r6
 8000e38:	f7ff ffca 	bl	8000dd0 <next_unwind_byte>
 8000e3c:	28b0      	cmp	r0, #176	; 0xb0
 8000e3e:	4604      	mov	r4, r0
 8000e40:	f000 80ba 	beq.w	8000fb8 <__gnu_unwind_execute+0x190>
 8000e44:	0607      	lsls	r7, r0, #24
 8000e46:	d520      	bpl.n	8000e8a <__gnu_unwind_execute+0x62>
 8000e48:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8000e4c:	2b80      	cmp	r3, #128	; 0x80
 8000e4e:	d04d      	beq.n	8000eec <__gnu_unwind_execute+0xc4>
 8000e50:	2b90      	cmp	r3, #144	; 0x90
 8000e52:	d036      	beq.n	8000ec2 <__gnu_unwind_execute+0x9a>
 8000e54:	2ba0      	cmp	r3, #160	; 0xa0
 8000e56:	d060      	beq.n	8000f1a <__gnu_unwind_execute+0xf2>
 8000e58:	2bb0      	cmp	r3, #176	; 0xb0
 8000e5a:	d073      	beq.n	8000f44 <__gnu_unwind_execute+0x11c>
 8000e5c:	2bc0      	cmp	r3, #192	; 0xc0
 8000e5e:	f000 808a 	beq.w	8000f76 <__gnu_unwind_execute+0x14e>
 8000e62:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8000e66:	2bd0      	cmp	r3, #208	; 0xd0
 8000e68:	d10b      	bne.n	8000e82 <__gnu_unwind_execute+0x5a>
 8000e6a:	f000 0207 	and.w	r2, r0, #7
 8000e6e:	3201      	adds	r2, #1
 8000e70:	2305      	movs	r3, #5
 8000e72:	2101      	movs	r1, #1
 8000e74:	4628      	mov	r0, r5
 8000e76:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000e7a:	f7ff fd99 	bl	80009b0 <_Unwind_VRS_Pop>
 8000e7e:	2800      	cmp	r0, #0
 8000e80:	d0d9      	beq.n	8000e36 <__gnu_unwind_execute+0xe>
 8000e82:	2009      	movs	r0, #9
 8000e84:	b005      	add	sp, #20
 8000e86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000e8a:	0083      	lsls	r3, r0, #2
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	1d1f      	adds	r7, r3, #4
 8000e90:	2300      	movs	r3, #0
 8000e92:	f10d 090c 	add.w	r9, sp, #12
 8000e96:	4619      	mov	r1, r3
 8000e98:	220d      	movs	r2, #13
 8000e9a:	4628      	mov	r0, r5
 8000e9c:	f8cd 9000 	str.w	r9, [sp]
 8000ea0:	f7ff fba2 	bl	80005e8 <_Unwind_VRS_Get>
 8000ea4:	9b03      	ldr	r3, [sp, #12]
 8000ea6:	0660      	lsls	r0, r4, #25
 8000ea8:	bf4c      	ite	mi
 8000eaa:	1bdf      	submi	r7, r3, r7
 8000eac:	18ff      	addpl	r7, r7, r3
 8000eae:	2300      	movs	r3, #0
 8000eb0:	220d      	movs	r2, #13
 8000eb2:	4628      	mov	r0, r5
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	f8cd 9000 	str.w	r9, [sp]
 8000eba:	9703      	str	r7, [sp, #12]
 8000ebc:	f7ff fbba 	bl	8000634 <_Unwind_VRS_Set>
 8000ec0:	e7b9      	b.n	8000e36 <__gnu_unwind_execute+0xe>
 8000ec2:	f000 030d 	and.w	r3, r0, #13
 8000ec6:	2b0d      	cmp	r3, #13
 8000ec8:	d0db      	beq.n	8000e82 <__gnu_unwind_execute+0x5a>
 8000eca:	2300      	movs	r3, #0
 8000ecc:	af03      	add	r7, sp, #12
 8000ece:	4619      	mov	r1, r3
 8000ed0:	f000 020f 	and.w	r2, r0, #15
 8000ed4:	9700      	str	r7, [sp, #0]
 8000ed6:	4628      	mov	r0, r5
 8000ed8:	f7ff fb86 	bl	80005e8 <_Unwind_VRS_Get>
 8000edc:	2300      	movs	r3, #0
 8000ede:	220d      	movs	r2, #13
 8000ee0:	4628      	mov	r0, r5
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	9700      	str	r7, [sp, #0]
 8000ee6:	f7ff fba5 	bl	8000634 <_Unwind_VRS_Set>
 8000eea:	e7a4      	b.n	8000e36 <__gnu_unwind_execute+0xe>
 8000eec:	4630      	mov	r0, r6
 8000eee:	f7ff ff6f 	bl	8000dd0 <next_unwind_byte>
 8000ef2:	0224      	lsls	r4, r4, #8
 8000ef4:	4320      	orrs	r0, r4
 8000ef6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8000efa:	d0c2      	beq.n	8000e82 <__gnu_unwind_execute+0x5a>
 8000efc:	2300      	movs	r3, #0
 8000efe:	0104      	lsls	r4, r0, #4
 8000f00:	4619      	mov	r1, r3
 8000f02:	4628      	mov	r0, r5
 8000f04:	b2a2      	uxth	r2, r4
 8000f06:	f7ff fd53 	bl	80009b0 <_Unwind_VRS_Pop>
 8000f0a:	2800      	cmp	r0, #0
 8000f0c:	d1b9      	bne.n	8000e82 <__gnu_unwind_execute+0x5a>
 8000f0e:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8000f12:	bf18      	it	ne
 8000f14:	f04f 0801 	movne.w	r8, #1
 8000f18:	e78d      	b.n	8000e36 <__gnu_unwind_execute+0xe>
 8000f1a:	43c3      	mvns	r3, r0
 8000f1c:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8000f20:	f003 0307 	and.w	r3, r3, #7
 8000f24:	411a      	asrs	r2, r3
 8000f26:	2300      	movs	r3, #0
 8000f28:	0701      	lsls	r1, r0, #28
 8000f2a:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8000f2e:	bf48      	it	mi
 8000f30:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8000f34:	4628      	mov	r0, r5
 8000f36:	4619      	mov	r1, r3
 8000f38:	f7ff fd3a 	bl	80009b0 <_Unwind_VRS_Pop>
 8000f3c:	2800      	cmp	r0, #0
 8000f3e:	f43f af7a 	beq.w	8000e36 <__gnu_unwind_execute+0xe>
 8000f42:	e79e      	b.n	8000e82 <__gnu_unwind_execute+0x5a>
 8000f44:	28b1      	cmp	r0, #177	; 0xb1
 8000f46:	d03c      	beq.n	8000fc2 <__gnu_unwind_execute+0x19a>
 8000f48:	28b2      	cmp	r0, #178	; 0xb2
 8000f4a:	f000 80b0 	beq.w	80010ae <__gnu_unwind_execute+0x286>
 8000f4e:	28b3      	cmp	r0, #179	; 0xb3
 8000f50:	d04a      	beq.n	8000fe8 <__gnu_unwind_execute+0x1c0>
 8000f52:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8000f56:	2bb4      	cmp	r3, #180	; 0xb4
 8000f58:	d093      	beq.n	8000e82 <__gnu_unwind_execute+0x5a>
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	f000 0207 	and.w	r2, r0, #7
 8000f60:	441a      	add	r2, r3
 8000f62:	4628      	mov	r0, r5
 8000f64:	4619      	mov	r1, r3
 8000f66:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000f6a:	f7ff fd21 	bl	80009b0 <_Unwind_VRS_Pop>
 8000f6e:	2800      	cmp	r0, #0
 8000f70:	f43f af61 	beq.w	8000e36 <__gnu_unwind_execute+0xe>
 8000f74:	e785      	b.n	8000e82 <__gnu_unwind_execute+0x5a>
 8000f76:	28c6      	cmp	r0, #198	; 0xc6
 8000f78:	d04f      	beq.n	800101a <__gnu_unwind_execute+0x1f2>
 8000f7a:	28c7      	cmp	r0, #199	; 0xc7
 8000f7c:	d061      	beq.n	8001042 <__gnu_unwind_execute+0x21a>
 8000f7e:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8000f82:	2bc0      	cmp	r3, #192	; 0xc0
 8000f84:	d070      	beq.n	8001068 <__gnu_unwind_execute+0x240>
 8000f86:	28c8      	cmp	r0, #200	; 0xc8
 8000f88:	d07c      	beq.n	8001084 <__gnu_unwind_execute+0x25c>
 8000f8a:	28c9      	cmp	r0, #201	; 0xc9
 8000f8c:	f47f af79 	bne.w	8000e82 <__gnu_unwind_execute+0x5a>
 8000f90:	4630      	mov	r0, r6
 8000f92:	f7ff ff1d 	bl	8000dd0 <next_unwind_byte>
 8000f96:	2305      	movs	r3, #5
 8000f98:	4602      	mov	r2, r0
 8000f9a:	2101      	movs	r1, #1
 8000f9c:	4628      	mov	r0, r5
 8000f9e:	0314      	lsls	r4, r2, #12
 8000fa0:	f002 020f 	and.w	r2, r2, #15
 8000fa4:	f404 2470 	and.w	r4, r4, #983040	; 0xf0000
 8000fa8:	440a      	add	r2, r1
 8000faa:	4322      	orrs	r2, r4
 8000fac:	f7ff fd00 	bl	80009b0 <_Unwind_VRS_Pop>
 8000fb0:	2800      	cmp	r0, #0
 8000fb2:	f43f af40 	beq.w	8000e36 <__gnu_unwind_execute+0xe>
 8000fb6:	e764      	b.n	8000e82 <__gnu_unwind_execute+0x5a>
 8000fb8:	f1b8 0f00 	cmp.w	r8, #0
 8000fbc:	d01c      	beq.n	8000ff8 <__gnu_unwind_execute+0x1d0>
 8000fbe:	2000      	movs	r0, #0
 8000fc0:	e760      	b.n	8000e84 <__gnu_unwind_execute+0x5c>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	f7ff ff04 	bl	8000dd0 <next_unwind_byte>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	2800      	cmp	r0, #0
 8000fcc:	f43f af59 	beq.w	8000e82 <__gnu_unwind_execute+0x5a>
 8000fd0:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8000fd4:	f47f af55 	bne.w	8000e82 <__gnu_unwind_execute+0x5a>
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4628      	mov	r0, r5
 8000fdc:	f7ff fce8 	bl	80009b0 <_Unwind_VRS_Pop>
 8000fe0:	2800      	cmp	r0, #0
 8000fe2:	f43f af28 	beq.w	8000e36 <__gnu_unwind_execute+0xe>
 8000fe6:	e74c      	b.n	8000e82 <__gnu_unwind_execute+0x5a>
 8000fe8:	4630      	mov	r0, r6
 8000fea:	f7ff fef1 	bl	8000dd0 <next_unwind_byte>
 8000fee:	2301      	movs	r3, #1
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4628      	mov	r0, r5
 8000ff6:	e7d2      	b.n	8000f9e <__gnu_unwind_execute+0x176>
 8000ff8:	ac03      	add	r4, sp, #12
 8000ffa:	4643      	mov	r3, r8
 8000ffc:	220e      	movs	r2, #14
 8000ffe:	4641      	mov	r1, r8
 8001000:	4628      	mov	r0, r5
 8001002:	9400      	str	r4, [sp, #0]
 8001004:	f7ff faf0 	bl	80005e8 <_Unwind_VRS_Get>
 8001008:	4643      	mov	r3, r8
 800100a:	220f      	movs	r2, #15
 800100c:	4628      	mov	r0, r5
 800100e:	4641      	mov	r1, r8
 8001010:	9400      	str	r4, [sp, #0]
 8001012:	f7ff fb0f 	bl	8000634 <_Unwind_VRS_Set>
 8001016:	4640      	mov	r0, r8
 8001018:	e734      	b.n	8000e84 <__gnu_unwind_execute+0x5c>
 800101a:	4630      	mov	r0, r6
 800101c:	f7ff fed8 	bl	8000dd0 <next_unwind_byte>
 8001020:	4602      	mov	r2, r0
 8001022:	2303      	movs	r3, #3
 8001024:	0314      	lsls	r4, r2, #12
 8001026:	f002 020f 	and.w	r2, r2, #15
 800102a:	f404 2470 	and.w	r4, r4, #983040	; 0xf0000
 800102e:	3201      	adds	r2, #1
 8001030:	4628      	mov	r0, r5
 8001032:	4619      	mov	r1, r3
 8001034:	4322      	orrs	r2, r4
 8001036:	f7ff fcbb 	bl	80009b0 <_Unwind_VRS_Pop>
 800103a:	2800      	cmp	r0, #0
 800103c:	f43f aefb 	beq.w	8000e36 <__gnu_unwind_execute+0xe>
 8001040:	e71f      	b.n	8000e82 <__gnu_unwind_execute+0x5a>
 8001042:	4630      	mov	r0, r6
 8001044:	f7ff fec4 	bl	8000dd0 <next_unwind_byte>
 8001048:	4602      	mov	r2, r0
 800104a:	2800      	cmp	r0, #0
 800104c:	f43f af19 	beq.w	8000e82 <__gnu_unwind_execute+0x5a>
 8001050:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001054:	f47f af15 	bne.w	8000e82 <__gnu_unwind_execute+0x5a>
 8001058:	2104      	movs	r1, #4
 800105a:	4628      	mov	r0, r5
 800105c:	f7ff fca8 	bl	80009b0 <_Unwind_VRS_Pop>
 8001060:	2800      	cmp	r0, #0
 8001062:	f43f aee8 	beq.w	8000e36 <__gnu_unwind_execute+0xe>
 8001066:	e70c      	b.n	8000e82 <__gnu_unwind_execute+0x5a>
 8001068:	2303      	movs	r3, #3
 800106a:	f000 020f 	and.w	r2, r0, #15
 800106e:	3201      	adds	r2, #1
 8001070:	4628      	mov	r0, r5
 8001072:	4619      	mov	r1, r3
 8001074:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8001078:	f7ff fc9a 	bl	80009b0 <_Unwind_VRS_Pop>
 800107c:	2800      	cmp	r0, #0
 800107e:	f43f aeda 	beq.w	8000e36 <__gnu_unwind_execute+0xe>
 8001082:	e6fe      	b.n	8000e82 <__gnu_unwind_execute+0x5a>
 8001084:	4630      	mov	r0, r6
 8001086:	f7ff fea3 	bl	8000dd0 <next_unwind_byte>
 800108a:	4602      	mov	r2, r0
 800108c:	2101      	movs	r1, #1
 800108e:	f002 04f0 	and.w	r4, r2, #240	; 0xf0
 8001092:	f002 020f 	and.w	r2, r2, #15
 8001096:	3410      	adds	r4, #16
 8001098:	440a      	add	r2, r1
 800109a:	2305      	movs	r3, #5
 800109c:	4628      	mov	r0, r5
 800109e:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
 80010a2:	f7ff fc85 	bl	80009b0 <_Unwind_VRS_Pop>
 80010a6:	2800      	cmp	r0, #0
 80010a8:	f43f aec5 	beq.w	8000e36 <__gnu_unwind_execute+0xe>
 80010ac:	e6e9      	b.n	8000e82 <__gnu_unwind_execute+0x5a>
 80010ae:	2300      	movs	r3, #0
 80010b0:	f10d 090c 	add.w	r9, sp, #12
 80010b4:	220d      	movs	r2, #13
 80010b6:	4619      	mov	r1, r3
 80010b8:	4628      	mov	r0, r5
 80010ba:	f8cd 9000 	str.w	r9, [sp]
 80010be:	f7ff fa93 	bl	80005e8 <_Unwind_VRS_Get>
 80010c2:	4630      	mov	r0, r6
 80010c4:	f7ff fe84 	bl	8000dd0 <next_unwind_byte>
 80010c8:	0602      	lsls	r2, r0, #24
 80010ca:	f04f 0402 	mov.w	r4, #2
 80010ce:	d50c      	bpl.n	80010ea <__gnu_unwind_execute+0x2c2>
 80010d0:	9b03      	ldr	r3, [sp, #12]
 80010d2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80010d6:	40a0      	lsls	r0, r4
 80010d8:	4418      	add	r0, r3
 80010da:	9003      	str	r0, [sp, #12]
 80010dc:	4630      	mov	r0, r6
 80010de:	f7ff fe77 	bl	8000dd0 <next_unwind_byte>
 80010e2:	0603      	lsls	r3, r0, #24
 80010e4:	f104 0407 	add.w	r4, r4, #7
 80010e8:	d4f2      	bmi.n	80010d0 <__gnu_unwind_execute+0x2a8>
 80010ea:	9b03      	ldr	r3, [sp, #12]
 80010ec:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 80010f0:	40a2      	lsls	r2, r4
 80010f2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80010f6:	441a      	add	r2, r3
 80010f8:	2300      	movs	r3, #0
 80010fa:	9203      	str	r2, [sp, #12]
 80010fc:	4628      	mov	r0, r5
 80010fe:	220d      	movs	r2, #13
 8001100:	4619      	mov	r1, r3
 8001102:	f8cd 9000 	str.w	r9, [sp]
 8001106:	f7ff fa95 	bl	8000634 <_Unwind_VRS_Set>
 800110a:	e694      	b.n	8000e36 <__gnu_unwind_execute+0xe>

0800110c <__gnu_unwind_frame>:
 800110c:	460b      	mov	r3, r1
 800110e:	f04f 0c03 	mov.w	ip, #3
 8001112:	b500      	push	{lr}
 8001114:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8001116:	4618      	mov	r0, r3
 8001118:	6853      	ldr	r3, [r2, #4]
 800111a:	b085      	sub	sp, #20
 800111c:	3208      	adds	r2, #8
 800111e:	9202      	str	r2, [sp, #8]
 8001120:	a901      	add	r1, sp, #4
 8001122:	0e1a      	lsrs	r2, r3, #24
 8001124:	021b      	lsls	r3, r3, #8
 8001126:	f88d c00c 	strb.w	ip, [sp, #12]
 800112a:	9301      	str	r3, [sp, #4]
 800112c:	f88d 200d 	strb.w	r2, [sp, #13]
 8001130:	f7ff fe7a 	bl	8000e28 <__gnu_unwind_execute>
 8001134:	b005      	add	sp, #20
 8001136:	f85d fb04 	ldr.w	pc, [sp], #4
 800113a:	bf00      	nop

0800113c <_Unwind_GetRegionStart>:
 800113c:	b508      	push	{r3, lr}
 800113e:	f7ff fe71 	bl	8000e24 <unwind_UCB_from_context>
 8001142:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8001144:	bd08      	pop	{r3, pc}
 8001146:	bf00      	nop

08001148 <_Unwind_GetLanguageSpecificData>:
 8001148:	b508      	push	{r3, lr}
 800114a:	f7ff fe6b 	bl	8000e24 <unwind_UCB_from_context>
 800114e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8001150:	79c3      	ldrb	r3, [r0, #7]
 8001152:	3302      	adds	r3, #2
 8001154:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001158:	bd08      	pop	{r3, pc}
 800115a:	bf00      	nop

0800115c <_ZN7Display6setLCDEP3LCD>:
		SCREEN_MAIN = 1
	};

	Display();
	virtual ~Display();
	void setLCD( LCD *lcd ) { mLCD = lcd; }
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	683a      	ldr	r2, [r7, #0]
 800116a:	611a      	str	r2, [r3, #16]
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	bc80      	pop	{r7}
 8001174:	4770      	bx	lr

08001176 <_ZN3LED6setPinEt>:
public:
	LED();
	LED( GPIO_TypeDef*, uint16_t pin );
	virtual ~LED();

	void setPin( uint16_t pin ) { mPin = pin; }
 8001176:	b480      	push	{r7}
 8001178:	b083      	sub	sp, #12
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
 800117e:	460b      	mov	r3, r1
 8001180:	807b      	strh	r3, [r7, #2]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	887a      	ldrh	r2, [r7, #2]
 8001186:	811a      	strh	r2, [r3, #8]
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	bc80      	pop	{r7}
 8001190:	4770      	bx	lr

08001192 <_ZN3LED7setPortEP12GPIO_TypeDef>:
	void setPort( GPIO_TypeDef* port ) { mPort = port; }
 8001192:	b480      	push	{r7}
 8001194:	b083      	sub	sp, #12
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
 800119a:	6039      	str	r1, [r7, #0]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	683a      	ldr	r2, [r7, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	bf00      	nop
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bc80      	pop	{r7}
 80011aa:	4770      	bx	lr

080011ac <_ZN3LED13setPortAndPinEP12GPIO_TypeDeft>:
	void setPortAndPin( GPIO_TypeDef* port, uint16_t pin ) { setPin( pin ); setPort( port ); }
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	4613      	mov	r3, r2
 80011b8:	80fb      	strh	r3, [r7, #6]
 80011ba:	88fb      	ldrh	r3, [r7, #6]
 80011bc:	4619      	mov	r1, r3
 80011be:	68f8      	ldr	r0, [r7, #12]
 80011c0:	f7ff ffd9 	bl	8001176 <_ZN3LED6setPinEt>
 80011c4:	68b9      	ldr	r1, [r7, #8]
 80011c6:	68f8      	ldr	r0, [r7, #12]
 80011c8:	f7ff ffe3 	bl	8001192 <_ZN3LED7setPortEP12GPIO_TypeDef>
 80011cc:	bf00      	nop
 80011ce:	3710      	adds	r7, #16
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <_ZN5Audio10setDecoderEP12DolbyDecoder>:
	virtual ~Audio();

	virtual void tick();
	virtual void preTick();

	virtual void setDecoder( DolbyDecoder *decoder ) { mDecoder = decoder; }
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	683a      	ldr	r2, [r7, #0]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bc80      	pop	{r7}
 80011ec:	4770      	bx	lr

080011ee <_ZN5Audio6setDACEP6DAC_IC>:
	virtual void setDAC( DAC_IC *dac ) { mDAC = dac; }
 80011ee:	b480      	push	{r7}
 80011f0:	b083      	sub	sp, #12
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
 80011f6:	6039      	str	r1, [r7, #0]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	683a      	ldr	r2, [r7, #0]
 80011fc:	60da      	str	r2, [r3, #12]
 80011fe:	bf00      	nop
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	bc80      	pop	{r7}
 8001206:	4770      	bx	lr

08001208 <_ZN9AmplifierC1Ev>:
#include "DACPCM1681.h"
#include "DolbyDecoderSTA310.h"
//#include "usbd_cdc_if.h"
#include "Debug.h"

Amplifier::Amplifier() :
 8001208:	b5b0      	push	{r4, r5, r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
	mAudio( this ),
	mDAC( 0 ),
	mDecoder( 0 ),
	mLastVolumeTimer( 0 ),
	mCurrentVolume( 65 ),
	mSamplingFrequency( 0 ) {
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	4618      	mov	r0, r3
 8001214:	f000 fed4 	bl	8001fc0 <_ZN13DecoderEventsC1Ev>
 8001218:	4a27      	ldr	r2, [pc, #156]	; (80012b8 <_ZN9AmplifierC1Ev+0xb0>)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	3304      	adds	r3, #4
 8001222:	4618      	mov	r0, r3
 8001224:	f000 ff20 	bl	8002068 <_ZN7DisplayC1Ev>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	334c      	adds	r3, #76	; 0x4c
 800122c:	6879      	ldr	r1, [r7, #4]
 800122e:	4618      	mov	r0, r3
 8001230:	f000 fa2a 	bl	8001688 <_ZN5AudioC1EP9Amplifier>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2200      	movs	r2, #0
 8001238:	671a      	str	r2, [r3, #112]	; 0x70
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2200      	movs	r2, #0
 800123e:	675a      	str	r2, [r3, #116]	; 0x74
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2200      	movs	r2, #0
 8001244:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2241      	movs	r2, #65	; 0x41
 800124c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3388      	adds	r3, #136	; 0x88
 8001254:	2403      	movs	r4, #3
 8001256:	461d      	mov	r5, r3
 8001258:	2c00      	cmp	r4, #0
 800125a:	db05      	blt.n	8001268 <_ZN9AmplifierC1Ev+0x60>
 800125c:	4628      	mov	r0, r5
 800125e:	f002 fdbd 	bl	8003ddc <_ZN3LEDC1Ev>
 8001262:	3510      	adds	r5, #16
 8001264:	3c01      	subs	r4, #1
 8001266:	e7f7      	b.n	8001258 <_ZN9AmplifierC1Ev+0x50>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	33c8      	adds	r3, #200	; 0xc8
 800126c:	2404      	movs	r4, #4
 800126e:	461d      	mov	r5, r3
 8001270:	2c00      	cmp	r4, #0
 8001272:	db05      	blt.n	8001280 <_ZN9AmplifierC1Ev+0x78>
 8001274:	4628      	mov	r0, r5
 8001276:	f002 fdb1 	bl	8003ddc <_ZN3LEDC1Ev>
 800127a:	3510      	adds	r5, #16
 800127c:	3c01      	subs	r4, #1
 800127e:	e7f7      	b.n	8001270 <_ZN9AmplifierC1Ev+0x68>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8001286:	4618      	mov	r0, r3
 8001288:	f008 fa52 	bl	8009730 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2200      	movs	r2, #0
 8001290:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	// TODO Auto-generated constructor stub
	mBusI2C = new I2C_Bitbang( 48000000 );
 8001294:	2010      	movs	r0, #16
 8001296:	f008 f9c8 	bl	800962a <_Znwj>
 800129a:	4603      	mov	r3, r0
 800129c:	461c      	mov	r4, r3
 800129e:	2200      	movs	r2, #0
 80012a0:	4906      	ldr	r1, [pc, #24]	; (80012bc <_ZN9AmplifierC1Ev+0xb4>)
 80012a2:	4620      	mov	r0, r4
 80012a4:	f001 ffc6 	bl	8003234 <_ZN11I2C_BitbangC1Emh>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	66dc      	str	r4, [r3, #108]	; 0x6c
}
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	4618      	mov	r0, r3
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bdb0      	pop	{r4, r5, r7, pc}
 80012b6:	bf00      	nop
 80012b8:	0800a510 	.word	0x0800a510
 80012bc:	02dc6c00 	.word	0x02dc6c00

080012c0 <_ZN9AmplifierD1Ev>:

Amplifier::~Amplifier() {
 80012c0:	b590      	push	{r4, r7, lr}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	4a1f      	ldr	r2, [pc, #124]	; (8001348 <_ZN9AmplifierD1Ev+0x88>)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80012d4:	4618      	mov	r0, r3
 80012d6:	f008 fa32 	bl	800973e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	33c8      	adds	r3, #200	; 0xc8
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d00d      	beq.n	80012fe <_ZN9AmplifierD1Ev+0x3e>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	33c8      	adds	r3, #200	; 0xc8
 80012e6:	f103 0450 	add.w	r4, r3, #80	; 0x50
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	33c8      	adds	r3, #200	; 0xc8
 80012ee:	429c      	cmp	r4, r3
 80012f0:	d005      	beq.n	80012fe <_ZN9AmplifierD1Ev+0x3e>
 80012f2:	3c10      	subs	r4, #16
 80012f4:	6823      	ldr	r3, [r4, #0]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4620      	mov	r0, r4
 80012fa:	4798      	blx	r3
 80012fc:	e7f5      	b.n	80012ea <_ZN9AmplifierD1Ev+0x2a>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	3388      	adds	r3, #136	; 0x88
 8001302:	2b00      	cmp	r3, #0
 8001304:	d00d      	beq.n	8001322 <_ZN9AmplifierD1Ev+0x62>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	3388      	adds	r3, #136	; 0x88
 800130a:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	3388      	adds	r3, #136	; 0x88
 8001312:	429c      	cmp	r4, r3
 8001314:	d005      	beq.n	8001322 <_ZN9AmplifierD1Ev+0x62>
 8001316:	3c10      	subs	r4, #16
 8001318:	6823      	ldr	r3, [r4, #0]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4620      	mov	r0, r4
 800131e:	4798      	blx	r3
 8001320:	e7f5      	b.n	800130e <_ZN9AmplifierD1Ev+0x4e>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	334c      	adds	r3, #76	; 0x4c
 8001326:	4618      	mov	r0, r3
 8001328:	f000 f9d4 	bl	80016d4 <_ZN5AudioD1Ev>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3304      	adds	r3, #4
 8001330:	4618      	mov	r0, r3
 8001332:	f000 febd 	bl	80020b0 <_ZN7DisplayD1Ev>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4618      	mov	r0, r3
 800133a:	f000 fe51 	bl	8001fe0 <_ZN13DecoderEventsD1Ev>
	// TODO Auto-generated destructor stub
}
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4618      	mov	r0, r3
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	bd90      	pop	{r4, r7, pc}
 8001348:	0800a510 	.word	0x0800a510

0800134c <_ZN9AmplifierD0Ev>:
Amplifier::~Amplifier() {
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
}
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f7ff ffb3 	bl	80012c0 <_ZN9AmplifierD1Ev>
 800135a:	f44f 719a 	mov.w	r1, #308	; 0x134
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f008 f961 	bl	8009626 <_ZdlPvj>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	4618      	mov	r0, r3
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <_ZN9Amplifier20onSamplingRateChangeEm>:

void
Amplifier::onSamplingRateChange( uint32_t samplingRate ) {
 800136e:	b580      	push	{r7, lr}
 8001370:	b082      	sub	sp, #8
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
 8001376:	6039      	str	r1, [r7, #0]
	mDisplay.setSamplingRate( samplingRate );
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	3304      	adds	r3, #4
 800137c:	6839      	ldr	r1, [r7, #0]
 800137e:	4618      	mov	r0, r3
 8001380:	f000 fefe 	bl	8002180 <_ZN7Display15setSamplingRateEm>
}
 8001384:	bf00      	nop
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}

0800138c <_ZN9Amplifier17onAlgorithmChangeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void
Amplifier::onAlgorithmChange( const std::string &algorithm ) {
 800138c:	b590      	push	{r4, r7, lr}
 800138e:	b089      	sub	sp, #36	; 0x24
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
	mDisplay.setAlgorithm( algorithm );
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	1d1c      	adds	r4, r3, #4
 800139a:	f107 0308 	add.w	r3, r7, #8
 800139e:	6839      	ldr	r1, [r7, #0]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f008 fa0f 	bl	80097c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80013a6:	f107 0308 	add.w	r3, r7, #8
 80013aa:	4619      	mov	r1, r3
 80013ac:	4620      	mov	r0, r4
 80013ae:	f000 fefc 	bl	80021aa <_ZN7Display12setAlgorithmENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80013b2:	f107 0308 	add.w	r3, r7, #8
 80013b6:	4618      	mov	r0, r3
 80013b8:	f008 f9c1 	bl	800973e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 80013bc:	bf00      	nop
 80013be:	3724      	adds	r7, #36	; 0x24
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd90      	pop	{r4, r7, pc}

080013c4 <_ZN9Amplifier10initializeEv>:

void
Amplifier::initialize() {
 80013c4:	b5b0      	push	{r4, r5, r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
	DEBUG_STR( "Initializing amplifier" );
	// Take the I2C bus info and configure our internal I2C bus class
	//mBusI2C.setBusData( bus );
	mDAC = new DAC_PCM1681( mBusI2C->makeDevice( 0x4c << 1 ) );
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80013d0:	2198      	movs	r1, #152	; 0x98
 80013d2:	4618      	mov	r0, r3
 80013d4:	f001 fef0 	bl	80031b8 <_ZN3I2C10makeDeviceEh>
 80013d8:	4605      	mov	r5, r0
 80013da:	2010      	movs	r0, #16
 80013dc:	f008 f925 	bl	800962a <_Znwj>
 80013e0:	4603      	mov	r3, r0
 80013e2:	461c      	mov	r4, r3
 80013e4:	4629      	mov	r1, r5
 80013e6:	4620      	mov	r0, r4
 80013e8:	f000 fc6a 	bl	8001cc0 <_ZN11DAC_PCM1681C1EP10I2C_Device>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	671c      	str	r4, [r3, #112]	; 0x70
	//mDecoder = new DolbyDecoder_STA310( mBusI2C.makeDevice( 0x60 << 1 ) );
	mDecoder = new DolbyDecoder_STA310( mBusI2C->makeDevice( 0x5c << 1 ) );
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80013f4:	21b8      	movs	r1, #184	; 0xb8
 80013f6:	4618      	mov	r0, r3
 80013f8:	f001 fede 	bl	80031b8 <_ZN3I2C10makeDeviceEh>
 80013fc:	4605      	mov	r5, r0
 80013fe:	2018      	movs	r0, #24
 8001400:	f008 f913 	bl	800962a <_Znwj>
 8001404:	4603      	mov	r3, r0
 8001406:	461c      	mov	r4, r3
 8001408:	4629      	mov	r1, r5
 800140a:	4620      	mov	r0, r4
 800140c:	f001 f840 	bl	8002490 <_ZN19DolbyDecoder_STA310C1EP10I2C_Device>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	675c      	str	r4, [r3, #116]	; 0x74

	mDecoder->setEventHandler( this );
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	3328      	adds	r3, #40	; 0x28
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	6879      	ldr	r1, [r7, #4]
 8001424:	4610      	mov	r0, r2
 8001426:	4798      	blx	r3


	mLCD = new LCD( mBusI2C->makeDevice( LCD_I2C_ADDR ) );
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800142c:	214e      	movs	r1, #78	; 0x4e
 800142e:	4618      	mov	r0, r3
 8001430:	f001 fec2 	bl	80031b8 <_ZN3I2C10makeDeviceEh>
 8001434:	4605      	mov	r5, r0
 8001436:	2014      	movs	r0, #20
 8001438:	f008 f8f7 	bl	800962a <_Znwj>
 800143c:	4603      	mov	r3, r0
 800143e:	461c      	mov	r4, r3
 8001440:	4629      	mov	r1, r5
 8001442:	4620      	mov	r0, r4
 8001444:	f002 fb94 	bl	8003b70 <_ZN3LCDC1EP10I2C_Device>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	67dc      	str	r4, [r3, #124]	; 0x7c
	mDisplay.setLCD( mLCD );
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	1d1a      	adds	r2, r3, #4
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001454:	4619      	mov	r1, r3
 8001456:	4610      	mov	r0, r2
 8001458:	f7ff fe80 	bl	800115c <_ZN7Display6setLCDEP3LCD>

	mVolumeEncoder = new Encoder();
 800145c:	2008      	movs	r0, #8
 800145e:	f008 f8e4 	bl	800962a <_Znwj>
 8001462:	4603      	mov	r3, r0
 8001464:	461c      	mov	r4, r3
 8001466:	4620      	mov	r0, r4
 8001468:	f001 fdf4 	bl	8003054 <_ZN7EncoderC1Ev>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	679c      	str	r4, [r3, #120]	; 0x78

	mInputLEDs[ INPUT_STEREO_1 ].setPortAndPin( LED_INPUT_1_GPIO_Port, LED_INPUT_1_Pin );
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	33c8      	adds	r3, #200	; 0xc8
 8001474:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001478:	4930      	ldr	r1, [pc, #192]	; (800153c <_ZN9Amplifier10initializeEv+0x178>)
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff fe96 	bl	80011ac <_ZN3LED13setPortAndPinEP12GPIO_TypeDeft>
	mInputLEDs[ INPUT_STEREO_2 ].setPortAndPin( LED_INPUT_2_GPIO_Port, LED_INPUT_2_Pin );
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	33d8      	adds	r3, #216	; 0xd8
 8001484:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001488:	492c      	ldr	r1, [pc, #176]	; (800153c <_ZN9Amplifier10initializeEv+0x178>)
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff fe8e 	bl	80011ac <_ZN3LED13setPortAndPinEP12GPIO_TypeDeft>
	mInputLEDs[ INPUT_STEREO_3 ].setPortAndPin( LED_INPUT_3_GPIO_Port, LED_INPUT_3_Pin );
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	33e8      	adds	r3, #232	; 0xe8
 8001494:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001498:	4928      	ldr	r1, [pc, #160]	; (800153c <_ZN9Amplifier10initializeEv+0x178>)
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff fe86 	bl	80011ac <_ZN3LED13setPortAndPinEP12GPIO_TypeDeft>
	mInputLEDs[ INPUT_STEREO_4 ].setPortAndPin( LED_INPUT_4_GPIO_Port, LED_INPUT_4_Pin );
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	33f8      	adds	r3, #248	; 0xf8
 80014a4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014a8:	4924      	ldr	r1, [pc, #144]	; (800153c <_ZN9Amplifier10initializeEv+0x178>)
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff fe7e 	bl	80011ac <_ZN3LED13setPortAndPinEP12GPIO_TypeDeft>
	mInputLEDs[ INPUT_6CH ].setPortAndPin( LED_INPUT_6CH_GPIO_Port, LED_INPUT_6CH_Pin );
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80014b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014ba:	4921      	ldr	r1, [pc, #132]	; (8001540 <_ZN9Amplifier10initializeEv+0x17c>)
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff fe75 	bl	80011ac <_ZN3LED13setPortAndPinEP12GPIO_TypeDeft>

	mStatusLEDs[ STATUS_DOLBY ].setPortAndPin( LED_DOLBY_GPIO_Port, LED_DOLBY_Pin );
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	33a8      	adds	r3, #168	; 0xa8
 80014c6:	2202      	movs	r2, #2
 80014c8:	491e      	ldr	r1, [pc, #120]	; (8001544 <_ZN9Amplifier10initializeEv+0x180>)
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff fe6e 	bl	80011ac <_ZN3LED13setPortAndPinEP12GPIO_TypeDeft>
	mStatusLEDs[ STATUS_PCM ].setPortAndPin( LED_PCM_GPIO_Port, LED_PCM_Pin );
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	3398      	adds	r3, #152	; 0x98
 80014d4:	2201      	movs	r2, #1
 80014d6:	491b      	ldr	r1, [pc, #108]	; (8001544 <_ZN9Amplifier10initializeEv+0x180>)
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff fe67 	bl	80011ac <_ZN3LED13setPortAndPinEP12GPIO_TypeDeft>
	mStatusLEDs[ STATUS_MUTE ].setPortAndPin( LED_MUTE_GPIO_Port, LED_MUTE_Pin );
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	3388      	adds	r3, #136	; 0x88
 80014e2:	2208      	movs	r2, #8
 80014e4:	4918      	ldr	r1, [pc, #96]	; (8001548 <_ZN9Amplifier10initializeEv+0x184>)
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff fe60 	bl	80011ac <_ZN3LED13setPortAndPinEP12GPIO_TypeDeft>
	mStatusLEDs[ STATUS_RUN ].setPortAndPin( LED_RUN_GPIO_Port, LED_RUN_Pin );
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	33b8      	adds	r3, #184	; 0xb8
 80014f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014f4:	4912      	ldr	r1, [pc, #72]	; (8001540 <_ZN9Amplifier10initializeEv+0x17c>)
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff fe58 	bl	80011ac <_ZN3LED13setPortAndPinEP12GPIO_TypeDeft>

	// Configure the audio thread
	mAudio.setDecoder( mDecoder );
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001506:	4619      	mov	r1, r3
 8001508:	4610      	mov	r0, r2
 800150a:	f7ff fe63 	bl	80011d4 <_ZN5Audio10setDecoderEP12DolbyDecoder>
	mAudio.setDAC( mDAC );
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001518:	4619      	mov	r1, r3
 800151a:	4610      	mov	r0, r2
 800151c:	f7ff fe67 	bl	80011ee <_ZN5Audio6setDACEP6DAC_IC>

	mAudio.setVolume( mCurrentVolume );
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800152c:	4619      	mov	r1, r3
 800152e:	4610      	mov	r0, r2
 8001530:	f000 fa70 	bl	8001a14 <_ZN5Audio9setVolumeEi>

}
 8001534:	bf00      	nop
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bdb0      	pop	{r4, r5, r7, pc}
 800153c:	40011800 	.word	0x40011800
 8001540:	40010c00 	.word	0x40010c00
 8001544:	40010800 	.word	0x40010800
 8001548:	40011000 	.word	0x40011000

0800154c <_ZN9Amplifier13onInformationERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void
Amplifier::onInformation( const std::string &info ) {
 800154c:	b590      	push	{r4, r7, lr}
 800154e:	b089      	sub	sp, #36	; 0x24
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
	mDisplay.setInitString( info );
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	1d1c      	adds	r4, r3, #4
 800155a:	f107 0308 	add.w	r3, r7, #8
 800155e:	6839      	ldr	r1, [r7, #0]
 8001560:	4618      	mov	r0, r3
 8001562:	f008 f92f 	bl	80097c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8001566:	f107 0308 	add.w	r3, r7, #8
 800156a:	4619      	mov	r1, r3
 800156c:	4620      	mov	r0, r4
 800156e:	f000 fdf5 	bl	800215c <_ZN7Display13setInitStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001572:	f107 0308 	add.w	r3, r7, #8
 8001576:	4618      	mov	r0, r3
 8001578:	f008 f8e1 	bl	800973e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
//	mDisplay.update();
}
 800157c:	bf00      	nop
 800157e:	3724      	adds	r7, #36	; 0x24
 8001580:	46bd      	mov	sp, r7
 8001582:	bd90      	pop	{r4, r7, pc}

08001584 <_ZN9Amplifier7preTickEv>:

void
Amplifier::preTick() {
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]

	mLCD->initialize();
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	3308      	adds	r3, #8
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4610      	mov	r0, r2
 800159c:	4798      	blx	r3

	mStatusLEDs[ STATUS_RUN ].enable();
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f103 02b8 	add.w	r2, r3, #184	; 0xb8
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80015aa:	3308      	adds	r3, #8
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4610      	mov	r0, r2
 80015b0:	4798      	blx	r3

//	mDisplay.setInitString( "LCD Initializing" );

	mDisplay.setScreen( Display::SCREEN_MAIN );
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	3304      	adds	r3, #4
 80015b6:	2101      	movs	r1, #1
 80015b8:	4618      	mov	r0, r3
 80015ba:	f000 fdbf 	bl	800213c <_ZN7Display9setScreenEi>
	mDisplay.updateVolume( mCurrentVolume );
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	1d1a      	adds	r2, r3, #4
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80015c8:	4619      	mov	r1, r3
 80015ca:	4610      	mov	r0, r2
 80015cc:	f000 fe0d 	bl	80021ea <_ZN7Display12updateVolumeEi>
	mDisplay.update();
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	3304      	adds	r3, #4
 80015d4:	4618      	mov	r0, r3
 80015d6:	f000 fd93 	bl	8002100 <_ZN7Display6updateEv>

//	mDisplay.setInitString( "LCD Done Init" );
}
 80015da:	bf00      	nop
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
	...

080015e4 <_ZN9Amplifier4tickEv>:

void Amplifier::tick() {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
		uint32_t currentCount = (uint32_t)TIM4->CNT;
 80015ec:	4b25      	ldr	r3, [pc, #148]	; (8001684 <_ZN9Amplifier4tickEv+0xa0>)
 80015ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f0:	60fb      	str	r3, [r7, #12]
		ENCODER_VALUE encoderChange = mVolumeEncoder->checkEncoder( currentCount );
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	3308      	adds	r3, #8
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	68f9      	ldr	r1, [r7, #12]
 8001602:	4610      	mov	r0, r2
 8001604:	4798      	blx	r3
 8001606:	60b8      	str	r0, [r7, #8]
		if ( encoderChange == Encoder::ENCODER_INCREASE ) {
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d10c      	bne.n	8001628 <_ZN9Amplifier4tickEv+0x44>
			if ( mCurrentVolume < 100) mCurrentVolume++;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001614:	2b63      	cmp	r3, #99	; 0x63
 8001616:	dc16      	bgt.n	8001646 <_ZN9Amplifier4tickEv+0x62>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800161e:	1c5a      	adds	r2, r3, #1
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001626:	e00e      	b.n	8001646 <_ZN9Amplifier4tickEv+0x62>
		} else if ( encoderChange == Encoder::ENCODER_DECREASE ) {
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d10b      	bne.n	8001646 <_ZN9Amplifier4tickEv+0x62>
			if ( mCurrentVolume > 0 ) mCurrentVolume--;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001634:	2b00      	cmp	r3, #0
 8001636:	dd06      	ble.n	8001646 <_ZN9Amplifier4tickEv+0x62>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800163e:	1e5a      	subs	r2, r3, #1
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		}

		if ( encoderChange != Encoder::ENCODER_NOCHANGE ) {
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	2b02      	cmp	r3, #2
 800164a:	d012      	beq.n	8001672 <_ZN9Amplifier4tickEv+0x8e>
			mDisplay.updateVolume( mCurrentVolume );
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	1d1a      	adds	r2, r3, #4
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001656:	4619      	mov	r1, r3
 8001658:	4610      	mov	r0, r2
 800165a:	f000 fdc6 	bl	80021ea <_ZN7Display12updateVolumeEi>
			mAudio.setVolume( mCurrentVolume );
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800166a:	4619      	mov	r1, r3
 800166c:	4610      	mov	r0, r2
 800166e:	f000 f9d1 	bl	8001a14 <_ZN5Audio9setVolumeEi>
		}

		mDisplay.update();
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	3304      	adds	r3, #4
 8001676:	4618      	mov	r0, r3
 8001678:	f000 fd42 	bl	8002100 <_ZN7Display6updateEv>
}
 800167c:	bf00      	nop
 800167e:	3710      	adds	r7, #16
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40000800 	.word	0x40000800

08001688 <_ZN5AudioC1EP9Amplifier>:
#include "Audio.h"
#include "main.h"
#include "cmsis_os.h"
#include "Debug.h"

Audio::Audio( Amplifier *amp ) :
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	6039      	str	r1, [r7, #0]
	mDecoder( 0 ),
	mDAC( 0 ),
	mHasBeenInitialized( false ),
	mTick( 0 ),
	mCurrentVolume( 0 ),
	mLastVolume( 0 ) {
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6839      	ldr	r1, [r7, #0]
 8001696:	4618      	mov	r0, r3
 8001698:	f002 fbfa 	bl	8003e90 <_ZN8RunnableC1EP9Amplifier>
 800169c:	4a0c      	ldr	r2, [pc, #48]	; (80016d0 <_ZN5AudioC1EP9Amplifier+0x48>)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	609a      	str	r2, [r3, #8]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2200      	movs	r2, #0
 80016b2:	741a      	strb	r2, [r3, #16]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2200      	movs	r2, #0
 80016b8:	615a      	str	r2, [r3, #20]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2200      	movs	r2, #0
 80016be:	619a      	str	r2, [r3, #24]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	61da      	str	r2, [r3, #28]
	// TODO Auto-generated constructor stub

}
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4618      	mov	r0, r3
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	0800a538 	.word	0x0800a538

080016d4 <_ZN5AudioD1Ev>:

Audio::~Audio() {
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	4a05      	ldr	r2, [pc, #20]	; (80016f4 <_ZN5AudioD1Ev+0x20>)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f002 fbe7 	bl	8003eb8 <_ZN8RunnableD1Ev>
	// TODO Auto-generated destructor stub
}
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4618      	mov	r0, r3
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	0800a538 	.word	0x0800a538

080016f8 <_ZN5AudioD0Ev>:
Audio::~Audio() {
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
}
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f7ff ffe7 	bl	80016d4 <_ZN5AudioD1Ev>
 8001706:	2120      	movs	r1, #32
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f007 ff8c 	bl	8009626 <_ZdlPvj>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4618      	mov	r0, r3
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <_ZN5Audio7preTickEv>:

void
Audio::preTick() {
 8001718:	b5b0      	push	{r4, r5, r7, lr}
 800171a:	b0ac      	sub	sp, #176	; 0xb0
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
	//if ( mEventHandler ) mEventHandler->onInformation( "Starting audio setup" );
	if ( !mHasBeenInitialized ) {
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	7c1b      	ldrb	r3, [r3, #16]
 8001724:	f083 0301 	eor.w	r3, r3, #1
 8001728:	b2db      	uxtb	r3, r3
 800172a:	2b00      	cmp	r3, #0
 800172c:	f000 8161 	beq.w	80019f2 <_ZN5Audio7preTickEv+0x2da>
		// Let's run the audio init.. we'll put this in the for loop in case for some reason we need to initialize again
		if ( mDAC && mDecoder ) {
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	2b00      	cmp	r3, #0
 8001736:	f000 815c 	beq.w	80019f2 <_ZN5Audio7preTickEv+0x2da>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	2b00      	cmp	r3, #0
 8001740:	f000 8157 	beq.w	80019f2 <_ZN5Audio7preTickEv+0x2da>
			// We have a valid DAC and a valid decoder.. for now both are required

			 DEBUG_STR( "In main loop" );
			//if ( mEventHandler ) mEventHandler->onInformation( "Setting up Dolby Decoder" );
			// Initialize the Dolby Decoder
			mDecoder->setInformation( "Init Decoder" );
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	689d      	ldr	r5, [r3, #8]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	3324      	adds	r3, #36	; 0x24
 8001750:	681c      	ldr	r4, [r3, #0]
 8001752:	f107 0320 	add.w	r3, r7, #32
 8001756:	4618      	mov	r0, r3
 8001758:	f007 ff7b 	bl	8009652 <_ZNSaIcEC1Ev>
 800175c:	f107 0220 	add.w	r2, r7, #32
 8001760:	f107 0308 	add.w	r3, r7, #8
 8001764:	49a5      	ldr	r1, [pc, #660]	; (80019fc <_ZN5Audio7preTickEv+0x2e4>)
 8001766:	4618      	mov	r0, r3
 8001768:	f008 f85e 	bl	8009828 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800176c:	f107 0308 	add.w	r3, r7, #8
 8001770:	4619      	mov	r1, r3
 8001772:	4628      	mov	r0, r5
 8001774:	47a0      	blx	r4
 8001776:	f107 0308 	add.w	r3, r7, #8
 800177a:	4618      	mov	r0, r3
 800177c:	f007 ffdf 	bl	800973e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001780:	f107 0320 	add.w	r3, r7, #32
 8001784:	4618      	mov	r0, r3
 8001786:	f007 ff65 	bl	8009654 <_ZNSaIcED1Ev>

			mDecoder->initialize();
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	689a      	ldr	r2, [r3, #8]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	3308      	adds	r3, #8
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4610      	mov	r0, r2
 800179a:	4798      	blx	r3

			mDecoder->setInformation( "Init DAC" );
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689d      	ldr	r5, [r3, #8]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	3324      	adds	r3, #36	; 0x24
 80017a8:	681c      	ldr	r4, [r3, #0]
 80017aa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80017ae:	4618      	mov	r0, r3
 80017b0:	f007 ff4f 	bl	8009652 <_ZNSaIcEC1Ev>
 80017b4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80017b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017bc:	4990      	ldr	r1, [pc, #576]	; (8001a00 <_ZN5Audio7preTickEv+0x2e8>)
 80017be:	4618      	mov	r0, r3
 80017c0:	f008 f832 	bl	8009828 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80017c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017c8:	4619      	mov	r1, r3
 80017ca:	4628      	mov	r0, r5
 80017cc:	47a0      	blx	r4
 80017ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017d2:	4618      	mov	r0, r3
 80017d4:	f007 ffb3 	bl	800973e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80017d8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80017dc:	4618      	mov	r0, r3
 80017de:	f007 ff39 	bl	8009654 <_ZNSaIcED1Ev>
			DEBUG_STR( "Initializing DAC" );


			if ( mDecoder->isInitialized() ) {
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	689a      	ldr	r2, [r3, #8]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	330c      	adds	r3, #12
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4610      	mov	r0, r2
 80017f2:	4798      	blx	r3
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	f000 80fb 	beq.w	80019f2 <_ZN5Audio7preTickEv+0x2da>
				 DEBUG_STR( "Decoding is initialized" );
			//	if ( mEventHandler ) mEventHandler->onInformation( "Decoder Initialized" );
				// This means the startup of the decoder was successful

				// Let's mute the output on the decoder
				mDecoder->mute( true );
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689a      	ldr	r2, [r3, #8]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	3310      	adds	r3, #16
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2101      	movs	r1, #1
 800180c:	4610      	mov	r0, r2
 800180e:	4798      	blx	r3

				mDAC->init();
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	68da      	ldr	r2, [r3, #12]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	330c      	adds	r3, #12
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4610      	mov	r0, r2
 8001820:	4798      	blx	r3
				mDAC->setVolume( 0 );
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	68da      	ldr	r2, [r3, #12]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	332c      	adds	r3, #44	; 0x2c
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2100      	movs	r1, #0
 8001832:	4610      	mov	r0, r2
 8001834:	4798      	blx	r3

				// Decoder should be sending a clock signal to the DAC chip, so it should be responsive
				// The datasheet says the DAC needs about 5ms to be responsive, so let's wait 10
				mDecoder->setInformation( "ready run" );
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	689d      	ldr	r5, [r3, #8]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	3324      	adds	r3, #36	; 0x24
 8001842:	681c      	ldr	r4, [r3, #0]
 8001844:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001848:	4618      	mov	r0, r3
 800184a:	f007 ff02 	bl	8009652 <_ZNSaIcEC1Ev>
 800184e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001852:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001856:	496b      	ldr	r1, [pc, #428]	; (8001a04 <_ZN5Audio7preTickEv+0x2ec>)
 8001858:	4618      	mov	r0, r3
 800185a:	f007 ffe5 	bl	8009828 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800185e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001862:	4619      	mov	r1, r3
 8001864:	4628      	mov	r0, r5
 8001866:	47a0      	blx	r4
 8001868:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800186c:	4618      	mov	r0, r3
 800186e:	f007 ff66 	bl	800973e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001872:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001876:	4618      	mov	r0, r3
 8001878:	f007 feec 	bl	8009654 <_ZNSaIcED1Ev>
				// Now let's pull the Decoder out of the IDLE state

				 DEBUG_STR( "...disabling mute" );


				mDAC->setVolume( mCurrentVolume );
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	68d8      	ldr	r0, [r3, #12]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	332c      	adds	r3, #44	; 0x2c
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	6992      	ldr	r2, [r2, #24]
 800188e:	4611      	mov	r1, r2
 8001890:	4798      	blx	r3

				mDecoder->play();
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	689a      	ldr	r2, [r3, #8]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	3314      	adds	r3, #20
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2101      	movs	r1, #1
 80018a2:	4610      	mov	r0, r2
 80018a4:	4798      	blx	r3
				mDecoder->run();
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	689a      	ldr	r2, [r3, #8]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	3318      	adds	r3, #24
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4610      	mov	r0, r2
 80018b6:	4798      	blx	r3

				osDelay( 50 );
 80018b8:	2032      	movs	r0, #50	; 0x32
 80018ba:	f004 fe3f 	bl	800653c <osDelay>
				mDecoder->mute( false );
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	689a      	ldr	r2, [r3, #8]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	3310      	adds	r3, #16
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2100      	movs	r1, #0
 80018ce:	4610      	mov	r0, r2
 80018d0:	4798      	blx	r3

				mDecoder->setInformation( "Running" );
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	689d      	ldr	r5, [r3, #8]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	3324      	adds	r3, #36	; 0x24
 80018de:	681c      	ldr	r4, [r3, #0]
 80018e0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80018e4:	4618      	mov	r0, r3
 80018e6:	f007 feb4 	bl	8009652 <_ZNSaIcEC1Ev>
 80018ea:	f107 0274 	add.w	r2, r7, #116	; 0x74
 80018ee:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80018f2:	4945      	ldr	r1, [pc, #276]	; (8001a08 <_ZN5Audio7preTickEv+0x2f0>)
 80018f4:	4618      	mov	r0, r3
 80018f6:	f007 ff97 	bl	8009828 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80018fa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80018fe:	4619      	mov	r1, r3
 8001900:	4628      	mov	r0, r5
 8001902:	47a0      	blx	r4
 8001904:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001908:	4618      	mov	r0, r3
 800190a:	f007 ff18 	bl	800973e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800190e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001912:	4618      	mov	r0, r3
 8001914:	f007 fe9e 	bl	8009654 <_ZNSaIcED1Ev>

				DEBUG_STR( "...setting run" );

				osDelay( 50 );
 8001918:	2032      	movs	r0, #50	; 0x32
 800191a:	f004 fe0f 	bl	800653c <osDelay>

				mHasBeenInitialized = true;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2201      	movs	r2, #1
 8001922:	741a      	strb	r2, [r3, #16]

				mDecoder->setInformation( "Setting Volume" );
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689d      	ldr	r5, [r3, #8]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	3324      	adds	r3, #36	; 0x24
 8001930:	681c      	ldr	r4, [r3, #0]
 8001932:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001936:	4618      	mov	r0, r3
 8001938:	f007 fe8b 	bl	8009652 <_ZNSaIcEC1Ev>
 800193c:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8001940:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001944:	4931      	ldr	r1, [pc, #196]	; (8001a0c <_ZN5Audio7preTickEv+0x2f4>)
 8001946:	4618      	mov	r0, r3
 8001948:	f007 ff6e 	bl	8009828 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800194c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001950:	4619      	mov	r1, r3
 8001952:	4628      	mov	r0, r5
 8001954:	47a0      	blx	r4
 8001956:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800195a:	4618      	mov	r0, r3
 800195c:	f007 feef 	bl	800973e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001960:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001964:	4618      	mov	r0, r3
 8001966:	f007 fe75 	bl	8009654 <_ZNSaIcED1Ev>

				//mDAC->setVolume( 127 );

				 DEBUG_STR( "Playing" );

				mDecoder->setInformation( "Playing" );
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	689d      	ldr	r5, [r3, #8]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	3324      	adds	r3, #36	; 0x24
 8001976:	681c      	ldr	r4, [r3, #0]
 8001978:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800197c:	4618      	mov	r0, r3
 800197e:	f007 fe68 	bl	8009652 <_ZNSaIcEC1Ev>
 8001982:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001986:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800198a:	4921      	ldr	r1, [pc, #132]	; (8001a10 <_ZN5Audio7preTickEv+0x2f8>)
 800198c:	4618      	mov	r0, r3
 800198e:	f007 ff4b 	bl	8009828 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001992:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001996:	4619      	mov	r1, r3
 8001998:	4628      	mov	r0, r5
 800199a:	47a0      	blx	r4
 800199c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80019a0:	4618      	mov	r0, r3
 80019a2:	f007 fecc 	bl	800973e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80019a6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80019aa:	4618      	mov	r0, r3
 80019ac:	f007 fe52 	bl	8009654 <_ZNSaIcED1Ev>

				mDAC->enable( true );
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	68da      	ldr	r2, [r3, #12]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	3314      	adds	r3, #20
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2101      	movs	r1, #1
 80019c0:	4610      	mov	r0, r2
 80019c2:	4798      	blx	r3

				mDecoder->mute( false );
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689a      	ldr	r2, [r3, #8]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	3310      	adds	r3, #16
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2100      	movs	r1, #0
 80019d4:	4610      	mov	r0, r2
 80019d6:	4798      	blx	r3


				mLastVolume = mCurrentVolume;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	699a      	ldr	r2, [r3, #24]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	61da      	str	r2, [r3, #28]

				mDecoder->reset();
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689a      	ldr	r2, [r3, #8]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	332c      	adds	r3, #44	; 0x2c
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4610      	mov	r0, r2
 80019f0:	4798      	blx	r3
			}
		}
	}
}
 80019f2:	bf00      	nop
 80019f4:	37b0      	adds	r7, #176	; 0xb0
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bdb0      	pop	{r4, r5, r7, pc}
 80019fa:	bf00      	nop
 80019fc:	0800a3d4 	.word	0x0800a3d4
 8001a00:	0800a3e4 	.word	0x0800a3e4
 8001a04:	0800a3f0 	.word	0x0800a3f0
 8001a08:	0800a3fc 	.word	0x0800a3fc
 8001a0c:	0800a404 	.word	0x0800a404
 8001a10:	0800a414 	.word	0x0800a414

08001a14 <_ZN5Audio9setVolumeEi>:

void
Audio::setVolume( int volume ) {
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
	int ourVol = (127*volume)/100;
 8001a1e:	683a      	ldr	r2, [r7, #0]
 8001a20:	4613      	mov	r3, r2
 8001a22:	01db      	lsls	r3, r3, #7
 8001a24:	1a9b      	subs	r3, r3, r2
 8001a26:	4a0a      	ldr	r2, [pc, #40]	; (8001a50 <_ZN5Audio9setVolumeEi+0x3c>)
 8001a28:	fb82 1203 	smull	r1, r2, r2, r3
 8001a2c:	1152      	asrs	r2, r2, #5
 8001a2e:	17db      	asrs	r3, r3, #31
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	60fb      	str	r3, [r7, #12]
	if ( ourVol > 127 ) ourVol = 127;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	2b7f      	cmp	r3, #127	; 0x7f
 8001a38:	dd01      	ble.n	8001a3e <_ZN5Audio9setVolumeEi+0x2a>
 8001a3a:	237f      	movs	r3, #127	; 0x7f
 8001a3c:	60fb      	str	r3, [r7, #12]

	mCurrentVolume = ourVol;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	68fa      	ldr	r2, [r7, #12]
 8001a42:	619a      	str	r2, [r3, #24]
}
 8001a44:	bf00      	nop
 8001a46:	3714      	adds	r7, #20
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bc80      	pop	{r7}
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	51eb851f 	.word	0x51eb851f

08001a54 <_ZN5Audio4tickEv>:

void
Audio::tick() {
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
	// We need to start setting up the audio interfaces
	// First we'll configure the Dolby Decoder
		if ( mDecoder && mHasBeenInitialized ) {
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d037      	beq.n	8001ad4 <_ZN5Audio4tickEv+0x80>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	7c1b      	ldrb	r3, [r3, #16]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d033      	beq.n	8001ad4 <_ZN5Audio4tickEv+0x80>
			mDecoder->checkForInterrupt();
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	689a      	ldr	r2, [r3, #8]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	331c      	adds	r3, #28
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4610      	mov	r0, r2
 8001a7c:	4798      	blx	r3

			if ( mLastVolume != mCurrentVolume ) {
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	69da      	ldr	r2, [r3, #28]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	699b      	ldr	r3, [r3, #24]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d00e      	beq.n	8001aa8 <_ZN5Audio4tickEv+0x54>
				mDAC->setVolume( mCurrentVolume );
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	68d8      	ldr	r0, [r3, #12]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	332c      	adds	r3, #44	; 0x2c
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	6992      	ldr	r2, [r2, #24]
 8001a9c:	4611      	mov	r1, r2
 8001a9e:	4798      	blx	r3
				mLastVolume = mCurrentVolume;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	699a      	ldr	r2, [r3, #24]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	61da      	str	r2, [r3, #28]
			}

			if ( mTick % 5000 == 0 ) {
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	695a      	ldr	r2, [r3, #20]
 8001aac:	4b0e      	ldr	r3, [pc, #56]	; (8001ae8 <_ZN5Audio4tickEv+0x94>)
 8001aae:	fba3 1302 	umull	r1, r3, r3, r2
 8001ab2:	0b1b      	lsrs	r3, r3, #12
 8001ab4:	f241 3188 	movw	r1, #5000	; 0x1388
 8001ab8:	fb01 f303 	mul.w	r3, r1, r3
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d108      	bne.n	8001ad4 <_ZN5Audio4tickEv+0x80>
				mDecoder->checkFormat();
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	689a      	ldr	r2, [r3, #8]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	3320      	adds	r3, #32
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4610      	mov	r0, r2
 8001ad2:	4798      	blx	r3
			}
		}

		mTick = mTick + 1;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	695b      	ldr	r3, [r3, #20]
 8001ad8:	1c5a      	adds	r2, r3, #1
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	615a      	str	r2, [r3, #20]
}
 8001ade:	bf00      	nop
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	d1b71759 	.word	0xd1b71759

08001aec <_ZN5Audio5startEv>:

void
Audio::start() {
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
//	mHasBeenInitialized = true;
}
 8001af4:	bf00      	nop
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bc80      	pop	{r7}
 8001afc:	4770      	bx	lr

08001afe <_ZN6DAC_IC9isEnabledEv>:

	// the name for this DAC
	virtual std::string name() = 0;
	virtual void init() = 0;

	virtual bool isEnabled() { return true; }
 8001afe:	b480      	push	{r7}
 8001b00:	b083      	sub	sp, #12
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
 8001b06:	2301      	movs	r3, #1
 8001b08:	4618      	mov	r0, r3
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bc80      	pop	{r7}
 8001b10:	4770      	bx	lr

08001b12 <_ZN6DAC_IC6enableEb>:
	virtual void enable( bool state ) {};
 8001b12:	b480      	push	{r7}
 8001b14:	b083      	sub	sp, #12
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	70fb      	strb	r3, [r7, #3]
 8001b1e:	bf00      	nop
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bc80      	pop	{r7}
 8001b26:	4770      	bx	lr

08001b28 <_ZN6DAC_IC14supportsFormatEh>:
	virtual bool supportsFormat( uint8_t format ) { return false; }
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	460b      	mov	r3, r1
 8001b32:	70fb      	strb	r3, [r7, #3]
 8001b34:	2300      	movs	r3, #0
 8001b36:	4618      	mov	r0, r3
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bc80      	pop	{r7}
 8001b3e:	4770      	bx	lr

08001b40 <_ZN6DAC_IC14supportsVolumeEv>:
	virtual bool supportsVolume() { return false; }
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	2300      	movs	r3, #0
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bc80      	pop	{r7}
 8001b52:	4770      	bx	lr

08001b54 <_ZN6DAC_IC12supportsMuteEv>:
	virtual bool supportsMute() { return false; }
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	4618      	mov	r0, r3
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr

08001b68 <_ZN6DAC_IC8channelsEv>:
	virtual int channels() { return 0; }
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	2300      	movs	r3, #0
 8001b72:	4618      	mov	r0, r3
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bc80      	pop	{r7}
 8001b7a:	4770      	bx	lr

08001b7c <_ZN6DAC_IC16setChannelVolumeEii>:

	// volume is 0 to 63, where 0 is lowest and 63 is highest
	virtual void setChannelVolume( int channel, int volume ) {}
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	607a      	str	r2, [r7, #4]
 8001b88:	bf00      	nop
 8001b8a:	3714      	adds	r7, #20
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bc80      	pop	{r7}
 8001b90:	4770      	bx	lr

08001b92 <_ZN6DAC_IC9setVolumeEi>:

	// sets the volume on all channels
	virtual void setVolume( int volume ) {};
 8001b92:	b480      	push	{r7}
 8001b94:	b083      	sub	sp, #12
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
 8001b9a:	6039      	str	r1, [r7, #0]
 8001b9c:	bf00      	nop
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bc80      	pop	{r7}
 8001ba4:	4770      	bx	lr

08001ba6 <_ZN6DAC_IC11muteChannelEib>:

	virtual void muteChannel( int channel, bool enable ) {}
 8001ba6:	b480      	push	{r7}
 8001ba8:	b085      	sub	sp, #20
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	60f8      	str	r0, [r7, #12]
 8001bae:	60b9      	str	r1, [r7, #8]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	71fb      	strb	r3, [r7, #7]
 8001bb4:	bf00      	nop
 8001bb6:	3714      	adds	r7, #20
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bc80      	pop	{r7}
 8001bbc:	4770      	bx	lr

08001bbe <_ZN6DAC_IC4muteEb>:
	virtual void mute( bool enable ) {}
 8001bbe:	b480      	push	{r7}
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	70fb      	strb	r3, [r7, #3]
 8001bca:	bf00      	nop
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bc80      	pop	{r7}
 8001bd2:	4770      	bx	lr

08001bd4 <_ZN6DAC_IC9setFormatEh>:

	virtual void setFormat( uint8_t format ) {};
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	460b      	mov	r3, r1
 8001bde:	70fb      	strb	r3, [r7, #3]
 8001be0:	bf00      	nop
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bc80      	pop	{r7}
 8001be8:	4770      	bx	lr
	...

08001bec <_ZN6DAC_ICC1Ev>:
 *      Author: duane
 */

#include "DAC.h"

DAC_IC::DAC_IC() {
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	4a04      	ldr	r2, [pc, #16]	; (8001c08 <_ZN6DAC_ICC1Ev+0x1c>)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bc80      	pop	{r7}
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	0800a560 	.word	0x0800a560

08001c0c <_ZN6DAC_ICD1Ev>:

DAC_IC::~DAC_IC() {
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	4a04      	ldr	r2, [pc, #16]	; (8001c28 <_ZN6DAC_ICD1Ev+0x1c>)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bc80      	pop	{r7}
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	0800a560 	.word	0x0800a560

08001c2c <_ZN11DAC_PCM16819isEnabledEv>:
	DAC_PCM1681( I2C_Device *device );
	virtual ~DAC_PCM1681();

	virtual void init();

	virtual bool isEnabled() { return mEnabled; }
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	7b5b      	ldrb	r3, [r3, #13]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	bf14      	ite	ne
 8001c3c:	2301      	movne	r3, #1
 8001c3e:	2300      	moveq	r3, #0
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	4618      	mov	r0, r3
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bc80      	pop	{r7}
 8001c4a:	4770      	bx	lr

08001c4c <_ZN11DAC_PCM168114supportsVolumeEv>:
	virtual void enable( bool state );

	virtual bool supportsFormat( uint8_t format );
	virtual bool supportsVolume() { return true; }
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	2301      	movs	r3, #1
 8001c56:	4618      	mov	r0, r3
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bc80      	pop	{r7}
 8001c5e:	4770      	bx	lr

08001c60 <_ZN11DAC_PCM168112supportsMuteEv>:
	virtual bool supportsMute() { return true; }
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	2301      	movs	r3, #1
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bc80      	pop	{r7}
 8001c72:	4770      	bx	lr

08001c74 <_ZN11DAC_PCM16818channelsEv>:
	virtual int channels() { return 8; }
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	2308      	movs	r3, #8
 8001c7e:	4618      	mov	r0, r3
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bc80      	pop	{r7}
 8001c86:	4770      	bx	lr

08001c88 <_ZN11DAC_PCM16814nameB5cxx11Ev>:

	virtual std::string name() { return "PCM1681"; }
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
 8001c92:	f107 030c 	add.w	r3, r7, #12
 8001c96:	4618      	mov	r0, r3
 8001c98:	f007 fcdb 	bl	8009652 <_ZNSaIcEC1Ev>
 8001c9c:	f107 030c 	add.w	r3, r7, #12
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	4906      	ldr	r1, [pc, #24]	; (8001cbc <_ZN11DAC_PCM16814nameB5cxx11Ev+0x34>)
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f007 fdbf 	bl	8009828 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001caa:	f107 030c 	add.w	r3, r7, #12
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f007 fcd0 	bl	8009654 <_ZNSaIcED1Ev>
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	3710      	adds	r7, #16
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	0800a41c 	.word	0x0800a41c

08001cc0 <_ZN11DAC_PCM1681C1EP10I2C_Device>:
#define PCM1681_REG_ENABLE	8
#define PCM1681_REG_FORMAT	9
#define PCM1681_REG_OVER	12
#define PCM1681_REG_DAMS	13

DAC_PCM1681::DAC_PCM1681( I2C_Device *device ) : mDevice( device ), mEnabled( true ) {
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff ff8d 	bl	8001bec <_ZN6DAC_ICC1Ev>
 8001cd2:	4a08      	ldr	r2, [pc, #32]	; (8001cf4 <_ZN11DAC_PCM1681C1EP10I2C_Device+0x34>)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	609a      	str	r2, [r3, #8]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	735a      	strb	r2, [r3, #13]
	// TODO Auto-generated constructor stub
	mMuteStatus = 0;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	731a      	strb	r2, [r3, #12]
}
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4618      	mov	r0, r3
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	0800a5a4 	.word	0x0800a5a4

08001cf8 <_ZN11DAC_PCM1681D1Ev>:

DAC_PCM1681::~DAC_PCM1681() {
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	4a05      	ldr	r2, [pc, #20]	; (8001d18 <_ZN11DAC_PCM1681D1Ev+0x20>)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	601a      	str	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff ff7f 	bl	8001c0c <_ZN6DAC_ICD1Ev>
	// TODO Auto-generated destructor stub
}
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4618      	mov	r0, r3
 8001d12:	3708      	adds	r7, #8
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	0800a5a4 	.word	0x0800a5a4

08001d1c <_ZN11DAC_PCM1681D0Ev>:
DAC_PCM1681::~DAC_PCM1681() {
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
}
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f7ff ffe7 	bl	8001cf8 <_ZN11DAC_PCM1681D1Ev>
 8001d2a:	2110      	movs	r1, #16
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f007 fc7a 	bl	8009626 <_ZdlPvj>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4618      	mov	r0, r3
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <_ZN11DAC_PCM16816enableEb>:

void
DAC_PCM1681::enable( bool state ) {
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	460b      	mov	r3, r1
 8001d46:	70fb      	strb	r3, [r7, #3]
	if ( state ) {
 8001d48:	78fb      	ldrb	r3, [r7, #3]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d00a      	beq.n	8001d64 <_ZN11DAC_PCM16816enableEb+0x28>
		mDevice->writeRegister( PCM1681_REG_ENABLE, 0 );
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6898      	ldr	r0, [r3, #8]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	3310      	adds	r3, #16
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	2108      	movs	r1, #8
 8001d60:	4798      	blx	r3
 8001d62:	e009      	b.n	8001d78 <_ZN11DAC_PCM16816enableEb+0x3c>
	} else {
		mDevice->writeRegister( PCM1681_REG_ENABLE, 0xff );
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6898      	ldr	r0, [r3, #8]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	3310      	adds	r3, #16
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	22ff      	movs	r2, #255	; 0xff
 8001d74:	2108      	movs	r1, #8
 8001d76:	4798      	blx	r3
	}

	mEnabled = state;
 8001d78:	78fa      	ldrb	r2, [r7, #3]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	735a      	strb	r2, [r3, #13]
}
 8001d7e:	bf00      	nop
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <_ZN11DAC_PCM168114supportsFormatEh>:

bool
DAC_PCM1681::supportsFormat( uint8_t format ) {
 8001d86:	b480      	push	{r7}
 8001d88:	b083      	sub	sp, #12
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
 8001d8e:	460b      	mov	r3, r1
 8001d90:	70fb      	strb	r3, [r7, #3]
	return ( format == DAC_IC::FORMAT_SONY || format == DAC_IC::FORMAT_I2S );
 8001d92:	78fb      	ldrb	r3, [r7, #3]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d002      	beq.n	8001d9e <_ZN11DAC_PCM168114supportsFormatEh+0x18>
 8001d98:	78fb      	ldrb	r3, [r7, #3]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d101      	bne.n	8001da2 <_ZN11DAC_PCM168114supportsFormatEh+0x1c>
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e000      	b.n	8001da4 <_ZN11DAC_PCM168114supportsFormatEh+0x1e>
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bc80      	pop	{r7}
 8001dac:	4770      	bx	lr

08001dae <_ZN11DAC_PCM16819setFormatEh>:

void
DAC_PCM1681::setFormat( uint8_t format ) {
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b084      	sub	sp, #16
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
 8001db6:	460b      	mov	r3, r1
 8001db8:	70fb      	strb	r3, [r7, #3]
	 DEBUG_STR( "Setting format" );
	uint8_t value = 0;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	73fb      	strb	r3, [r7, #15]
	if ( format == FORMAT_SONY ) {
 8001dbe:	78fb      	ldrb	r3, [r7, #3]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d102      	bne.n	8001dca <_ZN11DAC_PCM16819setFormatEh+0x1c>
		value = 5;
 8001dc4:	2305      	movs	r3, #5
 8001dc6:	73fb      	strb	r3, [r7, #15]
 8001dc8:	e004      	b.n	8001dd4 <_ZN11DAC_PCM16819setFormatEh+0x26>
	} else if ( format == FORMAT_I2S ) {
 8001dca:	78fb      	ldrb	r3, [r7, #3]
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d101      	bne.n	8001dd4 <_ZN11DAC_PCM16819setFormatEh+0x26>
		value = 4;
 8001dd0:	2304      	movs	r3, #4
 8001dd2:	73fb      	strb	r3, [r7, #15]
	}

	mDevice->writeRegister( PCM1681_REG_FORMAT, value );
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6898      	ldr	r0, [r3, #8]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	3310      	adds	r3, #16
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	7bfa      	ldrb	r2, [r7, #15]
 8001de4:	2109      	movs	r1, #9
 8001de6:	4798      	blx	r3
	mDevice->writeRegister( PCM1681_REG_OVER, 1 );
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6898      	ldr	r0, [r3, #8]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	3310      	adds	r3, #16
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2201      	movs	r2, #1
 8001df8:	210c      	movs	r1, #12
 8001dfa:	4798      	blx	r3
}
 8001dfc:	bf00      	nop
 8001dfe:	3710      	adds	r7, #16
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <_ZN11DAC_PCM16814initEv>:

void
DAC_PCM1681::init() {
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
	// do setup
	setFormat( FORMAT_SONY );
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	3338      	adds	r3, #56	; 0x38
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2100      	movs	r1, #0
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	4798      	blx	r3

}
 8001e1a:	bf00      	nop
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
	...

08001e24 <_ZN11DAC_PCM168116setChannelVolumeEii>:

void
DAC_PCM1681::setChannelVolume( int channel, int volume ) {
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	607a      	str	r2, [r7, #4]
	uint8_t reg = 0;
 8001e30:	2300      	movs	r3, #0
 8001e32:	75fb      	strb	r3, [r7, #23]
	switch( channel ) {
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	2b05      	cmp	r3, #5
 8001e38:	d820      	bhi.n	8001e7c <_ZN11DAC_PCM168116setChannelVolumeEii+0x58>
 8001e3a:	a201      	add	r2, pc, #4	; (adr r2, 8001e40 <_ZN11DAC_PCM168116setChannelVolumeEii+0x1c>)
 8001e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e40:	08001e59 	.word	0x08001e59
 8001e44:	08001e5f 	.word	0x08001e5f
 8001e48:	08001e65 	.word	0x08001e65
 8001e4c:	08001e6b 	.word	0x08001e6b
 8001e50:	08001e71 	.word	0x08001e71
 8001e54:	08001e77 	.word	0x08001e77
		case FRONT_LEFT:
			reg = 1;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	75fb      	strb	r3, [r7, #23]
			break;
 8001e5c:	e00e      	b.n	8001e7c <_ZN11DAC_PCM168116setChannelVolumeEii+0x58>
		case FRONT_RIGHT:
			reg = 2;
 8001e5e:	2302      	movs	r3, #2
 8001e60:	75fb      	strb	r3, [r7, #23]
			break;
 8001e62:	e00b      	b.n	8001e7c <_ZN11DAC_PCM168116setChannelVolumeEii+0x58>
		case REAR_LEFT:
			reg = 3;
 8001e64:	2303      	movs	r3, #3
 8001e66:	75fb      	strb	r3, [r7, #23]
			break;
 8001e68:	e008      	b.n	8001e7c <_ZN11DAC_PCM168116setChannelVolumeEii+0x58>
		case REAR_RIGHT:
			reg = 4;
 8001e6a:	2304      	movs	r3, #4
 8001e6c:	75fb      	strb	r3, [r7, #23]
			break;
 8001e6e:	e005      	b.n	8001e7c <_ZN11DAC_PCM168116setChannelVolumeEii+0x58>
		case CENTER:
			reg = 5;
 8001e70:	2305      	movs	r3, #5
 8001e72:	75fb      	strb	r3, [r7, #23]
			break;
 8001e74:	e002      	b.n	8001e7c <_ZN11DAC_PCM168116setChannelVolumeEii+0x58>
		case SUBWOOFER:
			reg = 6;
 8001e76:	2306      	movs	r3, #6
 8001e78:	75fb      	strb	r3, [r7, #23]
			break;
 8001e7a:	bf00      	nop
	}

	// Clamp the volume to the upper limit
	if ( volume > 127 ) {
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2b7f      	cmp	r3, #127	; 0x7f
 8001e80:	dd01      	ble.n	8001e86 <_ZN11DAC_PCM168116setChannelVolumeEii+0x62>
		volume = 127;
 8001e82:	237f      	movs	r3, #127	; 0x7f
 8001e84:	607b      	str	r3, [r7, #4]
	}

	uint8_t volumeLevel = volume + 128;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	3b80      	subs	r3, #128	; 0x80
 8001e8c:	75bb      	strb	r3, [r7, #22]
	mDevice->writeRegister( reg, volumeLevel );
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	6898      	ldr	r0, [r3, #8]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	3310      	adds	r3, #16
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	7dba      	ldrb	r2, [r7, #22]
 8001e9e:	7df9      	ldrb	r1, [r7, #23]
 8001ea0:	4798      	blx	r3
}
 8001ea2:	bf00      	nop
 8001ea4:	3718      	adds	r7, #24
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop

08001eac <_ZN11DAC_PCM16819setVolumeEi>:

void
DAC_PCM1681::setVolume( int volume ) {
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
	setChannelVolume( FRONT_LEFT, volume );
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	3328      	adds	r3, #40	; 0x28
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	683a      	ldr	r2, [r7, #0]
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	4798      	blx	r3
	setChannelVolume( FRONT_RIGHT, volume );
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	3328      	adds	r3, #40	; 0x28
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	683a      	ldr	r2, [r7, #0]
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	4798      	blx	r3
	setChannelVolume( REAR_LEFT, volume );
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	3328      	adds	r3, #40	; 0x28
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	683a      	ldr	r2, [r7, #0]
 8001ee0:	2102      	movs	r1, #2
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	4798      	blx	r3
	setChannelVolume( REAR_RIGHT, volume );
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	3328      	adds	r3, #40	; 0x28
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	683a      	ldr	r2, [r7, #0]
 8001ef0:	2103      	movs	r1, #3
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	4798      	blx	r3
	setChannelVolume( CENTER, volume );
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	3328      	adds	r3, #40	; 0x28
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	683a      	ldr	r2, [r7, #0]
 8001f00:	2104      	movs	r1, #4
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	4798      	blx	r3
	setChannelVolume( SUBWOOFER, volume );
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	3328      	adds	r3, #40	; 0x28
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	683a      	ldr	r2, [r7, #0]
 8001f10:	2105      	movs	r1, #5
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	4798      	blx	r3
}
 8001f16:	bf00      	nop
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <_ZN11DAC_PCM168111muteChannelEib>:

void
DAC_PCM1681::muteChannel( int channel, bool enable ) {
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b086      	sub	sp, #24
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	60f8      	str	r0, [r7, #12]
 8001f26:	60b9      	str	r1, [r7, #8]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	71fb      	strb	r3, [r7, #7]
	uint8_t mask =  ( 1 << ( channel ) );
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	75fb      	strb	r3, [r7, #23]
	if ( enable ) {
 8001f36:	79fb      	ldrb	r3, [r7, #7]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d007      	beq.n	8001f4c <_ZN11DAC_PCM168111muteChannelEib+0x2e>
		// enable the bit representing this channel
		mMuteStatus = mMuteStatus & mask;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	7b1a      	ldrb	r2, [r3, #12]
 8001f40:	7dfb      	ldrb	r3, [r7, #23]
 8001f42:	4013      	ands	r3, r2
 8001f44:	b2da      	uxtb	r2, r3
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	731a      	strb	r2, [r3, #12]
 8001f4a:	e00b      	b.n	8001f64 <_ZN11DAC_PCM168111muteChannelEib+0x46>
	} else {
		// disable the bit representing the channel
		mMuteStatus = mMuteStatus & ~mask;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	7b1b      	ldrb	r3, [r3, #12]
 8001f50:	b25a      	sxtb	r2, r3
 8001f52:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001f56:	43db      	mvns	r3, r3
 8001f58:	b25b      	sxtb	r3, r3
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	b25b      	sxtb	r3, r3
 8001f5e:	b2da      	uxtb	r2, r3
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	731a      	strb	r2, [r3, #12]
	}

	mDevice->writeRegister( PCM1681_REG_MUTE, mMuteStatus );
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6898      	ldr	r0, [r3, #8]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	3310      	adds	r3, #16
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	7b12      	ldrb	r2, [r2, #12]
 8001f76:	2107      	movs	r1, #7
 8001f78:	4798      	blx	r3
}
 8001f7a:	bf00      	nop
 8001f7c:	3718      	adds	r7, #24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <_ZN11DAC_PCM16814muteEb>:

void
DAC_PCM1681::mute( bool enable ) {
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b082      	sub	sp, #8
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	70fb      	strb	r3, [r7, #3]
	 if ( enable ) {
 8001f8e:	78fb      	ldrb	r3, [r7, #3]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d003      	beq.n	8001f9c <_ZN11DAC_PCM16814muteEb+0x1a>
		 mMuteStatus = 0xff;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	22ff      	movs	r2, #255	; 0xff
 8001f98:	731a      	strb	r2, [r3, #12]
 8001f9a:	e002      	b.n	8001fa2 <_ZN11DAC_PCM16814muteEb+0x20>
	 } else {
		 mMuteStatus = 0;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	731a      	strb	r2, [r3, #12]
	 }

	mDevice->writeRegister( PCM1681_REG_MUTE, mMuteStatus );
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6898      	ldr	r0, [r3, #8]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	3310      	adds	r3, #16
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	7b12      	ldrb	r2, [r2, #12]
 8001fb4:	2107      	movs	r1, #7
 8001fb6:	4798      	blx	r3
}
 8001fb8:	bf00      	nop
 8001fba:	3708      	adds	r7, #8
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <_ZN13DecoderEventsC1Ev>:
 *      Author: duane
 */

#include "DecoderEvents.h"

DecoderEvents::DecoderEvents() {
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	4a04      	ldr	r2, [pc, #16]	; (8001fdc <_ZN13DecoderEventsC1Ev+0x1c>)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bc80      	pop	{r7}
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	0800a5e8 	.word	0x0800a5e8

08001fe0 <_ZN13DecoderEventsD1Ev>:

DecoderEvents::~DecoderEvents() {
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	4a04      	ldr	r2, [pc, #16]	; (8001ffc <_ZN13DecoderEventsD1Ev+0x1c>)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bc80      	pop	{r7}
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	0800a5e8 	.word	0x0800a5e8

08002000 <_Z14DWT_Delay_Initv>:


#include "Delay.h"


uint32_t DWT_Delay_Init(void) {
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8002004:	4b16      	ldr	r3, [pc, #88]	; (8002060 <_Z14DWT_Delay_Initv+0x60>)
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	4a15      	ldr	r2, [pc, #84]	; (8002060 <_Z14DWT_Delay_Initv+0x60>)
 800200a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800200e:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8002010:	4b13      	ldr	r3, [pc, #76]	; (8002060 <_Z14DWT_Delay_Initv+0x60>)
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	4a12      	ldr	r2, [pc, #72]	; (8002060 <_Z14DWT_Delay_Initv+0x60>)
 8002016:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800201a:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800201c:	4b11      	ldr	r3, [pc, #68]	; (8002064 <_Z14DWT_Delay_Initv+0x64>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a10      	ldr	r2, [pc, #64]	; (8002064 <_Z14DWT_Delay_Initv+0x64>)
 8002022:	f023 0301 	bic.w	r3, r3, #1
 8002026:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8002028:	4b0e      	ldr	r3, [pc, #56]	; (8002064 <_Z14DWT_Delay_Initv+0x64>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a0d      	ldr	r2, [pc, #52]	; (8002064 <_Z14DWT_Delay_Initv+0x64>)
 800202e:	f043 0301 	orr.w	r3, r3, #1
 8002032:	6013      	str	r3, [r2, #0]

  	  /* Reset the clock cycle counter value */
  	  DWT->CYCCNT = 0;
 8002034:	4b0b      	ldr	r3, [pc, #44]	; (8002064 <_Z14DWT_Delay_Initv+0x64>)
 8002036:	2200      	movs	r2, #0
 8002038:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 800203a:	bf00      	nop
    __ASM volatile ("NOP");
 800203c:	bf00      	nop
    __ASM volatile ("NOP");
 800203e:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8002040:	4b08      	ldr	r3, [pc, #32]	; (8002064 <_Z14DWT_Delay_Initv+0x64>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	2b00      	cmp	r3, #0
 8002046:	bf14      	ite	ne
 8002048:	2301      	movne	r3, #1
 800204a:	2300      	moveq	r3, #0
 800204c:	b2db      	uxtb	r3, r3
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <_Z14DWT_Delay_Initv+0x56>
     {
       return 0; /*clock cycle counter started*/
 8002052:	2300      	movs	r3, #0
 8002054:	e000      	b.n	8002058 <_Z14DWT_Delay_Initv+0x58>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8002056:	2301      	movs	r3, #1
  }
}
 8002058:	4618      	mov	r0, r3
 800205a:	46bd      	mov	sp, r7
 800205c:	bc80      	pop	{r7}
 800205e:	4770      	bx	lr
 8002060:	e000edf0 	.word	0xe000edf0
 8002064:	e0001000 	.word	0xe0001000

08002068 <_ZN7DisplayC1Ev>:
#include "Display.h"
#include "main.h"
#include <stdio.h>
#include "Debug.h"

Display::Display() : mShouldUpdate( true ), mCurrentScreen( INIT_SCREEN ), mCurrentVolume( 50 ), mLCD( 0 ) {
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	4a0e      	ldr	r2, [pc, #56]	; (80020ac <_ZN7DisplayC1Ev+0x44>)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	601a      	str	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2201      	movs	r2, #1
 800207a:	711a      	strb	r2, [r3, #4]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	609a      	str	r2, [r3, #8]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2232      	movs	r2, #50	; 0x32
 8002086:	60da      	str	r2, [r3, #12]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	611a      	str	r2, [r3, #16]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	3318      	adds	r3, #24
 8002092:	4618      	mov	r0, r3
 8002094:	f007 fb4c 	bl	8009730 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	3330      	adds	r3, #48	; 0x30
 800209c:	4618      	mov	r0, r3
 800209e:	f007 fb47 	bl	8009730 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	// TODO Auto-generated constructor stub

}
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4618      	mov	r0, r3
 80020a6:	3708      	adds	r7, #8
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	0800a604 	.word	0x0800a604

080020b0 <_ZN7DisplayD1Ev>:

Display::~Display() {
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	4a08      	ldr	r2, [pc, #32]	; (80020dc <_ZN7DisplayD1Ev+0x2c>)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	601a      	str	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	3330      	adds	r3, #48	; 0x30
 80020c2:	4618      	mov	r0, r3
 80020c4:	f007 fb3b 	bl	800973e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	3318      	adds	r3, #24
 80020cc:	4618      	mov	r0, r3
 80020ce:	f007 fb36 	bl	800973e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	// TODO Auto-generated destructor stub
}
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4618      	mov	r0, r3
 80020d6:	3708      	adds	r7, #8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	0800a604 	.word	0x0800a604

080020e0 <_ZN7DisplayD0Ev>:
Display::~Display() {
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
}
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f7ff ffe1 	bl	80020b0 <_ZN7DisplayD1Ev>
 80020ee:	2148      	movs	r1, #72	; 0x48
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f007 fa98 	bl	8009626 <_ZdlPvj>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4618      	mov	r0, r3
 80020fa:	3708      	adds	r7, #8
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <_ZN7Display6updateEv>:

void
Display::update() {
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
	if ( mShouldUpdate ) {
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	791b      	ldrb	r3, [r3, #4]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d011      	beq.n	8002134 <_ZN7Display6updateEv+0x34>
		switch( mCurrentScreen ) {
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d002      	beq.n	800211e <_ZN7Display6updateEv+0x1e>
 8002118:	2b01      	cmp	r3, #1
 800211a:	d004      	beq.n	8002126 <_ZN7Display6updateEv+0x26>
 800211c:	e007      	b.n	800212e <_ZN7Display6updateEv+0x2e>
			case INIT_SCREEN:
				updateInitScreen();
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f000 f878 	bl	8002214 <_ZN7Display16updateInitScreenEv>
			break;
 8002124:	e003      	b.n	800212e <_ZN7Display6updateEv+0x2e>
			case SCREEN_MAIN:
				updateMainScreen();
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 f8b2 	bl	8002290 <_ZN7Display16updateMainScreenEv>
				break;
 800212c:	bf00      	nop
		}

		mShouldUpdate = false;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	711a      	strb	r2, [r3, #4]
	}

}
 8002134:	bf00      	nop
 8002136:	3708      	adds	r7, #8
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <_ZN7Display9setScreenEi>:

void
Display::setScreen( int screen ) {
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
	mCurrentScreen = screen;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	683a      	ldr	r2, [r7, #0]
 800214a:	609a      	str	r2, [r3, #8]
	//mLCD->clearDisplay();
	mShouldUpdate = true;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	711a      	strb	r2, [r3, #4]
}
 8002152:	bf00      	nop
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	bc80      	pop	{r7}
 800215a:	4770      	bx	lr

0800215c <_ZN7Display13setInitStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void
Display::setInitString( const std::string initString ) {
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
	mInitString = initString;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	3330      	adds	r3, #48	; 0x30
 800216a:	6839      	ldr	r1, [r7, #0]
 800216c:	4618      	mov	r0, r3
 800216e:	f007 faec 	bl	800974a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
	mShouldUpdate = true;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2201      	movs	r2, #1
 8002176:	711a      	strb	r2, [r3, #4]
}
 8002178:	bf00      	nop
 800217a:	3708      	adds	r7, #8
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <_ZN7Display15setSamplingRateEm>:


void
Display::setSamplingRate( uint32_t samplingRate ) {
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
	// This will happen on another thread, the audio one, so in and out quickly
	if ( samplingRate != mSamplingRate ) {
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	683a      	ldr	r2, [r7, #0]
 8002190:	429a      	cmp	r2, r3
 8002192:	d005      	beq.n	80021a0 <_ZN7Display15setSamplingRateEm+0x20>
		mSamplingRate = samplingRate;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	683a      	ldr	r2, [r7, #0]
 8002198:	615a      	str	r2, [r3, #20]
		mShouldUpdate = true;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2201      	movs	r2, #1
 800219e:	711a      	strb	r2, [r3, #4]
	}

}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bc80      	pop	{r7}
 80021a8:	4770      	bx	lr

080021aa <_ZN7Display12setAlgorithmENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void
Display::setAlgorithm( const std::string algorithm ) {
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b082      	sub	sp, #8
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
 80021b2:	6039      	str	r1, [r7, #0]
	// This will happen on another thread, the audio one, so in and out quickly
	if ( algorithm.compare( mAlgorithm ) != 0 ) {
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	3318      	adds	r3, #24
 80021b8:	4619      	mov	r1, r3
 80021ba:	6838      	ldr	r0, [r7, #0]
 80021bc:	f007 facf 	bl	800975e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	bf14      	ite	ne
 80021c6:	2301      	movne	r3, #1
 80021c8:	2300      	moveq	r3, #0
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d008      	beq.n	80021e2 <_ZN7Display12setAlgorithmENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x38>
		mAlgorithm = algorithm;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	3318      	adds	r3, #24
 80021d4:	6839      	ldr	r1, [r7, #0]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f007 fab7 	bl	800974a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
		mShouldUpdate = true;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	711a      	strb	r2, [r3, #4]
	}
}
 80021e2:	bf00      	nop
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <_ZN7Display12updateVolumeEi>:
	DEBUG_STR( "Initializing" );
	mLCD->initialize();
}

void
Display::updateVolume( int volume ) {
 80021ea:	b480      	push	{r7}
 80021ec:	b083      	sub	sp, #12
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
 80021f2:	6039      	str	r1, [r7, #0]
	if ( volume != mCurrentVolume ) {
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	683a      	ldr	r2, [r7, #0]
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d002      	beq.n	8002204 <_ZN7Display12updateVolumeEi+0x1a>
		//DEBUG_STR( "Adjusting volume" );
		mShouldUpdate = true;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2201      	movs	r2, #1
 8002202:	711a      	strb	r2, [r3, #4]
	}

	mCurrentVolume = volume;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	683a      	ldr	r2, [r7, #0]
 8002208:	60da      	str	r2, [r3, #12]
}
 800220a:	bf00      	nop
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	bc80      	pop	{r7}
 8002212:	4770      	bx	lr

08002214 <_ZN7Display16updateInitScreenEv>:

void
Display::updateInitScreen() {
 8002214:	b580      	push	{r7, lr}
 8002216:	b090      	sub	sp, #64	; 0x40
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
	char s[50];

	mLCD->setCursor( 0, 1 );
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	691b      	ldr	r3, [r3, #16]
 8002220:	2201      	movs	r2, #1
 8002222:	2100      	movs	r1, #0
 8002224:	4618      	mov	r0, r3
 8002226:	f001 fc61 	bl	8003aec <_ZN3LCD9setCursorEhh>
	sprintf( s, "Initializing", mCurrentVolume );
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	68da      	ldr	r2, [r3, #12]
 800222e:	f107 030c 	add.w	r3, r7, #12
 8002232:	4915      	ldr	r1, [pc, #84]	; (8002288 <_ZN7Display16updateInitScreenEv+0x74>)
 8002234:	4618      	mov	r0, r3
 8002236:	f007 fd6b 	bl	8009d10 <siprintf>
	mLCD->writeString( s );
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	f107 020c 	add.w	r2, r7, #12
 8002242:	4611      	mov	r1, r2
 8002244:	4618      	mov	r0, r3
 8002246:	f001 fc6d 	bl	8003b24 <_ZN3LCD11writeStringEPc>

	mLCD->setCursor( 0, 1 );
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	2201      	movs	r2, #1
 8002250:	2100      	movs	r1, #0
 8002252:	4618      	mov	r0, r3
 8002254:	f001 fc4a 	bl	8003aec <_ZN3LCD9setCursorEhh>
	sprintf( s, "%-20s", mInitString.c_str() );
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	3330      	adds	r3, #48	; 0x30
 800225c:	4618      	mov	r0, r3
 800225e:	f007 fa7c 	bl	800975a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8002262:	4602      	mov	r2, r0
 8002264:	f107 030c 	add.w	r3, r7, #12
 8002268:	4908      	ldr	r1, [pc, #32]	; (800228c <_ZN7Display16updateInitScreenEv+0x78>)
 800226a:	4618      	mov	r0, r3
 800226c:	f007 fd50 	bl	8009d10 <siprintf>
	mLCD->writeString( s );
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	691b      	ldr	r3, [r3, #16]
 8002274:	f107 020c 	add.w	r2, r7, #12
 8002278:	4611      	mov	r1, r2
 800227a:	4618      	mov	r0, r3
 800227c:	f001 fc52 	bl	8003b24 <_ZN3LCD11writeStringEPc>

}
 8002280:	bf00      	nop
 8002282:	3740      	adds	r7, #64	; 0x40
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	0800a424 	.word	0x0800a424
 800228c:	0800a434 	.word	0x0800a434

08002290 <_ZN7Display16updateMainScreenEv>:

void
Display::updateMainScreen() {
 8002290:	b580      	push	{r7, lr}
 8002292:	b094      	sub	sp, #80	; 0x50
 8002294:	af02      	add	r7, sp, #8
 8002296:	6078      	str	r0, [r7, #4]
	//DEBUG_STR( "Updating main screen" );

	char s[50];

	mLCD->setCursor( 0, 0 );
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	691b      	ldr	r3, [r3, #16]
 800229c:	2200      	movs	r2, #0
 800229e:	2100      	movs	r1, #0
 80022a0:	4618      	mov	r0, r3
 80022a2:	f001 fc23 	bl	8003aec <_ZN3LCD9setCursorEhh>
	sprintf( s, "Volume %-3d          ", mCurrentVolume );
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68da      	ldr	r2, [r3, #12]
 80022aa:	f107 030c 	add.w	r3, r7, #12
 80022ae:	4949      	ldr	r1, [pc, #292]	; (80023d4 <_ZN7Display16updateMainScreenEv+0x144>)
 80022b0:	4618      	mov	r0, r3
 80022b2:	f007 fd2d 	bl	8009d10 <siprintf>
	mLCD->writeString( s );
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	f107 020c 	add.w	r2, r7, #12
 80022be:	4611      	mov	r1, r2
 80022c0:	4618      	mov	r0, r3
 80022c2:	f001 fc2f 	bl	8003b24 <_ZN3LCD11writeStringEPc>

//	mLCD->setCursor( 0, 1 );
//	sprintf( s, "                     ", mCurrentVolume );
//	mLCD->writeString( s );

	mLCD->setCursor( 0, 1 );
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	2201      	movs	r2, #1
 80022cc:	2100      	movs	r1, #0
 80022ce:	4618      	mov	r0, r3
 80022d0:	f001 fc0c 	bl	8003aec <_ZN3LCD9setCursorEhh>
		sprintf( s, "%s", mInitString.c_str() );
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	3330      	adds	r3, #48	; 0x30
 80022d8:	4618      	mov	r0, r3
 80022da:	f007 fa3e 	bl	800975a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80022de:	4602      	mov	r2, r0
 80022e0:	f107 030c 	add.w	r3, r7, #12
 80022e4:	493c      	ldr	r1, [pc, #240]	; (80023d8 <_ZN7Display16updateMainScreenEv+0x148>)
 80022e6:	4618      	mov	r0, r3
 80022e8:	f007 fd12 	bl	8009d10 <siprintf>
		mLCD->writeString( s );
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	691b      	ldr	r3, [r3, #16]
 80022f0:	f107 020c 	add.w	r2, r7, #12
 80022f4:	4611      	mov	r1, r2
 80022f6:	4618      	mov	r0, r3
 80022f8:	f001 fc14 	bl	8003b24 <_ZN3LCD11writeStringEPc>

	if ( mAlgorithm.length() && mSamplingRate ) {
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	3318      	adds	r3, #24
 8002300:	4618      	mov	r0, r3
 8002302:	f007 fa28 	bl	8009756 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d005      	beq.n	8002318 <_ZN7Display16updateMainScreenEv+0x88>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	695b      	ldr	r3, [r3, #20]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <_ZN7Display16updateMainScreenEv+0x88>
 8002314:	2301      	movs	r3, #1
 8002316:	e000      	b.n	800231a <_ZN7Display16updateMainScreenEv+0x8a>
 8002318:	2300      	movs	r3, #0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d040      	beq.n	80023a0 <_ZN7Display16updateMainScreenEv+0x110>
		mLCD->setCursor( 0, 2 );
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	2202      	movs	r2, #2
 8002324:	2100      	movs	r1, #0
 8002326:	4618      	mov	r0, r3
 8002328:	f001 fbe0 	bl	8003aec <_ZN3LCD9setCursorEhh>
		int intPart = mSamplingRate / 1000;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	695b      	ldr	r3, [r3, #20]
 8002330:	4a2a      	ldr	r2, [pc, #168]	; (80023dc <_ZN7Display16updateMainScreenEv+0x14c>)
 8002332:	fba2 2303 	umull	r2, r3, r2, r3
 8002336:	099b      	lsrs	r3, r3, #6
 8002338:	647b      	str	r3, [r7, #68]	; 0x44
		int fracPart = ( mSamplingRate - ( intPart * 1000 ) ) / 100;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002340:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002344:	fb01 f202 	mul.w	r2, r1, r2
 8002348:	1a9b      	subs	r3, r3, r2
 800234a:	4a25      	ldr	r2, [pc, #148]	; (80023e0 <_ZN7Display16updateMainScreenEv+0x150>)
 800234c:	fba2 2303 	umull	r2, r3, r2, r3
 8002350:	095b      	lsrs	r3, r3, #5
 8002352:	643b      	str	r3, [r7, #64]	; 0x40
		if ( fracPart == 0 ) {
 8002354:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002356:	2b00      	cmp	r3, #0
 8002358:	d10c      	bne.n	8002374 <_ZN7Display16updateMainScreenEv+0xe4>
			sprintf( s, "%-5s        %4dkHz", mAlgorithm.c_str(), intPart );
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	3318      	adds	r3, #24
 800235e:	4618      	mov	r0, r3
 8002360:	f007 f9fb 	bl	800975a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8002364:	4602      	mov	r2, r0
 8002366:	f107 000c 	add.w	r0, r7, #12
 800236a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800236c:	491d      	ldr	r1, [pc, #116]	; (80023e4 <_ZN7Display16updateMainScreenEv+0x154>)
 800236e:	f007 fccf 	bl	8009d10 <siprintf>
 8002372:	e00d      	b.n	8002390 <_ZN7Display16updateMainScreenEv+0x100>
		} else {
			sprintf( s, "%-5s        %d.%dkHz", mAlgorithm.c_str(), intPart, fracPart );
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	3318      	adds	r3, #24
 8002378:	4618      	mov	r0, r3
 800237a:	f007 f9ee 	bl	800975a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800237e:	4602      	mov	r2, r0
 8002380:	f107 000c 	add.w	r0, r7, #12
 8002384:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002386:	9300      	str	r3, [sp, #0]
 8002388:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800238a:	4917      	ldr	r1, [pc, #92]	; (80023e8 <_ZN7Display16updateMainScreenEv+0x158>)
 800238c:	f007 fcc0 	bl	8009d10 <siprintf>
		}

		mLCD->writeString( s );
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	f107 020c 	add.w	r2, r7, #12
 8002398:	4611      	mov	r1, r2
 800239a:	4618      	mov	r0, r3
 800239c:	f001 fbc2 	bl	8003b24 <_ZN3LCD11writeStringEPc>
	}

	mLCD->setCursor( 0, 3 );
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	691b      	ldr	r3, [r3, #16]
 80023a4:	2203      	movs	r2, #3
 80023a6:	2100      	movs	r1, #0
 80023a8:	4618      	mov	r0, r3
 80023aa:	f001 fb9f 	bl	8003aec <_ZN3LCD9setCursorEhh>
	sprintf( s, "6-Ch         Digital" );
 80023ae:	f107 030c 	add.w	r3, r7, #12
 80023b2:	490e      	ldr	r1, [pc, #56]	; (80023ec <_ZN7Display16updateMainScreenEv+0x15c>)
 80023b4:	4618      	mov	r0, r3
 80023b6:	f007 fcab 	bl	8009d10 <siprintf>
	mLCD->writeString( s );
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	f107 020c 	add.w	r2, r7, #12
 80023c2:	4611      	mov	r1, r2
 80023c4:	4618      	mov	r0, r3
 80023c6:	f001 fbad 	bl	8003b24 <_ZN3LCD11writeStringEPc>
}
 80023ca:	bf00      	nop
 80023cc:	3748      	adds	r7, #72	; 0x48
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	0800a43c 	.word	0x0800a43c
 80023d8:	0800a454 	.word	0x0800a454
 80023dc:	10624dd3 	.word	0x10624dd3
 80023e0:	51eb851f 	.word	0x51eb851f
 80023e4:	0800a458 	.word	0x0800a458
 80023e8:	0800a46c 	.word	0x0800a46c
 80023ec:	0800a484 	.word	0x0800a484

080023f0 <_ZN12DolbyDecoderC1Ev>:
 *      Author: duane
 */

#include "DolbyDecoder.h"

DolbyDecoder::DolbyDecoder() {
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	4a04      	ldr	r2, [pc, #16]	; (800240c <_ZN12DolbyDecoderC1Ev+0x1c>)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4618      	mov	r0, r3
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	bc80      	pop	{r7}
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	0800a614 	.word	0x0800a614

08002410 <_ZN12DolbyDecoderD1Ev>:

DolbyDecoder::~DolbyDecoder() {
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	4a04      	ldr	r2, [pc, #16]	; (800242c <_ZN12DolbyDecoderD1Ev+0x1c>)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4618      	mov	r0, r3
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	bc80      	pop	{r7}
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	0800a614 	.word	0x0800a614

08002430 <_ZN19DolbyDecoder_STA31015setEventHandlerEP13DecoderEvents>:
	} REGISTERS;

	DolbyDecoder_STA310( I2C_Device *device  );
	virtual ~DolbyDecoder_STA310();

	virtual void setEventHandler( DecoderEvents *handler ) { mEventHandler = handler; }
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	683a      	ldr	r2, [r7, #0]
 800243e:	60da      	str	r2, [r3, #12]
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	bc80      	pop	{r7}
 8002448:	4770      	bx	lr

0800244a <_ZN19DolbyDecoder_STA31013isInitializedEv>:
	virtual void initialize();
	virtual void mute( bool enable = true );
	virtual void run();
	virtual void play( bool enable = true );

	virtual bool isInitialized() { return mInitialized; }
 800244a:	b480      	push	{r7}
 800244c:	b083      	sub	sp, #12
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	7a1b      	ldrb	r3, [r3, #8]
 8002456:	4618      	mov	r0, r3
 8002458:	370c      	adds	r7, #12
 800245a:	46bd      	mov	sp, r7
 800245c:	bc80      	pop	{r7}
 800245e:	4770      	bx	lr

08002460 <_ZN19DolbyDecoder_STA31014setInformationENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
	virtual void checkForInterrupt();
	virtual void checkFormat();

	virtual void reset();

	virtual void setInformation( const std::string info ) { if ( mEventHandler ) mEventHandler->onInformation( info ); }
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d009      	beq.n	8002486 <_ZN19DolbyDecoder_STA31014setInformationENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x26>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	68da      	ldr	r2, [r3, #12]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	3310      	adds	r3, #16
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	6839      	ldr	r1, [r7, #0]
 8002482:	4610      	mov	r0, r2
 8002484:	4798      	blx	r3
 8002486:	bf00      	nop
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
	...

08002490 <_ZN19DolbyDecoder_STA310C1EP10I2C_Device>:

#include "DolbyDecoderSTA310.h"
#include "cmsis_os.h"
#include "Debug.h"

DolbyDecoder_STA310::DolbyDecoder_STA310( I2C_Device *device ) :
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
	mDevice( device ), mInitialized( false ), mMuted( false ), mRunning( false ), mPlaying( false ), mEventHandler( 0 ), mIdent( 0 ), mSoftwareVersion( 0 ) {
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff ffa7 	bl	80023f0 <_ZN12DolbyDecoderC1Ev>
 80024a2:	4a10      	ldr	r2, [pc, #64]	; (80024e4 <_ZN19DolbyDecoder_STA310C1EP10I2C_Device+0x54>)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	601a      	str	r2, [r3, #0]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	683a      	ldr	r2, [r7, #0]
 80024ac:	605a      	str	r2, [r3, #4]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	721a      	strb	r2, [r3, #8]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	725a      	strb	r2, [r3, #9]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	729a      	strb	r2, [r3, #10]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	72da      	strb	r2, [r3, #11]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	60da      	str	r2, [r3, #12]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	741a      	strb	r2, [r3, #16]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	745a      	strb	r2, [r3, #17]
	// TODO Auto-generated constructor stub

}
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4618      	mov	r0, r3
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	0800a64c 	.word	0x0800a64c

080024e8 <_ZN19DolbyDecoder_STA310D1Ev>:

DolbyDecoder_STA310::~DolbyDecoder_STA310() {
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	4a05      	ldr	r2, [pc, #20]	; (8002508 <_ZN19DolbyDecoder_STA310D1Ev+0x20>)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	601a      	str	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7ff ff89 	bl	8002410 <_ZN12DolbyDecoderD1Ev>
	// TODO Auto-generated destructor stub
}
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4618      	mov	r0, r3
 8002502:	3708      	adds	r7, #8
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	0800a64c 	.word	0x0800a64c

0800250c <_ZN19DolbyDecoder_STA310D0Ev>:
DolbyDecoder_STA310::~DolbyDecoder_STA310() {
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
}
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f7ff ffe7 	bl	80024e8 <_ZN19DolbyDecoder_STA310D1Ev>
 800251a:	2118      	movs	r1, #24
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f007 f882 	bl	8009626 <_ZdlPvj>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4618      	mov	r0, r3
 8002526:	3708      	adds	r7, #8
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <_ZN19DolbyDecoder_STA3104muteEb>:



void
DolbyDecoder_STA310::mute( bool enable ) {
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	460b      	mov	r3, r1
 8002536:	70fb      	strb	r3, [r7, #3]
	if ( enable ) {
 8002538:	78fb      	ldrb	r3, [r7, #3]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d00a      	beq.n	8002554 <_ZN19DolbyDecoder_STA3104muteEb+0x28>
		mDevice->writeRegister( DolbyDecoder_STA310::MUTE, 1 );
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6858      	ldr	r0, [r3, #4]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	3310      	adds	r3, #16
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2201      	movs	r2, #1
 800254e:	2114      	movs	r1, #20
 8002550:	4798      	blx	r3
 8002552:	e009      	b.n	8002568 <_ZN19DolbyDecoder_STA3104muteEb+0x3c>
	} else {
		mDevice->writeRegister( DolbyDecoder_STA310::MUTE, 0 );
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6858      	ldr	r0, [r3, #4]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	3310      	adds	r3, #16
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2200      	movs	r2, #0
 8002564:	2114      	movs	r1, #20
 8002566:	4798      	blx	r3
	}

	mMuted = enable;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	78fa      	ldrb	r2, [r7, #3]
 800256c:	725a      	strb	r2, [r3, #9]
}
 800256e:	bf00      	nop
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <_ZN19DolbyDecoder_STA3104playEb>:

void
DolbyDecoder_STA310::play( bool enable ) {
 8002576:	b580      	push	{r7, lr}
 8002578:	b082      	sub	sp, #8
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
 800257e:	460b      	mov	r3, r1
 8002580:	70fb      	strb	r3, [r7, #3]
	if ( enable ) {
 8002582:	78fb      	ldrb	r3, [r7, #3]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d00a      	beq.n	800259e <_ZN19DolbyDecoder_STA3104playEb+0x28>
		 DEBUG_STR( "Setting play to 1" );
		mDevice->writeRegister( DolbyDecoder_STA310::PLAY, 1 );
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6858      	ldr	r0, [r3, #4]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	3310      	adds	r3, #16
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2201      	movs	r2, #1
 8002598:	2113      	movs	r1, #19
 800259a:	4798      	blx	r3
 800259c:	e009      	b.n	80025b2 <_ZN19DolbyDecoder_STA3104playEb+0x3c>
	} else {
		mDevice->writeRegister( DolbyDecoder_STA310::PLAY, 0 );
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6858      	ldr	r0, [r3, #4]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	3310      	adds	r3, #16
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2200      	movs	r2, #0
 80025ae:	2113      	movs	r1, #19
 80025b0:	4798      	blx	r3
	}

	mPlaying = enable;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	78fa      	ldrb	r2, [r7, #3]
 80025b6:	72da      	strb	r2, [r3, #11]
}
 80025b8:	bf00      	nop
 80025ba:	3708      	adds	r7, #8
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <_ZN19DolbyDecoder_STA3103runEv>:

void
DolbyDecoder_STA310::run() {
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
	 DEBUG_STR( "Attemping to run" );
	if ( !mRunning ) {
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	7a9b      	ldrb	r3, [r3, #10]
 80025cc:	f083 0301 	eor.w	r3, r3, #1
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d00d      	beq.n	80025f2 <_ZN19DolbyDecoder_STA3103runEv+0x32>
		 DEBUG_STR( "....Writing run" );
		mDevice->writeRegister( DolbyDecoder_STA310::RUN, 1 );
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6858      	ldr	r0, [r3, #4]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	3310      	adds	r3, #16
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2201      	movs	r2, #1
 80025e6:	2172      	movs	r1, #114	; 0x72
 80025e8:	4798      	blx	r3
		mRunning = true;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2201      	movs	r2, #1
 80025ee:	729a      	strb	r2, [r3, #10]
		// We are now running, the only way to stop is to do a reset of the chip
	} else {
		int i = 1;

	}
}
 80025f0:	e001      	b.n	80025f6 <_ZN19DolbyDecoder_STA3103runEv+0x36>
		int i = 1;
 80025f2:	2301      	movs	r3, #1
 80025f4:	60fb      	str	r3, [r7, #12]
}
 80025f6:	bf00      	nop
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <_ZN19DolbyDecoder_STA31014enableAudioPLLEv>:

void
DolbyDecoder_STA310::enableAudioPLL() {
 80025fe:	b580      	push	{r7, lr}
 8002600:	b082      	sub	sp, #8
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
	mDevice->writeRegister( DolbyDecoder_STA310::ENABLE_PLL, 1 );
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6858      	ldr	r0, [r3, #4]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	3310      	adds	r3, #16
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2201      	movs	r2, #1
 8002616:	21b5      	movs	r1, #181	; 0xb5
 8002618:	4798      	blx	r3
}
 800261a:	bf00      	nop
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
	...

08002624 <_ZN19DolbyDecoder_STA31010initializeEv>:

void
DolbyDecoder_STA310::initialize() {
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin( DECODER_RESET_GPIO_Port, DECODER_RESET_Pin, GPIO_PIN_RESET );
 800262c:	2200      	movs	r2, #0
 800262e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002632:	4826      	ldr	r0, [pc, #152]	; (80026cc <_ZN19DolbyDecoder_STA31010initializeEv+0xa8>)
 8002634:	f002 fd39 	bl	80050aa <HAL_GPIO_WritePin>
	osDelay( 100 );
 8002638:	2064      	movs	r0, #100	; 0x64
 800263a:	f003 ff7f 	bl	800653c <osDelay>
	HAL_GPIO_WritePin( DECODER_RESET_GPIO_Port, DECODER_RESET_Pin, GPIO_PIN_SET );
 800263e:	2201      	movs	r2, #1
 8002640:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002644:	4821      	ldr	r0, [pc, #132]	; (80026cc <_ZN19DolbyDecoder_STA31010initializeEv+0xa8>)
 8002646:	f002 fd30 	bl	80050aa <HAL_GPIO_WritePin>
	osDelay( 500 );
 800264a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800264e:	f003 ff75 	bl	800653c <osDelay>

	 DEBUG_STR( "Performing soft reset" );
	softReset();
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 f9f9 	bl	8002a4a <_ZN19DolbyDecoder_STA3109softResetEv>

	if ( mInitialized ) {
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	7a1b      	ldrb	r3, [r3, #8]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d031      	beq.n	80026c4 <_ZN19DolbyDecoder_STA31010initializeEv+0xa0>
		 DEBUG_STR( "Initialized" );
		// perform startup routine
		mIdent = mDevice->readRegister( DolbyDecoder_STA310::IDENT );
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685a      	ldr	r2, [r3, #4]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	3314      	adds	r3, #20
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2101      	movs	r1, #1
 8002670:	4610      	mov	r0, r2
 8002672:	4798      	blx	r3
 8002674:	4603      	mov	r3, r0
 8002676:	b2da      	uxtb	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	741a      	strb	r2, [r3, #16]
		mSoftwareVersion = mDevice->readRegister( DolbyDecoder_STA310::SOFTVER );
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685a      	ldr	r2, [r3, #4]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	3314      	adds	r3, #20
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	2171      	movs	r1, #113	; 0x71
 800268c:	4610      	mov	r0, r2
 800268e:	4798      	blx	r3
 8002690:	4603      	mov	r3, r0
 8002692:	b2da      	uxtb	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	745a      	strb	r2, [r3, #17]

		// Enable the AUDIO PLL
		 DEBUG_STR( "Configuring PLL" );

		 configureAudioPLL();
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f000 f987 	bl	80029ac <_ZN19DolbyDecoder_STA31017configureAudioPLLEv>

		 DEBUG_STR( "Configuring the rest" );
		 configureInterrupts();
 800269e:	2100      	movs	r1, #0
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f000 f83b 	bl	800271c <_ZN19DolbyDecoder_STA31019configureInterruptsEb>
		 configureSync();
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 f864 	bl	8002774 <_ZN19DolbyDecoder_STA31013configureSyncEv>
		 configureSPDIF();
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f000 f8eb 	bl	8002888 <_ZN19DolbyDecoder_STA31014configureSPDIFEv>
		 configurePCMOUT();
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 f80c 	bl	80026d0 <_ZN19DolbyDecoder_STA31015configurePCMOUTEv>
		 configureDecoder();
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f000 f895 	bl	80027e8 <_ZN19DolbyDecoder_STA31016configureDecoderEv>
		 configureAC3();
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 f912 	bl	80028e8 <_ZN19DolbyDecoder_STA31012configureAC3Ev>

		 DEBUG_STR( "Muting" );

	}
}
 80026c4:	bf00      	nop
 80026c6:	3708      	adds	r7, #8
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	40011000 	.word	0x40011000

080026d0 <_ZN19DolbyDecoder_STA31015configurePCMOUTEv>:

void
DolbyDecoder_STA310::configurePCMOUT() {
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
	// Set SPDIF configuration register
	mDevice->writeRegister( DolbyDecoder_STA310::SPDIF_CONF, 1 );
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6858      	ldr	r0, [r3, #4]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	3310      	adds	r3, #16
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2201      	movs	r2, #1
 80026e8:	2160      	movs	r1, #96	; 0x60
 80026ea:	4798      	blx	r3

	// Set PCM clock divider to support 256*Fs as 24 bits //
	mDevice->writeRegister( DolbyDecoder_STA310::PCM_DIV, 1 );
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6858      	ldr	r0, [r3, #4]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	3310      	adds	r3, #16
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2201      	movs	r2, #1
 80026fc:	2154      	movs	r1, #84	; 0x54
 80026fe:	4798      	blx	r3
	// BIT24 | RPAD  works with PCM5102
	// BIT24 = 3
	// RPAD = 5
	//mDevice->writeRegister( DolbyDecoder_STA310::PCM_CONF, 35 + 1 );
	// Switch to Sony mode to match DAC at power on
	mDevice->writeRegister( DolbyDecoder_STA310::PCM_CONF, 3 + 8 + 32 );
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6858      	ldr	r0, [r3, #4]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	3310      	adds	r3, #16
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	222b      	movs	r2, #43	; 0x2b
 8002710:	2155      	movs	r1, #85	; 0x55
 8002712:	4798      	blx	r3
}
 8002714:	bf00      	nop
 8002716:	3708      	adds	r7, #8
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <_ZN19DolbyDecoder_STA31019configureInterruptsEb>:

void
DolbyDecoder_STA310::configureInterrupts( bool enableHDR ) {
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	460b      	mov	r3, r1
 8002726:	70fb      	strb	r3, [r7, #3]
	if ( enableHDR ) {
 8002728:	78fb      	ldrb	r3, [r7, #3]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00a      	beq.n	8002744 <_ZN19DolbyDecoder_STA31019configureInterruptsEb+0x28>
		mDevice->writeRegister( DolbyDecoder_STA310::INT1, DolbyDecoder_STA310::ERR | DolbyDecoder_STA310::SFR );
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6858      	ldr	r0, [r3, #4]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	3310      	adds	r3, #16
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	220c      	movs	r2, #12
 800273e:	2107      	movs	r1, #7
 8002740:	4798      	blx	r3
 8002742:	e009      	b.n	8002758 <_ZN19DolbyDecoder_STA31019configureInterruptsEb+0x3c>
	} else {
		mDevice->writeRegister( DolbyDecoder_STA310::INT1, DolbyDecoder_STA310::ERR | DolbyDecoder_STA310::SFR );
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6858      	ldr	r0, [r3, #4]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	3310      	adds	r3, #16
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	220c      	movs	r2, #12
 8002754:	2107      	movs	r1, #7
 8002756:	4798      	blx	r3
	}

	mDevice->writeRegister( DolbyDecoder_STA310::INT2, DolbyDecoder_STA310::RST | DolbyDecoder_STA310::LCK );
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6858      	ldr	r0, [r3, #4]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	3310      	adds	r3, #16
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2230      	movs	r2, #48	; 0x30
 8002768:	2108      	movs	r1, #8
 800276a:	4798      	blx	r3
}
 800276c:	bf00      	nop
 800276e:	3708      	adds	r7, #8
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <_ZN19DolbyDecoder_STA31013configureSyncEv>:

void
DolbyDecoder_STA310::configureSync() {
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
	// Only 1 packet needed to synchronize stream
	mDevice->writeRegister( DolbyDecoder_STA310::PACKET_LOCK, 0 );
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6858      	ldr	r0, [r3, #4]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	3310      	adds	r3, #16
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2200      	movs	r2, #0
 800278c:	214f      	movs	r1, #79	; 0x4f
 800278e:	4798      	blx	r3

	// Only 1 packet for synchronization lock
	mDevice->writeRegister( DolbyDecoder_STA310::SYNC_LOCK, 0 );
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6858      	ldr	r0, [r3, #4]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	3310      	adds	r3, #16
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2200      	movs	r2, #0
 80027a0:	2153      	movs	r1, #83	; 0x53
 80027a2:	4798      	blx	r3

	// Disable only decoding one particular audio stream (i.e decode them all)
	mDevice->writeRegister( DolbyDecoder_STA310::ID_EN, 0 );
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6858      	ldr	r0, [r3, #4]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	3310      	adds	r3, #16
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2200      	movs	r2, #0
 80027b4:	2150      	movs	r1, #80	; 0x50
 80027b6:	4798      	blx	r3

	// Should be ignored if the ID_EN is set to 0, but also set ID of channel to 0
	mDevice->writeRegister( DolbyDecoder_STA310::ID, 0 );
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6858      	ldr	r0, [r3, #4]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	3310      	adds	r3, #16
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2200      	movs	r2, #0
 80027c8:	2151      	movs	r1, #81	; 0x51
 80027ca:	4798      	blx	r3

	// Should be ignored if the ID_EN is set to 0, but also set ID extended to 0
	mDevice->writeRegister( DolbyDecoder_STA310::ID_EXT, 0 );
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6858      	ldr	r0, [r3, #4]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	3310      	adds	r3, #16
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2200      	movs	r2, #0
 80027dc:	2152      	movs	r1, #82	; 0x52
 80027de:	4798      	blx	r3
}
 80027e0:	bf00      	nop
 80027e2:	3708      	adds	r7, #8
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <_ZN19DolbyDecoder_STA31016configureDecoderEv>:

void
DolbyDecoder_STA310::configureDecoder() {
 80027e8:	b5b0      	push	{r4, r5, r7, lr}
 80027ea:	b08a      	sub	sp, #40	; 0x28
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
	// Set for SPDIF data format
	mDevice->writeRegister( DolbyDecoder_STA310::STREAM_SEL, 5 );
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6858      	ldr	r0, [r3, #4]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	3310      	adds	r3, #16
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2205      	movs	r2, #5
 8002800:	214c      	movs	r1, #76	; 0x4c
 8002802:	4798      	blx	r3

	// Set for Dolby Digital
	mDevice->writeRegister( DolbyDecoder_STA310::DECODE_SEL, 0 );
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6858      	ldr	r0, [r3, #4]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	3310      	adds	r3, #16
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2200      	movs	r2, #0
 8002814:	214d      	movs	r1, #77	; 0x4d
 8002816:	4798      	blx	r3

	// Beep
	//mDevice->writeRegister( DolbyDecoder_STA310::DECODE_SEL, 7 );

	if ( mEventHandler ) {
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d02d      	beq.n	800287c <_ZN19DolbyDecoder_STA31016configureDecoderEv+0x94>
		mEventHandler->onAlgorithmChange( std::string( "AC3" ) );
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	68dd      	ldr	r5, [r3, #12]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	330c      	adds	r3, #12
 800282c:	681c      	ldr	r4, [r3, #0]
 800282e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002832:	4618      	mov	r0, r3
 8002834:	f006 ff0d 	bl	8009652 <_ZNSaIcEC1Ev>
 8002838:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800283c:	f107 030c 	add.w	r3, r7, #12
 8002840:	4910      	ldr	r1, [pc, #64]	; (8002884 <_ZN19DolbyDecoder_STA31016configureDecoderEv+0x9c>)
 8002842:	4618      	mov	r0, r3
 8002844:	f006 fff0 	bl	8009828 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002848:	f107 030c 	add.w	r3, r7, #12
 800284c:	4619      	mov	r1, r3
 800284e:	4628      	mov	r0, r5
 8002850:	47a0      	blx	r4
 8002852:	f107 030c 	add.w	r3, r7, #12
 8002856:	4618      	mov	r0, r3
 8002858:	f006 ff71 	bl	800973e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800285c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002860:	4618      	mov	r0, r3
 8002862:	f006 fef7 	bl	8009654 <_ZNSaIcED1Ev>
		mEventHandler->onSamplingRateChange( 48000 );
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	68da      	ldr	r2, [r3, #12]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	3308      	adds	r3, #8
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f64b 3180 	movw	r1, #48000	; 0xbb80
 8002878:	4610      	mov	r0, r2
 800287a:	4798      	blx	r3
	}
}
 800287c:	bf00      	nop
 800287e:	3728      	adds	r7, #40	; 0x28
 8002880:	46bd      	mov	sp, r7
 8002882:	bdb0      	pop	{r4, r5, r7, pc}
 8002884:	0800a49c 	.word	0x0800a49c

08002888 <_ZN19DolbyDecoder_STA31014configureSPDIFEv>:

void
DolbyDecoder_STA310::configureSPDIF() {
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
	// Configure the use of the SPDIF input and serial
	mDevice->writeRegister( DolbyDecoder_STA310::SIN_SETUP, 11 );
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6858      	ldr	r0, [r3, #4]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	3310      	adds	r3, #16
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	220b      	movs	r2, #11
 80028a0:	210c      	movs	r1, #12
 80028a2:	4798      	blx	r3

	// Must be set to 2 for SPDIF
	mDevice->writeRegister( DolbyDecoder_STA310::CAN_SETUP, 0 );
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6858      	ldr	r0, [r3, #4]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	3310      	adds	r3, #16
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2200      	movs	r2, #0
 80028b4:	210d      	movs	r1, #13
 80028b6:	4798      	blx	r3

	// Enable auto detection on the stream
	mDevice->writeRegister( DolbyDecoder_STA310::AUTODETECT_ENA, 1 );
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6858      	ldr	r0, [r3, #4]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	3310      	adds	r3, #16
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2201      	movs	r2, #1
 80028c8:	21e0      	movs	r1, #224	; 0xe0
 80028ca:	4798      	blx	r3

	// Set SPDIF auto-detection sensitivity
	mDevice->writeRegister( DolbyDecoder_STA310::AUTODETECT_SENS, 0 );
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6858      	ldr	r0, [r3, #4]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	3310      	adds	r3, #16
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2200      	movs	r2, #0
 80028dc:	21e1      	movs	r1, #225	; 0xe1
 80028de:	4798      	blx	r3
}
 80028e0:	bf00      	nop
 80028e2:	3708      	adds	r7, #8
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <_ZN19DolbyDecoder_STA31012configureAC3Ev>:

void
DolbyDecoder_STA310::configureAC3() {
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
	// Enable LFE
	mDevice->writeRegister( DolbyDecoder_STA310::AC3_DECODE_LFE, 1 );
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6858      	ldr	r0, [r3, #4]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	3310      	adds	r3, #16
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2201      	movs	r2, #1
 8002900:	2168      	movs	r1, #104	; 0x68
 8002902:	4798      	blx	r3

	// Configure for line out or spreakers
	mDevice->writeRegister( DolbyDecoder_STA310::AC3_COMP_MOD, 3 );
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6858      	ldr	r0, [r3, #4]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	3310      	adds	r3, #16
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2203      	movs	r2, #3
 8002914:	2169      	movs	r1, #105	; 0x69
 8002916:	4798      	blx	r3

	// Full dynamic range for loud sounds
	mDevice->writeRegister( DolbyDecoder_STA310::AC3_HDR, 0 );
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6858      	ldr	r0, [r3, #4]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	3310      	adds	r3, #16
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2200      	movs	r2, #0
 8002928:	216a      	movs	r1, #106	; 0x6a
 800292a:	4798      	blx	r3

	// Don't boost low signals
	mDevice->writeRegister( DolbyDecoder_STA310::AC3_LDR, 0 );
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6858      	ldr	r0, [r3, #4]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	3310      	adds	r3, #16
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2200      	movs	r2, #0
 800293c:	216b      	movs	r1, #107	; 0x6b
 800293e:	4798      	blx	r3

	// Mute audio output if stream errors are detected
	mDevice->writeRegister( DolbyDecoder_STA310::AC3_RPC, 0 );
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6858      	ldr	r0, [r3, #4]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	3310      	adds	r3, #16
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2200      	movs	r2, #0
 8002950:	216c      	movs	r1, #108	; 0x6c
 8002952:	4798      	blx	r3

	// Karaoke aware
	mDevice->writeRegister( DolbyDecoder_STA310::AC3_KARAOKE, 0 );
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6858      	ldr	r0, [r3, #4]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	3310      	adds	r3, #16
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2200      	movs	r2, #0
 8002964:	216d      	movs	r1, #109	; 0x6d
 8002966:	4798      	blx	r3

	// Output dual mode streams as stereo
	mDevice->writeRegister( DolbyDecoder_STA310::AC3_DUALMODE, 0 );
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6858      	ldr	r0, [r3, #4]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	3310      	adds	r3, #16
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2200      	movs	r2, #0
 8002978:	216e      	movs	r1, #110	; 0x6e
 800297a:	4798      	blx	r3

	// Set for a 5.1 downmix - this is useful to change if certain speakers are missing
	mDevice->writeRegister( DolbyDecoder_STA310::AC3_DOWNMIX, 2 );
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6858      	ldr	r0, [r3, #4]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	3310      	adds	r3, #16
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2202      	movs	r2, #2
 800298c:	216f      	movs	r1, #111	; 0x6f
 800298e:	4798      	blx	r3

	// OCFG of 4 + 64, Volume of 65 is right
	mDevice->writeRegister( DolbyDecoder_STA310::OCFG, 2 + 64 );
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6858      	ldr	r0, [r3, #4]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	3310      	adds	r3, #16
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2242      	movs	r2, #66	; 0x42
 80029a0:	2166      	movs	r1, #102	; 0x66
 80029a2:	4798      	blx	r3
	//mDevice->writeRegister( DolbyDecoder_STA310::OCFG, 64 + 2 );
}
 80029a4:	bf00      	nop
 80029a6:	3708      	adds	r7, #8
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <_ZN19DolbyDecoder_STA31017configureAudioPLLEv>:

void
DolbyDecoder_STA310::configureAudioPLL() {
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
	// PLL sounds like shit at 30 on PCM5102
	mDevice->writeRegister( DolbyDecoder_STA310::PLL_CTRL, 22 );
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6858      	ldr	r0, [r3, #4]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	3310      	adds	r3, #16
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2216      	movs	r2, #22
 80029c4:	2112      	movs	r1, #18
 80029c6:	4798      	blx	r3
}
 80029c8:	bf00      	nop
 80029ca:	3708      	adds	r7, #8
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <_ZN19DolbyDecoder_STA3105resetEv>:

void
DolbyDecoder_STA310::reset() {
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
	softReset();
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f000 f836 	bl	8002a4a <_ZN19DolbyDecoder_STA3109softResetEv>

	enableAudioPLL();
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f7ff fe0d 	bl	80025fe <_ZN19DolbyDecoder_STA31014enableAudioPLLEv>

	mDevice->writeRegister( DolbyDecoder_STA310::DECODE_SEL, 0 );
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6858      	ldr	r0, [r3, #4]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	3310      	adds	r3, #16
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2200      	movs	r2, #0
 80029f4:	214d      	movs	r1, #77	; 0x4d
 80029f6:	4798      	blx	r3
	mDevice->writeRegister( DolbyDecoder_STA310::STREAM_SEL, 5 );
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6858      	ldr	r0, [r3, #4]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	3310      	adds	r3, #16
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2205      	movs	r2, #5
 8002a08:	214c      	movs	r1, #76	; 0x4c
 8002a0a:	4798      	blx	r3

	configureAC3();
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f7ff ff6b 	bl	80028e8 <_ZN19DolbyDecoder_STA31012configureAC3Ev>

	// this may cause issues
	configureInterrupts();
 8002a12:	2100      	movs	r1, #0
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f7ff fe81 	bl	800271c <_ZN19DolbyDecoder_STA31019configureInterruptsEb>

	mute( false );
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	3310      	adds	r3, #16
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2100      	movs	r1, #0
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	4798      	blx	r3
	play();
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	3314      	adds	r3, #20
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2101      	movs	r1, #1
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	4798      	blx	r3
	run();
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	3318      	adds	r3, #24
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	4798      	blx	r3
}
 8002a42:	bf00      	nop
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <_ZN19DolbyDecoder_STA3109softResetEv>:

void
DolbyDecoder_STA310::softReset() {
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b086      	sub	sp, #24
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
	mInitialized = false;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	721a      	strb	r2, [r3, #8]
	mRunning = false;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	729a      	strb	r2, [r3, #10]

	// Perform soft mute on incoming framers
	mDevice->writeRegister( DolbyDecoder_STA310::SOFT_MUTE, 1 );
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6858      	ldr	r0, [r3, #4]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	3310      	adds	r3, #16
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	2173      	movs	r1, #115	; 0x73
 8002a70:	4798      	blx	r3

	// Perform soft reset
	mDevice->writeRegister( DolbyDecoder_STA310::SOFT_RESET, 1 );
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6858      	ldr	r0, [r3, #4]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	3310      	adds	r3, #16
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2201      	movs	r2, #1
 8002a82:	2110      	movs	r1, #16
 8002a84:	4798      	blx	r3

	// Write magical breakpoint register
	mDevice->writeRegister( DolbyDecoder_STA310::BREAKPOINT, 8 );
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6858      	ldr	r0, [r3, #4]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	3310      	adds	r3, #16
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2208      	movs	r2, #8
 8002a96:	212b      	movs	r1, #43	; 0x2b
 8002a98:	4798      	blx	r3

	// Write clock command
	mDevice->writeRegister( DolbyDecoder_STA310::CLOCK_CMD, 0 );
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6858      	ldr	r0, [r3, #4]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	3310      	adds	r3, #16
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	213a      	movs	r1, #58	; 0x3a
 8002aac:	4798      	blx	r3

	int attempts = 0;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	617b      	str	r3, [r7, #20]
	while ( attempts < 20 && !mInitialized ) {
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	2b13      	cmp	r3, #19
 8002ab6:	dc27      	bgt.n	8002b08 <_ZN19DolbyDecoder_STA3109softResetEv+0xbe>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	7a1b      	ldrb	r3, [r3, #8]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d123      	bne.n	8002b08 <_ZN19DolbyDecoder_STA3109softResetEv+0xbe>
		// We need to check for the device to say it's ready
		I2C_RESULT result = mDevice->readRegister( 0xff );
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685a      	ldr	r2, [r3, #4]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	3314      	adds	r3, #20
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	21ff      	movs	r1, #255	; 0xff
 8002ad0:	4610      	mov	r0, r2
 8002ad2:	4798      	blx	r3
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	827b      	strh	r3, [r7, #18]
		if ( result == 1 ) {
 8002ad8:	8a7b      	ldrh	r3, [r7, #18]
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d10d      	bne.n	8002afa <_ZN19DolbyDecoder_STA3109softResetEv+0xb0>
			// Device is ready
			mInitialized = true;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	721a      	strb	r2, [r3, #8]

			mute( true );
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	3310      	adds	r3, #16
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2101      	movs	r1, #1
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	4798      	blx	r3

			enableAudioPLL();
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f7ff fd83 	bl	80025fe <_ZN19DolbyDecoder_STA31014enableAudioPLLEv>
 8002af8:	e7db      	b.n	8002ab2 <_ZN19DolbyDecoder_STA3109softResetEv+0x68>
		} else {
			attempts++;
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	3301      	adds	r3, #1
 8002afe:	617b      	str	r3, [r7, #20]
			// if it's not ready, let's wait 5ms and try again
			osDelay( 250 );
 8002b00:	20fa      	movs	r0, #250	; 0xfa
 8002b02:	f003 fd1b 	bl	800653c <osDelay>
	while ( attempts < 20 && !mInitialized ) {
 8002b06:	e7d4      	b.n	8002ab2 <_ZN19DolbyDecoder_STA3109softResetEv+0x68>
		}
	}

	if ( !mInitialized ) {
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	7a1b      	ldrb	r3, [r3, #8]
 8002b0c:	f083 0301 	eor.w	r3, r3, #1
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <_ZN19DolbyDecoder_STA3109softResetEv+0xd0>
		// this is an error condition we should deal with
		int i;
		i = 10;
 8002b16:	230a      	movs	r3, #10
 8002b18:	60fb      	str	r3, [r7, #12]
	}
}
 8002b1a:	bf00      	nop
 8002b1c:	3718      	adds	r7, #24
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
	...

08002b24 <_ZN19DolbyDecoder_STA31017checkForInterruptEv>:

void
DolbyDecoder_STA310::checkForInterrupt() {
 8002b24:	b5b0      	push	{r4, r5, r7, lr}
 8002b26:	b09e      	sub	sp, #120	; 0x78
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
	if ( !HAL_GPIO_ReadPin ( DECODER_IRQ_GPIO_Port, DECODER_IRQ_Pin ) ) {
 8002b2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002b30:	488c      	ldr	r0, [pc, #560]	; (8002d64 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x240>)
 8002b32:	f002 faa3 	bl	800507c <HAL_GPIO_ReadPin>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	bf0c      	ite	eq
 8002b3c:	2301      	moveq	r3, #1
 8002b3e:	2300      	movne	r3, #0
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	f000 81f0 	beq.w	8002f28 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x404>
		// IRQ
		I2C_RESULT int1 = mDevice->readRegister( DolbyDecoder_STA310::INT1_RES );
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685a      	ldr	r2, [r3, #4]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	3314      	adds	r3, #20
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2109      	movs	r1, #9
 8002b58:	4610      	mov	r0, r2
 8002b5a:	4798      	blx	r3
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
		I2C_RESULT int2 = mDevice->readRegister( DolbyDecoder_STA310::INT2_RES );
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685a      	ldr	r2, [r3, #4]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	3314      	adds	r3, #20
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	210a      	movs	r1, #10
 8002b72:	4610      	mov	r0, r2
 8002b74:	4798      	blx	r3
 8002b76:	4603      	mov	r3, r0
 8002b78:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
		if ( int1 & ERR ) {
 8002b7c:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002b80:	f003 0304 	and.w	r3, r3, #4
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d00e      	beq.n	8002ba6 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x82>
			// SYN
			I2C_RESULT errorReg = mDevice->readRegister( DolbyDecoder_STA310::ERROR );
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685a      	ldr	r2, [r3, #4]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	3314      	adds	r3, #20
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	210f      	movs	r1, #15
 8002b98:	4610      	mov	r0, r2
 8002b9a:	4798      	blx	r3
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
			int i;
			i = 2;
 8002ba2:	2302      	movs	r3, #2
 8002ba4:	66fb      	str	r3, [r7, #108]	; 0x6c
			if ( errorReg == 0 ) {

			}
		}
		if ( int1 & HDR ) {
 8002ba6:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d019      	beq.n	8002be6 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0xc2>
			 I2C_RESULT head3 = mDevice->readRegister( DolbyDecoder_STA310::HEAD_3 );
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685a      	ldr	r2, [r3, #4]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	3314      	adds	r3, #20
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2143      	movs	r1, #67	; 0x43
 8002bc2:	4610      	mov	r0, r2
 8002bc4:	4798      	blx	r3
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
			 I2C_RESULT head4 = mDevice->readRegister( DolbyDecoder_STA310::HEAD_4 );
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685a      	ldr	r2, [r3, #4]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	3314      	adds	r3, #20
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2142      	movs	r1, #66	; 0x42
 8002bdc:	4610      	mov	r0, r2
 8002bde:	4798      	blx	r3
 8002be0:	4603      	mov	r3, r0
 8002be2:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
		}
		if ( int1 & SFR ) {
 8002be6:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002bea:	f003 0308 	and.w	r3, r3, #8
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00c      	beq.n	8002c0c <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0xe8>
			I2C_RESULT freq = mDevice->readRegister( DolbyDecoder_STA310::FREQ );
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685a      	ldr	r2, [r3, #4]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	3314      	adds	r3, #20
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2105      	movs	r1, #5
 8002c02:	4610      	mov	r0, r2
 8002c04:	4798      	blx	r3
 8002c06:	4603      	mov	r3, r0
 8002c08:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
		}

		if ( ( int2 & LCK ) > 0 || ( int2 & RST ) > 0 ) {
 8002c0c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8002c10:	f003 0320 	and.w	r3, r3, #32
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	dc06      	bgt.n	8002c26 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x102>
 8002c18:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8002c1c:	f003 0310 	and.w	r3, r3, #16
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	f340 8181 	ble.w	8002f28 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x404>
			 mRunning = false;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	729a      	strb	r2, [r3, #10]

			 I2C_RESULT decodeSel = mDevice->readRegister( DolbyDecoder_STA310::DECODE_SEL );
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685a      	ldr	r2, [r3, #4]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	3314      	adds	r3, #20
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	214d      	movs	r1, #77	; 0x4d
 8002c3c:	4610      	mov	r0, r2
 8002c3e:	4798      	blx	r3
 8002c40:	4603      	mov	r3, r0
 8002c42:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
			 I2C_RESULT streamSel = mDevice->readRegister( DolbyDecoder_STA310::STREAM_SEL );
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685a      	ldr	r2, [r3, #4]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	3314      	adds	r3, #20
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	214c      	movs	r1, #76	; 0x4c
 8002c56:	4610      	mov	r0, r2
 8002c58:	4798      	blx	r3
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
			 I2C_RESULT head3 = mDevice->readRegister( DolbyDecoder_STA310::HEAD_3 );
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685a      	ldr	r2, [r3, #4]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	3314      	adds	r3, #20
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2143      	movs	r1, #67	; 0x43
 8002c70:	4610      	mov	r0, r2
 8002c72:	4798      	blx	r3
 8002c74:	4603      	mov	r3, r0
 8002c76:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
			 I2C_RESULT freq = mDevice->readRegister( 0x05 );
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685a      	ldr	r2, [r3, #4]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	3314      	adds	r3, #20
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2105      	movs	r1, #5
 8002c8a:	4610      	mov	r0, r2
 8002c8c:	4798      	blx	r3
 8002c8e:	4603      	mov	r3, r0
 8002c90:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

			 if ( mEventHandler ) {
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d074      	beq.n	8002d86 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x262>
				 switch ( freq ) {
 8002c9c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002ca0:	2b10      	cmp	r3, #16
 8002ca2:	d870      	bhi.n	8002d86 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x262>
 8002ca4:	a201      	add	r2, pc, #4	; (adr r2, 8002cac <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x188>)
 8002ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002caa:	bf00      	nop
 8002cac:	08002cf1 	.word	0x08002cf1
 8002cb0:	08002d09 	.word	0x08002d09
 8002cb4:	08002d21 	.word	0x08002d21
 8002cb8:	08002d87 	.word	0x08002d87
 8002cbc:	08002d39 	.word	0x08002d39
 8002cc0:	08002d4f 	.word	0x08002d4f
 8002cc4:	08002d87 	.word	0x08002d87
 8002cc8:	08002d87 	.word	0x08002d87
 8002ccc:	08002d87 	.word	0x08002d87
 8002cd0:	08002d87 	.word	0x08002d87
 8002cd4:	08002d87 	.word	0x08002d87
 8002cd8:	08002d87 	.word	0x08002d87
 8002cdc:	08002d87 	.word	0x08002d87
 8002ce0:	08002d87 	.word	0x08002d87
 8002ce4:	08002d87 	.word	0x08002d87
 8002ce8:	08002d87 	.word	0x08002d87
 8002cec:	08002d71 	.word	0x08002d71
				 	 case 0:
				 		 mEventHandler->onSamplingRateChange( 48000 );
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	68da      	ldr	r2, [r3, #12]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	3308      	adds	r3, #8
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f64b 3180 	movw	r1, #48000	; 0xbb80
 8002d02:	4610      	mov	r0, r2
 8002d04:	4798      	blx	r3
				 		 break;
 8002d06:	e03e      	b.n	8002d86 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x262>
				 	 case 1:
				 		 mEventHandler->onSamplingRateChange( 44100 );
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	68da      	ldr	r2, [r3, #12]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	3308      	adds	r3, #8
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f64a 4144 	movw	r1, #44100	; 0xac44
 8002d1a:	4610      	mov	r0, r2
 8002d1c:	4798      	blx	r3
				 		 break;
 8002d1e:	e032      	b.n	8002d86 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x262>
				 	 case 2:
				 		 mEventHandler->onSamplingRateChange( 32000 );
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	68da      	ldr	r2, [r3, #12]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	3308      	adds	r3, #8
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f44f 41fa 	mov.w	r1, #32000	; 0x7d00
 8002d32:	4610      	mov	r0, r2
 8002d34:	4798      	blx	r3
				 		 break;
 8002d36:	e026      	b.n	8002d86 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x262>
				 	 case 4:
				 		 mEventHandler->onSamplingRateChange( 96000 );
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	68da      	ldr	r2, [r3, #12]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	3308      	adds	r3, #8
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4908      	ldr	r1, [pc, #32]	; (8002d68 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x244>)
 8002d48:	4610      	mov	r0, r2
 8002d4a:	4798      	blx	r3
				 		 break;
 8002d4c:	e01b      	b.n	8002d86 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x262>
				 	 case 5:
				 		 mEventHandler->onSamplingRateChange( 88200 );
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	68da      	ldr	r2, [r3, #12]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	3308      	adds	r3, #8
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4903      	ldr	r1, [pc, #12]	; (8002d6c <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x248>)
 8002d5e:	4610      	mov	r0, r2
 8002d60:	4798      	blx	r3
				 		 break;
 8002d62:	e010      	b.n	8002d86 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x262>
 8002d64:	40011000 	.word	0x40011000
 8002d68:	00017700 	.word	0x00017700
 8002d6c:	00015888 	.word	0x00015888
				 	 case 16:
				 		 mEventHandler->onSamplingRateChange( 192000 );
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	68da      	ldr	r2, [r3, #12]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	3308      	adds	r3, #8
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	496c      	ldr	r1, [pc, #432]	; (8002f30 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x40c>)
 8002d80:	4610      	mov	r0, r2
 8002d82:	4798      	blx	r3
				 		 break;
 8002d84:	bf00      	nop
				 }
			}

			softReset();
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f7ff fe5f 	bl	8002a4a <_ZN19DolbyDecoder_STA3109softResetEv>

			if ( !mInitialized ) {

			}

			configureInterrupts();
 8002d8c:	2100      	movs	r1, #0
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f7ff fcc4 	bl	800271c <_ZN19DolbyDecoder_STA31019configureInterruptsEb>

			mDevice->writeRegister( DolbyDecoder_STA310::DECODE_SEL, decodeSel );
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6858      	ldr	r0, [r3, #4]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	3310      	adds	r3, #16
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8002da6:	b2d2      	uxtb	r2, r2
 8002da8:	214d      	movs	r1, #77	; 0x4d
 8002daa:	4798      	blx	r3
			mDevice->writeRegister( DolbyDecoder_STA310::STREAM_SEL, streamSel );
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6858      	ldr	r0, [r3, #4]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	3310      	adds	r3, #16
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 8002dbe:	b2d2      	uxtb	r2, r2
 8002dc0:	214c      	movs	r1, #76	; 0x4c
 8002dc2:	4798      	blx	r3

			enableAudioPLL();
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f7ff fc1a 	bl	80025fe <_ZN19DolbyDecoder_STA31014enableAudioPLLEv>

			if ( streamSel == 5 && decodeSel == 0 ) {
 8002dca:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8002dce:	2b05      	cmp	r3, #5
 8002dd0:	d131      	bne.n	8002e36 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x312>
 8002dd2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d12d      	bne.n	8002e36 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x312>
				// this is a dolby digital stream
				if ( mEventHandler ) {
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d025      	beq.n	8002e2e <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x30a>
					mEventHandler->onAlgorithmChange( std::string( "AC3" ) );
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	68dd      	ldr	r5, [r3, #12]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	330c      	adds	r3, #12
 8002dee:	681c      	ldr	r4, [r3, #0]
 8002df0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002df4:	4618      	mov	r0, r3
 8002df6:	f006 fc2c 	bl	8009652 <_ZNSaIcEC1Ev>
 8002dfa:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002dfe:	f107 030c 	add.w	r3, r7, #12
 8002e02:	494c      	ldr	r1, [pc, #304]	; (8002f34 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x410>)
 8002e04:	4618      	mov	r0, r3
 8002e06:	f006 fd0f 	bl	8009828 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002e0a:	f107 030c 	add.w	r3, r7, #12
 8002e0e:	4619      	mov	r1, r3
 8002e10:	4628      	mov	r0, r5
 8002e12:	47a0      	blx	r4
 8002e14:	f107 030c 	add.w	r3, r7, #12
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f006 fc90 	bl	800973e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002e1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e22:	4618      	mov	r0, r3
 8002e24:	f006 fc16 	bl	8009654 <_ZNSaIcED1Ev>
					configureAC3();
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f7ff fd5d 	bl	80028e8 <_ZN19DolbyDecoder_STA31012configureAC3Ev>
				}

				configureAC3();
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f7ff fd5a 	bl	80028e8 <_ZN19DolbyDecoder_STA31012configureAC3Ev>
 8002e34:	e064      	b.n	8002f00 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x3dc>
			} else if ( streamSel == 3 && decodeSel == 6 ) {
 8002e36:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8002e3a:	2b03      	cmp	r3, #3
 8002e3c:	d131      	bne.n	8002ea2 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x37e>
 8002e3e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002e42:	2b06      	cmp	r3, #6
 8002e44:	d12d      	bne.n	8002ea2 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x37e>
				// This is a DTS stream
				if ( mEventHandler ) {
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d025      	beq.n	8002e9a <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x376>
					mEventHandler->onAlgorithmChange( std::string( "DTS" ) );
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	68dd      	ldr	r5, [r3, #12]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	330c      	adds	r3, #12
 8002e5a:	681c      	ldr	r4, [r3, #0]
 8002e5c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002e60:	4618      	mov	r0, r3
 8002e62:	f006 fbf6 	bl	8009652 <_ZNSaIcEC1Ev>
 8002e66:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002e6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e6e:	4932      	ldr	r1, [pc, #200]	; (8002f38 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x414>)
 8002e70:	4618      	mov	r0, r3
 8002e72:	f006 fcd9 	bl	8009828 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002e76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	4628      	mov	r0, r5
 8002e7e:	47a0      	blx	r4
 8002e80:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e84:	4618      	mov	r0, r3
 8002e86:	f006 fc5a 	bl	800973e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002e8a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f006 fbe0 	bl	8009654 <_ZNSaIcED1Ev>
					configureAC3();
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f7ff fd27 	bl	80028e8 <_ZN19DolbyDecoder_STA31012configureAC3Ev>
				}

				configureAC3();
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f7ff fd24 	bl	80028e8 <_ZN19DolbyDecoder_STA31012configureAC3Ev>
 8002ea0:	e02e      	b.n	8002f00 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x3dc>
			} else if ( streamSel == 3 && decodeSel == 3 ) {
 8002ea2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8002ea6:	2b03      	cmp	r3, #3
 8002ea8:	d12a      	bne.n	8002f00 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x3dc>
 8002eaa:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002eae:	2b03      	cmp	r3, #3
 8002eb0:	d126      	bne.n	8002f00 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x3dc>
				// This is PCM
				if ( mEventHandler ) {
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d022      	beq.n	8002f00 <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x3dc>
					mEventHandler->onAlgorithmChange( std::string( "PCM" ) );
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	68dd      	ldr	r5, [r3, #12]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	330c      	adds	r3, #12
 8002ec6:	681c      	ldr	r4, [r3, #0]
 8002ec8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f006 fbc0 	bl	8009652 <_ZNSaIcEC1Ev>
 8002ed2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002ed6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002eda:	4918      	ldr	r1, [pc, #96]	; (8002f3c <_ZN19DolbyDecoder_STA31017checkForInterruptEv+0x418>)
 8002edc:	4618      	mov	r0, r3
 8002ede:	f006 fca3 	bl	8009828 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002ee2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	4628      	mov	r0, r5
 8002eea:	47a0      	blx	r4
 8002eec:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f006 fc24 	bl	800973e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002ef6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002efa:	4618      	mov	r0, r3
 8002efc:	f006 fbaa 	bl	8009654 <_ZNSaIcED1Ev>
				}
			}

			mute( false );
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	3310      	adds	r3, #16
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2100      	movs	r1, #0
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	4798      	blx	r3
			play();
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	3314      	adds	r3, #20
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2101      	movs	r1, #1
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	4798      	blx	r3
			run();
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	3318      	adds	r3, #24
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	4798      	blx	r3
		}
	}
}
 8002f28:	bf00      	nop
 8002f2a:	3778      	adds	r7, #120	; 0x78
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bdb0      	pop	{r4, r5, r7, pc}
 8002f30:	0002ee00 	.word	0x0002ee00
 8002f34:	0800a49c 	.word	0x0800a49c
 8002f38:	0800a4a0 	.word	0x0800a4a0
 8002f3c:	0800a4a4 	.word	0x0800a4a4

08002f40 <_ZN19DolbyDecoder_STA31011checkFormatEv>:

void
DolbyDecoder_STA310::checkFormat() {
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b086      	sub	sp, #24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
	 I2C_RESULT decodeSel = mDevice->readRegister( DolbyDecoder_STA310::DECODE_SEL );
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685a      	ldr	r2, [r3, #4]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	3314      	adds	r3, #20
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	214d      	movs	r1, #77	; 0x4d
 8002f58:	4610      	mov	r0, r2
 8002f5a:	4798      	blx	r3
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	82fb      	strh	r3, [r7, #22]
		 I2C_RESULT streamSel = mDevice->readRegister( DolbyDecoder_STA310::STREAM_SEL );
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685a      	ldr	r2, [r3, #4]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	3314      	adds	r3, #20
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	214c      	movs	r1, #76	; 0x4c
 8002f70:	4610      	mov	r0, r2
 8002f72:	4798      	blx	r3
 8002f74:	4603      	mov	r3, r0
 8002f76:	82bb      	strh	r3, [r7, #20]
		 I2C_RESULT head3 = mDevice->readRegister( DolbyDecoder_STA310::HEAD_3 );
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685a      	ldr	r2, [r3, #4]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	3314      	adds	r3, #20
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2143      	movs	r1, #67	; 0x43
 8002f88:	4610      	mov	r0, r2
 8002f8a:	4798      	blx	r3
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	827b      	strh	r3, [r7, #18]
	 I2C_RESULT streamSel = mDevice->readRegister( DolbyDecoder_STA310::STREAM_SEL );
	 I2C_RESULT head3 = mDevice->readRegister( DolbyDecoder_STA310::HEAD_3 );
	 I2C_RESULT freq = mDevice->readRegister( 0x05 );
	 I2C_RESULT spdif_status = mDevice->readRegister( 0x61 );
	 */
	 I2C_RESULT run = mDevice->readRegister( DolbyDecoder_STA310::RUN );
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685a      	ldr	r2, [r3, #4]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	3314      	adds	r3, #20
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2172      	movs	r1, #114	; 0x72
 8002fa0:	4610      	mov	r0, r2
 8002fa2:	4798      	blx	r3
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	823b      	strh	r3, [r7, #16]
	 if ( run ) {
 8002fa8:	8a3b      	ldrh	r3, [r7, #16]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d005      	beq.n	8002fba <_ZN19DolbyDecoder_STA31011checkFormatEv+0x7a>
		 HAL_GPIO_WritePin( LED_DOLBY_GPIO_Port, LED_DOLBY_Pin, GPIO_PIN_SET  );
 8002fae:	2201      	movs	r2, #1
 8002fb0:	2102      	movs	r1, #2
 8002fb2:	4820      	ldr	r0, [pc, #128]	; (8003034 <_ZN19DolbyDecoder_STA31011checkFormatEv+0xf4>)
 8002fb4:	f002 f879 	bl	80050aa <HAL_GPIO_WritePin>
 8002fb8:	e004      	b.n	8002fc4 <_ZN19DolbyDecoder_STA31011checkFormatEv+0x84>
	 } else {
		 HAL_GPIO_WritePin( LED_DOLBY_GPIO_Port, LED_DOLBY_Pin, GPIO_PIN_RESET  );
 8002fba:	2200      	movs	r2, #0
 8002fbc:	2102      	movs	r1, #2
 8002fbe:	481d      	ldr	r0, [pc, #116]	; (8003034 <_ZN19DolbyDecoder_STA31011checkFormatEv+0xf4>)
 8002fc0:	f002 f873 	bl	80050aa <HAL_GPIO_WritePin>
	 }

	 I2C_RESULT mute = mDevice->readRegister( DolbyDecoder_STA310::MUTE );
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685a      	ldr	r2, [r3, #4]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	3314      	adds	r3, #20
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	2114      	movs	r1, #20
 8002fd4:	4610      	mov	r0, r2
 8002fd6:	4798      	blx	r3
 8002fd8:	4603      	mov	r3, r0
 8002fda:	81fb      	strh	r3, [r7, #14]
	 if ( mute ) {
 8002fdc:	89fb      	ldrh	r3, [r7, #14]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d005      	beq.n	8002fee <_ZN19DolbyDecoder_STA31011checkFormatEv+0xae>
		 HAL_GPIO_WritePin( LED_MUTE_GPIO_Port, LED_MUTE_Pin, GPIO_PIN_SET  );
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	2108      	movs	r1, #8
 8002fe6:	4814      	ldr	r0, [pc, #80]	; (8003038 <_ZN19DolbyDecoder_STA31011checkFormatEv+0xf8>)
 8002fe8:	f002 f85f 	bl	80050aa <HAL_GPIO_WritePin>
 8002fec:	e004      	b.n	8002ff8 <_ZN19DolbyDecoder_STA31011checkFormatEv+0xb8>
	 } else {
		 HAL_GPIO_WritePin( LED_MUTE_GPIO_Port, LED_MUTE_Pin, GPIO_PIN_RESET  );
 8002fee:	2200      	movs	r2, #0
 8002ff0:	2108      	movs	r1, #8
 8002ff2:	4811      	ldr	r0, [pc, #68]	; (8003038 <_ZN19DolbyDecoder_STA31011checkFormatEv+0xf8>)
 8002ff4:	f002 f859 	bl	80050aa <HAL_GPIO_WritePin>
	 }

	 I2C_RESULT play = mDevice->readRegister( DolbyDecoder_STA310::PLAY );
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685a      	ldr	r2, [r3, #4]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	3314      	adds	r3, #20
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2113      	movs	r1, #19
 8003008:	4610      	mov	r0, r2
 800300a:	4798      	blx	r3
 800300c:	4603      	mov	r3, r0
 800300e:	81bb      	strh	r3, [r7, #12]
	 if ( play ) {
 8003010:	89bb      	ldrh	r3, [r7, #12]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d005      	beq.n	8003022 <_ZN19DolbyDecoder_STA31011checkFormatEv+0xe2>
	 		 HAL_GPIO_WritePin( LED_PCM_GPIO_Port, LED_PCM_Pin, GPIO_PIN_SET  );
 8003016:	2201      	movs	r2, #1
 8003018:	2101      	movs	r1, #1
 800301a:	4806      	ldr	r0, [pc, #24]	; (8003034 <_ZN19DolbyDecoder_STA31011checkFormatEv+0xf4>)
 800301c:	f002 f845 	bl	80050aa <HAL_GPIO_WritePin>
	 } else {
	 		 HAL_GPIO_WritePin( LED_PCM_GPIO_Port, LED_PCM_Pin, GPIO_PIN_RESET  );
	 }

}
 8003020:	e004      	b.n	800302c <_ZN19DolbyDecoder_STA31011checkFormatEv+0xec>
	 		 HAL_GPIO_WritePin( LED_PCM_GPIO_Port, LED_PCM_Pin, GPIO_PIN_RESET  );
 8003022:	2200      	movs	r2, #0
 8003024:	2101      	movs	r1, #1
 8003026:	4803      	ldr	r0, [pc, #12]	; (8003034 <_ZN19DolbyDecoder_STA31011checkFormatEv+0xf4>)
 8003028:	f002 f83f 	bl	80050aa <HAL_GPIO_WritePin>
}
 800302c:	bf00      	nop
 800302e:	3718      	adds	r7, #24
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	40010800 	.word	0x40010800
 8003038:	40011000 	.word	0x40011000

0800303c <_ZNK7Encoder12getLastValueEv>:
public:
	Encoder();
	virtual ~Encoder();

	virtual ENCODER_VALUE checkEncoder( uint32_t value );
	virtual ENCODER_VALUE getLastValue() const { return mLastTimerValue; }
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	4618      	mov	r0, r3
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	bc80      	pop	{r7}
 8003050:	4770      	bx	lr
	...

08003054 <_ZN7EncoderC1Ev>:
 *      Author: duane
 */

#include "Encoder.h"

Encoder::Encoder() : mLastTimerValue( 0 ) {
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	4a05      	ldr	r2, [pc, #20]	; (8003074 <_ZN7EncoderC1Ev+0x20>)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	601a      	str	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	605a      	str	r2, [r3, #4]
	// TODO Auto-generated constructor stub

}
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4618      	mov	r0, r3
 800306c:	370c      	adds	r7, #12
 800306e:	46bd      	mov	sp, r7
 8003070:	bc80      	pop	{r7}
 8003072:	4770      	bx	lr
 8003074:	0800a684 	.word	0x0800a684

08003078 <_ZN7EncoderD1Ev>:

Encoder::~Encoder() {
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	4a04      	ldr	r2, [pc, #16]	; (8003094 <_ZN7EncoderD1Ev+0x1c>)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4618      	mov	r0, r3
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	bc80      	pop	{r7}
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	0800a684 	.word	0x0800a684

08003098 <_ZN7EncoderD0Ev>:
Encoder::~Encoder() {
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
}
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f7ff ffe9 	bl	8003078 <_ZN7EncoderD1Ev>
 80030a6:	2108      	movs	r1, #8
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f006 fabc 	bl	8009626 <_ZdlPvj>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4618      	mov	r0, r3
 80030b2:	3708      	adds	r7, #8
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <_ZN7Encoder12checkEncoderEm>:

ENCODER_VALUE
Encoder::checkEncoder( uint32_t value ) {
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
	if ( mLastTimerValue < 50 && value > 65500 ) {
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	2b31      	cmp	r3, #49	; 0x31
 80030c8:	d809      	bhi.n	80030de <_ZN7Encoder12checkEncoderEm+0x26>
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d904      	bls.n	80030de <_ZN7Encoder12checkEncoderEm+0x26>
		// the value rolled backwards from 0 up to 64000, so this is a nudge down
		mLastTimerValue = value;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	683a      	ldr	r2, [r7, #0]
 80030d8:	605a      	str	r2, [r3, #4]
		return ENCODER_DECREASE;
 80030da:	2301      	movs	r3, #1
 80030dc:	e02e      	b.n	800313c <_ZN7Encoder12checkEncoderEm+0x84>
	} else if ( mLastTimerValue > 65500 && value < 50 ) {
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d907      	bls.n	80030fa <_ZN7Encoder12checkEncoderEm+0x42>
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	2b31      	cmp	r3, #49	; 0x31
 80030ee:	d804      	bhi.n	80030fa <_ZN7Encoder12checkEncoderEm+0x42>
		// the value rolled over the top, back to 0, so this is an increase
		mLastTimerValue = value;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	683a      	ldr	r2, [r7, #0]
 80030f4:	605a      	str	r2, [r3, #4]
		return ENCODER_INCREASE;
 80030f6:	2300      	movs	r3, #0
 80030f8:	e020      	b.n	800313c <_ZN7Encoder12checkEncoderEm+0x84>
	} else if ( value > mLastTimerValue && ( value - mLastTimerValue ) > 3 ) {
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	683a      	ldr	r2, [r7, #0]
 8003100:	429a      	cmp	r2, r3
 8003102:	d90a      	bls.n	800311a <_ZN7Encoder12checkEncoderEm+0x62>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	683a      	ldr	r2, [r7, #0]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	2b03      	cmp	r3, #3
 800310e:	d904      	bls.n	800311a <_ZN7Encoder12checkEncoderEm+0x62>
		mLastTimerValue = value;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	683a      	ldr	r2, [r7, #0]
 8003114:	605a      	str	r2, [r3, #4]
		// increase
		return ENCODER_INCREASE;
 8003116:	2300      	movs	r3, #0
 8003118:	e010      	b.n	800313c <_ZN7Encoder12checkEncoderEm+0x84>
	} else if ( value < mLastTimerValue && ( mLastTimerValue - value ) > 3  ) {
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	683a      	ldr	r2, [r7, #0]
 8003120:	429a      	cmp	r2, r3
 8003122:	d20a      	bcs.n	800313a <_ZN7Encoder12checkEncoderEm+0x82>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685a      	ldr	r2, [r3, #4]
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	2b03      	cmp	r3, #3
 800312e:	d904      	bls.n	800313a <_ZN7Encoder12checkEncoderEm+0x82>
		mLastTimerValue = value;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	683a      	ldr	r2, [r7, #0]
 8003134:	605a      	str	r2, [r3, #4]
		return ENCODER_DECREASE;
 8003136:	2301      	movs	r3, #1
 8003138:	e000      	b.n	800313c <_ZN7Encoder12checkEncoderEm+0x84>
	} else {
		return ENCODER_NOCHANGE;
 800313a:	2302      	movs	r3, #2
	}
}
 800313c:	4618      	mov	r0, r3
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	bc80      	pop	{r7}
 8003144:	4770      	bx	lr
	...

08003148 <_ZN10I2C_DeviceC1EP3I2Ch>:
	I2C *mBus;
	I2C_ADDR mAddr;
public:
	I2C_Device( I2C *bus ) : mBus( bus ), mAddr( 0 ) {}
	I2C_Device( I2C_ADDR addr );
	I2C_Device( I2C *bus, I2C_ADDR addr ) : mBus( bus), mAddr( addr ) {}
 8003148:	b480      	push	{r7}
 800314a:	b085      	sub	sp, #20
 800314c:	af00      	add	r7, sp, #0
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	4613      	mov	r3, r2
 8003154:	71fb      	strb	r3, [r7, #7]
 8003156:	4a07      	ldr	r2, [pc, #28]	; (8003174 <_ZN10I2C_DeviceC1EP3I2Ch+0x2c>)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	601a      	str	r2, [r3, #0]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	68ba      	ldr	r2, [r7, #8]
 8003160:	605a      	str	r2, [r3, #4]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	79fa      	ldrb	r2, [r7, #7]
 8003166:	721a      	strb	r2, [r3, #8]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	4618      	mov	r0, r3
 800316c:	3714      	adds	r7, #20
 800316e:	46bd      	mov	sp, r7
 8003170:	bc80      	pop	{r7}
 8003172:	4770      	bx	lr
 8003174:	0800a6e4 	.word	0x0800a6e4

08003178 <_ZN3I2CC1Ev>:
#include <memory>

#define I2C_ERROR -1
#define I2C_MAX_DELAY 	1000

I2C::I2C() {
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	4a04      	ldr	r2, [pc, #16]	; (8003194 <_ZN3I2CC1Ev+0x1c>)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4618      	mov	r0, r3
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	bc80      	pop	{r7}
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	0800a69c 	.word	0x0800a69c

08003198 <_ZN3I2CD1Ev>:

I2C::~I2C() {
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	4a04      	ldr	r2, [pc, #16]	; (80031b4 <_ZN3I2CD1Ev+0x1c>)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4618      	mov	r0, r3
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bc80      	pop	{r7}
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	0800a69c 	.word	0x0800a69c

080031b8 <_ZN3I2C10makeDeviceEh>:

I2C_Device *
I2C::makeDevice( I2C_ADDR addr ) {
 80031b8:	b590      	push	{r4, r7, lr}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	460b      	mov	r3, r1
 80031c2:	70fb      	strb	r3, [r7, #3]
	return new I2C_Device( this, addr );
 80031c4:	200c      	movs	r0, #12
 80031c6:	f006 fa30 	bl	800962a <_Znwj>
 80031ca:	4603      	mov	r3, r0
 80031cc:	461c      	mov	r4, r3
 80031ce:	78fb      	ldrb	r3, [r7, #3]
 80031d0:	461a      	mov	r2, r3
 80031d2:	6879      	ldr	r1, [r7, #4]
 80031d4:	4620      	mov	r0, r4
 80031d6:	f7ff ffb7 	bl	8003148 <_ZN10I2C_DeviceC1EP3I2Ch>
 80031da:	4623      	mov	r3, r4
}
 80031dc:	4618      	mov	r0, r3
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd90      	pop	{r4, r7, pc}

080031e4 <_ZL12DWT_Delay_usm>:

#include "stm32f1xx_hal.h"
extern uint32_t DWT_Delay_Init(void);

__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 80031ec:	4b0f      	ldr	r3, [pc, #60]	; (800322c <_ZL12DWT_Delay_usm+0x48>)
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80031f2:	f002 fb3f 	bl	8005874 <HAL_RCC_GetHCLKFreq>
 80031f6:	4603      	mov	r3, r0
 80031f8:	4a0d      	ldr	r2, [pc, #52]	; (8003230 <_ZL12DWT_Delay_usm+0x4c>)
 80031fa:	fba2 2303 	umull	r2, r3, r2, r3
 80031fe:	0c9b      	lsrs	r3, r3, #18
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	fb02 f303 	mul.w	r3, r2, r3
 8003206:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8003208:	4b08      	ldr	r3, [pc, #32]	; (800322c <_ZL12DWT_Delay_usm+0x48>)
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	1ad2      	subs	r2, r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	429a      	cmp	r2, r3
 8003214:	bf34      	ite	cc
 8003216:	2301      	movcc	r3, #1
 8003218:	2300      	movcs	r3, #0
 800321a:	b2db      	uxtb	r3, r3
 800321c:	2b00      	cmp	r3, #0
 800321e:	d000      	beq.n	8003222 <_ZL12DWT_Delay_usm+0x3e>
 8003220:	e7f2      	b.n	8003208 <_ZL12DWT_Delay_usm+0x24>
}
 8003222:	bf00      	nop
 8003224:	3710      	adds	r7, #16
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	e0001000 	.word	0xe0001000
 8003230:	431bde83 	.word	0x431bde83

08003234 <_ZN11I2C_BitbangC1Emh>:

#define SCL(x) ( x > 0 ? HAL_GPIO_WritePin( SCL_GPIO_Port, SCL_Pin, GPIO_PIN_SET ) : HAL_GPIO_WritePin( SCL_GPIO_Port, SCL_Pin, GPIO_PIN_RESET ) )
#define SDA(x) ( x > 0 ? HAL_GPIO_WritePin( SDA_GPIO_Port, SDA_Pin, GPIO_PIN_SET ) : HAL_GPIO_WritePin( SDA_GPIO_Port, SDA_Pin, GPIO_PIN_RESET ) )
#define I2C_DELAY	 DWT_Delay_us( 6 )

I2C_Bitbang::I2C_Bitbang( uint32_t processorSpeed, uint8_t busSpeed ) : mProcessorSpeed( processorSpeed ), mBusSpeed( busSpeed ), mDelayCycles( 0 ) {
 8003234:	b590      	push	{r4, r7, lr}
 8003236:	b089      	sub	sp, #36	; 0x24
 8003238:	af00      	add	r7, sp, #0
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	4613      	mov	r3, r2
 8003240:	71fb      	strb	r3, [r7, #7]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	4618      	mov	r0, r3
 8003246:	f7ff ff97 	bl	8003178 <_ZN3I2CC1Ev>
 800324a:	4a17      	ldr	r2, [pc, #92]	; (80032a8 <_ZN11I2C_BitbangC1Emh+0x74>)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	601a      	str	r2, [r3, #0]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	68ba      	ldr	r2, [r7, #8]
 8003254:	605a      	str	r2, [r3, #4]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	79fa      	ldrb	r2, [r7, #7]
 800325a:	721a      	strb	r2, [r3, #8]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	815a      	strh	r2, [r3, #10]
	// TODO Auto-generated destructor stub
	switch( mBusSpeed ) {
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	7a1b      	ldrb	r3, [r3, #8]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d10b      	bne.n	8003282 <_ZN11I2C_BitbangC1Emh+0x4e>
		case BUS100:
			mDelayCycles = (processorSpeed/100000)*4;
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	095b      	lsrs	r3, r3, #5
 800326e:	4a0f      	ldr	r2, [pc, #60]	; (80032ac <_ZN11I2C_BitbangC1Emh+0x78>)
 8003270:	fba2 2303 	umull	r2, r3, r2, r3
 8003274:	09db      	lsrs	r3, r3, #7
 8003276:	b29b      	uxth	r3, r3
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	b29a      	uxth	r2, r3
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	815a      	strh	r2, [r3, #10]
			break;
 8003280:	bf00      	nop
	}

	//DWT_Delay_Init();


	const osMutexAttr_t Thread_Mutex_attr = {
 8003282:	4b0b      	ldr	r3, [pc, #44]	; (80032b0 <_ZN11I2C_BitbangC1Emh+0x7c>)
 8003284:	f107 0410 	add.w	r4, r7, #16
 8003288:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800328a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  NULL,                                     // memory for control block
	  0U                                        // size for control block
	};


	mMutex = osMutexNew( &Thread_Mutex_attr );
 800328e:	f107 0310 	add.w	r3, r7, #16
 8003292:	4618      	mov	r0, r3
 8003294:	f003 f980 	bl	8006598 <osMutexNew>
 8003298:	4602      	mov	r2, r0
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	60da      	str	r2, [r3, #12]
}
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	4618      	mov	r0, r3
 80032a2:	3724      	adds	r7, #36	; 0x24
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd90      	pop	{r4, r7, pc}
 80032a8:	0800a6c0 	.word	0x0800a6c0
 80032ac:	0a7c5ac5 	.word	0x0a7c5ac5
 80032b0:	0800a4b8 	.word	0x0800a4b8

080032b4 <_ZN11I2C_BitbangD1Ev>:

I2C_Bitbang::~I2C_Bitbang() {
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	4a05      	ldr	r2, [pc, #20]	; (80032d4 <_ZN11I2C_BitbangD1Ev+0x20>)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	601a      	str	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7ff ff67 	bl	8003198 <_ZN3I2CD1Ev>

}
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4618      	mov	r0, r3
 80032ce:	3708      	adds	r7, #8
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	0800a6c0 	.word	0x0800a6c0

080032d8 <_ZN11I2C_BitbangD0Ev>:
I2C_Bitbang::~I2C_Bitbang() {
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
}
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f7ff ffe7 	bl	80032b4 <_ZN11I2C_BitbangD1Ev>
 80032e6:	2110      	movs	r1, #16
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f006 f99c 	bl	8009626 <_ZdlPvj>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4618      	mov	r0, r3
 80032f2:	3708      	adds	r7, #8
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <_ZN11I2C_Bitbang5startEv>:

void
I2C_Bitbang::start() {
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
	SDA(1);
 8003300:	2201      	movs	r2, #1
 8003302:	2180      	movs	r1, #128	; 0x80
 8003304:	480f      	ldr	r0, [pc, #60]	; (8003344 <_ZN11I2C_Bitbang5startEv+0x4c>)
 8003306:	f001 fed0 	bl	80050aa <HAL_GPIO_WritePin>
	SCL(1);
 800330a:	2201      	movs	r2, #1
 800330c:	2140      	movs	r1, #64	; 0x40
 800330e:	480d      	ldr	r0, [pc, #52]	; (8003344 <_ZN11I2C_Bitbang5startEv+0x4c>)
 8003310:	f001 fecb 	bl	80050aa <HAL_GPIO_WritePin>
	I2C_DELAY;
 8003314:	2006      	movs	r0, #6
 8003316:	f7ff ff65 	bl	80031e4 <_ZL12DWT_Delay_usm>
	SDA(0);
 800331a:	2200      	movs	r2, #0
 800331c:	2180      	movs	r1, #128	; 0x80
 800331e:	4809      	ldr	r0, [pc, #36]	; (8003344 <_ZN11I2C_Bitbang5startEv+0x4c>)
 8003320:	f001 fec3 	bl	80050aa <HAL_GPIO_WritePin>
	I2C_DELAY;
 8003324:	2006      	movs	r0, #6
 8003326:	f7ff ff5d 	bl	80031e4 <_ZL12DWT_Delay_usm>
	SCL(0);
 800332a:	2200      	movs	r2, #0
 800332c:	2140      	movs	r1, #64	; 0x40
 800332e:	4805      	ldr	r0, [pc, #20]	; (8003344 <_ZN11I2C_Bitbang5startEv+0x4c>)
 8003330:	f001 febb 	bl	80050aa <HAL_GPIO_WritePin>
	I2C_DELAY;
 8003334:	2006      	movs	r0, #6
 8003336:	f7ff ff55 	bl	80031e4 <_ZL12DWT_Delay_usm>
}
 800333a:	bf00      	nop
 800333c:	3708      	adds	r7, #8
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	40010c00 	.word	0x40010c00

08003348 <_ZN11I2C_Bitbang4stopEv>:

void
I2C_Bitbang::stop() {
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
	SDA(0);
 8003350:	2200      	movs	r2, #0
 8003352:	2180      	movs	r1, #128	; 0x80
 8003354:	480c      	ldr	r0, [pc, #48]	; (8003388 <_ZN11I2C_Bitbang4stopEv+0x40>)
 8003356:	f001 fea8 	bl	80050aa <HAL_GPIO_WritePin>
	I2C_DELAY;
 800335a:	2006      	movs	r0, #6
 800335c:	f7ff ff42 	bl	80031e4 <_ZL12DWT_Delay_usm>
	SCL(1);
 8003360:	2201      	movs	r2, #1
 8003362:	2140      	movs	r1, #64	; 0x40
 8003364:	4808      	ldr	r0, [pc, #32]	; (8003388 <_ZN11I2C_Bitbang4stopEv+0x40>)
 8003366:	f001 fea0 	bl	80050aa <HAL_GPIO_WritePin>
	I2C_DELAY;
 800336a:	2006      	movs	r0, #6
 800336c:	f7ff ff3a 	bl	80031e4 <_ZL12DWT_Delay_usm>
	SDA(1);
 8003370:	2201      	movs	r2, #1
 8003372:	2180      	movs	r1, #128	; 0x80
 8003374:	4804      	ldr	r0, [pc, #16]	; (8003388 <_ZN11I2C_Bitbang4stopEv+0x40>)
 8003376:	f001 fe98 	bl	80050aa <HAL_GPIO_WritePin>
	I2C_DELAY;
 800337a:	2006      	movs	r0, #6
 800337c:	f7ff ff32 	bl	80031e4 <_ZL12DWT_Delay_usm>
}
 8003380:	bf00      	nop
 8003382:	3708      	adds	r7, #8
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	40010c00 	.word	0x40010c00

0800338c <_ZN11I2C_Bitbang8writeBitEh>:

void
I2C_Bitbang::writeBit( uint8_t bit ) {
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	460b      	mov	r3, r1
 8003396:	70fb      	strb	r3, [r7, #3]
	bit ? SDA(1) : SDA(0);
 8003398:	78fb      	ldrb	r3, [r7, #3]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d005      	beq.n	80033aa <_ZN11I2C_Bitbang8writeBitEh+0x1e>
 800339e:	2201      	movs	r2, #1
 80033a0:	2180      	movs	r1, #128	; 0x80
 80033a2:	480e      	ldr	r0, [pc, #56]	; (80033dc <_ZN11I2C_Bitbang8writeBitEh+0x50>)
 80033a4:	f001 fe81 	bl	80050aa <HAL_GPIO_WritePin>
 80033a8:	e004      	b.n	80033b4 <_ZN11I2C_Bitbang8writeBitEh+0x28>
 80033aa:	2200      	movs	r2, #0
 80033ac:	2180      	movs	r1, #128	; 0x80
 80033ae:	480b      	ldr	r0, [pc, #44]	; (80033dc <_ZN11I2C_Bitbang8writeBitEh+0x50>)
 80033b0:	f001 fe7b 	bl	80050aa <HAL_GPIO_WritePin>
	I2C_DELAY;
 80033b4:	2006      	movs	r0, #6
 80033b6:	f7ff ff15 	bl	80031e4 <_ZL12DWT_Delay_usm>
	SCL(1);
 80033ba:	2201      	movs	r2, #1
 80033bc:	2140      	movs	r1, #64	; 0x40
 80033be:	4807      	ldr	r0, [pc, #28]	; (80033dc <_ZN11I2C_Bitbang8writeBitEh+0x50>)
 80033c0:	f001 fe73 	bl	80050aa <HAL_GPIO_WritePin>
	I2C_DELAY;
 80033c4:	2006      	movs	r0, #6
 80033c6:	f7ff ff0d 	bl	80031e4 <_ZL12DWT_Delay_usm>
	SCL(0);
 80033ca:	2200      	movs	r2, #0
 80033cc:	2140      	movs	r1, #64	; 0x40
 80033ce:	4803      	ldr	r0, [pc, #12]	; (80033dc <_ZN11I2C_Bitbang8writeBitEh+0x50>)
 80033d0:	f001 fe6b 	bl	80050aa <HAL_GPIO_WritePin>
}
 80033d4:	bf00      	nop
 80033d6:	3708      	adds	r7, #8
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	40010c00 	.word	0x40010c00

080033e0 <_ZN11I2C_Bitbang7readBitEv>:

uint8_t
I2C_Bitbang::readBit() {
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
	SDA(1);
 80033e8:	2201      	movs	r2, #1
 80033ea:	2180      	movs	r1, #128	; 0x80
 80033ec:	480f      	ldr	r0, [pc, #60]	; (800342c <_ZN11I2C_Bitbang7readBitEv+0x4c>)
 80033ee:	f001 fe5c 	bl	80050aa <HAL_GPIO_WritePin>
	I2C_DELAY;
 80033f2:	2006      	movs	r0, #6
 80033f4:	f7ff fef6 	bl	80031e4 <_ZL12DWT_Delay_usm>
	SCL(1);
 80033f8:	2201      	movs	r2, #1
 80033fa:	2140      	movs	r1, #64	; 0x40
 80033fc:	480b      	ldr	r0, [pc, #44]	; (800342c <_ZN11I2C_Bitbang7readBitEv+0x4c>)
 80033fe:	f001 fe54 	bl	80050aa <HAL_GPIO_WritePin>
	I2C_DELAY;
 8003402:	2006      	movs	r0, #6
 8003404:	f7ff feee 	bl	80031e4 <_ZL12DWT_Delay_usm>
	int bit = HAL_GPIO_ReadPin( SDA_GPIO_Port, SDA_Pin );
 8003408:	2180      	movs	r1, #128	; 0x80
 800340a:	4808      	ldr	r0, [pc, #32]	; (800342c <_ZN11I2C_Bitbang7readBitEv+0x4c>)
 800340c:	f001 fe36 	bl	800507c <HAL_GPIO_ReadPin>
 8003410:	4603      	mov	r3, r0
 8003412:	60fb      	str	r3, [r7, #12]
	SCL(0);
 8003414:	2200      	movs	r2, #0
 8003416:	2140      	movs	r1, #64	; 0x40
 8003418:	4804      	ldr	r0, [pc, #16]	; (800342c <_ZN11I2C_Bitbang7readBitEv+0x4c>)
 800341a:	f001 fe46 	bl	80050aa <HAL_GPIO_WritePin>

	return bit;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	b2db      	uxtb	r3, r3
}
 8003422:	4618      	mov	r0, r3
 8003424:	3710      	adds	r7, #16
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	40010c00 	.word	0x40010c00

08003430 <_ZN11I2C_Bitbang8readByteEb>:

uint8_t
I2C_Bitbang::readByte( bool ack ) {
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	460b      	mov	r3, r1
 800343a:	70fb      	strb	r3, [r7, #3]
	uint8_t ret = 0;
 800343c:	2300      	movs	r3, #0
 800343e:	73fb      	strb	r3, [r7, #15]
	uint8_t curBit = 0x80;
 8003440:	2380      	movs	r3, #128	; 0x80
 8003442:	73bb      	strb	r3, [r7, #14]
	SDA(1);
 8003444:	2201      	movs	r2, #1
 8003446:	2180      	movs	r1, #128	; 0x80
 8003448:	482f      	ldr	r0, [pc, #188]	; (8003508 <_ZN11I2C_Bitbang8readByteEb+0xd8>)
 800344a:	f001 fe2e 	bl	80050aa <HAL_GPIO_WritePin>
	I2C_DELAY;
 800344e:	2006      	movs	r0, #6
 8003450:	f7ff fec8 	bl	80031e4 <_ZL12DWT_Delay_usm>

	for ( volatile int i = 0 ; i < 8 ; i++ ) {
 8003454:	2300      	movs	r3, #0
 8003456:	60bb      	str	r3, [r7, #8]
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	2b07      	cmp	r3, #7
 800345c:	bfd4      	ite	le
 800345e:	2301      	movle	r3, #1
 8003460:	2300      	movgt	r3, #0
 8003462:	b2db      	uxtb	r3, r3
 8003464:	2b00      	cmp	r3, #0
 8003466:	d023      	beq.n	80034b0 <_ZN11I2C_Bitbang8readByteEb+0x80>
		SCL(1);
 8003468:	2201      	movs	r2, #1
 800346a:	2140      	movs	r1, #64	; 0x40
 800346c:	4826      	ldr	r0, [pc, #152]	; (8003508 <_ZN11I2C_Bitbang8readByteEb+0xd8>)
 800346e:	f001 fe1c 	bl	80050aa <HAL_GPIO_WritePin>
		I2C_DELAY;
 8003472:	2006      	movs	r0, #6
 8003474:	f7ff feb6 	bl	80031e4 <_ZL12DWT_Delay_usm>
		uint8_t bit = HAL_GPIO_ReadPin( SDA_GPIO_Port, SDA_Pin );
 8003478:	2180      	movs	r1, #128	; 0x80
 800347a:	4823      	ldr	r0, [pc, #140]	; (8003508 <_ZN11I2C_Bitbang8readByteEb+0xd8>)
 800347c:	f001 fdfe 	bl	800507c <HAL_GPIO_ReadPin>
 8003480:	4603      	mov	r3, r0
 8003482:	737b      	strb	r3, [r7, #13]
		if ( bit ) {
 8003484:	7b7b      	ldrb	r3, [r7, #13]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d003      	beq.n	8003492 <_ZN11I2C_Bitbang8readByteEb+0x62>
			ret = ret | curBit;
 800348a:	7bfa      	ldrb	r2, [r7, #15]
 800348c:	7bbb      	ldrb	r3, [r7, #14]
 800348e:	4313      	orrs	r3, r2
 8003490:	73fb      	strb	r3, [r7, #15]
		}
		SCL(0);
 8003492:	2200      	movs	r2, #0
 8003494:	2140      	movs	r1, #64	; 0x40
 8003496:	481c      	ldr	r0, [pc, #112]	; (8003508 <_ZN11I2C_Bitbang8readByteEb+0xd8>)
 8003498:	f001 fe07 	bl	80050aa <HAL_GPIO_WritePin>
		I2C_DELAY;
 800349c:	2006      	movs	r0, #6
 800349e:	f7ff fea1 	bl	80031e4 <_ZL12DWT_Delay_usm>

		curBit = curBit >> 1;
 80034a2:	7bbb      	ldrb	r3, [r7, #14]
 80034a4:	085b      	lsrs	r3, r3, #1
 80034a6:	73bb      	strb	r3, [r7, #14]
	for ( volatile int i = 0 ; i < 8 ; i++ ) {
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	3301      	adds	r3, #1
 80034ac:	60bb      	str	r3, [r7, #8]
 80034ae:	e7d3      	b.n	8003458 <_ZN11I2C_Bitbang8readByteEb+0x28>
	}

	ack ? SDA(0) : SDA(1);
 80034b0:	78fb      	ldrb	r3, [r7, #3]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d005      	beq.n	80034c2 <_ZN11I2C_Bitbang8readByteEb+0x92>
 80034b6:	2200      	movs	r2, #0
 80034b8:	2180      	movs	r1, #128	; 0x80
 80034ba:	4813      	ldr	r0, [pc, #76]	; (8003508 <_ZN11I2C_Bitbang8readByteEb+0xd8>)
 80034bc:	f001 fdf5 	bl	80050aa <HAL_GPIO_WritePin>
 80034c0:	e004      	b.n	80034cc <_ZN11I2C_Bitbang8readByteEb+0x9c>
 80034c2:	2201      	movs	r2, #1
 80034c4:	2180      	movs	r1, #128	; 0x80
 80034c6:	4810      	ldr	r0, [pc, #64]	; (8003508 <_ZN11I2C_Bitbang8readByteEb+0xd8>)
 80034c8:	f001 fdef 	bl	80050aa <HAL_GPIO_WritePin>
	I2C_DELAY;
 80034cc:	2006      	movs	r0, #6
 80034ce:	f7ff fe89 	bl	80031e4 <_ZL12DWT_Delay_usm>
	SCL(1);
 80034d2:	2201      	movs	r2, #1
 80034d4:	2140      	movs	r1, #64	; 0x40
 80034d6:	480c      	ldr	r0, [pc, #48]	; (8003508 <_ZN11I2C_Bitbang8readByteEb+0xd8>)
 80034d8:	f001 fde7 	bl	80050aa <HAL_GPIO_WritePin>
	I2C_DELAY;
 80034dc:	2006      	movs	r0, #6
 80034de:	f7ff fe81 	bl	80031e4 <_ZL12DWT_Delay_usm>
	SCL(0);
 80034e2:	2200      	movs	r2, #0
 80034e4:	2140      	movs	r1, #64	; 0x40
 80034e6:	4808      	ldr	r0, [pc, #32]	; (8003508 <_ZN11I2C_Bitbang8readByteEb+0xd8>)
 80034e8:	f001 fddf 	bl	80050aa <HAL_GPIO_WritePin>
	SDA(1);
 80034ec:	2201      	movs	r2, #1
 80034ee:	2180      	movs	r1, #128	; 0x80
 80034f0:	4805      	ldr	r0, [pc, #20]	; (8003508 <_ZN11I2C_Bitbang8readByteEb+0xd8>)
 80034f2:	f001 fdda 	bl	80050aa <HAL_GPIO_WritePin>
	I2C_DELAY;
 80034f6:	2006      	movs	r0, #6
 80034f8:	f7ff fe74 	bl	80031e4 <_ZL12DWT_Delay_usm>

	return ret;
 80034fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3710      	adds	r7, #16
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	40010c00 	.word	0x40010c00

0800350c <_ZN11I2C_Bitbang9writeByteEh>:

bool
I2C_Bitbang::writeByte( uint8_t data ) {
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	460b      	mov	r3, r1
 8003516:	70fb      	strb	r3, [r7, #3]
	for ( volatile int i = 0 ; i < 8; i++ ) {
 8003518:	2300      	movs	r3, #0
 800351a:	60bb      	str	r3, [r7, #8]
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	2b07      	cmp	r3, #7
 8003520:	bfd4      	ite	le
 8003522:	2301      	movle	r3, #1
 8003524:	2300      	movgt	r3, #0
 8003526:	b2db      	uxtb	r3, r3
 8003528:	2b00      	cmp	r3, #0
 800352a:	d013      	beq.n	8003554 <_ZN11I2C_Bitbang9writeByteEh+0x48>

		if ( data & 0x80 ) {
 800352c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003530:	2b00      	cmp	r3, #0
 8003532:	da04      	bge.n	800353e <_ZN11I2C_Bitbang9writeByteEh+0x32>
			writeBit( 1 );
 8003534:	2101      	movs	r1, #1
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f7ff ff28 	bl	800338c <_ZN11I2C_Bitbang8writeBitEh>
 800353c:	e003      	b.n	8003546 <_ZN11I2C_Bitbang9writeByteEh+0x3a>
		} else {
			writeBit( 0) ;
 800353e:	2100      	movs	r1, #0
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f7ff ff23 	bl	800338c <_ZN11I2C_Bitbang8writeBitEh>
		}
		data = data << 1;
 8003546:	78fb      	ldrb	r3, [r7, #3]
 8003548:	005b      	lsls	r3, r3, #1
 800354a:	70fb      	strb	r3, [r7, #3]
	for ( volatile int i = 0 ; i < 8; i++ ) {
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	3301      	adds	r3, #1
 8003550:	60bb      	str	r3, [r7, #8]
 8003552:	e7e3      	b.n	800351c <_ZN11I2C_Bitbang9writeByteEh+0x10>
	}

	int ACK = readBit();
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f7ff ff43 	bl	80033e0 <_ZN11I2C_Bitbang7readBitEv>
 800355a:	4603      	mov	r3, r0
 800355c:	60fb      	str	r3, [r7, #12]
	return ( ACK == 0 );
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2b00      	cmp	r3, #0
 8003562:	bf0c      	ite	eq
 8003564:	2301      	moveq	r3, #1
 8003566:	2300      	movne	r3, #0
 8003568:	b2db      	uxtb	r3, r3
}
 800356a:	4618      	mov	r0, r3
 800356c:	3710      	adds	r7, #16
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}

08003572 <_ZN11I2C_Bitbang13writeRegisterEhhh>:

I2C_RESULT
I2C_Bitbang::writeRegister( I2C_ADDR addr, uint8_t reg, uint8_t value ) {
 8003572:	b580      	push	{r7, lr}
 8003574:	b084      	sub	sp, #16
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
 800357a:	4608      	mov	r0, r1
 800357c:	4611      	mov	r1, r2
 800357e:	461a      	mov	r2, r3
 8003580:	4603      	mov	r3, r0
 8003582:	70fb      	strb	r3, [r7, #3]
 8003584:	460b      	mov	r3, r1
 8003586:	70bb      	strb	r3, [r7, #2]
 8003588:	4613      	mov	r3, r2
 800358a:	707b      	strb	r3, [r7, #1]
	I2C_RESULT result = I2C_OK;
 800358c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003590:	81fb      	strh	r3, [r7, #14]
	osMutexAcquire( mMutex, 0 );
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	2100      	movs	r1, #0
 8003598:	4618      	mov	r0, r3
 800359a:	f003 f897 	bl	80066cc <osMutexAcquire>

	if ( isBusy() ) {
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 f8d6 	bl	8003750 <_ZN11I2C_Bitbang6isBusyEv>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d007      	beq.n	80035ba <_ZN11I2C_Bitbang13writeRegisterEhhh+0x48>
		osMutexRelease( mMutex );
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f003 f8ea 	bl	8006788 <osMutexRelease>
		return I2C_BUS_BUSY;
 80035b4:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 80035b8:	e023      	b.n	8003602 <_ZN11I2C_Bitbang13writeRegisterEhhh+0x90>
	}

	start();
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f7ff fe9c 	bl	80032f8 <_ZN11I2C_Bitbang5startEv>
	bool addressValid = writeByte( addr );
 80035c0:	78fb      	ldrb	r3, [r7, #3]
 80035c2:	4619      	mov	r1, r3
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f7ff ffa1 	bl	800350c <_ZN11I2C_Bitbang9writeByteEh>
 80035ca:	4603      	mov	r3, r0
 80035cc:	737b      	strb	r3, [r7, #13]
	if ( addressValid ) {
 80035ce:	7b7b      	ldrb	r3, [r7, #13]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d00a      	beq.n	80035ea <_ZN11I2C_Bitbang13writeRegisterEhhh+0x78>
		writeByte( reg );
 80035d4:	78bb      	ldrb	r3, [r7, #2]
 80035d6:	4619      	mov	r1, r3
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f7ff ff97 	bl	800350c <_ZN11I2C_Bitbang9writeByteEh>
		writeByte( value );
 80035de:	787b      	ldrb	r3, [r7, #1]
 80035e0:	4619      	mov	r1, r3
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f7ff ff92 	bl	800350c <_ZN11I2C_Bitbang9writeByteEh>
 80035e8:	e002      	b.n	80035f0 <_ZN11I2C_Bitbang13writeRegisterEhhh+0x7e>
	} else {
		result = I2C_INVALID_ADDR;
 80035ea:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80035ee:	81fb      	strh	r3, [r7, #14]
	}
	stop();
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f7ff fea9 	bl	8003348 <_ZN11I2C_Bitbang4stopEv>

	osMutexRelease( mMutex );
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	4618      	mov	r0, r3
 80035fc:	f003 f8c4 	bl	8006788 <osMutexRelease>

	return result;
 8003600:	89fb      	ldrh	r3, [r7, #14]
}
 8003602:	4618      	mov	r0, r3
 8003604:	3710      	adds	r7, #16
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}

0800360a <_ZN11I2C_Bitbang12readRegisterEhh>:

I2C_RESULT
I2C_Bitbang::readRegister( I2C_ADDR addr, uint8_t reg ) {
 800360a:	b580      	push	{r7, lr}
 800360c:	b084      	sub	sp, #16
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
 8003612:	460b      	mov	r3, r1
 8003614:	70fb      	strb	r3, [r7, #3]
 8003616:	4613      	mov	r3, r2
 8003618:	70bb      	strb	r3, [r7, #2]
	I2C_RESULT result = I2C_OK;
 800361a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800361e:	81fb      	strh	r3, [r7, #14]

	osMutexAcquire( mMutex, 0 );
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	2100      	movs	r1, #0
 8003626:	4618      	mov	r0, r3
 8003628:	f003 f850 	bl	80066cc <osMutexAcquire>

	if ( isBusy() ) {
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f000 f88f 	bl	8003750 <_ZN11I2C_Bitbang6isBusyEv>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d007      	beq.n	8003648 <_ZN11I2C_Bitbang12readRegisterEhh+0x3e>
		osMutexRelease( mMutex );
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	4618      	mov	r0, r3
 800363e:	f003 f8a3 	bl	8006788 <osMutexRelease>
		return I2C_BUS_BUSY;
 8003642:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8003646:	e02f      	b.n	80036a8 <_ZN11I2C_Bitbang12readRegisterEhh+0x9e>
	}

	start();
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f7ff fe55 	bl	80032f8 <_ZN11I2C_Bitbang5startEv>
	bool addressValid = writeByte( addr );
 800364e:	78fb      	ldrb	r3, [r7, #3]
 8003650:	4619      	mov	r1, r3
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f7ff ff5a 	bl	800350c <_ZN11I2C_Bitbang9writeByteEh>
 8003658:	4603      	mov	r3, r0
 800365a:	737b      	strb	r3, [r7, #13]
	if ( addressValid ) {
 800365c:	7b7b      	ldrb	r3, [r7, #13]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d016      	beq.n	8003690 <_ZN11I2C_Bitbang12readRegisterEhh+0x86>
		writeByte( reg );
 8003662:	78bb      	ldrb	r3, [r7, #2]
 8003664:	4619      	mov	r1, r3
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f7ff ff50 	bl	800350c <_ZN11I2C_Bitbang9writeByteEh>
		start();
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f7ff fe43 	bl	80032f8 <_ZN11I2C_Bitbang5startEv>
		writeByte( addr | 1 );
 8003672:	78fb      	ldrb	r3, [r7, #3]
 8003674:	f043 0301 	orr.w	r3, r3, #1
 8003678:	b2db      	uxtb	r3, r3
 800367a:	4619      	mov	r1, r3
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f7ff ff45 	bl	800350c <_ZN11I2C_Bitbang9writeByteEh>

		result = (I2C_RESULT)readByte( false );
 8003682:	2100      	movs	r1, #0
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f7ff fed3 	bl	8003430 <_ZN11I2C_Bitbang8readByteEb>
 800368a:	4603      	mov	r3, r0
 800368c:	81fb      	strh	r3, [r7, #14]
 800368e:	e002      	b.n	8003696 <_ZN11I2C_Bitbang12readRegisterEhh+0x8c>
	} else {
		result = I2C_INVALID_ADDR;
 8003690:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8003694:	81fb      	strh	r3, [r7, #14]
	}

	stop();
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f7ff fe56 	bl	8003348 <_ZN11I2C_Bitbang4stopEv>

	osMutexRelease( mMutex );
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	4618      	mov	r0, r3
 80036a2:	f003 f871 	bl	8006788 <osMutexRelease>

	return result;
 80036a6:	89fb      	ldrh	r3, [r7, #14]
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3710      	adds	r7, #16
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <_ZN11I2C_Bitbang9writeDataEhPhh>:

I2C_RESULT
I2C_Bitbang::writeData( I2C_ADDR addr, uint8_t *data, uint8_t size ) {
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b088      	sub	sp, #32
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	607a      	str	r2, [r7, #4]
 80036ba:	461a      	mov	r2, r3
 80036bc:	460b      	mov	r3, r1
 80036be:	72fb      	strb	r3, [r7, #11]
 80036c0:	4613      	mov	r3, r2
 80036c2:	72bb      	strb	r3, [r7, #10]
	I2C_RESULT result = I2C_OK;
 80036c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80036c8:	83fb      	strh	r3, [r7, #30]

	osMutexAcquire( mMutex, 0 );
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	2100      	movs	r1, #0
 80036d0:	4618      	mov	r0, r3
 80036d2:	f002 fffb 	bl	80066cc <osMutexAcquire>

	if ( isBusy() ) {
 80036d6:	68f8      	ldr	r0, [r7, #12]
 80036d8:	f000 f83a 	bl	8003750 <_ZN11I2C_Bitbang6isBusyEv>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d007      	beq.n	80036f2 <_ZN11I2C_Bitbang9writeDataEhPhh+0x42>
		osMutexRelease( mMutex );
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f003 f84e 	bl	8006788 <osMutexRelease>
		return I2C_BUS_BUSY;
 80036ec:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 80036f0:	e02a      	b.n	8003748 <_ZN11I2C_Bitbang9writeDataEhPhh+0x98>
	}

	start();
 80036f2:	68f8      	ldr	r0, [r7, #12]
 80036f4:	f7ff fe00 	bl	80032f8 <_ZN11I2C_Bitbang5startEv>
	bool addressValid = writeByte( addr );
 80036f8:	7afb      	ldrb	r3, [r7, #11]
 80036fa:	4619      	mov	r1, r3
 80036fc:	68f8      	ldr	r0, [r7, #12]
 80036fe:	f7ff ff05 	bl	800350c <_ZN11I2C_Bitbang9writeByteEh>
 8003702:	4603      	mov	r3, r0
 8003704:	75fb      	strb	r3, [r7, #23]
	if ( addressValid ) {
 8003706:	7dfb      	ldrb	r3, [r7, #23]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d011      	beq.n	8003730 <_ZN11I2C_Bitbang9writeDataEhPhh+0x80>
		for ( int i = 0 ; i < size; i++ ) {
 800370c:	2300      	movs	r3, #0
 800370e:	61bb      	str	r3, [r7, #24]
 8003710:	7abb      	ldrb	r3, [r7, #10]
 8003712:	69ba      	ldr	r2, [r7, #24]
 8003714:	429a      	cmp	r2, r3
 8003716:	da0e      	bge.n	8003736 <_ZN11I2C_Bitbang9writeDataEhPhh+0x86>
			writeByte( data[i] );
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	4413      	add	r3, r2
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	4619      	mov	r1, r3
 8003722:	68f8      	ldr	r0, [r7, #12]
 8003724:	f7ff fef2 	bl	800350c <_ZN11I2C_Bitbang9writeByteEh>
		for ( int i = 0 ; i < size; i++ ) {
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	3301      	adds	r3, #1
 800372c:	61bb      	str	r3, [r7, #24]
 800372e:	e7ef      	b.n	8003710 <_ZN11I2C_Bitbang9writeDataEhPhh+0x60>
		}
	} else {
		result = I2C_INVALID_ADDR;
 8003730:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8003734:	83fb      	strh	r3, [r7, #30]
	}
	stop();
 8003736:	68f8      	ldr	r0, [r7, #12]
 8003738:	f7ff fe06 	bl	8003348 <_ZN11I2C_Bitbang4stopEv>

	osMutexRelease( mMutex );
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	4618      	mov	r0, r3
 8003742:	f003 f821 	bl	8006788 <osMutexRelease>

	return result;
 8003746:	8bfb      	ldrh	r3, [r7, #30]
}
 8003748:	4618      	mov	r0, r3
 800374a:	3720      	adds	r7, #32
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <_ZN11I2C_Bitbang6isBusyEv>:

bool
I2C_Bitbang::isBusy() {
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
	int busyAttempts = 0;
 8003758:	2300      	movs	r3, #0
 800375a:	60fb      	str	r3, [r7, #12]

	while ( true ) {
		osMutexAcquire( mMutex, 0 );
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	2100      	movs	r1, #0
 8003762:	4618      	mov	r0, r3
 8003764:	f002 ffb2 	bl	80066cc <osMutexAcquire>
		if ( !HAL_GPIO_ReadPin( SCL_GPIO_Port, SCL_Pin ) ) {
 8003768:	2140      	movs	r1, #64	; 0x40
 800376a:	4814      	ldr	r0, [pc, #80]	; (80037bc <_ZN11I2C_Bitbang6isBusyEv+0x6c>)
 800376c:	f001 fc86 	bl	800507c <HAL_GPIO_ReadPin>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	bf0c      	ite	eq
 8003776:	2301      	moveq	r3, #1
 8003778:	2300      	movne	r3, #0
 800377a:	b2db      	uxtb	r3, r3
 800377c:	2b00      	cmp	r3, #0
 800377e:	d00b      	beq.n	8003798 <_ZN11I2C_Bitbang6isBusyEv+0x48>
			osMutexRelease( mMutex );
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	4618      	mov	r0, r3
 8003786:	f002 ffff 	bl	8006788 <osMutexRelease>
			// bus is busy
			osDelay( 2 );
 800378a:	2002      	movs	r0, #2
 800378c:	f002 fed6 	bl	800653c <osDelay>
		} else {
			osMutexRelease( mMutex );
			return false;
		}

		if ( busyAttempts > 10 ) {
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2b0a      	cmp	r3, #10
 8003794:	dd09      	ble.n	80037aa <_ZN11I2C_Bitbang6isBusyEv+0x5a>
 8003796:	e006      	b.n	80037a6 <_ZN11I2C_Bitbang6isBusyEv+0x56>
			osMutexRelease( mMutex );
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	4618      	mov	r0, r3
 800379e:	f002 fff3 	bl	8006788 <osMutexRelease>
			return false;
 80037a2:	2300      	movs	r3, #0
 80037a4:	e005      	b.n	80037b2 <_ZN11I2C_Bitbang6isBusyEv+0x62>
			return true;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e003      	b.n	80037b2 <_ZN11I2C_Bitbang6isBusyEv+0x62>
		}

		busyAttempts++;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	3301      	adds	r3, #1
 80037ae:	60fb      	str	r3, [r7, #12]
		osMutexAcquire( mMutex, 0 );
 80037b0:	e7d4      	b.n	800375c <_ZN11I2C_Bitbang6isBusyEv+0xc>
	}

}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	40010c00 	.word	0x40010c00

080037c0 <_ZN11I2C_Bitbang10isBusReadyEv>:

bool
I2C_Bitbang::isBusReady() {
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
	bool busBusy = false;
 80037c8:	2300      	movs	r3, #0
 80037ca:	73fb      	strb	r3, [r7, #15]
	osMutexAcquire( mMutex, 0 );
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	2100      	movs	r1, #0
 80037d2:	4618      	mov	r0, r3
 80037d4:	f002 ff7a 	bl	80066cc <osMutexAcquire>
	busBusy = !HAL_GPIO_ReadPin( SDA_GPIO_Port, SDA_Pin );
 80037d8:	2180      	movs	r1, #128	; 0x80
 80037da:	4809      	ldr	r0, [pc, #36]	; (8003800 <_ZN11I2C_Bitbang10isBusReadyEv+0x40>)
 80037dc:	f001 fc4e 	bl	800507c <HAL_GPIO_ReadPin>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	bf0c      	ite	eq
 80037e6:	2301      	moveq	r3, #1
 80037e8:	2300      	movne	r3, #0
 80037ea:	73fb      	strb	r3, [r7, #15]
	osMutexRelease( mMutex );
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	4618      	mov	r0, r3
 80037f2:	f002 ffc9 	bl	8006788 <osMutexRelease>

	return busBusy;
 80037f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3710      	adds	r7, #16
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	40010c00 	.word	0x40010c00

08003804 <_ZN11I2C_Bitbang13tryToClearBusEv>:
		asm( "nop" );
	}
}

void
I2C_Bitbang::tryToClearBus() {
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
	osMutexAcquire( mMutex, 0 );
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	2100      	movs	r1, #0
 8003812:	4618      	mov	r0, r3
 8003814:	f002 ff5a 	bl	80066cc <osMutexAcquire>

	SCL(1);
 8003818:	2201      	movs	r2, #1
 800381a:	2140      	movs	r1, #64	; 0x40
 800381c:	4837      	ldr	r0, [pc, #220]	; (80038fc <_ZN11I2C_Bitbang13tryToClearBusEv+0xf8>)
 800381e:	f001 fc44 	bl	80050aa <HAL_GPIO_WritePin>
	I2C_DELAY;
 8003822:	2006      	movs	r0, #6
 8003824:	f7ff fcde 	bl	80031e4 <_ZL12DWT_Delay_usm>
	SCL(0);
 8003828:	2200      	movs	r2, #0
 800382a:	2140      	movs	r1, #64	; 0x40
 800382c:	4833      	ldr	r0, [pc, #204]	; (80038fc <_ZN11I2C_Bitbang13tryToClearBusEv+0xf8>)
 800382e:	f001 fc3c 	bl	80050aa <HAL_GPIO_WritePin>
	I2C_DELAY;
 8003832:	2006      	movs	r0, #6
 8003834:	f7ff fcd6 	bl	80031e4 <_ZL12DWT_Delay_usm>
	SCL(1);
 8003838:	2201      	movs	r2, #1
 800383a:	2140      	movs	r1, #64	; 0x40
 800383c:	482f      	ldr	r0, [pc, #188]	; (80038fc <_ZN11I2C_Bitbang13tryToClearBusEv+0xf8>)
 800383e:	f001 fc34 	bl	80050aa <HAL_GPIO_WritePin>
	I2C_DELAY;
 8003842:	2006      	movs	r0, #6
 8003844:	f7ff fcce 	bl	80031e4 <_ZL12DWT_Delay_usm>
	SCL(0);
 8003848:	2200      	movs	r2, #0
 800384a:	2140      	movs	r1, #64	; 0x40
 800384c:	482b      	ldr	r0, [pc, #172]	; (80038fc <_ZN11I2C_Bitbang13tryToClearBusEv+0xf8>)
 800384e:	f001 fc2c 	bl	80050aa <HAL_GPIO_WritePin>
	I2C_DELAY;
 8003852:	2006      	movs	r0, #6
 8003854:	f7ff fcc6 	bl	80031e4 <_ZL12DWT_Delay_usm>
	SCL(1);
 8003858:	2201      	movs	r2, #1
 800385a:	2140      	movs	r1, #64	; 0x40
 800385c:	4827      	ldr	r0, [pc, #156]	; (80038fc <_ZN11I2C_Bitbang13tryToClearBusEv+0xf8>)
 800385e:	f001 fc24 	bl	80050aa <HAL_GPIO_WritePin>
	I2C_DELAY;
 8003862:	2006      	movs	r0, #6
 8003864:	f7ff fcbe 	bl	80031e4 <_ZL12DWT_Delay_usm>
	SCL(0);
 8003868:	2200      	movs	r2, #0
 800386a:	2140      	movs	r1, #64	; 0x40
 800386c:	4823      	ldr	r0, [pc, #140]	; (80038fc <_ZN11I2C_Bitbang13tryToClearBusEv+0xf8>)
 800386e:	f001 fc1c 	bl	80050aa <HAL_GPIO_WritePin>
	I2C_DELAY;
 8003872:	2006      	movs	r0, #6
 8003874:	f7ff fcb6 	bl	80031e4 <_ZL12DWT_Delay_usm>
	SCL(1);
 8003878:	2201      	movs	r2, #1
 800387a:	2140      	movs	r1, #64	; 0x40
 800387c:	481f      	ldr	r0, [pc, #124]	; (80038fc <_ZN11I2C_Bitbang13tryToClearBusEv+0xf8>)
 800387e:	f001 fc14 	bl	80050aa <HAL_GPIO_WritePin>
	I2C_DELAY;
 8003882:	2006      	movs	r0, #6
 8003884:	f7ff fcae 	bl	80031e4 <_ZL12DWT_Delay_usm>
	SCL(0);
 8003888:	2200      	movs	r2, #0
 800388a:	2140      	movs	r1, #64	; 0x40
 800388c:	481b      	ldr	r0, [pc, #108]	; (80038fc <_ZN11I2C_Bitbang13tryToClearBusEv+0xf8>)
 800388e:	f001 fc0c 	bl	80050aa <HAL_GPIO_WritePin>
	I2C_DELAY;
 8003892:	2006      	movs	r0, #6
 8003894:	f7ff fca6 	bl	80031e4 <_ZL12DWT_Delay_usm>
	SCL(1);
 8003898:	2201      	movs	r2, #1
 800389a:	2140      	movs	r1, #64	; 0x40
 800389c:	4817      	ldr	r0, [pc, #92]	; (80038fc <_ZN11I2C_Bitbang13tryToClearBusEv+0xf8>)
 800389e:	f001 fc04 	bl	80050aa <HAL_GPIO_WritePin>
	I2C_DELAY;
 80038a2:	2006      	movs	r0, #6
 80038a4:	f7ff fc9e 	bl	80031e4 <_ZL12DWT_Delay_usm>
	SCL(0);
 80038a8:	2200      	movs	r2, #0
 80038aa:	2140      	movs	r1, #64	; 0x40
 80038ac:	4813      	ldr	r0, [pc, #76]	; (80038fc <_ZN11I2C_Bitbang13tryToClearBusEv+0xf8>)
 80038ae:	f001 fbfc 	bl	80050aa <HAL_GPIO_WritePin>
	I2C_DELAY;
 80038b2:	2006      	movs	r0, #6
 80038b4:	f7ff fc96 	bl	80031e4 <_ZL12DWT_Delay_usm>
	SCL(1);
 80038b8:	2201      	movs	r2, #1
 80038ba:	2140      	movs	r1, #64	; 0x40
 80038bc:	480f      	ldr	r0, [pc, #60]	; (80038fc <_ZN11I2C_Bitbang13tryToClearBusEv+0xf8>)
 80038be:	f001 fbf4 	bl	80050aa <HAL_GPIO_WritePin>
	I2C_DELAY;
 80038c2:	2006      	movs	r0, #6
 80038c4:	f7ff fc8e 	bl	80031e4 <_ZL12DWT_Delay_usm>
	SCL(0);
 80038c8:	2200      	movs	r2, #0
 80038ca:	2140      	movs	r1, #64	; 0x40
 80038cc:	480b      	ldr	r0, [pc, #44]	; (80038fc <_ZN11I2C_Bitbang13tryToClearBusEv+0xf8>)
 80038ce:	f001 fbec 	bl	80050aa <HAL_GPIO_WritePin>
	I2C_DELAY;
 80038d2:	2006      	movs	r0, #6
 80038d4:	f7ff fc86 	bl	80031e4 <_ZL12DWT_Delay_usm>
	SCL(1);
 80038d8:	2201      	movs	r2, #1
 80038da:	2140      	movs	r1, #64	; 0x40
 80038dc:	4807      	ldr	r0, [pc, #28]	; (80038fc <_ZN11I2C_Bitbang13tryToClearBusEv+0xf8>)
 80038de:	f001 fbe4 	bl	80050aa <HAL_GPIO_WritePin>
	I2C_DELAY;
 80038e2:	2006      	movs	r0, #6
 80038e4:	f7ff fc7e 	bl	80031e4 <_ZL12DWT_Delay_usm>

	osMutexRelease( mMutex );
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	4618      	mov	r0, r3
 80038ee:	f002 ff4b 	bl	8006788 <osMutexRelease>
}
 80038f2:	bf00      	nop
 80038f4:	3708      	adds	r7, #8
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	40010c00 	.word	0x40010c00

08003900 <_ZN10I2C_Device7setAddrEh>:

	virtual ~I2C_Device();
	virtual void setAddr( I2C_ADDR addr ) { mAddr = addr; }
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	460b      	mov	r3, r1
 800390a:	70fb      	strb	r3, [r7, #3]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	78fa      	ldrb	r2, [r7, #3]
 8003910:	721a      	strb	r2, [r3, #8]
 8003912:	bf00      	nop
 8003914:	370c      	adds	r7, #12
 8003916:	46bd      	mov	sp, r7
 8003918:	bc80      	pop	{r7}
 800391a:	4770      	bx	lr

0800391c <_ZN10I2C_DeviceD1Ev>:
I2C_Device::I2C_Device( I2C_ADDR addr ) : mAddr( addr ) {
	// TODO Auto-generated constructor stub

}

I2C_Device::~I2C_Device() {
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	4a04      	ldr	r2, [pc, #16]	; (8003938 <_ZN10I2C_DeviceD1Ev+0x1c>)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4618      	mov	r0, r3
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	bc80      	pop	{r7}
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	0800a6e4 	.word	0x0800a6e4

0800393c <_ZN10I2C_DeviceD0Ev>:
I2C_Device::~I2C_Device() {
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
}
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f7ff ffe9 	bl	800391c <_ZN10I2C_DeviceD1Ev>
 800394a:	210c      	movs	r1, #12
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f005 fe6a 	bl	8009626 <_ZdlPvj>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4618      	mov	r0, r3
 8003956:	3708      	adds	r7, #8
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <_ZN10I2C_Device13writeRegisterEhh>:

bool
I2C_Device::writeRegister( uint8_t reg, uint8_t value ) {
 800395c:	b590      	push	{r4, r7, lr}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	460b      	mov	r3, r1
 8003966:	70fb      	strb	r3, [r7, #3]
 8003968:	4613      	mov	r3, r2
 800396a:	70bb      	strb	r3, [r7, #2]
	return mBus->writeRegister( mAddr, reg, value );
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6858      	ldr	r0, [r3, #4]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	330c      	adds	r3, #12
 8003978:	681c      	ldr	r4, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	7a19      	ldrb	r1, [r3, #8]
 800397e:	78bb      	ldrb	r3, [r7, #2]
 8003980:	78fa      	ldrb	r2, [r7, #3]
 8003982:	47a0      	blx	r4
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	bf14      	ite	ne
 800398a:	2301      	movne	r3, #1
 800398c:	2300      	moveq	r3, #0
 800398e:	b2db      	uxtb	r3, r3
}
 8003990:	4618      	mov	r0, r3
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	bd90      	pop	{r4, r7, pc}

08003998 <_ZN10I2C_Device9writeDataEPhh>:

bool
I2C_Device::writeData( uint8_t *data, uint8_t size ) {
 8003998:	b590      	push	{r4, r7, lr}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	4613      	mov	r3, r2
 80039a4:	71fb      	strb	r3, [r7, #7]
	return mBus->writeData( mAddr, data, size );
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6858      	ldr	r0, [r3, #4]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	3308      	adds	r3, #8
 80039b2:	681c      	ldr	r4, [r3, #0]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	7a19      	ldrb	r1, [r3, #8]
 80039b8:	79fb      	ldrb	r3, [r7, #7]
 80039ba:	68ba      	ldr	r2, [r7, #8]
 80039bc:	47a0      	blx	r4
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	bf14      	ite	ne
 80039c4:	2301      	movne	r3, #1
 80039c6:	2300      	moveq	r3, #0
 80039c8:	b2db      	uxtb	r3, r3
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3714      	adds	r7, #20
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd90      	pop	{r4, r7, pc}

080039d2 <_ZN10I2C_Device12readRegisterEh>:

I2C_RESULT
I2C_Device::readRegister( uint8_t reg ) {
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b082      	sub	sp, #8
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
 80039da:	460b      	mov	r3, r1
 80039dc:	70fb      	strb	r3, [r7, #3]
	return mBus->readRegister( mAddr, reg );
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6858      	ldr	r0, [r3, #4]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	3310      	adds	r3, #16
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	7a11      	ldrb	r1, [r2, #8]
 80039f0:	78fa      	ldrb	r2, [r7, #3]
 80039f2:	4798      	blx	r3
 80039f4:	4603      	mov	r3, r0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3708      	adds	r7, #8
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <_ZN10I2C_Device10waitForBusEv>:

void
I2C_Device::waitForBus() {
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b084      	sub	sp, #16
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
	int attempts = 0;
 8003a06:	2300      	movs	r3, #0
 8003a08:	60fb      	str	r3, [r7, #12]
	while ( !mBus->isBusReady() ) {
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685a      	ldr	r2, [r3, #4]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	3314      	adds	r3, #20
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4610      	mov	r0, r2
 8003a1a:	4798      	blx	r3
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	f083 0301 	eor.w	r3, r3, #1
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d017      	beq.n	8003a58 <_ZN10I2C_Device10waitForBusEv+0x5a>
		osDelay(25);
 8003a28:	2019      	movs	r0, #25
 8003a2a:	f002 fd87 	bl	800653c <osDelay>

		attempts++;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	3301      	adds	r3, #1
 8003a32:	60fb      	str	r3, [r7, #12]

		if ( attempts == 20 ) {
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2b14      	cmp	r3, #20
 8003a38:	d108      	bne.n	8003a4c <_ZN10I2C_Device10waitForBusEv+0x4e>
			mBus->tryToClearBus();
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685a      	ldr	r2, [r3, #4]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	3318      	adds	r3, #24
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4610      	mov	r0, r2
 8003a4a:	4798      	blx	r3
		}

		if ( attempts > 100 ) {
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2b64      	cmp	r3, #100	; 0x64
 8003a50:	dddb      	ble.n	8003a0a <_ZN10I2C_Device10waitForBusEv+0xc>
			int i;
			i = 1;
 8003a52:	2301      	movs	r3, #1
 8003a54:	60bb      	str	r3, [r7, #8]
	while ( !mBus->isBusReady() ) {
 8003a56:	e7d8      	b.n	8003a0a <_ZN10I2C_Device10waitForBusEv+0xc>
		}
	}
}
 8003a58:	bf00      	nop
 8003a5a:	3710      	adds	r7, #16
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <_ZL12DWT_Delay_usm>:
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8003a68:	4b0f      	ldr	r3, [pc, #60]	; (8003aa8 <_ZL12DWT_Delay_usm+0x48>)
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	60fb      	str	r3, [r7, #12]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8003a6e:	f001 ff01 	bl	8005874 <HAL_RCC_GetHCLKFreq>
 8003a72:	4603      	mov	r3, r0
 8003a74:	4a0d      	ldr	r2, [pc, #52]	; (8003aac <_ZL12DWT_Delay_usm+0x4c>)
 8003a76:	fba2 2303 	umull	r2, r3, r2, r3
 8003a7a:	0c9b      	lsrs	r3, r3, #18
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	fb02 f303 	mul.w	r3, r2, r3
 8003a82:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8003a84:	4b08      	ldr	r3, [pc, #32]	; (8003aa8 <_ZL12DWT_Delay_usm+0x48>)
 8003a86:	685a      	ldr	r2, [r3, #4]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	1ad2      	subs	r2, r2, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	bf34      	ite	cc
 8003a92:	2301      	movcc	r3, #1
 8003a94:	2300      	movcs	r3, #0
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d000      	beq.n	8003a9e <_ZL12DWT_Delay_usm+0x3e>
 8003a9c:	e7f2      	b.n	8003a84 <_ZL12DWT_Delay_usm+0x24>
}
 8003a9e:	bf00      	nop
 8003aa0:	3710      	adds	r7, #16
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	e0001000 	.word	0xe0001000
 8003aac:	431bde83 	.word	0x431bde83

08003ab0 <_ZN3LCD12clearDisplayEv>:

	osDelay( 50 );
}

void
LCD::clearDisplay() {
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
	command( LCD_COMMAND_CLEAR );
 8003ab8:	2101      	movs	r1, #1
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 f8eb 	bl	8003c96 <_ZN3LCD7commandEh>
	osDelay( 2 );
 8003ac0:	2002      	movs	r0, #2
 8003ac2:	f002 fd3b 	bl	800653c <osDelay>
}
 8003ac6:	bf00      	nop
 8003ac8:	3708      	adds	r7, #8
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}

08003ace <_ZN3LCD4homeEv>:

void
LCD::home() {
 8003ace:	b580      	push	{r7, lr}
 8003ad0:	b082      	sub	sp, #8
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
	command( LCD_COMMAND_HOME );
 8003ad6:	2102      	movs	r1, #2
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f000 f8dc 	bl	8003c96 <_ZN3LCD7commandEh>
	osDelay( 2 );
 8003ade:	2002      	movs	r0, #2
 8003ae0:	f002 fd2c 	bl	800653c <osDelay>
}
 8003ae4:	bf00      	nop
 8003ae6:	3708      	adds	r7, #8
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <_ZN3LCD9setCursorEhh>:

void
LCD::setCursor( uint8_t x, uint8_t y ) {
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b082      	sub	sp, #8
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	460b      	mov	r3, r1
 8003af6:	70fb      	strb	r3, [r7, #3]
 8003af8:	4613      	mov	r3, r2
 8003afa:	70bb      	strb	r3, [r7, #2]
	for( i = 0; i < x; i++ ) {
		command( 0x14 );
	}
	*/

	command( LCD_COMMAND_SETDDRAMADDR | ( x + mRowOffsets[ y ] ) );
 8003afc:	78bb      	ldrb	r3, [r7, #2]
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	4413      	add	r3, r2
 8003b02:	7b5a      	ldrb	r2, [r3, #13]
 8003b04:	78fb      	ldrb	r3, [r7, #3]
 8003b06:	4413      	add	r3, r2
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	b25b      	sxtb	r3, r3
 8003b0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003b10:	b25b      	sxtb	r3, r3
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	4619      	mov	r1, r3
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 f8bd 	bl	8003c96 <_ZN3LCD7commandEh>
}
 8003b1c:	bf00      	nop
 8003b1e:	3708      	adds	r7, #8
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <_ZN3LCD11writeStringEPc>:
LCD::reset() {

}

void
LCD::writeString( char *string ) {
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
	if ( string == 0 ) return;
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d019      	beq.n	8003b68 <_ZN3LCD11writeStringEPc+0x44>

	const uint8_t *buffer = (const uint8_t *)string;
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	60fb      	str	r3, [r7, #12]
	size_t size = strlen( string );
 8003b38:	6838      	ldr	r0, [r7, #0]
 8003b3a:	f7fc fb79 	bl	8000230 <strlen>
 8003b3e:	60b8      	str	r0, [r7, #8]

	while ( size-- ) {
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	1e5a      	subs	r2, r3, #1
 8003b44:	60ba      	str	r2, [r7, #8]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	bf14      	ite	ne
 8003b4a:	2301      	movne	r3, #1
 8003b4c:	2300      	moveq	r3, #0
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d00a      	beq.n	8003b6a <_ZN3LCD11writeStringEPc+0x46>
		sendData( *buffer++, LCD_RS_BIT );
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	1c5a      	adds	r2, r3, #1
 8003b58:	60fa      	str	r2, [r7, #12]
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	4619      	mov	r1, r3
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f000 f8d6 	bl	8003d12 <_ZN3LCD8sendDataEhh>
	while ( size-- ) {
 8003b66:	e7eb      	b.n	8003b40 <_ZN3LCD11writeStringEPc+0x1c>
	if ( string == 0 ) return;
 8003b68:	bf00      	nop
	}
}
 8003b6a:	3710      	adds	r7, #16
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <_ZN3LCDC1EP10I2C_Device>:


LCD::LCD( I2C_Device *lcd ) : mLCD( lcd ), mCount( 0 ), mBacklight( BACKLIGHT_ON ) {
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
 8003b7a:	4a0f      	ldr	r2, [pc, #60]	; (8003bb8 <_ZN3LCDC1EP10I2C_Device+0x48>)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	601a      	str	r2, [r3, #0]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	683a      	ldr	r2, [r7, #0]
 8003b84:	605a      	str	r2, [r3, #4]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	609a      	str	r2, [r3, #8]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2208      	movs	r2, #8
 8003b90:	731a      	strb	r2, [r3, #12]
	// TODO Auto-generated constructor stub

	mRowOffsets[0] = 0;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	735a      	strb	r2, [r3, #13]
	mRowOffsets[1] = 0x40;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2240      	movs	r2, #64	; 0x40
 8003b9c:	739a      	strb	r2, [r3, #14]
	mRowOffsets[2] = 20;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2214      	movs	r2, #20
 8003ba2:	73da      	strb	r2, [r3, #15]
	mRowOffsets[3] = 0x40 + 20;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2254      	movs	r2, #84	; 0x54
 8003ba8:	741a      	strb	r2, [r3, #16]
}
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4618      	mov	r0, r3
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bc80      	pop	{r7}
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	0800a708 	.word	0x0800a708

08003bbc <_ZN3LCDD1Ev>:

LCD::~LCD() {
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	4a04      	ldr	r2, [pc, #16]	; (8003bd8 <_ZN3LCDD1Ev+0x1c>)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bc80      	pop	{r7}
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	0800a708 	.word	0x0800a708

08003bdc <_ZN3LCDD0Ev>:
LCD::~LCD() {
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
}
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f7ff ffe9 	bl	8003bbc <_ZN3LCDD1Ev>
 8003bea:	2114      	movs	r1, #20
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f005 fd1a 	bl	8009626 <_ZdlPvj>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3708      	adds	r7, #8
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <_ZN3LCD10initializeEv>:
	sprintf( s, "Count %5d         ", mCount++ );
	writeString( s );
}

void
LCD::initialize() {
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
	begin();
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f000 f804 	bl	8003c12 <_ZN3LCD5beginEv>

	enableBacklight( true );
	osDelay( 500 );
	*/

}
 8003c0a:	bf00      	nop
 8003c0c:	3708      	adds	r7, #8
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}

08003c12 <_ZN3LCD5beginEv>:

void
LCD::begin() {
 8003c12:	b580      	push	{r7, lr}
 8003c14:	b082      	sub	sp, #8
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
	osDelay( 50 );
 8003c1a:	2032      	movs	r0, #50	; 0x32
 8003c1c:	f002 fc8e 	bl	800653c <osDelay>
	write8Bits( mBacklight );
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	7b1b      	ldrb	r3, [r3, #12]
 8003c24:	4619      	mov	r1, r3
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f000 f859 	bl	8003cde <_ZN3LCD10write8BitsEh>
	osDelay( 1000 );
 8003c2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c30:	f002 fc84 	bl	800653c <osDelay>

	vTaskSuspendAll();
 8003c34:	f004 f82e 	bl	8007c94 <vTaskSuspendAll>
	{
		write4Bits( 0x30 );
 8003c38:	2130      	movs	r1, #48	; 0x30
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 f83b 	bl	8003cb6 <_ZN3LCD10write4BitsEh>
		DWT_Delay_us( 4500 );
 8003c40:	f241 1094 	movw	r0, #4500	; 0x1194
 8003c44:	f7ff ff0c 	bl	8003a60 <_ZL12DWT_Delay_usm>
		write4Bits( 0x30 );
 8003c48:	2130      	movs	r1, #48	; 0x30
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 f833 	bl	8003cb6 <_ZN3LCD10write4BitsEh>
		DWT_Delay_us( 4500 );
 8003c50:	f241 1094 	movw	r0, #4500	; 0x1194
 8003c54:	f7ff ff04 	bl	8003a60 <_ZL12DWT_Delay_usm>
		write4Bits( 0x30 );
 8003c58:	2130      	movs	r1, #48	; 0x30
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 f82b 	bl	8003cb6 <_ZN3LCD10write4BitsEh>
		DWT_Delay_us( 150 );
 8003c60:	2096      	movs	r0, #150	; 0x96
 8003c62:	f7ff fefd 	bl	8003a60 <_ZL12DWT_Delay_usm>
		write4Bits( 0x20 );
 8003c66:	2120      	movs	r1, #32
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f000 f824 	bl	8003cb6 <_ZN3LCD10write4BitsEh>
	}
	xTaskResumeAll();
 8003c6e:	f004 f81f 	bl	8007cb0 <xTaskResumeAll>

	// lcd 2 line
	command( LCD_COMMAND_FUNCTIONSET |  0x08 );
 8003c72:	2128      	movs	r1, #40	; 0x28
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f000 f80e 	bl	8003c96 <_ZN3LCD7commandEh>

	// turn display on
	command( LCD_COMMAND_DISPLAYCONTROL | 0x04 );
 8003c7a:	210c      	movs	r1, #12
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f000 f80a 	bl	8003c96 <_ZN3LCD7commandEh>

	clearDisplay();
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f7ff ff14 	bl	8003ab0 <_ZN3LCD12clearDisplayEv>

	home();
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f7ff ff20 	bl	8003ace <_ZN3LCD4homeEv>

	enableBacklight( true );
	osDelay( 500 );

	*/
}
 8003c8e:	bf00      	nop
 8003c90:	3708      	adds	r7, #8
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}

08003c96 <_ZN3LCD7commandEh>:

inline void
LCD::command( uint8_t data ) {
 8003c96:	b580      	push	{r7, lr}
 8003c98:	b082      	sub	sp, #8
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
 8003c9e:	460b      	mov	r3, r1
 8003ca0:	70fb      	strb	r3, [r7, #3]
	sendData( data, 0 );
 8003ca2:	78fb      	ldrb	r3, [r7, #3]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f000 f832 	bl	8003d12 <_ZN3LCD8sendDataEhh>
}
 8003cae:	bf00      	nop
 8003cb0:	3708      	adds	r7, #8
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}

08003cb6 <_ZN3LCD10write4BitsEh>:

void
LCD::write4Bits( uint8_t data ) {
 8003cb6:	b580      	push	{r7, lr}
 8003cb8:	b082      	sub	sp, #8
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	70fb      	strb	r3, [r7, #3]
	write8Bits( data );
 8003cc2:	78fb      	ldrb	r3, [r7, #3]
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 f809 	bl	8003cde <_ZN3LCD10write8BitsEh>
	pulseEnable( data );
 8003ccc:	78fb      	ldrb	r3, [r7, #3]
 8003cce:	4619      	mov	r1, r3
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f000 f841 	bl	8003d58 <_ZN3LCD11pulseEnableEh>

}
 8003cd6:	bf00      	nop
 8003cd8:	3708      	adds	r7, #8
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <_ZN3LCD10write8BitsEh>:
void
LCD::write8Bits( uint8_t data ) {
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b082      	sub	sp, #8
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	70fb      	strb	r3, [r7, #3]
	data = data | mBacklight;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	7b1a      	ldrb	r2, [r3, #12]
 8003cee:	78fb      	ldrb	r3, [r7, #3]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	70fb      	strb	r3, [r7, #3]
	mLCD->writeData( &data, 1 );
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6858      	ldr	r0, [r3, #4]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	330c      	adds	r3, #12
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	1cf9      	adds	r1, r7, #3
 8003d06:	2201      	movs	r2, #1
 8003d08:	4798      	blx	r3
}
 8003d0a:	bf00      	nop
 8003d0c:	3708      	adds	r7, #8
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <_ZN3LCD8sendDataEhh>:

inline void
LCD::sendData( uint8_t data, uint8_t mode ) {
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b084      	sub	sp, #16
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	70fb      	strb	r3, [r7, #3]
 8003d1e:	4613      	mov	r3, r2
 8003d20:	70bb      	strb	r3, [r7, #2]
	uint8_t highNibble = data & 0xf0;
 8003d22:	78fb      	ldrb	r3, [r7, #3]
 8003d24:	f023 030f 	bic.w	r3, r3, #15
 8003d28:	73fb      	strb	r3, [r7, #15]
	uint8_t lowNibble = (data << 4) & 0xf0;
 8003d2a:	78fb      	ldrb	r3, [r7, #3]
 8003d2c:	011b      	lsls	r3, r3, #4
 8003d2e:	73bb      	strb	r3, [r7, #14]

	write4Bits( (highNibble ) | mode);
 8003d30:	7bfa      	ldrb	r2, [r7, #15]
 8003d32:	78bb      	ldrb	r3, [r7, #2]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	4619      	mov	r1, r3
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f7ff ffbb 	bl	8003cb6 <_ZN3LCD10write4BitsEh>
	write4Bits( (lowNibble) | mode);
 8003d40:	7bba      	ldrb	r2, [r7, #14]
 8003d42:	78bb      	ldrb	r3, [r7, #2]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	4619      	mov	r1, r3
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f7ff ffb3 	bl	8003cb6 <_ZN3LCD10write4BitsEh>
}
 8003d50:	bf00      	nop
 8003d52:	3710      	adds	r7, #16
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <_ZN3LCD11pulseEnableEh>:

void
LCD::pulseEnable( uint8_t data ) {
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	460b      	mov	r3, r1
 8003d62:	70fb      	strb	r3, [r7, #3]
	vTaskSuspendAll();
 8003d64:	f003 ff96 	bl	8007c94 <vTaskSuspendAll>
	{
		write8Bits( data | LCD_EN_BIT );
 8003d68:	78fb      	ldrb	r3, [r7, #3]
 8003d6a:	f043 0304 	orr.w	r3, r3, #4
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	4619      	mov	r1, r3
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f7ff ffb3 	bl	8003cde <_ZN3LCD10write8BitsEh>

		DWT_Delay_us(1);
 8003d78:	2001      	movs	r0, #1
 8003d7a:	f7ff fe71 	bl	8003a60 <_ZL12DWT_Delay_usm>

		write8Bits( data & ~LCD_EN_BIT );
 8003d7e:	78fb      	ldrb	r3, [r7, #3]
 8003d80:	f023 0304 	bic.w	r3, r3, #4
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	4619      	mov	r1, r3
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f7ff ffa8 	bl	8003cde <_ZN3LCD10write8BitsEh>

		DWT_Delay_us(50);
 8003d8e:	2032      	movs	r0, #50	; 0x32
 8003d90:	f7ff fe66 	bl	8003a60 <_ZL12DWT_Delay_usm>
	}
	xTaskResumeAll();
 8003d94:	f003 ff8c 	bl	8007cb0 <xTaskResumeAll>
}
 8003d98:	bf00      	nop
 8003d9a:	3708      	adds	r7, #8
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <_ZN3LED6enableEv>:

	virtual void enable() { setState( true ); }
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	3310      	adds	r3, #16
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2101      	movs	r1, #1
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	4798      	blx	r3
 8003db6:	bf00      	nop
 8003db8:	3708      	adds	r7, #8
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}

08003dbe <_ZN3LED7disableEv>:
	virtual void disable() { setState( false ); }
 8003dbe:	b580      	push	{r7, lr}
 8003dc0:	b082      	sub	sp, #8
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	3310      	adds	r3, #16
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2100      	movs	r1, #0
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	4798      	blx	r3
 8003dd4:	bf00      	nop
 8003dd6:	3708      	adds	r7, #8
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <_ZN3LEDC1Ev>:
 */

#include "main.h"
#include "LED.h"

LED::LED() : mPort( 0 ), mPin( 0 ), mCurrentState( 0 ) {
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	4a08      	ldr	r2, [pc, #32]	; (8003e08 <_ZN3LEDC1Ev+0x2c>)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	601a      	str	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	605a      	str	r2, [r3, #4]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	811a      	strh	r2, [r3, #8]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	60da      	str	r2, [r3, #12]
	// TODO Auto-generated constructor stub

}
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4618      	mov	r0, r3
 8003e00:	370c      	adds	r7, #12
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bc80      	pop	{r7}
 8003e06:	4770      	bx	lr
 8003e08:	0800a71c 	.word	0x0800a71c

08003e0c <_ZN3LEDD1Ev>:

LED::LED( GPIO_TypeDef* port, uint16_t pin ) : mPort( port ), mPin( pin ), mCurrentState( 0 ) {

}

LED::~LED() {
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	4a04      	ldr	r2, [pc, #16]	; (8003e28 <_ZN3LEDD1Ev+0x1c>)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bc80      	pop	{r7}
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop
 8003e28:	0800a71c 	.word	0x0800a71c

08003e2c <_ZN3LEDD0Ev>:
LED::~LED() {
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
}
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f7ff ffe9 	bl	8003e0c <_ZN3LEDD1Ev>
 8003e3a:	2110      	movs	r1, #16
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f005 fbf2 	bl	8009626 <_ZdlPvj>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4618      	mov	r0, r3
 8003e46:	3708      	adds	r7, #8
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <_ZN3LED8setStateEb>:

void
LED::setState( bool enable ) {
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	460b      	mov	r3, r1
 8003e56:	70fb      	strb	r3, [r7, #3]
	if ( enable ) {
 8003e58:	78fb      	ldrb	r3, [r7, #3]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d008      	beq.n	8003e70 <_ZN3LED8setStateEb+0x24>
		HAL_GPIO_WritePin( mPort, mPin, GPIO_PIN_SET );
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6858      	ldr	r0, [r3, #4]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	891b      	ldrh	r3, [r3, #8]
 8003e66:	2201      	movs	r2, #1
 8003e68:	4619      	mov	r1, r3
 8003e6a:	f001 f91e 	bl	80050aa <HAL_GPIO_WritePin>
 8003e6e:	e007      	b.n	8003e80 <_ZN3LED8setStateEb+0x34>
	} else {
		HAL_GPIO_WritePin( mPort, mPin, GPIO_PIN_RESET );
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6858      	ldr	r0, [r3, #4]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	891b      	ldrh	r3, [r3, #8]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	f001 f915 	bl	80050aa <HAL_GPIO_WritePin>
	}

	mCurrentState = enable;
 8003e80:	78fa      	ldrb	r2, [r7, #3]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	60da      	str	r2, [r3, #12]
}
 8003e86:	bf00      	nop
 8003e88:	3708      	adds	r7, #8
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
	...

08003e90 <_ZN8RunnableC1EP9Amplifier>:
 */

#include "Runnable.h"
#include "Amplifier.h"

Runnable::Runnable( Amplifier *amp ) : mAmplifier( amp ) {
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
 8003e9a:	4a06      	ldr	r2, [pc, #24]	; (8003eb4 <_ZN8RunnableC1EP9Amplifier+0x24>)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	601a      	str	r2, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	683a      	ldr	r2, [r7, #0]
 8003ea4:	605a      	str	r2, [r3, #4]
	// TODO Auto-generated constructor stub

}
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bc80      	pop	{r7}
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	0800a738 	.word	0x0800a738

08003eb8 <_ZN8RunnableD1Ev>:

Runnable::~Runnable() {
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	4a04      	ldr	r2, [pc, #16]	; (8003ed4 <_ZN8RunnableD1Ev+0x1c>)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4618      	mov	r0, r3
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bc80      	pop	{r7}
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	0800a738 	.word	0x0800a738

08003ed8 <_ZN9Amplifier8getAudioEv>:
public:
	Amplifier();
	virtual ~Amplifier();

	Display &getDisplay() { return mDisplay; }
	Audio &getAudio() { return mAudio; }
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	334c      	adds	r3, #76	; 0x4c
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bc80      	pop	{r7}
 8003eec:	4770      	bx	lr
	...

08003ef0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003ef4:	f000 fdbe 	bl	8004a74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003ef8:	f000 f840 	bl	8003f7c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003efc:	f000 f9f4 	bl	80042e8 <_ZL12MX_GPIO_Initv>
  MX_SPI1_Init();
 8003f00:	f000 f88c 	bl	800401c <_ZL12MX_SPI1_Initv>
  MX_SPI2_Init();
 8003f04:	f000 f8c6 	bl	8004094 <_ZL12MX_SPI2_Initv>
  MX_TIM3_Init();
 8003f08:	f000 f900 	bl	800410c <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 8003f0c:	f000 f95c 	bl	80041c8 <_ZL12MX_TIM4_Initv>
  MX_USART3_UART_Init();
 8003f10:	f000 f9bc 	bl	800428c <_ZL19MX_USART3_UART_Initv>
  /* USER CODE BEGIN 2 */

  DEBUG_UART = huart3;
 8003f14:	4a10      	ldr	r2, [pc, #64]	; (8003f58 <main+0x68>)
 8003f16:	4b11      	ldr	r3, [pc, #68]	; (8003f5c <main+0x6c>)
 8003f18:	4610      	mov	r0, r2
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	2344      	movs	r3, #68	; 0x44
 8003f1e:	461a      	mov	r2, r3
 8003f20:	f005 fd2c 	bl	800997c <memcpy>

  DEBUG_STR( "Starting" );

  DWT_Delay_Init();
 8003f24:	f7fe f86c 	bl	8002000 <_Z14DWT_Delay_Initv>

  // The main amplifier class
  amplifier.initialize();
 8003f28:	480d      	ldr	r0, [pc, #52]	; (8003f60 <main+0x70>)
 8003f2a:	f7fd fa4b 	bl	80013c4 <_ZN9Amplifier10initializeEv>
//  amplifier.getAudio().preTick();

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8003f2e:	f002 f9f3 	bl	8006318 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8003f32:	4a0c      	ldr	r2, [pc, #48]	; (8003f64 <main+0x74>)
 8003f34:	2100      	movs	r1, #0
 8003f36:	480c      	ldr	r0, [pc, #48]	; (8003f68 <main+0x78>)
 8003f38:	f002 fa54 	bl	80063e4 <osThreadNew>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	4a0b      	ldr	r2, [pc, #44]	; (8003f6c <main+0x7c>)
 8003f40:	6013      	str	r3, [r2, #0]

  /* creation of audioThread */
  audioThreadHandle = osThreadNew(startAudio, NULL, &audioThread_attributes);
 8003f42:	4a0b      	ldr	r2, [pc, #44]	; (8003f70 <main+0x80>)
 8003f44:	2100      	movs	r1, #0
 8003f46:	480b      	ldr	r0, [pc, #44]	; (8003f74 <main+0x84>)
 8003f48:	f002 fa4c 	bl	80063e4 <osThreadNew>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	4a0a      	ldr	r2, [pc, #40]	; (8003f78 <main+0x88>)
 8003f50:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8003f52:	f002 fa13 	bl	800637c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003f56:	e7fe      	b.n	8003f56 <main+0x66>
 8003f58:	20000098 	.word	0x20000098
 8003f5c:	2000021c 	.word	0x2000021c
 8003f60:	20000268 	.word	0x20000268
 8003f64:	0800a748 	.word	0x0800a748
 8003f68:	080044d1 	.word	0x080044d1
 8003f6c:	20000260 	.word	0x20000260
 8003f70:	0800a76c 	.word	0x0800a76c
 8003f74:	080044f1 	.word	0x080044f1
 8003f78:	20000264 	.word	0x20000264

08003f7c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b090      	sub	sp, #64	; 0x40
 8003f80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003f82:	f107 0318 	add.w	r3, r7, #24
 8003f86:	2228      	movs	r2, #40	; 0x28
 8003f88:	2100      	movs	r1, #0
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f005 fd1e 	bl	80099cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003f90:	1d3b      	adds	r3, r7, #4
 8003f92:	2200      	movs	r2, #0
 8003f94:	601a      	str	r2, [r3, #0]
 8003f96:	605a      	str	r2, [r3, #4]
 8003f98:	609a      	str	r2, [r3, #8]
 8003f9a:	60da      	str	r2, [r3, #12]
 8003f9c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003fa2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003fa6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003fac:	2301      	movs	r3, #1
 8003fae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003fb0:	2302      	movs	r3, #2
 8003fb2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003fb4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003fb8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 8003fba:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003fc0:	f107 0318 	add.w	r3, r7, #24
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f001 f889 	bl	80050dc <HAL_RCC_OscConfig>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	bf14      	ite	ne
 8003fd0:	2301      	movne	r3, #1
 8003fd2:	2300      	moveq	r3, #0
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d001      	beq.n	8003fde <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 8003fda:	f000 faa5 	bl	8004528 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003fde:	230f      	movs	r3, #15
 8003fe0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003fea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003ff4:	1d3b      	adds	r3, r7, #4
 8003ff6:	2101      	movs	r1, #1
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f001 faf1 	bl	80055e0 <HAL_RCC_ClockConfig>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b00      	cmp	r3, #0
 8004002:	bf14      	ite	ne
 8004004:	2301      	movne	r3, #1
 8004006:	2300      	moveq	r3, #0
 8004008:	b2db      	uxtb	r3, r3
 800400a:	2b00      	cmp	r3, #0
 800400c:	d001      	beq.n	8004012 <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 800400e:	f000 fa8b 	bl	8004528 <Error_Handler>
  }
}
 8004012:	bf00      	nop
 8004014:	3740      	adds	r7, #64	; 0x40
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
	...

0800401c <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004020:	4b1a      	ldr	r3, [pc, #104]	; (800408c <_ZL12MX_SPI1_Initv+0x70>)
 8004022:	4a1b      	ldr	r2, [pc, #108]	; (8004090 <_ZL12MX_SPI1_Initv+0x74>)
 8004024:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004026:	4b19      	ldr	r3, [pc, #100]	; (800408c <_ZL12MX_SPI1_Initv+0x70>)
 8004028:	f44f 7282 	mov.w	r2, #260	; 0x104
 800402c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800402e:	4b17      	ldr	r3, [pc, #92]	; (800408c <_ZL12MX_SPI1_Initv+0x70>)
 8004030:	2200      	movs	r2, #0
 8004032:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004034:	4b15      	ldr	r3, [pc, #84]	; (800408c <_ZL12MX_SPI1_Initv+0x70>)
 8004036:	2200      	movs	r2, #0
 8004038:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800403a:	4b14      	ldr	r3, [pc, #80]	; (800408c <_ZL12MX_SPI1_Initv+0x70>)
 800403c:	2200      	movs	r2, #0
 800403e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004040:	4b12      	ldr	r3, [pc, #72]	; (800408c <_ZL12MX_SPI1_Initv+0x70>)
 8004042:	2200      	movs	r2, #0
 8004044:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004046:	4b11      	ldr	r3, [pc, #68]	; (800408c <_ZL12MX_SPI1_Initv+0x70>)
 8004048:	f44f 7200 	mov.w	r2, #512	; 0x200
 800404c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800404e:	4b0f      	ldr	r3, [pc, #60]	; (800408c <_ZL12MX_SPI1_Initv+0x70>)
 8004050:	2208      	movs	r2, #8
 8004052:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004054:	4b0d      	ldr	r3, [pc, #52]	; (800408c <_ZL12MX_SPI1_Initv+0x70>)
 8004056:	2200      	movs	r2, #0
 8004058:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800405a:	4b0c      	ldr	r3, [pc, #48]	; (800408c <_ZL12MX_SPI1_Initv+0x70>)
 800405c:	2200      	movs	r2, #0
 800405e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004060:	4b0a      	ldr	r3, [pc, #40]	; (800408c <_ZL12MX_SPI1_Initv+0x70>)
 8004062:	2200      	movs	r2, #0
 8004064:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004066:	4b09      	ldr	r3, [pc, #36]	; (800408c <_ZL12MX_SPI1_Initv+0x70>)
 8004068:	220a      	movs	r2, #10
 800406a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800406c:	4807      	ldr	r0, [pc, #28]	; (800408c <_ZL12MX_SPI1_Initv+0x70>)
 800406e:	f001 fc51 	bl	8005914 <HAL_SPI_Init>
 8004072:	4603      	mov	r3, r0
 8004074:	2b00      	cmp	r3, #0
 8004076:	bf14      	ite	ne
 8004078:	2301      	movne	r3, #1
 800407a:	2300      	moveq	r3, #0
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b00      	cmp	r3, #0
 8004080:	d001      	beq.n	8004086 <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 8004082:	f000 fa51 	bl	8004528 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004086:	bf00      	nop
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	200000dc 	.word	0x200000dc
 8004090:	40013000 	.word	0x40013000

08004094 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8004098:	4b1a      	ldr	r3, [pc, #104]	; (8004104 <_ZL12MX_SPI2_Initv+0x70>)
 800409a:	4a1b      	ldr	r2, [pc, #108]	; (8004108 <_ZL12MX_SPI2_Initv+0x74>)
 800409c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800409e:	4b19      	ldr	r3, [pc, #100]	; (8004104 <_ZL12MX_SPI2_Initv+0x70>)
 80040a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80040a4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80040a6:	4b17      	ldr	r3, [pc, #92]	; (8004104 <_ZL12MX_SPI2_Initv+0x70>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80040ac:	4b15      	ldr	r3, [pc, #84]	; (8004104 <_ZL12MX_SPI2_Initv+0x70>)
 80040ae:	2200      	movs	r2, #0
 80040b0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80040b2:	4b14      	ldr	r3, [pc, #80]	; (8004104 <_ZL12MX_SPI2_Initv+0x70>)
 80040b4:	2200      	movs	r2, #0
 80040b6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80040b8:	4b12      	ldr	r3, [pc, #72]	; (8004104 <_ZL12MX_SPI2_Initv+0x70>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80040be:	4b11      	ldr	r3, [pc, #68]	; (8004104 <_ZL12MX_SPI2_Initv+0x70>)
 80040c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040c4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80040c6:	4b0f      	ldr	r3, [pc, #60]	; (8004104 <_ZL12MX_SPI2_Initv+0x70>)
 80040c8:	2200      	movs	r2, #0
 80040ca:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80040cc:	4b0d      	ldr	r3, [pc, #52]	; (8004104 <_ZL12MX_SPI2_Initv+0x70>)
 80040ce:	2200      	movs	r2, #0
 80040d0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80040d2:	4b0c      	ldr	r3, [pc, #48]	; (8004104 <_ZL12MX_SPI2_Initv+0x70>)
 80040d4:	2200      	movs	r2, #0
 80040d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040d8:	4b0a      	ldr	r3, [pc, #40]	; (8004104 <_ZL12MX_SPI2_Initv+0x70>)
 80040da:	2200      	movs	r2, #0
 80040dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80040de:	4b09      	ldr	r3, [pc, #36]	; (8004104 <_ZL12MX_SPI2_Initv+0x70>)
 80040e0:	220a      	movs	r2, #10
 80040e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80040e4:	4807      	ldr	r0, [pc, #28]	; (8004104 <_ZL12MX_SPI2_Initv+0x70>)
 80040e6:	f001 fc15 	bl	8005914 <HAL_SPI_Init>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	bf14      	ite	ne
 80040f0:	2301      	movne	r3, #1
 80040f2:	2300      	moveq	r3, #0
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d001      	beq.n	80040fe <_ZL12MX_SPI2_Initv+0x6a>
  {
    Error_Handler();
 80040fa:	f000 fa15 	bl	8004528 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80040fe:	bf00      	nop
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	20000134 	.word	0x20000134
 8004108:	40003800 	.word	0x40003800

0800410c <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b08c      	sub	sp, #48	; 0x30
 8004110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004112:	f107 030c 	add.w	r3, r7, #12
 8004116:	2224      	movs	r2, #36	; 0x24
 8004118:	2100      	movs	r1, #0
 800411a:	4618      	mov	r0, r3
 800411c:	f005 fc56 	bl	80099cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004120:	1d3b      	adds	r3, r7, #4
 8004122:	2200      	movs	r2, #0
 8004124:	601a      	str	r2, [r3, #0]
 8004126:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004128:	4b25      	ldr	r3, [pc, #148]	; (80041c0 <_ZL12MX_TIM3_Initv+0xb4>)
 800412a:	4a26      	ldr	r2, [pc, #152]	; (80041c4 <_ZL12MX_TIM3_Initv+0xb8>)
 800412c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800412e:	4b24      	ldr	r3, [pc, #144]	; (80041c0 <_ZL12MX_TIM3_Initv+0xb4>)
 8004130:	2200      	movs	r2, #0
 8004132:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004134:	4b22      	ldr	r3, [pc, #136]	; (80041c0 <_ZL12MX_TIM3_Initv+0xb4>)
 8004136:	2200      	movs	r2, #0
 8004138:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800413a:	4b21      	ldr	r3, [pc, #132]	; (80041c0 <_ZL12MX_TIM3_Initv+0xb4>)
 800413c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004140:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004142:	4b1f      	ldr	r3, [pc, #124]	; (80041c0 <_ZL12MX_TIM3_Initv+0xb4>)
 8004144:	2200      	movs	r2, #0
 8004146:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004148:	4b1d      	ldr	r3, [pc, #116]	; (80041c0 <_ZL12MX_TIM3_Initv+0xb4>)
 800414a:	2200      	movs	r2, #0
 800414c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800414e:	2301      	movs	r3, #1
 8004150:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004152:	2300      	movs	r3, #0
 8004154:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004156:	2301      	movs	r3, #1
 8004158:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800415a:	2300      	movs	r3, #0
 800415c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800415e:	2300      	movs	r3, #0
 8004160:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004162:	2300      	movs	r3, #0
 8004164:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004166:	2301      	movs	r3, #1
 8004168:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800416a:	2300      	movs	r3, #0
 800416c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800416e:	2300      	movs	r3, #0
 8004170:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8004172:	f107 030c 	add.w	r3, r7, #12
 8004176:	4619      	mov	r1, r3
 8004178:	4811      	ldr	r0, [pc, #68]	; (80041c0 <_ZL12MX_TIM3_Initv+0xb4>)
 800417a:	f001 fc4f 	bl	8005a1c <HAL_TIM_Encoder_Init>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	bf14      	ite	ne
 8004184:	2301      	movne	r3, #1
 8004186:	2300      	moveq	r3, #0
 8004188:	b2db      	uxtb	r3, r3
 800418a:	2b00      	cmp	r3, #0
 800418c:	d001      	beq.n	8004192 <_ZL12MX_TIM3_Initv+0x86>
  {
    Error_Handler();
 800418e:	f000 f9cb 	bl	8004528 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004192:	2300      	movs	r3, #0
 8004194:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004196:	2300      	movs	r3, #0
 8004198:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800419a:	1d3b      	adds	r3, r7, #4
 800419c:	4619      	mov	r1, r3
 800419e:	4808      	ldr	r0, [pc, #32]	; (80041c0 <_ZL12MX_TIM3_Initv+0xb4>)
 80041a0:	f001 ff60 	bl	8006064 <HAL_TIMEx_MasterConfigSynchronization>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	bf14      	ite	ne
 80041aa:	2301      	movne	r3, #1
 80041ac:	2300      	moveq	r3, #0
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d001      	beq.n	80041b8 <_ZL12MX_TIM3_Initv+0xac>
  {
    Error_Handler();
 80041b4:	f000 f9b8 	bl	8004528 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80041b8:	bf00      	nop
 80041ba:	3730      	adds	r7, #48	; 0x30
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	2000018c 	.word	0x2000018c
 80041c4:	40000400 	.word	0x40000400

080041c8 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b08c      	sub	sp, #48	; 0x30
 80041cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80041ce:	f107 030c 	add.w	r3, r7, #12
 80041d2:	2224      	movs	r2, #36	; 0x24
 80041d4:	2100      	movs	r1, #0
 80041d6:	4618      	mov	r0, r3
 80041d8:	f005 fbf8 	bl	80099cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041dc:	1d3b      	adds	r3, r7, #4
 80041de:	2200      	movs	r2, #0
 80041e0:	601a      	str	r2, [r3, #0]
 80041e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80041e4:	4b27      	ldr	r3, [pc, #156]	; (8004284 <_ZL12MX_TIM4_Initv+0xbc>)
 80041e6:	4a28      	ldr	r2, [pc, #160]	; (8004288 <_ZL12MX_TIM4_Initv+0xc0>)
 80041e8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80041ea:	4b26      	ldr	r3, [pc, #152]	; (8004284 <_ZL12MX_TIM4_Initv+0xbc>)
 80041ec:	2200      	movs	r2, #0
 80041ee:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041f0:	4b24      	ldr	r3, [pc, #144]	; (8004284 <_ZL12MX_TIM4_Initv+0xbc>)
 80041f2:	2200      	movs	r2, #0
 80041f4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80041f6:	4b23      	ldr	r3, [pc, #140]	; (8004284 <_ZL12MX_TIM4_Initv+0xbc>)
 80041f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80041fc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041fe:	4b21      	ldr	r3, [pc, #132]	; (8004284 <_ZL12MX_TIM4_Initv+0xbc>)
 8004200:	2200      	movs	r2, #0
 8004202:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004204:	4b1f      	ldr	r3, [pc, #124]	; (8004284 <_ZL12MX_TIM4_Initv+0xbc>)
 8004206:	2280      	movs	r2, #128	; 0x80
 8004208:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800420a:	2303      	movs	r3, #3
 800420c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800420e:	2300      	movs	r3, #0
 8004210:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004212:	2301      	movs	r3, #1
 8004214:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004216:	2300      	movs	r3, #0
 8004218:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 800421a:	2305      	movs	r3, #5
 800421c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800421e:	2300      	movs	r3, #0
 8004220:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004222:	2301      	movs	r3, #1
 8004224:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004226:	2300      	movs	r3, #0
 8004228:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 5;
 800422a:	2305      	movs	r3, #5
 800422c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800422e:	f107 030c 	add.w	r3, r7, #12
 8004232:	4619      	mov	r1, r3
 8004234:	4813      	ldr	r0, [pc, #76]	; (8004284 <_ZL12MX_TIM4_Initv+0xbc>)
 8004236:	f001 fbf1 	bl	8005a1c <HAL_TIM_Encoder_Init>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	bf14      	ite	ne
 8004240:	2301      	movne	r3, #1
 8004242:	2300      	moveq	r3, #0
 8004244:	b2db      	uxtb	r3, r3
 8004246:	2b00      	cmp	r3, #0
 8004248:	d001      	beq.n	800424e <_ZL12MX_TIM4_Initv+0x86>
  {
    Error_Handler();
 800424a:	f000 f96d 	bl	8004528 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800424e:	2300      	movs	r3, #0
 8004250:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004252:	2300      	movs	r3, #0
 8004254:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004256:	1d3b      	adds	r3, r7, #4
 8004258:	4619      	mov	r1, r3
 800425a:	480a      	ldr	r0, [pc, #40]	; (8004284 <_ZL12MX_TIM4_Initv+0xbc>)
 800425c:	f001 ff02 	bl	8006064 <HAL_TIMEx_MasterConfigSynchronization>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	bf14      	ite	ne
 8004266:	2301      	movne	r3, #1
 8004268:	2300      	moveq	r3, #0
 800426a:	b2db      	uxtb	r3, r3
 800426c:	2b00      	cmp	r3, #0
 800426e:	d001      	beq.n	8004274 <_ZL12MX_TIM4_Initv+0xac>
  {
    Error_Handler();
 8004270:	f000 f95a 	bl	8004528 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

	// Star the volume control timer
	HAL_TIM_Encoder_Start_IT( &htim4, TIM_CHANNEL_ALL );
 8004274:	213c      	movs	r1, #60	; 0x3c
 8004276:	4803      	ldr	r0, [pc, #12]	; (8004284 <_ZL12MX_TIM4_Initv+0xbc>)
 8004278:	f001 fc72 	bl	8005b60 <HAL_TIM_Encoder_Start_IT>

  /* USER CODE END TIM4_Init 2 */

}
 800427c:	bf00      	nop
 800427e:	3730      	adds	r7, #48	; 0x30
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	200001d4 	.word	0x200001d4
 8004288:	40000800 	.word	0x40000800

0800428c <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004290:	4b13      	ldr	r3, [pc, #76]	; (80042e0 <_ZL19MX_USART3_UART_Initv+0x54>)
 8004292:	4a14      	ldr	r2, [pc, #80]	; (80042e4 <_ZL19MX_USART3_UART_Initv+0x58>)
 8004294:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004296:	4b12      	ldr	r3, [pc, #72]	; (80042e0 <_ZL19MX_USART3_UART_Initv+0x54>)
 8004298:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800429c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800429e:	4b10      	ldr	r3, [pc, #64]	; (80042e0 <_ZL19MX_USART3_UART_Initv+0x54>)
 80042a0:	2200      	movs	r2, #0
 80042a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80042a4:	4b0e      	ldr	r3, [pc, #56]	; (80042e0 <_ZL19MX_USART3_UART_Initv+0x54>)
 80042a6:	2200      	movs	r2, #0
 80042a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80042aa:	4b0d      	ldr	r3, [pc, #52]	; (80042e0 <_ZL19MX_USART3_UART_Initv+0x54>)
 80042ac:	2200      	movs	r2, #0
 80042ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80042b0:	4b0b      	ldr	r3, [pc, #44]	; (80042e0 <_ZL19MX_USART3_UART_Initv+0x54>)
 80042b2:	220c      	movs	r2, #12
 80042b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80042b6:	4b0a      	ldr	r3, [pc, #40]	; (80042e0 <_ZL19MX_USART3_UART_Initv+0x54>)
 80042b8:	2200      	movs	r2, #0
 80042ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80042bc:	4b08      	ldr	r3, [pc, #32]	; (80042e0 <_ZL19MX_USART3_UART_Initv+0x54>)
 80042be:	2200      	movs	r2, #0
 80042c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80042c2:	4807      	ldr	r0, [pc, #28]	; (80042e0 <_ZL19MX_USART3_UART_Initv+0x54>)
 80042c4:	f001 ff4c 	bl	8006160 <HAL_UART_Init>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	bf14      	ite	ne
 80042ce:	2301      	movne	r3, #1
 80042d0:	2300      	moveq	r3, #0
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d001      	beq.n	80042dc <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 80042d8:	f000 f926 	bl	8004528 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80042dc:	bf00      	nop
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	2000021c 	.word	0x2000021c
 80042e4:	40004800 	.word	0x40004800

080042e8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b08a      	sub	sp, #40	; 0x28
 80042ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042ee:	f107 0318 	add.w	r3, r7, #24
 80042f2:	2200      	movs	r2, #0
 80042f4:	601a      	str	r2, [r3, #0]
 80042f6:	605a      	str	r2, [r3, #4]
 80042f8:	609a      	str	r2, [r3, #8]
 80042fa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80042fc:	4b6e      	ldr	r3, [pc, #440]	; (80044b8 <_ZL12MX_GPIO_Initv+0x1d0>)
 80042fe:	699b      	ldr	r3, [r3, #24]
 8004300:	4a6d      	ldr	r2, [pc, #436]	; (80044b8 <_ZL12MX_GPIO_Initv+0x1d0>)
 8004302:	f043 0310 	orr.w	r3, r3, #16
 8004306:	6193      	str	r3, [r2, #24]
 8004308:	4b6b      	ldr	r3, [pc, #428]	; (80044b8 <_ZL12MX_GPIO_Initv+0x1d0>)
 800430a:	699b      	ldr	r3, [r3, #24]
 800430c:	f003 0310 	and.w	r3, r3, #16
 8004310:	617b      	str	r3, [r7, #20]
 8004312:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004314:	4b68      	ldr	r3, [pc, #416]	; (80044b8 <_ZL12MX_GPIO_Initv+0x1d0>)
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	4a67      	ldr	r2, [pc, #412]	; (80044b8 <_ZL12MX_GPIO_Initv+0x1d0>)
 800431a:	f043 0304 	orr.w	r3, r3, #4
 800431e:	6193      	str	r3, [r2, #24]
 8004320:	4b65      	ldr	r3, [pc, #404]	; (80044b8 <_ZL12MX_GPIO_Initv+0x1d0>)
 8004322:	699b      	ldr	r3, [r3, #24]
 8004324:	f003 0304 	and.w	r3, r3, #4
 8004328:	613b      	str	r3, [r7, #16]
 800432a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800432c:	4b62      	ldr	r3, [pc, #392]	; (80044b8 <_ZL12MX_GPIO_Initv+0x1d0>)
 800432e:	699b      	ldr	r3, [r3, #24]
 8004330:	4a61      	ldr	r2, [pc, #388]	; (80044b8 <_ZL12MX_GPIO_Initv+0x1d0>)
 8004332:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004336:	6193      	str	r3, [r2, #24]
 8004338:	4b5f      	ldr	r3, [pc, #380]	; (80044b8 <_ZL12MX_GPIO_Initv+0x1d0>)
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004340:	60fb      	str	r3, [r7, #12]
 8004342:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004344:	4b5c      	ldr	r3, [pc, #368]	; (80044b8 <_ZL12MX_GPIO_Initv+0x1d0>)
 8004346:	699b      	ldr	r3, [r3, #24]
 8004348:	4a5b      	ldr	r2, [pc, #364]	; (80044b8 <_ZL12MX_GPIO_Initv+0x1d0>)
 800434a:	f043 0308 	orr.w	r3, r3, #8
 800434e:	6193      	str	r3, [r2, #24]
 8004350:	4b59      	ldr	r3, [pc, #356]	; (80044b8 <_ZL12MX_GPIO_Initv+0x1d0>)
 8004352:	699b      	ldr	r3, [r3, #24]
 8004354:	f003 0308 	and.w	r3, r3, #8
 8004358:	60bb      	str	r3, [r7, #8]
 800435a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800435c:	4b56      	ldr	r3, [pc, #344]	; (80044b8 <_ZL12MX_GPIO_Initv+0x1d0>)
 800435e:	699b      	ldr	r3, [r3, #24]
 8004360:	4a55      	ldr	r2, [pc, #340]	; (80044b8 <_ZL12MX_GPIO_Initv+0x1d0>)
 8004362:	f043 0320 	orr.w	r3, r3, #32
 8004366:	6193      	str	r3, [r2, #24]
 8004368:	4b53      	ldr	r3, [pc, #332]	; (80044b8 <_ZL12MX_GPIO_Initv+0x1d0>)
 800436a:	699b      	ldr	r3, [r3, #24]
 800436c:	f003 0320 	and.w	r3, r3, #32
 8004370:	607b      	str	r3, [r7, #4]
 8004372:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_MUTE_GPIO_Port, LED_MUTE_Pin, GPIO_PIN_RESET);
 8004374:	2200      	movs	r2, #0
 8004376:	2108      	movs	r1, #8
 8004378:	4850      	ldr	r0, [pc, #320]	; (80044bc <_ZL12MX_GPIO_Initv+0x1d4>)
 800437a:	f000 fe96 	bl	80050aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_PCM_Pin|LED_DOLBY_Pin|GPIO_PIN_2|LED_MUTEA3_Pin
 800437e:	2200      	movs	r2, #0
 8004380:	f248 011f 	movw	r1, #32799	; 0x801f
 8004384:	484e      	ldr	r0, [pc, #312]	; (80044c0 <_ZL12MX_GPIO_Initv+0x1d8>)
 8004386:	f000 fe90 	bl	80050aa <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|USB_PULLUP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_INPUT_1_Pin|LED_INPUT_2_Pin|LED_INPUT_3_Pin|LED_INPUT_4_Pin
 800438a:	2200      	movs	r2, #0
 800438c:	f44f 413c 	mov.w	r1, #48128	; 0xbc00
 8004390:	484c      	ldr	r0, [pc, #304]	; (80044c4 <_ZL12MX_GPIO_Initv+0x1dc>)
 8004392:	f000 fe8a 	bl	80050aa <HAL_GPIO_WritePin>
                          |LED_POWER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_INPUT_6CH_Pin|LED_RUN_Pin, GPIO_PIN_RESET);
 8004396:	2200      	movs	r2, #0
 8004398:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800439c:	484a      	ldr	r0, [pc, #296]	; (80044c8 <_ZL12MX_GPIO_Initv+0x1e0>)
 800439e:	f000 fe84 	bl	80050aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DECODER_RESET_GPIO_Port, DECODER_RESET_Pin, GPIO_PIN_SET);
 80043a2:	2201      	movs	r2, #1
 80043a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80043a8:	4844      	ldr	r0, [pc, #272]	; (80044bc <_ZL12MX_GPIO_Initv+0x1d4>)
 80043aa:	f000 fe7e 	bl	80050aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SCL_Pin|SDA_Pin, GPIO_PIN_SET);
 80043ae:	2201      	movs	r2, #1
 80043b0:	21c0      	movs	r1, #192	; 0xc0
 80043b2:	4845      	ldr	r0, [pc, #276]	; (80044c8 <_ZL12MX_GPIO_Initv+0x1e0>)
 80043b4:	f000 fe79 	bl	80050aa <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_MUTE_Pin DECODER_RESET_Pin */
  GPIO_InitStruct.Pin = LED_MUTE_Pin|DECODER_RESET_Pin;
 80043b8:	f44f 6381 	mov.w	r3, #1032	; 0x408
 80043bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043be:	2301      	movs	r3, #1
 80043c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043c2:	2300      	movs	r3, #0
 80043c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043c6:	2302      	movs	r3, #2
 80043c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043ca:	f107 0318 	add.w	r3, r7, #24
 80043ce:	4619      	mov	r1, r3
 80043d0:	483a      	ldr	r0, [pc, #232]	; (80044bc <_ZL12MX_GPIO_Initv+0x1d4>)
 80043d2:	f000 fcbf 	bl	8004d54 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_PCM_Pin LED_DOLBY_Pin PA2 LED_MUTEA3_Pin
                           PA4 USB_PULLUP_Pin */
  GPIO_InitStruct.Pin = LED_PCM_Pin|LED_DOLBY_Pin|GPIO_PIN_2|LED_MUTEA3_Pin
 80043d6:	f248 031f 	movw	r3, #32799	; 0x801f
 80043da:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_4|USB_PULLUP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043dc:	2301      	movs	r3, #1
 80043de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043e0:	2300      	movs	r3, #0
 80043e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043e4:	2302      	movs	r3, #2
 80043e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043e8:	f107 0318 	add.w	r3, r7, #24
 80043ec:	4619      	mov	r1, r3
 80043ee:	4834      	ldr	r0, [pc, #208]	; (80044c0 <_ZL12MX_GPIO_Initv+0x1d8>)
 80043f0:	f000 fcb0 	bl	8004d54 <HAL_GPIO_Init>

  /*Configure GPIO pins : SETTING_BATTERY_Pin DECODER_IRQ_Pin */
  GPIO_InitStruct.Pin = SETTING_BATTERY_Pin|DECODER_IRQ_Pin;
 80043f4:	f44f 6301 	mov.w	r3, #2064	; 0x810
 80043f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80043fa:	2300      	movs	r3, #0
 80043fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043fe:	2300      	movs	r3, #0
 8004400:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004402:	f107 0318 	add.w	r3, r7, #24
 8004406:	4619      	mov	r1, r3
 8004408:	482c      	ldr	r0, [pc, #176]	; (80044bc <_ZL12MX_GPIO_Initv+0x1d4>)
 800440a:	f000 fca3 	bl	8004d54 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_INPUT_1_Pin LED_INPUT_2_Pin LED_INPUT_3_Pin LED_INPUT_4_Pin
                           LED_POWER_Pin */
  GPIO_InitStruct.Pin = LED_INPUT_1_Pin|LED_INPUT_2_Pin|LED_INPUT_3_Pin|LED_INPUT_4_Pin
 800440e:	f44f 433c 	mov.w	r3, #48128	; 0xbc00
 8004412:	61bb      	str	r3, [r7, #24]
                          |LED_POWER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004414:	2301      	movs	r3, #1
 8004416:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004418:	2300      	movs	r3, #0
 800441a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800441c:	2302      	movs	r3, #2
 800441e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004420:	f107 0318 	add.w	r3, r7, #24
 8004424:	4619      	mov	r1, r3
 8004426:	4827      	ldr	r0, [pc, #156]	; (80044c4 <_ZL12MX_GPIO_Initv+0x1dc>)
 8004428:	f000 fc94 	bl	8004d54 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_POWER_Pin */
  GPIO_InitStruct.Pin = BUTTON_POWER_Pin;
 800442c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004430:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004432:	2300      	movs	r3, #0
 8004434:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004436:	2300      	movs	r3, #0
 8004438:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUTTON_POWER_GPIO_Port, &GPIO_InitStruct);
 800443a:	f107 0318 	add.w	r3, r7, #24
 800443e:	4619      	mov	r1, r3
 8004440:	4820      	ldr	r0, [pc, #128]	; (80044c4 <_ZL12MX_GPIO_Initv+0x1dc>)
 8004442:	f000 fc87 	bl	8004d54 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_INPUT_6CH_Pin LED_RUN_Pin */
  GPIO_InitStruct.Pin = LED_INPUT_6CH_Pin|LED_RUN_Pin;
 8004446:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800444a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800444c:	2301      	movs	r3, #1
 800444e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004450:	2300      	movs	r3, #0
 8004452:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004454:	2302      	movs	r3, #2
 8004456:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004458:	f107 0318 	add.w	r3, r7, #24
 800445c:	4619      	mov	r1, r3
 800445e:	481a      	ldr	r0, [pc, #104]	; (80044c8 <_ZL12MX_GPIO_Initv+0x1e0>)
 8004460:	f000 fc78 	bl	8004d54 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_VOLUME_Pin BUTTON_INPUT_Pin */
  GPIO_InitStruct.Pin = BUTTON_VOLUME_Pin|BUTTON_INPUT_Pin;
 8004464:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8004468:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800446a:	2300      	movs	r3, #0
 800446c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800446e:	2301      	movs	r3, #1
 8004470:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004472:	f107 0318 	add.w	r3, r7, #24
 8004476:	4619      	mov	r1, r3
 8004478:	4814      	ldr	r0, [pc, #80]	; (80044cc <_ZL12MX_GPIO_Initv+0x1e4>)
 800447a:	f000 fc6b 	bl	8004d54 <HAL_GPIO_Init>

  /*Configure GPIO pins : SCL_Pin SDA_Pin */
  GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 800447e:	23c0      	movs	r3, #192	; 0xc0
 8004480:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8004482:	2311      	movs	r3, #17
 8004484:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004486:	2300      	movs	r3, #0
 8004488:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800448a:	2303      	movs	r3, #3
 800448c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800448e:	f107 0318 	add.w	r3, r7, #24
 8004492:	4619      	mov	r1, r3
 8004494:	480c      	ldr	r0, [pc, #48]	; (80044c8 <_ZL12MX_GPIO_Initv+0x1e0>)
 8004496:	f000 fc5d 	bl	8004d54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PWM_BACKLIGHT_Pin */
  GPIO_InitStruct.Pin = PWM_BACKLIGHT_Pin;
 800449a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800449e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80044a0:	2303      	movs	r3, #3
 80044a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PWM_BACKLIGHT_GPIO_Port, &GPIO_InitStruct);
 80044a4:	f107 0318 	add.w	r3, r7, #24
 80044a8:	4619      	mov	r1, r3
 80044aa:	4807      	ldr	r0, [pc, #28]	; (80044c8 <_ZL12MX_GPIO_Initv+0x1e0>)
 80044ac:	f000 fc52 	bl	8004d54 <HAL_GPIO_Init>

}
 80044b0:	bf00      	nop
 80044b2:	3728      	adds	r7, #40	; 0x28
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	40021000 	.word	0x40021000
 80044bc:	40011000 	.word	0x40011000
 80044c0:	40010800 	.word	0x40010800
 80044c4:	40011800 	.word	0x40011800
 80044c8:	40010c00 	.word	0x40010c00
 80044cc:	40011400 	.word	0x40011400

080044d0 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b082      	sub	sp, #8
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

	amplifier.preTick();
 80044d8:	4804      	ldr	r0, [pc, #16]	; (80044ec <_Z16StartDefaultTaskPv+0x1c>)
 80044da:	f7fd f853 	bl	8001584 <_ZN9Amplifier7preTickEv>

  for(;;)
  {
	amplifier.tick();
 80044de:	4803      	ldr	r0, [pc, #12]	; (80044ec <_Z16StartDefaultTaskPv+0x1c>)
 80044e0:	f7fd f880 	bl	80015e4 <_ZN9Amplifier4tickEv>
    osDelay(1);
 80044e4:	2001      	movs	r0, #1
 80044e6:	f002 f829 	bl	800653c <osDelay>
	amplifier.tick();
 80044ea:	e7f8      	b.n	80044de <_Z16StartDefaultTaskPv+0xe>
 80044ec:	20000268 	.word	0x20000268

080044f0 <_Z10startAudioPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startAudio */
void startAudio(void *argument)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b082      	sub	sp, #8
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startAudio */
	amplifier.getAudio().preTick();
 80044f8:	480a      	ldr	r0, [pc, #40]	; (8004524 <_Z10startAudioPv+0x34>)
 80044fa:	f7ff fced 	bl	8003ed8 <_ZN9Amplifier8getAudioEv>
 80044fe:	4603      	mov	r3, r0
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	320c      	adds	r2, #12
 8004504:	6812      	ldr	r2, [r2, #0]
 8004506:	4618      	mov	r0, r3
 8004508:	4790      	blx	r2

  /* Infinite loop */
  for(;;)
  {
	amplifier.getAudio().tick();
 800450a:	4806      	ldr	r0, [pc, #24]	; (8004524 <_Z10startAudioPv+0x34>)
 800450c:	f7ff fce4 	bl	8003ed8 <_ZN9Amplifier8getAudioEv>
 8004510:	4603      	mov	r3, r0
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	3208      	adds	r2, #8
 8004516:	6812      	ldr	r2, [r2, #0]
 8004518:	4618      	mov	r0, r3
 800451a:	4790      	blx	r2
    osDelay(1);
 800451c:	2001      	movs	r0, #1
 800451e:	f002 f80d 	bl	800653c <osDelay>
	amplifier.getAudio().tick();
 8004522:	e7f2      	b.n	800450a <_Z10startAudioPv+0x1a>
 8004524:	20000268 	.word	0x20000268

08004528 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004528:	b480      	push	{r7}
 800452a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800452c:	b672      	cpsid	i
}
 800452e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004530:	e7fe      	b.n	8004530 <Error_Handler+0x8>
	...

08004534 <_Z41__static_initialization_and_destruction_0ii>:
  {

  }
  /* USER CODE END Error_Handler_Debug */
}
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2b01      	cmp	r3, #1
 8004542:	d10c      	bne.n	800455e <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800454a:	4293      	cmp	r3, r2
 800454c:	d107      	bne.n	800455e <_Z41__static_initialization_and_destruction_0ii+0x2a>
Amplifier amplifier;
 800454e:	4806      	ldr	r0, [pc, #24]	; (8004568 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8004550:	f7fc fe5a 	bl	8001208 <_ZN9AmplifierC1Ev>
 8004554:	4a05      	ldr	r2, [pc, #20]	; (800456c <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8004556:	4906      	ldr	r1, [pc, #24]	; (8004570 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8004558:	4803      	ldr	r0, [pc, #12]	; (8004568 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 800455a:	f005 f85f 	bl	800961c <__aeabi_atexit>
}
 800455e:	bf00      	nop
 8004560:	3708      	adds	r7, #8
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	20000268 	.word	0x20000268
 800456c:	20000000 	.word	0x20000000
 8004570:	080012c1 	.word	0x080012c1

08004574 <_GLOBAL__sub_I_hspi1>:
 8004574:	b580      	push	{r7, lr}
 8004576:	af00      	add	r7, sp, #0
 8004578:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800457c:	2001      	movs	r0, #1
 800457e:	f7ff ffd9 	bl	8004534 <_Z41__static_initialization_and_destruction_0ii>
 8004582:	bd80      	pop	{r7, pc}

08004584 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800458a:	4b18      	ldr	r3, [pc, #96]	; (80045ec <HAL_MspInit+0x68>)
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	4a17      	ldr	r2, [pc, #92]	; (80045ec <HAL_MspInit+0x68>)
 8004590:	f043 0301 	orr.w	r3, r3, #1
 8004594:	6193      	str	r3, [r2, #24]
 8004596:	4b15      	ldr	r3, [pc, #84]	; (80045ec <HAL_MspInit+0x68>)
 8004598:	699b      	ldr	r3, [r3, #24]
 800459a:	f003 0301 	and.w	r3, r3, #1
 800459e:	60bb      	str	r3, [r7, #8]
 80045a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80045a2:	4b12      	ldr	r3, [pc, #72]	; (80045ec <HAL_MspInit+0x68>)
 80045a4:	69db      	ldr	r3, [r3, #28]
 80045a6:	4a11      	ldr	r2, [pc, #68]	; (80045ec <HAL_MspInit+0x68>)
 80045a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045ac:	61d3      	str	r3, [r2, #28]
 80045ae:	4b0f      	ldr	r3, [pc, #60]	; (80045ec <HAL_MspInit+0x68>)
 80045b0:	69db      	ldr	r3, [r3, #28]
 80045b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045b6:	607b      	str	r3, [r7, #4]
 80045b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80045ba:	2200      	movs	r2, #0
 80045bc:	210f      	movs	r1, #15
 80045be:	f06f 0001 	mvn.w	r0, #1
 80045c2:	f000 fb90 	bl	8004ce6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80045c6:	4b0a      	ldr	r3, [pc, #40]	; (80045f0 <HAL_MspInit+0x6c>)
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	60fb      	str	r3, [r7, #12]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80045d2:	60fb      	str	r3, [r7, #12]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80045da:	60fb      	str	r3, [r7, #12]
 80045dc:	4a04      	ldr	r2, [pc, #16]	; (80045f0 <HAL_MspInit+0x6c>)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80045e2:	bf00      	nop
 80045e4:	3710      	adds	r7, #16
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	40021000 	.word	0x40021000
 80045f0:	40010000 	.word	0x40010000

080045f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b08a      	sub	sp, #40	; 0x28
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045fc:	f107 0318 	add.w	r3, r7, #24
 8004600:	2200      	movs	r2, #0
 8004602:	601a      	str	r2, [r3, #0]
 8004604:	605a      	str	r2, [r3, #4]
 8004606:	609a      	str	r2, [r3, #8]
 8004608:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a37      	ldr	r2, [pc, #220]	; (80046ec <HAL_SPI_MspInit+0xf8>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d130      	bne.n	8004676 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004614:	4b36      	ldr	r3, [pc, #216]	; (80046f0 <HAL_SPI_MspInit+0xfc>)
 8004616:	699b      	ldr	r3, [r3, #24]
 8004618:	4a35      	ldr	r2, [pc, #212]	; (80046f0 <HAL_SPI_MspInit+0xfc>)
 800461a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800461e:	6193      	str	r3, [r2, #24]
 8004620:	4b33      	ldr	r3, [pc, #204]	; (80046f0 <HAL_SPI_MspInit+0xfc>)
 8004622:	699b      	ldr	r3, [r3, #24]
 8004624:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004628:	617b      	str	r3, [r7, #20]
 800462a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800462c:	4b30      	ldr	r3, [pc, #192]	; (80046f0 <HAL_SPI_MspInit+0xfc>)
 800462e:	699b      	ldr	r3, [r3, #24]
 8004630:	4a2f      	ldr	r2, [pc, #188]	; (80046f0 <HAL_SPI_MspInit+0xfc>)
 8004632:	f043 0304 	orr.w	r3, r3, #4
 8004636:	6193      	str	r3, [r2, #24]
 8004638:	4b2d      	ldr	r3, [pc, #180]	; (80046f0 <HAL_SPI_MspInit+0xfc>)
 800463a:	699b      	ldr	r3, [r3, #24]
 800463c:	f003 0304 	and.w	r3, r3, #4
 8004640:	613b      	str	r3, [r7, #16]
 8004642:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8004644:	23a0      	movs	r3, #160	; 0xa0
 8004646:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004648:	2302      	movs	r3, #2
 800464a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800464c:	2303      	movs	r3, #3
 800464e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004650:	f107 0318 	add.w	r3, r7, #24
 8004654:	4619      	mov	r1, r3
 8004656:	4827      	ldr	r0, [pc, #156]	; (80046f4 <HAL_SPI_MspInit+0x100>)
 8004658:	f000 fb7c 	bl	8004d54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800465c:	2340      	movs	r3, #64	; 0x40
 800465e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004660:	2300      	movs	r3, #0
 8004662:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004664:	2300      	movs	r3, #0
 8004666:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004668:	f107 0318 	add.w	r3, r7, #24
 800466c:	4619      	mov	r1, r3
 800466e:	4821      	ldr	r0, [pc, #132]	; (80046f4 <HAL_SPI_MspInit+0x100>)
 8004670:	f000 fb70 	bl	8004d54 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004674:	e036      	b.n	80046e4 <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a1f      	ldr	r2, [pc, #124]	; (80046f8 <HAL_SPI_MspInit+0x104>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d131      	bne.n	80046e4 <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004680:	4b1b      	ldr	r3, [pc, #108]	; (80046f0 <HAL_SPI_MspInit+0xfc>)
 8004682:	69db      	ldr	r3, [r3, #28]
 8004684:	4a1a      	ldr	r2, [pc, #104]	; (80046f0 <HAL_SPI_MspInit+0xfc>)
 8004686:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800468a:	61d3      	str	r3, [r2, #28]
 800468c:	4b18      	ldr	r3, [pc, #96]	; (80046f0 <HAL_SPI_MspInit+0xfc>)
 800468e:	69db      	ldr	r3, [r3, #28]
 8004690:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004694:	60fb      	str	r3, [r7, #12]
 8004696:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004698:	4b15      	ldr	r3, [pc, #84]	; (80046f0 <HAL_SPI_MspInit+0xfc>)
 800469a:	699b      	ldr	r3, [r3, #24]
 800469c:	4a14      	ldr	r2, [pc, #80]	; (80046f0 <HAL_SPI_MspInit+0xfc>)
 800469e:	f043 0308 	orr.w	r3, r3, #8
 80046a2:	6193      	str	r3, [r2, #24]
 80046a4:	4b12      	ldr	r3, [pc, #72]	; (80046f0 <HAL_SPI_MspInit+0xfc>)
 80046a6:	699b      	ldr	r3, [r3, #24]
 80046a8:	f003 0308 	and.w	r3, r3, #8
 80046ac:	60bb      	str	r3, [r7, #8]
 80046ae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80046b0:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80046b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046b6:	2302      	movs	r3, #2
 80046b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80046ba:	2303      	movs	r3, #3
 80046bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046be:	f107 0318 	add.w	r3, r7, #24
 80046c2:	4619      	mov	r1, r3
 80046c4:	480d      	ldr	r0, [pc, #52]	; (80046fc <HAL_SPI_MspInit+0x108>)
 80046c6:	f000 fb45 	bl	8004d54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80046ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80046ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80046d0:	2300      	movs	r3, #0
 80046d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046d4:	2300      	movs	r3, #0
 80046d6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046d8:	f107 0318 	add.w	r3, r7, #24
 80046dc:	4619      	mov	r1, r3
 80046de:	4807      	ldr	r0, [pc, #28]	; (80046fc <HAL_SPI_MspInit+0x108>)
 80046e0:	f000 fb38 	bl	8004d54 <HAL_GPIO_Init>
}
 80046e4:	bf00      	nop
 80046e6:	3728      	adds	r7, #40	; 0x28
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	40013000 	.word	0x40013000
 80046f0:	40021000 	.word	0x40021000
 80046f4:	40010800 	.word	0x40010800
 80046f8:	40003800 	.word	0x40003800
 80046fc:	40010c00 	.word	0x40010c00

08004700 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b08c      	sub	sp, #48	; 0x30
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004708:	f107 0318 	add.w	r3, r7, #24
 800470c:	2200      	movs	r2, #0
 800470e:	601a      	str	r2, [r3, #0]
 8004710:	605a      	str	r2, [r3, #4]
 8004712:	609a      	str	r2, [r3, #8]
 8004714:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a43      	ldr	r2, [pc, #268]	; (8004828 <HAL_TIM_Encoder_MspInit+0x128>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d13e      	bne.n	800479e <HAL_TIM_Encoder_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004720:	4b42      	ldr	r3, [pc, #264]	; (800482c <HAL_TIM_Encoder_MspInit+0x12c>)
 8004722:	69db      	ldr	r3, [r3, #28]
 8004724:	4a41      	ldr	r2, [pc, #260]	; (800482c <HAL_TIM_Encoder_MspInit+0x12c>)
 8004726:	f043 0302 	orr.w	r3, r3, #2
 800472a:	61d3      	str	r3, [r2, #28]
 800472c:	4b3f      	ldr	r3, [pc, #252]	; (800482c <HAL_TIM_Encoder_MspInit+0x12c>)
 800472e:	69db      	ldr	r3, [r3, #28]
 8004730:	f003 0302 	and.w	r3, r3, #2
 8004734:	617b      	str	r3, [r7, #20]
 8004736:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004738:	4b3c      	ldr	r3, [pc, #240]	; (800482c <HAL_TIM_Encoder_MspInit+0x12c>)
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	4a3b      	ldr	r2, [pc, #236]	; (800482c <HAL_TIM_Encoder_MspInit+0x12c>)
 800473e:	f043 0310 	orr.w	r3, r3, #16
 8004742:	6193      	str	r3, [r2, #24]
 8004744:	4b39      	ldr	r3, [pc, #228]	; (800482c <HAL_TIM_Encoder_MspInit+0x12c>)
 8004746:	699b      	ldr	r3, [r3, #24]
 8004748:	f003 0310 	and.w	r3, r3, #16
 800474c:	613b      	str	r3, [r7, #16]
 800474e:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004750:	23c0      	movs	r3, #192	; 0xc0
 8004752:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004754:	2300      	movs	r3, #0
 8004756:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004758:	2300      	movs	r3, #0
 800475a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800475c:	f107 0318 	add.w	r3, r7, #24
 8004760:	4619      	mov	r1, r3
 8004762:	4833      	ldr	r0, [pc, #204]	; (8004830 <HAL_TIM_Encoder_MspInit+0x130>)
 8004764:	f000 faf6 	bl	8004d54 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8004768:	4b32      	ldr	r3, [pc, #200]	; (8004834 <HAL_TIM_Encoder_MspInit+0x134>)
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	62bb      	str	r3, [r7, #40]	; 0x28
 800476e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004770:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004774:	62bb      	str	r3, [r7, #40]	; 0x28
 8004776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004778:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800477c:	62bb      	str	r3, [r7, #40]	; 0x28
 800477e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004780:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8004784:	62bb      	str	r3, [r7, #40]	; 0x28
 8004786:	4a2b      	ldr	r2, [pc, #172]	; (8004834 <HAL_TIM_Encoder_MspInit+0x134>)
 8004788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800478a:	6053      	str	r3, [r2, #4]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800478c:	2200      	movs	r2, #0
 800478e:	2105      	movs	r1, #5
 8004790:	201d      	movs	r0, #29
 8004792:	f000 faa8 	bl	8004ce6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004796:	201d      	movs	r0, #29
 8004798:	f000 fac1 	bl	8004d1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800479c:	e03f      	b.n	800481e <HAL_TIM_Encoder_MspInit+0x11e>
  else if(htim_encoder->Instance==TIM4)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a25      	ldr	r2, [pc, #148]	; (8004838 <HAL_TIM_Encoder_MspInit+0x138>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d13a      	bne.n	800481e <HAL_TIM_Encoder_MspInit+0x11e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80047a8:	4b20      	ldr	r3, [pc, #128]	; (800482c <HAL_TIM_Encoder_MspInit+0x12c>)
 80047aa:	69db      	ldr	r3, [r3, #28]
 80047ac:	4a1f      	ldr	r2, [pc, #124]	; (800482c <HAL_TIM_Encoder_MspInit+0x12c>)
 80047ae:	f043 0304 	orr.w	r3, r3, #4
 80047b2:	61d3      	str	r3, [r2, #28]
 80047b4:	4b1d      	ldr	r3, [pc, #116]	; (800482c <HAL_TIM_Encoder_MspInit+0x12c>)
 80047b6:	69db      	ldr	r3, [r3, #28]
 80047b8:	f003 0304 	and.w	r3, r3, #4
 80047bc:	60fb      	str	r3, [r7, #12]
 80047be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80047c0:	4b1a      	ldr	r3, [pc, #104]	; (800482c <HAL_TIM_Encoder_MspInit+0x12c>)
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	4a19      	ldr	r2, [pc, #100]	; (800482c <HAL_TIM_Encoder_MspInit+0x12c>)
 80047c6:	f043 0320 	orr.w	r3, r3, #32
 80047ca:	6193      	str	r3, [r2, #24]
 80047cc:	4b17      	ldr	r3, [pc, #92]	; (800482c <HAL_TIM_Encoder_MspInit+0x12c>)
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	f003 0320 	and.w	r3, r3, #32
 80047d4:	60bb      	str	r3, [r7, #8]
 80047d6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80047d8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80047dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80047de:	2300      	movs	r3, #0
 80047e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047e2:	2300      	movs	r3, #0
 80047e4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80047e6:	f107 0318 	add.w	r3, r7, #24
 80047ea:	4619      	mov	r1, r3
 80047ec:	4813      	ldr	r0, [pc, #76]	; (800483c <HAL_TIM_Encoder_MspInit+0x13c>)
 80047ee:	f000 fab1 	bl	8004d54 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM4_ENABLE();
 80047f2:	4b10      	ldr	r3, [pc, #64]	; (8004834 <HAL_TIM_Encoder_MspInit+0x134>)
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047fa:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80047fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004802:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004806:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004808:	4a0a      	ldr	r2, [pc, #40]	; (8004834 <HAL_TIM_Encoder_MspInit+0x134>)
 800480a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800480c:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 800480e:	2200      	movs	r2, #0
 8004810:	2105      	movs	r1, #5
 8004812:	201e      	movs	r0, #30
 8004814:	f000 fa67 	bl	8004ce6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004818:	201e      	movs	r0, #30
 800481a:	f000 fa80 	bl	8004d1e <HAL_NVIC_EnableIRQ>
}
 800481e:	bf00      	nop
 8004820:	3730      	adds	r7, #48	; 0x30
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	40000400 	.word	0x40000400
 800482c:	40021000 	.word	0x40021000
 8004830:	40011000 	.word	0x40011000
 8004834:	40010000 	.word	0x40010000
 8004838:	40000800 	.word	0x40000800
 800483c:	40011400 	.word	0x40011400

08004840 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b08a      	sub	sp, #40	; 0x28
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004848:	f107 0314 	add.w	r3, r7, #20
 800484c:	2200      	movs	r2, #0
 800484e:	601a      	str	r2, [r3, #0]
 8004850:	605a      	str	r2, [r3, #4]
 8004852:	609a      	str	r2, [r3, #8]
 8004854:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a25      	ldr	r2, [pc, #148]	; (80048f0 <HAL_UART_MspInit+0xb0>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d143      	bne.n	80048e8 <HAL_UART_MspInit+0xa8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004860:	4b24      	ldr	r3, [pc, #144]	; (80048f4 <HAL_UART_MspInit+0xb4>)
 8004862:	69db      	ldr	r3, [r3, #28]
 8004864:	4a23      	ldr	r2, [pc, #140]	; (80048f4 <HAL_UART_MspInit+0xb4>)
 8004866:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800486a:	61d3      	str	r3, [r2, #28]
 800486c:	4b21      	ldr	r3, [pc, #132]	; (80048f4 <HAL_UART_MspInit+0xb4>)
 800486e:	69db      	ldr	r3, [r3, #28]
 8004870:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004874:	613b      	str	r3, [r7, #16]
 8004876:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004878:	4b1e      	ldr	r3, [pc, #120]	; (80048f4 <HAL_UART_MspInit+0xb4>)
 800487a:	699b      	ldr	r3, [r3, #24]
 800487c:	4a1d      	ldr	r2, [pc, #116]	; (80048f4 <HAL_UART_MspInit+0xb4>)
 800487e:	f043 0320 	orr.w	r3, r3, #32
 8004882:	6193      	str	r3, [r2, #24]
 8004884:	4b1b      	ldr	r3, [pc, #108]	; (80048f4 <HAL_UART_MspInit+0xb4>)
 8004886:	699b      	ldr	r3, [r3, #24]
 8004888:	f003 0320 	and.w	r3, r3, #32
 800488c:	60fb      	str	r3, [r7, #12]
 800488e:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004890:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004894:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004896:	2302      	movs	r3, #2
 8004898:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800489a:	2303      	movs	r3, #3
 800489c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800489e:	f107 0314 	add.w	r3, r7, #20
 80048a2:	4619      	mov	r1, r3
 80048a4:	4814      	ldr	r0, [pc, #80]	; (80048f8 <HAL_UART_MspInit+0xb8>)
 80048a6:	f000 fa55 	bl	8004d54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80048aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80048ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80048b0:	2300      	movs	r3, #0
 80048b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048b4:	2300      	movs	r3, #0
 80048b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80048b8:	f107 0314 	add.w	r3, r7, #20
 80048bc:	4619      	mov	r1, r3
 80048be:	480e      	ldr	r0, [pc, #56]	; (80048f8 <HAL_UART_MspInit+0xb8>)
 80048c0:	f000 fa48 	bl	8004d54 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART3_ENABLE();
 80048c4:	4b0d      	ldr	r3, [pc, #52]	; (80048fc <HAL_UART_MspInit+0xbc>)
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	627b      	str	r3, [r7, #36]	; 0x24
 80048ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048cc:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80048d0:	627b      	str	r3, [r7, #36]	; 0x24
 80048d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80048d8:	627b      	str	r3, [r7, #36]	; 0x24
 80048da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048dc:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80048e0:	627b      	str	r3, [r7, #36]	; 0x24
 80048e2:	4a06      	ldr	r2, [pc, #24]	; (80048fc <HAL_UART_MspInit+0xbc>)
 80048e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e6:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80048e8:	bf00      	nop
 80048ea:	3728      	adds	r7, #40	; 0x28
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	40004800 	.word	0x40004800
 80048f4:	40021000 	.word	0x40021000
 80048f8:	40011400 	.word	0x40011400
 80048fc:	40010000 	.word	0x40010000

08004900 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004900:	b480      	push	{r7}
 8004902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004904:	e7fe      	b.n	8004904 <NMI_Handler+0x4>

08004906 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004906:	b480      	push	{r7}
 8004908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800490a:	e7fe      	b.n	800490a <HardFault_Handler+0x4>

0800490c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800490c:	b480      	push	{r7}
 800490e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004910:	e7fe      	b.n	8004910 <MemManage_Handler+0x4>

08004912 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004912:	b480      	push	{r7}
 8004914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004916:	e7fe      	b.n	8004916 <BusFault_Handler+0x4>

08004918 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004918:	b480      	push	{r7}
 800491a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800491c:	e7fe      	b.n	800491c <UsageFault_Handler+0x4>

0800491e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800491e:	b480      	push	{r7}
 8004920:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004922:	bf00      	nop
 8004924:	46bd      	mov	sp, r7
 8004926:	bc80      	pop	{r7}
 8004928:	4770      	bx	lr

0800492a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800492a:	b580      	push	{r7, lr}
 800492c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800492e:	f000 f8e7 	bl	8004b00 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8004932:	f003 fdaf 	bl	8008494 <xTaskGetSchedulerState>
 8004936:	4603      	mov	r3, r0
 8004938:	2b01      	cmp	r3, #1
 800493a:	d001      	beq.n	8004940 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800493c:	f004 fc14 	bl	8009168 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004940:	bf00      	nop
 8004942:	bd80      	pop	{r7, pc}

08004944 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004948:	4802      	ldr	r0, [pc, #8]	; (8004954 <TIM3_IRQHandler+0x10>)
 800494a:	f001 f9b7 	bl	8005cbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800494e:	bf00      	nop
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	2000018c 	.word	0x2000018c

08004958 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800495c:	4802      	ldr	r0, [pc, #8]	; (8004968 <TIM4_IRQHandler+0x10>)
 800495e:	f001 f9ad 	bl	8005cbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004962:	bf00      	nop
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop
 8004968:	200001d4 	.word	0x200001d4

0800496c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800496c:	b480      	push	{r7}
 800496e:	af00      	add	r7, sp, #0
	return 1;
 8004970:	2301      	movs	r3, #1
}
 8004972:	4618      	mov	r0, r3
 8004974:	46bd      	mov	sp, r7
 8004976:	bc80      	pop	{r7}
 8004978:	4770      	bx	lr

0800497a <_kill>:

int _kill(int pid, int sig)
{
 800497a:	b580      	push	{r7, lr}
 800497c:	b082      	sub	sp, #8
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
 8004982:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004984:	f004 ffa0 	bl	80098c8 <__errno>
 8004988:	4603      	mov	r3, r0
 800498a:	2216      	movs	r2, #22
 800498c:	601a      	str	r2, [r3, #0]
	return -1;
 800498e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004992:	4618      	mov	r0, r3
 8004994:	3708      	adds	r7, #8
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}

0800499a <_exit>:

void _exit (int status)
{
 800499a:	b580      	push	{r7, lr}
 800499c:	b082      	sub	sp, #8
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80049a2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f7ff ffe7 	bl	800497a <_kill>
	while (1) {}		/* Make sure we hang here */
 80049ac:	e7fe      	b.n	80049ac <_exit+0x12>
	...

080049b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b086      	sub	sp, #24
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80049b8:	4a14      	ldr	r2, [pc, #80]	; (8004a0c <_sbrk+0x5c>)
 80049ba:	4b15      	ldr	r3, [pc, #84]	; (8004a10 <_sbrk+0x60>)
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80049c4:	4b13      	ldr	r3, [pc, #76]	; (8004a14 <_sbrk+0x64>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d102      	bne.n	80049d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80049cc:	4b11      	ldr	r3, [pc, #68]	; (8004a14 <_sbrk+0x64>)
 80049ce:	4a12      	ldr	r2, [pc, #72]	; (8004a18 <_sbrk+0x68>)
 80049d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80049d2:	4b10      	ldr	r3, [pc, #64]	; (8004a14 <_sbrk+0x64>)
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4413      	add	r3, r2
 80049da:	693a      	ldr	r2, [r7, #16]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d207      	bcs.n	80049f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80049e0:	f004 ff72 	bl	80098c8 <__errno>
 80049e4:	4603      	mov	r3, r0
 80049e6:	220c      	movs	r2, #12
 80049e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80049ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80049ee:	e009      	b.n	8004a04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80049f0:	4b08      	ldr	r3, [pc, #32]	; (8004a14 <_sbrk+0x64>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80049f6:	4b07      	ldr	r3, [pc, #28]	; (8004a14 <_sbrk+0x64>)
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4413      	add	r3, r2
 80049fe:	4a05      	ldr	r2, [pc, #20]	; (8004a14 <_sbrk+0x64>)
 8004a00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004a02:	68fb      	ldr	r3, [r7, #12]
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3718      	adds	r7, #24
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	20010000 	.word	0x20010000
 8004a10:	00000400 	.word	0x00000400
 8004a14:	2000039c 	.word	0x2000039c
 8004a18:	200027c0 	.word	0x200027c0

08004a1c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004a20:	bf00      	nop
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bc80      	pop	{r7}
 8004a26:	4770      	bx	lr

08004a28 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004a28:	480c      	ldr	r0, [pc, #48]	; (8004a5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004a2a:	490d      	ldr	r1, [pc, #52]	; (8004a60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004a2c:	4a0d      	ldr	r2, [pc, #52]	; (8004a64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004a2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004a30:	e002      	b.n	8004a38 <LoopCopyDataInit>

08004a32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004a32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004a34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004a36:	3304      	adds	r3, #4

08004a38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004a38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004a3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004a3c:	d3f9      	bcc.n	8004a32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004a3e:	4a0a      	ldr	r2, [pc, #40]	; (8004a68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004a40:	4c0a      	ldr	r4, [pc, #40]	; (8004a6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8004a42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004a44:	e001      	b.n	8004a4a <LoopFillZerobss>

08004a46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004a46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004a48:	3204      	adds	r2, #4

08004a4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004a4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004a4c:	d3fb      	bcc.n	8004a46 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004a4e:	f7ff ffe5 	bl	8004a1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004a52:	f004 ff3f 	bl	80098d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004a56:	f7ff fa4b 	bl	8003ef0 <main>
  bx lr
 8004a5a:	4770      	bx	lr
  ldr r0, =_sdata
 8004a5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004a60:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8004a64:	0800a9f4 	.word	0x0800a9f4
  ldr r2, =_sbss
 8004a68:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8004a6c:	200027c0 	.word	0x200027c0

08004a70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004a70:	e7fe      	b.n	8004a70 <ADC1_2_IRQHandler>
	...

08004a74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004a78:	4b08      	ldr	r3, [pc, #32]	; (8004a9c <HAL_Init+0x28>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a07      	ldr	r2, [pc, #28]	; (8004a9c <HAL_Init+0x28>)
 8004a7e:	f043 0310 	orr.w	r3, r3, #16
 8004a82:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a84:	2003      	movs	r0, #3
 8004a86:	f000 f923 	bl	8004cd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004a8a:	200f      	movs	r0, #15
 8004a8c:	f000 f808 	bl	8004aa0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004a90:	f7ff fd78 	bl	8004584 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	40022000 	.word	0x40022000

08004aa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004aa8:	4b12      	ldr	r3, [pc, #72]	; (8004af4 <HAL_InitTick+0x54>)
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	4b12      	ldr	r3, [pc, #72]	; (8004af8 <HAL_InitTick+0x58>)
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ab6:	fbb3 f3f1 	udiv	r3, r3, r1
 8004aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f000 f93b 	bl	8004d3a <HAL_SYSTICK_Config>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d001      	beq.n	8004ace <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e00e      	b.n	8004aec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2b0f      	cmp	r3, #15
 8004ad2:	d80a      	bhi.n	8004aea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	6879      	ldr	r1, [r7, #4]
 8004ad8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004adc:	f000 f903 	bl	8004ce6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004ae0:	4a06      	ldr	r2, [pc, #24]	; (8004afc <HAL_InitTick+0x5c>)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	e000      	b.n	8004aec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3708      	adds	r7, #8
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}
 8004af4:	20000004 	.word	0x20000004
 8004af8:	2000000c 	.word	0x2000000c
 8004afc:	20000008 	.word	0x20000008

08004b00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b00:	b480      	push	{r7}
 8004b02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004b04:	4b05      	ldr	r3, [pc, #20]	; (8004b1c <HAL_IncTick+0x1c>)
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	461a      	mov	r2, r3
 8004b0a:	4b05      	ldr	r3, [pc, #20]	; (8004b20 <HAL_IncTick+0x20>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4413      	add	r3, r2
 8004b10:	4a03      	ldr	r2, [pc, #12]	; (8004b20 <HAL_IncTick+0x20>)
 8004b12:	6013      	str	r3, [r2, #0]
}
 8004b14:	bf00      	nop
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bc80      	pop	{r7}
 8004b1a:	4770      	bx	lr
 8004b1c:	2000000c 	.word	0x2000000c
 8004b20:	200003a0 	.word	0x200003a0

08004b24 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b24:	b480      	push	{r7}
 8004b26:	af00      	add	r7, sp, #0
  return uwTick;
 8004b28:	4b02      	ldr	r3, [pc, #8]	; (8004b34 <HAL_GetTick+0x10>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bc80      	pop	{r7}
 8004b32:	4770      	bx	lr
 8004b34:	200003a0 	.word	0x200003a0

08004b38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b085      	sub	sp, #20
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f003 0307 	and.w	r3, r3, #7
 8004b46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b48:	4b0c      	ldr	r3, [pc, #48]	; (8004b7c <__NVIC_SetPriorityGrouping+0x44>)
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b4e:	68ba      	ldr	r2, [r7, #8]
 8004b50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b54:	4013      	ands	r3, r2
 8004b56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004b64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b6a:	4a04      	ldr	r2, [pc, #16]	; (8004b7c <__NVIC_SetPriorityGrouping+0x44>)
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	60d3      	str	r3, [r2, #12]
}
 8004b70:	bf00      	nop
 8004b72:	3714      	adds	r7, #20
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bc80      	pop	{r7}
 8004b78:	4770      	bx	lr
 8004b7a:	bf00      	nop
 8004b7c:	e000ed00 	.word	0xe000ed00

08004b80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b80:	b480      	push	{r7}
 8004b82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b84:	4b04      	ldr	r3, [pc, #16]	; (8004b98 <__NVIC_GetPriorityGrouping+0x18>)
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	0a1b      	lsrs	r3, r3, #8
 8004b8a:	f003 0307 	and.w	r3, r3, #7
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bc80      	pop	{r7}
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop
 8004b98:	e000ed00 	.word	0xe000ed00

08004b9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	db0b      	blt.n	8004bc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bae:	79fb      	ldrb	r3, [r7, #7]
 8004bb0:	f003 021f 	and.w	r2, r3, #31
 8004bb4:	4906      	ldr	r1, [pc, #24]	; (8004bd0 <__NVIC_EnableIRQ+0x34>)
 8004bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bba:	095b      	lsrs	r3, r3, #5
 8004bbc:	2001      	movs	r0, #1
 8004bbe:	fa00 f202 	lsl.w	r2, r0, r2
 8004bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004bc6:	bf00      	nop
 8004bc8:	370c      	adds	r7, #12
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bc80      	pop	{r7}
 8004bce:	4770      	bx	lr
 8004bd0:	e000e100 	.word	0xe000e100

08004bd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	4603      	mov	r3, r0
 8004bdc:	6039      	str	r1, [r7, #0]
 8004bde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	db0a      	blt.n	8004bfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	b2da      	uxtb	r2, r3
 8004bec:	490c      	ldr	r1, [pc, #48]	; (8004c20 <__NVIC_SetPriority+0x4c>)
 8004bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bf2:	0112      	lsls	r2, r2, #4
 8004bf4:	b2d2      	uxtb	r2, r2
 8004bf6:	440b      	add	r3, r1
 8004bf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004bfc:	e00a      	b.n	8004c14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	b2da      	uxtb	r2, r3
 8004c02:	4908      	ldr	r1, [pc, #32]	; (8004c24 <__NVIC_SetPriority+0x50>)
 8004c04:	79fb      	ldrb	r3, [r7, #7]
 8004c06:	f003 030f 	and.w	r3, r3, #15
 8004c0a:	3b04      	subs	r3, #4
 8004c0c:	0112      	lsls	r2, r2, #4
 8004c0e:	b2d2      	uxtb	r2, r2
 8004c10:	440b      	add	r3, r1
 8004c12:	761a      	strb	r2, [r3, #24]
}
 8004c14:	bf00      	nop
 8004c16:	370c      	adds	r7, #12
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bc80      	pop	{r7}
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop
 8004c20:	e000e100 	.word	0xe000e100
 8004c24:	e000ed00 	.word	0xe000ed00

08004c28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b089      	sub	sp, #36	; 0x24
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f003 0307 	and.w	r3, r3, #7
 8004c3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	f1c3 0307 	rsb	r3, r3, #7
 8004c42:	2b04      	cmp	r3, #4
 8004c44:	bf28      	it	cs
 8004c46:	2304      	movcs	r3, #4
 8004c48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	3304      	adds	r3, #4
 8004c4e:	2b06      	cmp	r3, #6
 8004c50:	d902      	bls.n	8004c58 <NVIC_EncodePriority+0x30>
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	3b03      	subs	r3, #3
 8004c56:	e000      	b.n	8004c5a <NVIC_EncodePriority+0x32>
 8004c58:	2300      	movs	r3, #0
 8004c5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	fa02 f303 	lsl.w	r3, r2, r3
 8004c66:	43da      	mvns	r2, r3
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	401a      	ands	r2, r3
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	fa01 f303 	lsl.w	r3, r1, r3
 8004c7a:	43d9      	mvns	r1, r3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c80:	4313      	orrs	r3, r2
         );
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3724      	adds	r7, #36	; 0x24
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bc80      	pop	{r7}
 8004c8a:	4770      	bx	lr

08004c8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b082      	sub	sp, #8
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	3b01      	subs	r3, #1
 8004c98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c9c:	d301      	bcc.n	8004ca2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e00f      	b.n	8004cc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ca2:	4a0a      	ldr	r2, [pc, #40]	; (8004ccc <SysTick_Config+0x40>)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004caa:	210f      	movs	r1, #15
 8004cac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004cb0:	f7ff ff90 	bl	8004bd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004cb4:	4b05      	ldr	r3, [pc, #20]	; (8004ccc <SysTick_Config+0x40>)
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004cba:	4b04      	ldr	r3, [pc, #16]	; (8004ccc <SysTick_Config+0x40>)
 8004cbc:	2207      	movs	r2, #7
 8004cbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3708      	adds	r7, #8
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	e000e010 	.word	0xe000e010

08004cd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b082      	sub	sp, #8
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f7ff ff2d 	bl	8004b38 <__NVIC_SetPriorityGrouping>
}
 8004cde:	bf00      	nop
 8004ce0:	3708      	adds	r7, #8
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}

08004ce6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004ce6:	b580      	push	{r7, lr}
 8004ce8:	b086      	sub	sp, #24
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	4603      	mov	r3, r0
 8004cee:	60b9      	str	r1, [r7, #8]
 8004cf0:	607a      	str	r2, [r7, #4]
 8004cf2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004cf8:	f7ff ff42 	bl	8004b80 <__NVIC_GetPriorityGrouping>
 8004cfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	68b9      	ldr	r1, [r7, #8]
 8004d02:	6978      	ldr	r0, [r7, #20]
 8004d04:	f7ff ff90 	bl	8004c28 <NVIC_EncodePriority>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d0e:	4611      	mov	r1, r2
 8004d10:	4618      	mov	r0, r3
 8004d12:	f7ff ff5f 	bl	8004bd4 <__NVIC_SetPriority>
}
 8004d16:	bf00      	nop
 8004d18:	3718      	adds	r7, #24
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}

08004d1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d1e:	b580      	push	{r7, lr}
 8004d20:	b082      	sub	sp, #8
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	4603      	mov	r3, r0
 8004d26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f7ff ff35 	bl	8004b9c <__NVIC_EnableIRQ>
}
 8004d32:	bf00      	nop
 8004d34:	3708      	adds	r7, #8
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}

08004d3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d3a:	b580      	push	{r7, lr}
 8004d3c:	b082      	sub	sp, #8
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f7ff ffa2 	bl	8004c8c <SysTick_Config>
 8004d48:	4603      	mov	r3, r0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3708      	adds	r7, #8
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
	...

08004d54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b08b      	sub	sp, #44	; 0x2c
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004d62:	2300      	movs	r3, #0
 8004d64:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d66:	e179      	b.n	800505c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004d68:	2201      	movs	r2, #1
 8004d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d70:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	69fa      	ldr	r2, [r7, #28]
 8004d78:	4013      	ands	r3, r2
 8004d7a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004d7c:	69ba      	ldr	r2, [r7, #24]
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	f040 8168 	bne.w	8005056 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	4a96      	ldr	r2, [pc, #600]	; (8004fe4 <HAL_GPIO_Init+0x290>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d05e      	beq.n	8004e4e <HAL_GPIO_Init+0xfa>
 8004d90:	4a94      	ldr	r2, [pc, #592]	; (8004fe4 <HAL_GPIO_Init+0x290>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d875      	bhi.n	8004e82 <HAL_GPIO_Init+0x12e>
 8004d96:	4a94      	ldr	r2, [pc, #592]	; (8004fe8 <HAL_GPIO_Init+0x294>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d058      	beq.n	8004e4e <HAL_GPIO_Init+0xfa>
 8004d9c:	4a92      	ldr	r2, [pc, #584]	; (8004fe8 <HAL_GPIO_Init+0x294>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d86f      	bhi.n	8004e82 <HAL_GPIO_Init+0x12e>
 8004da2:	4a92      	ldr	r2, [pc, #584]	; (8004fec <HAL_GPIO_Init+0x298>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d052      	beq.n	8004e4e <HAL_GPIO_Init+0xfa>
 8004da8:	4a90      	ldr	r2, [pc, #576]	; (8004fec <HAL_GPIO_Init+0x298>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d869      	bhi.n	8004e82 <HAL_GPIO_Init+0x12e>
 8004dae:	4a90      	ldr	r2, [pc, #576]	; (8004ff0 <HAL_GPIO_Init+0x29c>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d04c      	beq.n	8004e4e <HAL_GPIO_Init+0xfa>
 8004db4:	4a8e      	ldr	r2, [pc, #568]	; (8004ff0 <HAL_GPIO_Init+0x29c>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d863      	bhi.n	8004e82 <HAL_GPIO_Init+0x12e>
 8004dba:	4a8e      	ldr	r2, [pc, #568]	; (8004ff4 <HAL_GPIO_Init+0x2a0>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d046      	beq.n	8004e4e <HAL_GPIO_Init+0xfa>
 8004dc0:	4a8c      	ldr	r2, [pc, #560]	; (8004ff4 <HAL_GPIO_Init+0x2a0>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d85d      	bhi.n	8004e82 <HAL_GPIO_Init+0x12e>
 8004dc6:	2b12      	cmp	r3, #18
 8004dc8:	d82a      	bhi.n	8004e20 <HAL_GPIO_Init+0xcc>
 8004dca:	2b12      	cmp	r3, #18
 8004dcc:	d859      	bhi.n	8004e82 <HAL_GPIO_Init+0x12e>
 8004dce:	a201      	add	r2, pc, #4	; (adr r2, 8004dd4 <HAL_GPIO_Init+0x80>)
 8004dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dd4:	08004e4f 	.word	0x08004e4f
 8004dd8:	08004e29 	.word	0x08004e29
 8004ddc:	08004e3b 	.word	0x08004e3b
 8004de0:	08004e7d 	.word	0x08004e7d
 8004de4:	08004e83 	.word	0x08004e83
 8004de8:	08004e83 	.word	0x08004e83
 8004dec:	08004e83 	.word	0x08004e83
 8004df0:	08004e83 	.word	0x08004e83
 8004df4:	08004e83 	.word	0x08004e83
 8004df8:	08004e83 	.word	0x08004e83
 8004dfc:	08004e83 	.word	0x08004e83
 8004e00:	08004e83 	.word	0x08004e83
 8004e04:	08004e83 	.word	0x08004e83
 8004e08:	08004e83 	.word	0x08004e83
 8004e0c:	08004e83 	.word	0x08004e83
 8004e10:	08004e83 	.word	0x08004e83
 8004e14:	08004e83 	.word	0x08004e83
 8004e18:	08004e31 	.word	0x08004e31
 8004e1c:	08004e45 	.word	0x08004e45
 8004e20:	4a75      	ldr	r2, [pc, #468]	; (8004ff8 <HAL_GPIO_Init+0x2a4>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d013      	beq.n	8004e4e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004e26:	e02c      	b.n	8004e82 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	623b      	str	r3, [r7, #32]
          break;
 8004e2e:	e029      	b.n	8004e84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	3304      	adds	r3, #4
 8004e36:	623b      	str	r3, [r7, #32]
          break;
 8004e38:	e024      	b.n	8004e84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	3308      	adds	r3, #8
 8004e40:	623b      	str	r3, [r7, #32]
          break;
 8004e42:	e01f      	b.n	8004e84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	330c      	adds	r3, #12
 8004e4a:	623b      	str	r3, [r7, #32]
          break;
 8004e4c:	e01a      	b.n	8004e84 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d102      	bne.n	8004e5c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004e56:	2304      	movs	r3, #4
 8004e58:	623b      	str	r3, [r7, #32]
          break;
 8004e5a:	e013      	b.n	8004e84 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d105      	bne.n	8004e70 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004e64:	2308      	movs	r3, #8
 8004e66:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	69fa      	ldr	r2, [r7, #28]
 8004e6c:	611a      	str	r2, [r3, #16]
          break;
 8004e6e:	e009      	b.n	8004e84 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004e70:	2308      	movs	r3, #8
 8004e72:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	69fa      	ldr	r2, [r7, #28]
 8004e78:	615a      	str	r2, [r3, #20]
          break;
 8004e7a:	e003      	b.n	8004e84 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	623b      	str	r3, [r7, #32]
          break;
 8004e80:	e000      	b.n	8004e84 <HAL_GPIO_Init+0x130>
          break;
 8004e82:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	2bff      	cmp	r3, #255	; 0xff
 8004e88:	d801      	bhi.n	8004e8e <HAL_GPIO_Init+0x13a>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	e001      	b.n	8004e92 <HAL_GPIO_Init+0x13e>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	3304      	adds	r3, #4
 8004e92:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	2bff      	cmp	r3, #255	; 0xff
 8004e98:	d802      	bhi.n	8004ea0 <HAL_GPIO_Init+0x14c>
 8004e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	e002      	b.n	8004ea6 <HAL_GPIO_Init+0x152>
 8004ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea2:	3b08      	subs	r3, #8
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	210f      	movs	r1, #15
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8004eb4:	43db      	mvns	r3, r3
 8004eb6:	401a      	ands	r2, r3
 8004eb8:	6a39      	ldr	r1, [r7, #32]
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8004ec0:	431a      	orrs	r2, r3
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	f000 80c1 	beq.w	8005056 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004ed4:	4b49      	ldr	r3, [pc, #292]	; (8004ffc <HAL_GPIO_Init+0x2a8>)
 8004ed6:	699b      	ldr	r3, [r3, #24]
 8004ed8:	4a48      	ldr	r2, [pc, #288]	; (8004ffc <HAL_GPIO_Init+0x2a8>)
 8004eda:	f043 0301 	orr.w	r3, r3, #1
 8004ede:	6193      	str	r3, [r2, #24]
 8004ee0:	4b46      	ldr	r3, [pc, #280]	; (8004ffc <HAL_GPIO_Init+0x2a8>)
 8004ee2:	699b      	ldr	r3, [r3, #24]
 8004ee4:	f003 0301 	and.w	r3, r3, #1
 8004ee8:	60bb      	str	r3, [r7, #8]
 8004eea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004eec:	4a44      	ldr	r2, [pc, #272]	; (8005000 <HAL_GPIO_Init+0x2ac>)
 8004eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef0:	089b      	lsrs	r3, r3, #2
 8004ef2:	3302      	adds	r3, #2
 8004ef4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ef8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efc:	f003 0303 	and.w	r3, r3, #3
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	220f      	movs	r2, #15
 8004f04:	fa02 f303 	lsl.w	r3, r2, r3
 8004f08:	43db      	mvns	r3, r3
 8004f0a:	68fa      	ldr	r2, [r7, #12]
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a3c      	ldr	r2, [pc, #240]	; (8005004 <HAL_GPIO_Init+0x2b0>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d01f      	beq.n	8004f58 <HAL_GPIO_Init+0x204>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a3b      	ldr	r2, [pc, #236]	; (8005008 <HAL_GPIO_Init+0x2b4>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d019      	beq.n	8004f54 <HAL_GPIO_Init+0x200>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a3a      	ldr	r2, [pc, #232]	; (800500c <HAL_GPIO_Init+0x2b8>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d013      	beq.n	8004f50 <HAL_GPIO_Init+0x1fc>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a39      	ldr	r2, [pc, #228]	; (8005010 <HAL_GPIO_Init+0x2bc>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d00d      	beq.n	8004f4c <HAL_GPIO_Init+0x1f8>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a38      	ldr	r2, [pc, #224]	; (8005014 <HAL_GPIO_Init+0x2c0>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d007      	beq.n	8004f48 <HAL_GPIO_Init+0x1f4>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a37      	ldr	r2, [pc, #220]	; (8005018 <HAL_GPIO_Init+0x2c4>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d101      	bne.n	8004f44 <HAL_GPIO_Init+0x1f0>
 8004f40:	2305      	movs	r3, #5
 8004f42:	e00a      	b.n	8004f5a <HAL_GPIO_Init+0x206>
 8004f44:	2306      	movs	r3, #6
 8004f46:	e008      	b.n	8004f5a <HAL_GPIO_Init+0x206>
 8004f48:	2304      	movs	r3, #4
 8004f4a:	e006      	b.n	8004f5a <HAL_GPIO_Init+0x206>
 8004f4c:	2303      	movs	r3, #3
 8004f4e:	e004      	b.n	8004f5a <HAL_GPIO_Init+0x206>
 8004f50:	2302      	movs	r3, #2
 8004f52:	e002      	b.n	8004f5a <HAL_GPIO_Init+0x206>
 8004f54:	2301      	movs	r3, #1
 8004f56:	e000      	b.n	8004f5a <HAL_GPIO_Init+0x206>
 8004f58:	2300      	movs	r3, #0
 8004f5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f5c:	f002 0203 	and.w	r2, r2, #3
 8004f60:	0092      	lsls	r2, r2, #2
 8004f62:	4093      	lsls	r3, r2
 8004f64:	68fa      	ldr	r2, [r7, #12]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004f6a:	4925      	ldr	r1, [pc, #148]	; (8005000 <HAL_GPIO_Init+0x2ac>)
 8004f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6e:	089b      	lsrs	r3, r3, #2
 8004f70:	3302      	adds	r3, #2
 8004f72:	68fa      	ldr	r2, [r7, #12]
 8004f74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d006      	beq.n	8004f92 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004f84:	4b25      	ldr	r3, [pc, #148]	; (800501c <HAL_GPIO_Init+0x2c8>)
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	4924      	ldr	r1, [pc, #144]	; (800501c <HAL_GPIO_Init+0x2c8>)
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	600b      	str	r3, [r1, #0]
 8004f90:	e006      	b.n	8004fa0 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004f92:	4b22      	ldr	r3, [pc, #136]	; (800501c <HAL_GPIO_Init+0x2c8>)
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	43db      	mvns	r3, r3
 8004f9a:	4920      	ldr	r1, [pc, #128]	; (800501c <HAL_GPIO_Init+0x2c8>)
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d006      	beq.n	8004fba <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004fac:	4b1b      	ldr	r3, [pc, #108]	; (800501c <HAL_GPIO_Init+0x2c8>)
 8004fae:	685a      	ldr	r2, [r3, #4]
 8004fb0:	491a      	ldr	r1, [pc, #104]	; (800501c <HAL_GPIO_Init+0x2c8>)
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	604b      	str	r3, [r1, #4]
 8004fb8:	e006      	b.n	8004fc8 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004fba:	4b18      	ldr	r3, [pc, #96]	; (800501c <HAL_GPIO_Init+0x2c8>)
 8004fbc:	685a      	ldr	r2, [r3, #4]
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	43db      	mvns	r3, r3
 8004fc2:	4916      	ldr	r1, [pc, #88]	; (800501c <HAL_GPIO_Init+0x2c8>)
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d025      	beq.n	8005020 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004fd4:	4b11      	ldr	r3, [pc, #68]	; (800501c <HAL_GPIO_Init+0x2c8>)
 8004fd6:	689a      	ldr	r2, [r3, #8]
 8004fd8:	4910      	ldr	r1, [pc, #64]	; (800501c <HAL_GPIO_Init+0x2c8>)
 8004fda:	69bb      	ldr	r3, [r7, #24]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	608b      	str	r3, [r1, #8]
 8004fe0:	e025      	b.n	800502e <HAL_GPIO_Init+0x2da>
 8004fe2:	bf00      	nop
 8004fe4:	10320000 	.word	0x10320000
 8004fe8:	10310000 	.word	0x10310000
 8004fec:	10220000 	.word	0x10220000
 8004ff0:	10210000 	.word	0x10210000
 8004ff4:	10120000 	.word	0x10120000
 8004ff8:	10110000 	.word	0x10110000
 8004ffc:	40021000 	.word	0x40021000
 8005000:	40010000 	.word	0x40010000
 8005004:	40010800 	.word	0x40010800
 8005008:	40010c00 	.word	0x40010c00
 800500c:	40011000 	.word	0x40011000
 8005010:	40011400 	.word	0x40011400
 8005014:	40011800 	.word	0x40011800
 8005018:	40011c00 	.word	0x40011c00
 800501c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005020:	4b15      	ldr	r3, [pc, #84]	; (8005078 <HAL_GPIO_Init+0x324>)
 8005022:	689a      	ldr	r2, [r3, #8]
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	43db      	mvns	r3, r3
 8005028:	4913      	ldr	r1, [pc, #76]	; (8005078 <HAL_GPIO_Init+0x324>)
 800502a:	4013      	ands	r3, r2
 800502c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005036:	2b00      	cmp	r3, #0
 8005038:	d006      	beq.n	8005048 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800503a:	4b0f      	ldr	r3, [pc, #60]	; (8005078 <HAL_GPIO_Init+0x324>)
 800503c:	68da      	ldr	r2, [r3, #12]
 800503e:	490e      	ldr	r1, [pc, #56]	; (8005078 <HAL_GPIO_Init+0x324>)
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	4313      	orrs	r3, r2
 8005044:	60cb      	str	r3, [r1, #12]
 8005046:	e006      	b.n	8005056 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005048:	4b0b      	ldr	r3, [pc, #44]	; (8005078 <HAL_GPIO_Init+0x324>)
 800504a:	68da      	ldr	r2, [r3, #12]
 800504c:	69bb      	ldr	r3, [r7, #24]
 800504e:	43db      	mvns	r3, r3
 8005050:	4909      	ldr	r1, [pc, #36]	; (8005078 <HAL_GPIO_Init+0x324>)
 8005052:	4013      	ands	r3, r2
 8005054:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8005056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005058:	3301      	adds	r3, #1
 800505a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005062:	fa22 f303 	lsr.w	r3, r2, r3
 8005066:	2b00      	cmp	r3, #0
 8005068:	f47f ae7e 	bne.w	8004d68 <HAL_GPIO_Init+0x14>
  }
}
 800506c:	bf00      	nop
 800506e:	bf00      	nop
 8005070:	372c      	adds	r7, #44	; 0x2c
 8005072:	46bd      	mov	sp, r7
 8005074:	bc80      	pop	{r7}
 8005076:	4770      	bx	lr
 8005078:	40010400 	.word	0x40010400

0800507c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800507c:	b480      	push	{r7}
 800507e:	b085      	sub	sp, #20
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	460b      	mov	r3, r1
 8005086:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	689a      	ldr	r2, [r3, #8]
 800508c:	887b      	ldrh	r3, [r7, #2]
 800508e:	4013      	ands	r3, r2
 8005090:	2b00      	cmp	r3, #0
 8005092:	d002      	beq.n	800509a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005094:	2301      	movs	r3, #1
 8005096:	73fb      	strb	r3, [r7, #15]
 8005098:	e001      	b.n	800509e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800509a:	2300      	movs	r3, #0
 800509c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800509e:	7bfb      	ldrb	r3, [r7, #15]
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3714      	adds	r7, #20
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bc80      	pop	{r7}
 80050a8:	4770      	bx	lr

080050aa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80050aa:	b480      	push	{r7}
 80050ac:	b083      	sub	sp, #12
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
 80050b2:	460b      	mov	r3, r1
 80050b4:	807b      	strh	r3, [r7, #2]
 80050b6:	4613      	mov	r3, r2
 80050b8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80050ba:	787b      	ldrb	r3, [r7, #1]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d003      	beq.n	80050c8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80050c0:	887a      	ldrh	r2, [r7, #2]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80050c6:	e003      	b.n	80050d0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80050c8:	887b      	ldrh	r3, [r7, #2]
 80050ca:	041a      	lsls	r2, r3, #16
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	611a      	str	r2, [r3, #16]
}
 80050d0:	bf00      	nop
 80050d2:	370c      	adds	r7, #12
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bc80      	pop	{r7}
 80050d8:	4770      	bx	lr
	...

080050dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b086      	sub	sp, #24
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d101      	bne.n	80050ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e272      	b.n	80055d4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 0301 	and.w	r3, r3, #1
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	f000 8087 	beq.w	800520a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80050fc:	4b92      	ldr	r3, [pc, #584]	; (8005348 <HAL_RCC_OscConfig+0x26c>)
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	f003 030c 	and.w	r3, r3, #12
 8005104:	2b04      	cmp	r3, #4
 8005106:	d00c      	beq.n	8005122 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005108:	4b8f      	ldr	r3, [pc, #572]	; (8005348 <HAL_RCC_OscConfig+0x26c>)
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	f003 030c 	and.w	r3, r3, #12
 8005110:	2b08      	cmp	r3, #8
 8005112:	d112      	bne.n	800513a <HAL_RCC_OscConfig+0x5e>
 8005114:	4b8c      	ldr	r3, [pc, #560]	; (8005348 <HAL_RCC_OscConfig+0x26c>)
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800511c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005120:	d10b      	bne.n	800513a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005122:	4b89      	ldr	r3, [pc, #548]	; (8005348 <HAL_RCC_OscConfig+0x26c>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d06c      	beq.n	8005208 <HAL_RCC_OscConfig+0x12c>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d168      	bne.n	8005208 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e24c      	b.n	80055d4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005142:	d106      	bne.n	8005152 <HAL_RCC_OscConfig+0x76>
 8005144:	4b80      	ldr	r3, [pc, #512]	; (8005348 <HAL_RCC_OscConfig+0x26c>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a7f      	ldr	r2, [pc, #508]	; (8005348 <HAL_RCC_OscConfig+0x26c>)
 800514a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800514e:	6013      	str	r3, [r2, #0]
 8005150:	e02e      	b.n	80051b0 <HAL_RCC_OscConfig+0xd4>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d10c      	bne.n	8005174 <HAL_RCC_OscConfig+0x98>
 800515a:	4b7b      	ldr	r3, [pc, #492]	; (8005348 <HAL_RCC_OscConfig+0x26c>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a7a      	ldr	r2, [pc, #488]	; (8005348 <HAL_RCC_OscConfig+0x26c>)
 8005160:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005164:	6013      	str	r3, [r2, #0]
 8005166:	4b78      	ldr	r3, [pc, #480]	; (8005348 <HAL_RCC_OscConfig+0x26c>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a77      	ldr	r2, [pc, #476]	; (8005348 <HAL_RCC_OscConfig+0x26c>)
 800516c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005170:	6013      	str	r3, [r2, #0]
 8005172:	e01d      	b.n	80051b0 <HAL_RCC_OscConfig+0xd4>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800517c:	d10c      	bne.n	8005198 <HAL_RCC_OscConfig+0xbc>
 800517e:	4b72      	ldr	r3, [pc, #456]	; (8005348 <HAL_RCC_OscConfig+0x26c>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a71      	ldr	r2, [pc, #452]	; (8005348 <HAL_RCC_OscConfig+0x26c>)
 8005184:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005188:	6013      	str	r3, [r2, #0]
 800518a:	4b6f      	ldr	r3, [pc, #444]	; (8005348 <HAL_RCC_OscConfig+0x26c>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a6e      	ldr	r2, [pc, #440]	; (8005348 <HAL_RCC_OscConfig+0x26c>)
 8005190:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005194:	6013      	str	r3, [r2, #0]
 8005196:	e00b      	b.n	80051b0 <HAL_RCC_OscConfig+0xd4>
 8005198:	4b6b      	ldr	r3, [pc, #428]	; (8005348 <HAL_RCC_OscConfig+0x26c>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a6a      	ldr	r2, [pc, #424]	; (8005348 <HAL_RCC_OscConfig+0x26c>)
 800519e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051a2:	6013      	str	r3, [r2, #0]
 80051a4:	4b68      	ldr	r3, [pc, #416]	; (8005348 <HAL_RCC_OscConfig+0x26c>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a67      	ldr	r2, [pc, #412]	; (8005348 <HAL_RCC_OscConfig+0x26c>)
 80051aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d013      	beq.n	80051e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051b8:	f7ff fcb4 	bl	8004b24 <HAL_GetTick>
 80051bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051be:	e008      	b.n	80051d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051c0:	f7ff fcb0 	bl	8004b24 <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	2b64      	cmp	r3, #100	; 0x64
 80051cc:	d901      	bls.n	80051d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e200      	b.n	80055d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051d2:	4b5d      	ldr	r3, [pc, #372]	; (8005348 <HAL_RCC_OscConfig+0x26c>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d0f0      	beq.n	80051c0 <HAL_RCC_OscConfig+0xe4>
 80051de:	e014      	b.n	800520a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051e0:	f7ff fca0 	bl	8004b24 <HAL_GetTick>
 80051e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051e6:	e008      	b.n	80051fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051e8:	f7ff fc9c 	bl	8004b24 <HAL_GetTick>
 80051ec:	4602      	mov	r2, r0
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	2b64      	cmp	r3, #100	; 0x64
 80051f4:	d901      	bls.n	80051fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e1ec      	b.n	80055d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051fa:	4b53      	ldr	r3, [pc, #332]	; (8005348 <HAL_RCC_OscConfig+0x26c>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005202:	2b00      	cmp	r3, #0
 8005204:	d1f0      	bne.n	80051e8 <HAL_RCC_OscConfig+0x10c>
 8005206:	e000      	b.n	800520a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005208:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 0302 	and.w	r3, r3, #2
 8005212:	2b00      	cmp	r3, #0
 8005214:	d063      	beq.n	80052de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005216:	4b4c      	ldr	r3, [pc, #304]	; (8005348 <HAL_RCC_OscConfig+0x26c>)
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	f003 030c 	and.w	r3, r3, #12
 800521e:	2b00      	cmp	r3, #0
 8005220:	d00b      	beq.n	800523a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005222:	4b49      	ldr	r3, [pc, #292]	; (8005348 <HAL_RCC_OscConfig+0x26c>)
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	f003 030c 	and.w	r3, r3, #12
 800522a:	2b08      	cmp	r3, #8
 800522c:	d11c      	bne.n	8005268 <HAL_RCC_OscConfig+0x18c>
 800522e:	4b46      	ldr	r3, [pc, #280]	; (8005348 <HAL_RCC_OscConfig+0x26c>)
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005236:	2b00      	cmp	r3, #0
 8005238:	d116      	bne.n	8005268 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800523a:	4b43      	ldr	r3, [pc, #268]	; (8005348 <HAL_RCC_OscConfig+0x26c>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 0302 	and.w	r3, r3, #2
 8005242:	2b00      	cmp	r3, #0
 8005244:	d005      	beq.n	8005252 <HAL_RCC_OscConfig+0x176>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	2b01      	cmp	r3, #1
 800524c:	d001      	beq.n	8005252 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e1c0      	b.n	80055d4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005252:	4b3d      	ldr	r3, [pc, #244]	; (8005348 <HAL_RCC_OscConfig+0x26c>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	695b      	ldr	r3, [r3, #20]
 800525e:	00db      	lsls	r3, r3, #3
 8005260:	4939      	ldr	r1, [pc, #228]	; (8005348 <HAL_RCC_OscConfig+0x26c>)
 8005262:	4313      	orrs	r3, r2
 8005264:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005266:	e03a      	b.n	80052de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d020      	beq.n	80052b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005270:	4b36      	ldr	r3, [pc, #216]	; (800534c <HAL_RCC_OscConfig+0x270>)
 8005272:	2201      	movs	r2, #1
 8005274:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005276:	f7ff fc55 	bl	8004b24 <HAL_GetTick>
 800527a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800527c:	e008      	b.n	8005290 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800527e:	f7ff fc51 	bl	8004b24 <HAL_GetTick>
 8005282:	4602      	mov	r2, r0
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	2b02      	cmp	r3, #2
 800528a:	d901      	bls.n	8005290 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800528c:	2303      	movs	r3, #3
 800528e:	e1a1      	b.n	80055d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005290:	4b2d      	ldr	r3, [pc, #180]	; (8005348 <HAL_RCC_OscConfig+0x26c>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 0302 	and.w	r3, r3, #2
 8005298:	2b00      	cmp	r3, #0
 800529a:	d0f0      	beq.n	800527e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800529c:	4b2a      	ldr	r3, [pc, #168]	; (8005348 <HAL_RCC_OscConfig+0x26c>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	695b      	ldr	r3, [r3, #20]
 80052a8:	00db      	lsls	r3, r3, #3
 80052aa:	4927      	ldr	r1, [pc, #156]	; (8005348 <HAL_RCC_OscConfig+0x26c>)
 80052ac:	4313      	orrs	r3, r2
 80052ae:	600b      	str	r3, [r1, #0]
 80052b0:	e015      	b.n	80052de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052b2:	4b26      	ldr	r3, [pc, #152]	; (800534c <HAL_RCC_OscConfig+0x270>)
 80052b4:	2200      	movs	r2, #0
 80052b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052b8:	f7ff fc34 	bl	8004b24 <HAL_GetTick>
 80052bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052be:	e008      	b.n	80052d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052c0:	f7ff fc30 	bl	8004b24 <HAL_GetTick>
 80052c4:	4602      	mov	r2, r0
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	2b02      	cmp	r3, #2
 80052cc:	d901      	bls.n	80052d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	e180      	b.n	80055d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052d2:	4b1d      	ldr	r3, [pc, #116]	; (8005348 <HAL_RCC_OscConfig+0x26c>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 0302 	and.w	r3, r3, #2
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d1f0      	bne.n	80052c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 0308 	and.w	r3, r3, #8
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d03a      	beq.n	8005360 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	699b      	ldr	r3, [r3, #24]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d019      	beq.n	8005326 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052f2:	4b17      	ldr	r3, [pc, #92]	; (8005350 <HAL_RCC_OscConfig+0x274>)
 80052f4:	2201      	movs	r2, #1
 80052f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052f8:	f7ff fc14 	bl	8004b24 <HAL_GetTick>
 80052fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052fe:	e008      	b.n	8005312 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005300:	f7ff fc10 	bl	8004b24 <HAL_GetTick>
 8005304:	4602      	mov	r2, r0
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	2b02      	cmp	r3, #2
 800530c:	d901      	bls.n	8005312 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	e160      	b.n	80055d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005312:	4b0d      	ldr	r3, [pc, #52]	; (8005348 <HAL_RCC_OscConfig+0x26c>)
 8005314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005316:	f003 0302 	and.w	r3, r3, #2
 800531a:	2b00      	cmp	r3, #0
 800531c:	d0f0      	beq.n	8005300 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800531e:	2001      	movs	r0, #1
 8005320:	f000 fada 	bl	80058d8 <RCC_Delay>
 8005324:	e01c      	b.n	8005360 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005326:	4b0a      	ldr	r3, [pc, #40]	; (8005350 <HAL_RCC_OscConfig+0x274>)
 8005328:	2200      	movs	r2, #0
 800532a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800532c:	f7ff fbfa 	bl	8004b24 <HAL_GetTick>
 8005330:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005332:	e00f      	b.n	8005354 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005334:	f7ff fbf6 	bl	8004b24 <HAL_GetTick>
 8005338:	4602      	mov	r2, r0
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	2b02      	cmp	r3, #2
 8005340:	d908      	bls.n	8005354 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005342:	2303      	movs	r3, #3
 8005344:	e146      	b.n	80055d4 <HAL_RCC_OscConfig+0x4f8>
 8005346:	bf00      	nop
 8005348:	40021000 	.word	0x40021000
 800534c:	42420000 	.word	0x42420000
 8005350:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005354:	4b92      	ldr	r3, [pc, #584]	; (80055a0 <HAL_RCC_OscConfig+0x4c4>)
 8005356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005358:	f003 0302 	and.w	r3, r3, #2
 800535c:	2b00      	cmp	r3, #0
 800535e:	d1e9      	bne.n	8005334 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 0304 	and.w	r3, r3, #4
 8005368:	2b00      	cmp	r3, #0
 800536a:	f000 80a6 	beq.w	80054ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800536e:	2300      	movs	r3, #0
 8005370:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005372:	4b8b      	ldr	r3, [pc, #556]	; (80055a0 <HAL_RCC_OscConfig+0x4c4>)
 8005374:	69db      	ldr	r3, [r3, #28]
 8005376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800537a:	2b00      	cmp	r3, #0
 800537c:	d10d      	bne.n	800539a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800537e:	4b88      	ldr	r3, [pc, #544]	; (80055a0 <HAL_RCC_OscConfig+0x4c4>)
 8005380:	69db      	ldr	r3, [r3, #28]
 8005382:	4a87      	ldr	r2, [pc, #540]	; (80055a0 <HAL_RCC_OscConfig+0x4c4>)
 8005384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005388:	61d3      	str	r3, [r2, #28]
 800538a:	4b85      	ldr	r3, [pc, #532]	; (80055a0 <HAL_RCC_OscConfig+0x4c4>)
 800538c:	69db      	ldr	r3, [r3, #28]
 800538e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005392:	60bb      	str	r3, [r7, #8]
 8005394:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005396:	2301      	movs	r3, #1
 8005398:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800539a:	4b82      	ldr	r3, [pc, #520]	; (80055a4 <HAL_RCC_OscConfig+0x4c8>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d118      	bne.n	80053d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80053a6:	4b7f      	ldr	r3, [pc, #508]	; (80055a4 <HAL_RCC_OscConfig+0x4c8>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a7e      	ldr	r2, [pc, #504]	; (80055a4 <HAL_RCC_OscConfig+0x4c8>)
 80053ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053b2:	f7ff fbb7 	bl	8004b24 <HAL_GetTick>
 80053b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053b8:	e008      	b.n	80053cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053ba:	f7ff fbb3 	bl	8004b24 <HAL_GetTick>
 80053be:	4602      	mov	r2, r0
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	1ad3      	subs	r3, r2, r3
 80053c4:	2b64      	cmp	r3, #100	; 0x64
 80053c6:	d901      	bls.n	80053cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80053c8:	2303      	movs	r3, #3
 80053ca:	e103      	b.n	80055d4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053cc:	4b75      	ldr	r3, [pc, #468]	; (80055a4 <HAL_RCC_OscConfig+0x4c8>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d0f0      	beq.n	80053ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d106      	bne.n	80053ee <HAL_RCC_OscConfig+0x312>
 80053e0:	4b6f      	ldr	r3, [pc, #444]	; (80055a0 <HAL_RCC_OscConfig+0x4c4>)
 80053e2:	6a1b      	ldr	r3, [r3, #32]
 80053e4:	4a6e      	ldr	r2, [pc, #440]	; (80055a0 <HAL_RCC_OscConfig+0x4c4>)
 80053e6:	f043 0301 	orr.w	r3, r3, #1
 80053ea:	6213      	str	r3, [r2, #32]
 80053ec:	e02d      	b.n	800544a <HAL_RCC_OscConfig+0x36e>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d10c      	bne.n	8005410 <HAL_RCC_OscConfig+0x334>
 80053f6:	4b6a      	ldr	r3, [pc, #424]	; (80055a0 <HAL_RCC_OscConfig+0x4c4>)
 80053f8:	6a1b      	ldr	r3, [r3, #32]
 80053fa:	4a69      	ldr	r2, [pc, #420]	; (80055a0 <HAL_RCC_OscConfig+0x4c4>)
 80053fc:	f023 0301 	bic.w	r3, r3, #1
 8005400:	6213      	str	r3, [r2, #32]
 8005402:	4b67      	ldr	r3, [pc, #412]	; (80055a0 <HAL_RCC_OscConfig+0x4c4>)
 8005404:	6a1b      	ldr	r3, [r3, #32]
 8005406:	4a66      	ldr	r2, [pc, #408]	; (80055a0 <HAL_RCC_OscConfig+0x4c4>)
 8005408:	f023 0304 	bic.w	r3, r3, #4
 800540c:	6213      	str	r3, [r2, #32]
 800540e:	e01c      	b.n	800544a <HAL_RCC_OscConfig+0x36e>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	2b05      	cmp	r3, #5
 8005416:	d10c      	bne.n	8005432 <HAL_RCC_OscConfig+0x356>
 8005418:	4b61      	ldr	r3, [pc, #388]	; (80055a0 <HAL_RCC_OscConfig+0x4c4>)
 800541a:	6a1b      	ldr	r3, [r3, #32]
 800541c:	4a60      	ldr	r2, [pc, #384]	; (80055a0 <HAL_RCC_OscConfig+0x4c4>)
 800541e:	f043 0304 	orr.w	r3, r3, #4
 8005422:	6213      	str	r3, [r2, #32]
 8005424:	4b5e      	ldr	r3, [pc, #376]	; (80055a0 <HAL_RCC_OscConfig+0x4c4>)
 8005426:	6a1b      	ldr	r3, [r3, #32]
 8005428:	4a5d      	ldr	r2, [pc, #372]	; (80055a0 <HAL_RCC_OscConfig+0x4c4>)
 800542a:	f043 0301 	orr.w	r3, r3, #1
 800542e:	6213      	str	r3, [r2, #32]
 8005430:	e00b      	b.n	800544a <HAL_RCC_OscConfig+0x36e>
 8005432:	4b5b      	ldr	r3, [pc, #364]	; (80055a0 <HAL_RCC_OscConfig+0x4c4>)
 8005434:	6a1b      	ldr	r3, [r3, #32]
 8005436:	4a5a      	ldr	r2, [pc, #360]	; (80055a0 <HAL_RCC_OscConfig+0x4c4>)
 8005438:	f023 0301 	bic.w	r3, r3, #1
 800543c:	6213      	str	r3, [r2, #32]
 800543e:	4b58      	ldr	r3, [pc, #352]	; (80055a0 <HAL_RCC_OscConfig+0x4c4>)
 8005440:	6a1b      	ldr	r3, [r3, #32]
 8005442:	4a57      	ldr	r2, [pc, #348]	; (80055a0 <HAL_RCC_OscConfig+0x4c4>)
 8005444:	f023 0304 	bic.w	r3, r3, #4
 8005448:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d015      	beq.n	800547e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005452:	f7ff fb67 	bl	8004b24 <HAL_GetTick>
 8005456:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005458:	e00a      	b.n	8005470 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800545a:	f7ff fb63 	bl	8004b24 <HAL_GetTick>
 800545e:	4602      	mov	r2, r0
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	f241 3288 	movw	r2, #5000	; 0x1388
 8005468:	4293      	cmp	r3, r2
 800546a:	d901      	bls.n	8005470 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800546c:	2303      	movs	r3, #3
 800546e:	e0b1      	b.n	80055d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005470:	4b4b      	ldr	r3, [pc, #300]	; (80055a0 <HAL_RCC_OscConfig+0x4c4>)
 8005472:	6a1b      	ldr	r3, [r3, #32]
 8005474:	f003 0302 	and.w	r3, r3, #2
 8005478:	2b00      	cmp	r3, #0
 800547a:	d0ee      	beq.n	800545a <HAL_RCC_OscConfig+0x37e>
 800547c:	e014      	b.n	80054a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800547e:	f7ff fb51 	bl	8004b24 <HAL_GetTick>
 8005482:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005484:	e00a      	b.n	800549c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005486:	f7ff fb4d 	bl	8004b24 <HAL_GetTick>
 800548a:	4602      	mov	r2, r0
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	1ad3      	subs	r3, r2, r3
 8005490:	f241 3288 	movw	r2, #5000	; 0x1388
 8005494:	4293      	cmp	r3, r2
 8005496:	d901      	bls.n	800549c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005498:	2303      	movs	r3, #3
 800549a:	e09b      	b.n	80055d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800549c:	4b40      	ldr	r3, [pc, #256]	; (80055a0 <HAL_RCC_OscConfig+0x4c4>)
 800549e:	6a1b      	ldr	r3, [r3, #32]
 80054a0:	f003 0302 	and.w	r3, r3, #2
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d1ee      	bne.n	8005486 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80054a8:	7dfb      	ldrb	r3, [r7, #23]
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d105      	bne.n	80054ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054ae:	4b3c      	ldr	r3, [pc, #240]	; (80055a0 <HAL_RCC_OscConfig+0x4c4>)
 80054b0:	69db      	ldr	r3, [r3, #28]
 80054b2:	4a3b      	ldr	r2, [pc, #236]	; (80055a0 <HAL_RCC_OscConfig+0x4c4>)
 80054b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	69db      	ldr	r3, [r3, #28]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	f000 8087 	beq.w	80055d2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80054c4:	4b36      	ldr	r3, [pc, #216]	; (80055a0 <HAL_RCC_OscConfig+0x4c4>)
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	f003 030c 	and.w	r3, r3, #12
 80054cc:	2b08      	cmp	r3, #8
 80054ce:	d061      	beq.n	8005594 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	69db      	ldr	r3, [r3, #28]
 80054d4:	2b02      	cmp	r3, #2
 80054d6:	d146      	bne.n	8005566 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054d8:	4b33      	ldr	r3, [pc, #204]	; (80055a8 <HAL_RCC_OscConfig+0x4cc>)
 80054da:	2200      	movs	r2, #0
 80054dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054de:	f7ff fb21 	bl	8004b24 <HAL_GetTick>
 80054e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054e4:	e008      	b.n	80054f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054e6:	f7ff fb1d 	bl	8004b24 <HAL_GetTick>
 80054ea:	4602      	mov	r2, r0
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	d901      	bls.n	80054f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80054f4:	2303      	movs	r3, #3
 80054f6:	e06d      	b.n	80055d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054f8:	4b29      	ldr	r3, [pc, #164]	; (80055a0 <HAL_RCC_OscConfig+0x4c4>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005500:	2b00      	cmp	r3, #0
 8005502:	d1f0      	bne.n	80054e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6a1b      	ldr	r3, [r3, #32]
 8005508:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800550c:	d108      	bne.n	8005520 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800550e:	4b24      	ldr	r3, [pc, #144]	; (80055a0 <HAL_RCC_OscConfig+0x4c4>)
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	4921      	ldr	r1, [pc, #132]	; (80055a0 <HAL_RCC_OscConfig+0x4c4>)
 800551c:	4313      	orrs	r3, r2
 800551e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005520:	4b1f      	ldr	r3, [pc, #124]	; (80055a0 <HAL_RCC_OscConfig+0x4c4>)
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6a19      	ldr	r1, [r3, #32]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005530:	430b      	orrs	r3, r1
 8005532:	491b      	ldr	r1, [pc, #108]	; (80055a0 <HAL_RCC_OscConfig+0x4c4>)
 8005534:	4313      	orrs	r3, r2
 8005536:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005538:	4b1b      	ldr	r3, [pc, #108]	; (80055a8 <HAL_RCC_OscConfig+0x4cc>)
 800553a:	2201      	movs	r2, #1
 800553c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800553e:	f7ff faf1 	bl	8004b24 <HAL_GetTick>
 8005542:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005544:	e008      	b.n	8005558 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005546:	f7ff faed 	bl	8004b24 <HAL_GetTick>
 800554a:	4602      	mov	r2, r0
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	2b02      	cmp	r3, #2
 8005552:	d901      	bls.n	8005558 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005554:	2303      	movs	r3, #3
 8005556:	e03d      	b.n	80055d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005558:	4b11      	ldr	r3, [pc, #68]	; (80055a0 <HAL_RCC_OscConfig+0x4c4>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005560:	2b00      	cmp	r3, #0
 8005562:	d0f0      	beq.n	8005546 <HAL_RCC_OscConfig+0x46a>
 8005564:	e035      	b.n	80055d2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005566:	4b10      	ldr	r3, [pc, #64]	; (80055a8 <HAL_RCC_OscConfig+0x4cc>)
 8005568:	2200      	movs	r2, #0
 800556a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800556c:	f7ff fada 	bl	8004b24 <HAL_GetTick>
 8005570:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005572:	e008      	b.n	8005586 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005574:	f7ff fad6 	bl	8004b24 <HAL_GetTick>
 8005578:	4602      	mov	r2, r0
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	2b02      	cmp	r3, #2
 8005580:	d901      	bls.n	8005586 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	e026      	b.n	80055d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005586:	4b06      	ldr	r3, [pc, #24]	; (80055a0 <HAL_RCC_OscConfig+0x4c4>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800558e:	2b00      	cmp	r3, #0
 8005590:	d1f0      	bne.n	8005574 <HAL_RCC_OscConfig+0x498>
 8005592:	e01e      	b.n	80055d2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	69db      	ldr	r3, [r3, #28]
 8005598:	2b01      	cmp	r3, #1
 800559a:	d107      	bne.n	80055ac <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	e019      	b.n	80055d4 <HAL_RCC_OscConfig+0x4f8>
 80055a0:	40021000 	.word	0x40021000
 80055a4:	40007000 	.word	0x40007000
 80055a8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80055ac:	4b0b      	ldr	r3, [pc, #44]	; (80055dc <HAL_RCC_OscConfig+0x500>)
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6a1b      	ldr	r3, [r3, #32]
 80055bc:	429a      	cmp	r2, r3
 80055be:	d106      	bne.n	80055ce <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d001      	beq.n	80055d2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e000      	b.n	80055d4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80055d2:	2300      	movs	r3, #0
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3718      	adds	r7, #24
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}
 80055dc:	40021000 	.word	0x40021000

080055e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d101      	bne.n	80055f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e0d0      	b.n	8005796 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80055f4:	4b6a      	ldr	r3, [pc, #424]	; (80057a0 <HAL_RCC_ClockConfig+0x1c0>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 0307 	and.w	r3, r3, #7
 80055fc:	683a      	ldr	r2, [r7, #0]
 80055fe:	429a      	cmp	r2, r3
 8005600:	d910      	bls.n	8005624 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005602:	4b67      	ldr	r3, [pc, #412]	; (80057a0 <HAL_RCC_ClockConfig+0x1c0>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f023 0207 	bic.w	r2, r3, #7
 800560a:	4965      	ldr	r1, [pc, #404]	; (80057a0 <HAL_RCC_ClockConfig+0x1c0>)
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	4313      	orrs	r3, r2
 8005610:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005612:	4b63      	ldr	r3, [pc, #396]	; (80057a0 <HAL_RCC_ClockConfig+0x1c0>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 0307 	and.w	r3, r3, #7
 800561a:	683a      	ldr	r2, [r7, #0]
 800561c:	429a      	cmp	r2, r3
 800561e:	d001      	beq.n	8005624 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	e0b8      	b.n	8005796 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 0302 	and.w	r3, r3, #2
 800562c:	2b00      	cmp	r3, #0
 800562e:	d020      	beq.n	8005672 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 0304 	and.w	r3, r3, #4
 8005638:	2b00      	cmp	r3, #0
 800563a:	d005      	beq.n	8005648 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800563c:	4b59      	ldr	r3, [pc, #356]	; (80057a4 <HAL_RCC_ClockConfig+0x1c4>)
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	4a58      	ldr	r2, [pc, #352]	; (80057a4 <HAL_RCC_ClockConfig+0x1c4>)
 8005642:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005646:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0308 	and.w	r3, r3, #8
 8005650:	2b00      	cmp	r3, #0
 8005652:	d005      	beq.n	8005660 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005654:	4b53      	ldr	r3, [pc, #332]	; (80057a4 <HAL_RCC_ClockConfig+0x1c4>)
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	4a52      	ldr	r2, [pc, #328]	; (80057a4 <HAL_RCC_ClockConfig+0x1c4>)
 800565a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800565e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005660:	4b50      	ldr	r3, [pc, #320]	; (80057a4 <HAL_RCC_ClockConfig+0x1c4>)
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	494d      	ldr	r1, [pc, #308]	; (80057a4 <HAL_RCC_ClockConfig+0x1c4>)
 800566e:	4313      	orrs	r3, r2
 8005670:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 0301 	and.w	r3, r3, #1
 800567a:	2b00      	cmp	r3, #0
 800567c:	d040      	beq.n	8005700 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	2b01      	cmp	r3, #1
 8005684:	d107      	bne.n	8005696 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005686:	4b47      	ldr	r3, [pc, #284]	; (80057a4 <HAL_RCC_ClockConfig+0x1c4>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800568e:	2b00      	cmp	r3, #0
 8005690:	d115      	bne.n	80056be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e07f      	b.n	8005796 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	2b02      	cmp	r3, #2
 800569c:	d107      	bne.n	80056ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800569e:	4b41      	ldr	r3, [pc, #260]	; (80057a4 <HAL_RCC_ClockConfig+0x1c4>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d109      	bne.n	80056be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e073      	b.n	8005796 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056ae:	4b3d      	ldr	r3, [pc, #244]	; (80057a4 <HAL_RCC_ClockConfig+0x1c4>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f003 0302 	and.w	r3, r3, #2
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d101      	bne.n	80056be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e06b      	b.n	8005796 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80056be:	4b39      	ldr	r3, [pc, #228]	; (80057a4 <HAL_RCC_ClockConfig+0x1c4>)
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	f023 0203 	bic.w	r2, r3, #3
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	4936      	ldr	r1, [pc, #216]	; (80057a4 <HAL_RCC_ClockConfig+0x1c4>)
 80056cc:	4313      	orrs	r3, r2
 80056ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80056d0:	f7ff fa28 	bl	8004b24 <HAL_GetTick>
 80056d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056d6:	e00a      	b.n	80056ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056d8:	f7ff fa24 	bl	8004b24 <HAL_GetTick>
 80056dc:	4602      	mov	r2, r0
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d901      	bls.n	80056ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80056ea:	2303      	movs	r3, #3
 80056ec:	e053      	b.n	8005796 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056ee:	4b2d      	ldr	r3, [pc, #180]	; (80057a4 <HAL_RCC_ClockConfig+0x1c4>)
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	f003 020c 	and.w	r2, r3, #12
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d1eb      	bne.n	80056d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005700:	4b27      	ldr	r3, [pc, #156]	; (80057a0 <HAL_RCC_ClockConfig+0x1c0>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 0307 	and.w	r3, r3, #7
 8005708:	683a      	ldr	r2, [r7, #0]
 800570a:	429a      	cmp	r2, r3
 800570c:	d210      	bcs.n	8005730 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800570e:	4b24      	ldr	r3, [pc, #144]	; (80057a0 <HAL_RCC_ClockConfig+0x1c0>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f023 0207 	bic.w	r2, r3, #7
 8005716:	4922      	ldr	r1, [pc, #136]	; (80057a0 <HAL_RCC_ClockConfig+0x1c0>)
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	4313      	orrs	r3, r2
 800571c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800571e:	4b20      	ldr	r3, [pc, #128]	; (80057a0 <HAL_RCC_ClockConfig+0x1c0>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 0307 	and.w	r3, r3, #7
 8005726:	683a      	ldr	r2, [r7, #0]
 8005728:	429a      	cmp	r2, r3
 800572a:	d001      	beq.n	8005730 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	e032      	b.n	8005796 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f003 0304 	and.w	r3, r3, #4
 8005738:	2b00      	cmp	r3, #0
 800573a:	d008      	beq.n	800574e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800573c:	4b19      	ldr	r3, [pc, #100]	; (80057a4 <HAL_RCC_ClockConfig+0x1c4>)
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	4916      	ldr	r1, [pc, #88]	; (80057a4 <HAL_RCC_ClockConfig+0x1c4>)
 800574a:	4313      	orrs	r3, r2
 800574c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 0308 	and.w	r3, r3, #8
 8005756:	2b00      	cmp	r3, #0
 8005758:	d009      	beq.n	800576e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800575a:	4b12      	ldr	r3, [pc, #72]	; (80057a4 <HAL_RCC_ClockConfig+0x1c4>)
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	00db      	lsls	r3, r3, #3
 8005768:	490e      	ldr	r1, [pc, #56]	; (80057a4 <HAL_RCC_ClockConfig+0x1c4>)
 800576a:	4313      	orrs	r3, r2
 800576c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800576e:	f000 f821 	bl	80057b4 <HAL_RCC_GetSysClockFreq>
 8005772:	4602      	mov	r2, r0
 8005774:	4b0b      	ldr	r3, [pc, #44]	; (80057a4 <HAL_RCC_ClockConfig+0x1c4>)
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	091b      	lsrs	r3, r3, #4
 800577a:	f003 030f 	and.w	r3, r3, #15
 800577e:	490a      	ldr	r1, [pc, #40]	; (80057a8 <HAL_RCC_ClockConfig+0x1c8>)
 8005780:	5ccb      	ldrb	r3, [r1, r3]
 8005782:	fa22 f303 	lsr.w	r3, r2, r3
 8005786:	4a09      	ldr	r2, [pc, #36]	; (80057ac <HAL_RCC_ClockConfig+0x1cc>)
 8005788:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800578a:	4b09      	ldr	r3, [pc, #36]	; (80057b0 <HAL_RCC_ClockConfig+0x1d0>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4618      	mov	r0, r3
 8005790:	f7ff f986 	bl	8004aa0 <HAL_InitTick>

  return HAL_OK;
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	3710      	adds	r7, #16
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
 800579e:	bf00      	nop
 80057a0:	40022000 	.word	0x40022000
 80057a4:	40021000 	.word	0x40021000
 80057a8:	0800a790 	.word	0x0800a790
 80057ac:	20000004 	.word	0x20000004
 80057b0:	20000008 	.word	0x20000008

080057b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057b4:	b490      	push	{r4, r7}
 80057b6:	b08a      	sub	sp, #40	; 0x28
 80057b8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80057ba:	4b29      	ldr	r3, [pc, #164]	; (8005860 <HAL_RCC_GetSysClockFreq+0xac>)
 80057bc:	1d3c      	adds	r4, r7, #4
 80057be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80057c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80057c4:	f240 2301 	movw	r3, #513	; 0x201
 80057c8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80057ca:	2300      	movs	r3, #0
 80057cc:	61fb      	str	r3, [r7, #28]
 80057ce:	2300      	movs	r3, #0
 80057d0:	61bb      	str	r3, [r7, #24]
 80057d2:	2300      	movs	r3, #0
 80057d4:	627b      	str	r3, [r7, #36]	; 0x24
 80057d6:	2300      	movs	r3, #0
 80057d8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80057da:	2300      	movs	r3, #0
 80057dc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80057de:	4b21      	ldr	r3, [pc, #132]	; (8005864 <HAL_RCC_GetSysClockFreq+0xb0>)
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	f003 030c 	and.w	r3, r3, #12
 80057ea:	2b04      	cmp	r3, #4
 80057ec:	d002      	beq.n	80057f4 <HAL_RCC_GetSysClockFreq+0x40>
 80057ee:	2b08      	cmp	r3, #8
 80057f0:	d003      	beq.n	80057fa <HAL_RCC_GetSysClockFreq+0x46>
 80057f2:	e02b      	b.n	800584c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80057f4:	4b1c      	ldr	r3, [pc, #112]	; (8005868 <HAL_RCC_GetSysClockFreq+0xb4>)
 80057f6:	623b      	str	r3, [r7, #32]
      break;
 80057f8:	e02b      	b.n	8005852 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	0c9b      	lsrs	r3, r3, #18
 80057fe:	f003 030f 	and.w	r3, r3, #15
 8005802:	3328      	adds	r3, #40	; 0x28
 8005804:	443b      	add	r3, r7
 8005806:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800580a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005812:	2b00      	cmp	r3, #0
 8005814:	d012      	beq.n	800583c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005816:	4b13      	ldr	r3, [pc, #76]	; (8005864 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	0c5b      	lsrs	r3, r3, #17
 800581c:	f003 0301 	and.w	r3, r3, #1
 8005820:	3328      	adds	r3, #40	; 0x28
 8005822:	443b      	add	r3, r7
 8005824:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005828:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	4a0e      	ldr	r2, [pc, #56]	; (8005868 <HAL_RCC_GetSysClockFreq+0xb4>)
 800582e:	fb03 f202 	mul.w	r2, r3, r2
 8005832:	69bb      	ldr	r3, [r7, #24]
 8005834:	fbb2 f3f3 	udiv	r3, r2, r3
 8005838:	627b      	str	r3, [r7, #36]	; 0x24
 800583a:	e004      	b.n	8005846 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	4a0b      	ldr	r2, [pc, #44]	; (800586c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005840:	fb02 f303 	mul.w	r3, r2, r3
 8005844:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005848:	623b      	str	r3, [r7, #32]
      break;
 800584a:	e002      	b.n	8005852 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800584c:	4b08      	ldr	r3, [pc, #32]	; (8005870 <HAL_RCC_GetSysClockFreq+0xbc>)
 800584e:	623b      	str	r3, [r7, #32]
      break;
 8005850:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005852:	6a3b      	ldr	r3, [r7, #32]
}
 8005854:	4618      	mov	r0, r3
 8005856:	3728      	adds	r7, #40	; 0x28
 8005858:	46bd      	mov	sp, r7
 800585a:	bc90      	pop	{r4, r7}
 800585c:	4770      	bx	lr
 800585e:	bf00      	nop
 8005860:	0800a4e0 	.word	0x0800a4e0
 8005864:	40021000 	.word	0x40021000
 8005868:	00f42400 	.word	0x00f42400
 800586c:	003d0900 	.word	0x003d0900
 8005870:	007a1200 	.word	0x007a1200

08005874 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005874:	b480      	push	{r7}
 8005876:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005878:	4b02      	ldr	r3, [pc, #8]	; (8005884 <HAL_RCC_GetHCLKFreq+0x10>)
 800587a:	681b      	ldr	r3, [r3, #0]
}
 800587c:	4618      	mov	r0, r3
 800587e:	46bd      	mov	sp, r7
 8005880:	bc80      	pop	{r7}
 8005882:	4770      	bx	lr
 8005884:	20000004 	.word	0x20000004

08005888 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800588c:	f7ff fff2 	bl	8005874 <HAL_RCC_GetHCLKFreq>
 8005890:	4602      	mov	r2, r0
 8005892:	4b05      	ldr	r3, [pc, #20]	; (80058a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	0a1b      	lsrs	r3, r3, #8
 8005898:	f003 0307 	and.w	r3, r3, #7
 800589c:	4903      	ldr	r1, [pc, #12]	; (80058ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800589e:	5ccb      	ldrb	r3, [r1, r3]
 80058a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	40021000 	.word	0x40021000
 80058ac:	0800a7a0 	.word	0x0800a7a0

080058b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80058b4:	f7ff ffde 	bl	8005874 <HAL_RCC_GetHCLKFreq>
 80058b8:	4602      	mov	r2, r0
 80058ba:	4b05      	ldr	r3, [pc, #20]	; (80058d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	0adb      	lsrs	r3, r3, #11
 80058c0:	f003 0307 	and.w	r3, r3, #7
 80058c4:	4903      	ldr	r1, [pc, #12]	; (80058d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80058c6:	5ccb      	ldrb	r3, [r1, r3]
 80058c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	bd80      	pop	{r7, pc}
 80058d0:	40021000 	.word	0x40021000
 80058d4:	0800a7a0 	.word	0x0800a7a0

080058d8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80058d8:	b480      	push	{r7}
 80058da:	b085      	sub	sp, #20
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80058e0:	4b0a      	ldr	r3, [pc, #40]	; (800590c <RCC_Delay+0x34>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a0a      	ldr	r2, [pc, #40]	; (8005910 <RCC_Delay+0x38>)
 80058e6:	fba2 2303 	umull	r2, r3, r2, r3
 80058ea:	0a5b      	lsrs	r3, r3, #9
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	fb02 f303 	mul.w	r3, r2, r3
 80058f2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80058f4:	bf00      	nop
  }
  while (Delay --);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	1e5a      	subs	r2, r3, #1
 80058fa:	60fa      	str	r2, [r7, #12]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d1f9      	bne.n	80058f4 <RCC_Delay+0x1c>
}
 8005900:	bf00      	nop
 8005902:	bf00      	nop
 8005904:	3714      	adds	r7, #20
 8005906:	46bd      	mov	sp, r7
 8005908:	bc80      	pop	{r7}
 800590a:	4770      	bx	lr
 800590c:	20000004 	.word	0x20000004
 8005910:	10624dd3 	.word	0x10624dd3

08005914 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b082      	sub	sp, #8
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d101      	bne.n	8005926 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e076      	b.n	8005a14 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592a:	2b00      	cmp	r3, #0
 800592c:	d108      	bne.n	8005940 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005936:	d009      	beq.n	800594c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	61da      	str	r2, [r3, #28]
 800593e:	e005      	b.n	800594c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005958:	b2db      	uxtb	r3, r3
 800595a:	2b00      	cmp	r3, #0
 800595c:	d106      	bne.n	800596c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f7fe fe44 	bl	80045f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2202      	movs	r2, #2
 8005970:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005982:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005994:	431a      	orrs	r2, r3
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	68db      	ldr	r3, [r3, #12]
 800599a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800599e:	431a      	orrs	r2, r3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	691b      	ldr	r3, [r3, #16]
 80059a4:	f003 0302 	and.w	r3, r3, #2
 80059a8:	431a      	orrs	r2, r3
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	695b      	ldr	r3, [r3, #20]
 80059ae:	f003 0301 	and.w	r3, r3, #1
 80059b2:	431a      	orrs	r2, r3
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	699b      	ldr	r3, [r3, #24]
 80059b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059bc:	431a      	orrs	r2, r3
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	69db      	ldr	r3, [r3, #28]
 80059c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80059c6:	431a      	orrs	r2, r3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6a1b      	ldr	r3, [r3, #32]
 80059cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059d0:	ea42 0103 	orr.w	r1, r2, r3
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	430a      	orrs	r2, r1
 80059e2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	699b      	ldr	r3, [r3, #24]
 80059e8:	0c1a      	lsrs	r2, r3, #16
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f002 0204 	and.w	r2, r2, #4
 80059f2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	69da      	ldr	r2, [r3, #28]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a02:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005a12:	2300      	movs	r3, #0
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3708      	adds	r7, #8
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}

08005a1c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b086      	sub	sp, #24
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d101      	bne.n	8005a30 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e093      	b.n	8005b58 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d106      	bne.n	8005a4a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f7fe fe5b 	bl	8004700 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2202      	movs	r2, #2
 8005a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	6812      	ldr	r2, [r2, #0]
 8005a5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a60:	f023 0307 	bic.w	r3, r3, #7
 8005a64:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	3304      	adds	r3, #4
 8005a6e:	4619      	mov	r1, r3
 8005a70:	4610      	mov	r0, r2
 8005a72:	f000 fa59 	bl	8005f28 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	699b      	ldr	r3, [r3, #24]
 8005a84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	6a1b      	ldr	r3, [r3, #32]
 8005a8c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	697a      	ldr	r2, [r7, #20]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a9e:	f023 0303 	bic.w	r3, r3, #3
 8005aa2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	689a      	ldr	r2, [r3, #8]
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	699b      	ldr	r3, [r3, #24]
 8005aac:	021b      	lsls	r3, r3, #8
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	693a      	ldr	r2, [r7, #16]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005abc:	f023 030c 	bic.w	r3, r3, #12
 8005ac0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ac8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005acc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	68da      	ldr	r2, [r3, #12]
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	69db      	ldr	r3, [r3, #28]
 8005ad6:	021b      	lsls	r3, r3, #8
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	693a      	ldr	r2, [r7, #16]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	691b      	ldr	r3, [r3, #16]
 8005ae4:	011a      	lsls	r2, r3, #4
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	6a1b      	ldr	r3, [r3, #32]
 8005aea:	031b      	lsls	r3, r3, #12
 8005aec:	4313      	orrs	r3, r2
 8005aee:	693a      	ldr	r2, [r7, #16]
 8005af0:	4313      	orrs	r3, r2
 8005af2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005afa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	685a      	ldr	r2, [r3, #4]
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	695b      	ldr	r3, [r3, #20]
 8005b04:	011b      	lsls	r3, r3, #4
 8005b06:	4313      	orrs	r3, r2
 8005b08:	68fa      	ldr	r2, [r7, #12]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	697a      	ldr	r2, [r7, #20]
 8005b14:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	693a      	ldr	r2, [r7, #16]
 8005b1c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2201      	movs	r2, #1
 8005b2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2201      	movs	r2, #1
 8005b32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2201      	movs	r2, #1
 8005b3a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2201      	movs	r2, #1
 8005b42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2201      	movs	r2, #1
 8005b4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2201      	movs	r2, #1
 8005b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b56:	2300      	movs	r3, #0
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3718      	adds	r7, #24
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b084      	sub	sp, #16
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b70:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005b78:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005b80:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005b88:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d110      	bne.n	8005bb2 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b90:	7bfb      	ldrb	r3, [r7, #15]
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d102      	bne.n	8005b9c <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005b96:	7b7b      	ldrb	r3, [r7, #13]
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d001      	beq.n	8005ba0 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e089      	b.n	8005cb4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2202      	movs	r2, #2
 8005ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2202      	movs	r2, #2
 8005bac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005bb0:	e031      	b.n	8005c16 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	2b04      	cmp	r3, #4
 8005bb6:	d110      	bne.n	8005bda <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005bb8:	7bbb      	ldrb	r3, [r7, #14]
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d102      	bne.n	8005bc4 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005bbe:	7b3b      	ldrb	r3, [r7, #12]
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d001      	beq.n	8005bc8 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e075      	b.n	8005cb4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2202      	movs	r2, #2
 8005bcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2202      	movs	r2, #2
 8005bd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005bd8:	e01d      	b.n	8005c16 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005bda:	7bfb      	ldrb	r3, [r7, #15]
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d108      	bne.n	8005bf2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005be0:	7bbb      	ldrb	r3, [r7, #14]
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d105      	bne.n	8005bf2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005be6:	7b7b      	ldrb	r3, [r7, #13]
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d102      	bne.n	8005bf2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005bec:	7b3b      	ldrb	r3, [r7, #12]
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d001      	beq.n	8005bf6 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e05e      	b.n	8005cb4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2202      	movs	r2, #2
 8005bfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2202      	movs	r2, #2
 8005c02:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2202      	movs	r2, #2
 8005c0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2202      	movs	r2, #2
 8005c12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d003      	beq.n	8005c24 <HAL_TIM_Encoder_Start_IT+0xc4>
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	2b04      	cmp	r3, #4
 8005c20:	d010      	beq.n	8005c44 <HAL_TIM_Encoder_Start_IT+0xe4>
 8005c22:	e01f      	b.n	8005c64 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2201      	movs	r2, #1
 8005c2a:	2100      	movs	r1, #0
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f000 f9f5 	bl	800601c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	68da      	ldr	r2, [r3, #12]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f042 0202 	orr.w	r2, r2, #2
 8005c40:	60da      	str	r2, [r3, #12]
      break;
 8005c42:	e02e      	b.n	8005ca2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	2201      	movs	r2, #1
 8005c4a:	2104      	movs	r1, #4
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f000 f9e5 	bl	800601c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	68da      	ldr	r2, [r3, #12]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f042 0204 	orr.w	r2, r2, #4
 8005c60:	60da      	str	r2, [r3, #12]
      break;
 8005c62:	e01e      	b.n	8005ca2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2201      	movs	r2, #1
 8005c6a:	2100      	movs	r1, #0
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f000 f9d5 	bl	800601c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	2201      	movs	r2, #1
 8005c78:	2104      	movs	r1, #4
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f000 f9ce 	bl	800601c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68da      	ldr	r2, [r3, #12]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f042 0202 	orr.w	r2, r2, #2
 8005c8e:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68da      	ldr	r2, [r3, #12]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f042 0204 	orr.w	r2, r2, #4
 8005c9e:	60da      	str	r2, [r3, #12]
      break;
 8005ca0:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f042 0201 	orr.w	r2, r2, #1
 8005cb0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005cb2:	2300      	movs	r3, #0
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3710      	adds	r7, #16
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}

08005cbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b082      	sub	sp, #8
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	691b      	ldr	r3, [r3, #16]
 8005cca:	f003 0302 	and.w	r3, r3, #2
 8005cce:	2b02      	cmp	r3, #2
 8005cd0:	d122      	bne.n	8005d18 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	f003 0302 	and.w	r3, r3, #2
 8005cdc:	2b02      	cmp	r3, #2
 8005cde:	d11b      	bne.n	8005d18 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f06f 0202 	mvn.w	r2, #2
 8005ce8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2201      	movs	r2, #1
 8005cee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	699b      	ldr	r3, [r3, #24]
 8005cf6:	f003 0303 	and.w	r3, r3, #3
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d003      	beq.n	8005d06 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 f8f6 	bl	8005ef0 <HAL_TIM_IC_CaptureCallback>
 8005d04:	e005      	b.n	8005d12 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 f8e9 	bl	8005ede <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f000 f8f8 	bl	8005f02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	f003 0304 	and.w	r3, r3, #4
 8005d22:	2b04      	cmp	r3, #4
 8005d24:	d122      	bne.n	8005d6c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	f003 0304 	and.w	r3, r3, #4
 8005d30:	2b04      	cmp	r3, #4
 8005d32:	d11b      	bne.n	8005d6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f06f 0204 	mvn.w	r2, #4
 8005d3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2202      	movs	r2, #2
 8005d42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	699b      	ldr	r3, [r3, #24]
 8005d4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d003      	beq.n	8005d5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 f8cc 	bl	8005ef0 <HAL_TIM_IC_CaptureCallback>
 8005d58:	e005      	b.n	8005d66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 f8bf 	bl	8005ede <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f000 f8ce 	bl	8005f02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	691b      	ldr	r3, [r3, #16]
 8005d72:	f003 0308 	and.w	r3, r3, #8
 8005d76:	2b08      	cmp	r3, #8
 8005d78:	d122      	bne.n	8005dc0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	f003 0308 	and.w	r3, r3, #8
 8005d84:	2b08      	cmp	r3, #8
 8005d86:	d11b      	bne.n	8005dc0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f06f 0208 	mvn.w	r2, #8
 8005d90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2204      	movs	r2, #4
 8005d96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	69db      	ldr	r3, [r3, #28]
 8005d9e:	f003 0303 	and.w	r3, r3, #3
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d003      	beq.n	8005dae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 f8a2 	bl	8005ef0 <HAL_TIM_IC_CaptureCallback>
 8005dac:	e005      	b.n	8005dba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 f895 	bl	8005ede <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f000 f8a4 	bl	8005f02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	f003 0310 	and.w	r3, r3, #16
 8005dca:	2b10      	cmp	r3, #16
 8005dcc:	d122      	bne.n	8005e14 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	f003 0310 	and.w	r3, r3, #16
 8005dd8:	2b10      	cmp	r3, #16
 8005dda:	d11b      	bne.n	8005e14 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f06f 0210 	mvn.w	r2, #16
 8005de4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2208      	movs	r2, #8
 8005dea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	69db      	ldr	r3, [r3, #28]
 8005df2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d003      	beq.n	8005e02 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f000 f878 	bl	8005ef0 <HAL_TIM_IC_CaptureCallback>
 8005e00:	e005      	b.n	8005e0e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 f86b 	bl	8005ede <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f000 f87a 	bl	8005f02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	f003 0301 	and.w	r3, r3, #1
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d10e      	bne.n	8005e40 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	f003 0301 	and.w	r3, r3, #1
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d107      	bne.n	8005e40 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f06f 0201 	mvn.w	r2, #1
 8005e38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 f846 	bl	8005ecc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	691b      	ldr	r3, [r3, #16]
 8005e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e4a:	2b80      	cmp	r3, #128	; 0x80
 8005e4c:	d10e      	bne.n	8005e6c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e58:	2b80      	cmp	r3, #128	; 0x80
 8005e5a:	d107      	bne.n	8005e6c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005e64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f000 f971 	bl	800614e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e76:	2b40      	cmp	r3, #64	; 0x40
 8005e78:	d10e      	bne.n	8005e98 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e84:	2b40      	cmp	r3, #64	; 0x40
 8005e86:	d107      	bne.n	8005e98 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 f83e 	bl	8005f14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	691b      	ldr	r3, [r3, #16]
 8005e9e:	f003 0320 	and.w	r3, r3, #32
 8005ea2:	2b20      	cmp	r3, #32
 8005ea4:	d10e      	bne.n	8005ec4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	f003 0320 	and.w	r3, r3, #32
 8005eb0:	2b20      	cmp	r3, #32
 8005eb2:	d107      	bne.n	8005ec4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f06f 0220 	mvn.w	r2, #32
 8005ebc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 f93c 	bl	800613c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ec4:	bf00      	nop
 8005ec6:	3708      	adds	r7, #8
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005ed4:	bf00      	nop
 8005ed6:	370c      	adds	r7, #12
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bc80      	pop	{r7}
 8005edc:	4770      	bx	lr

08005ede <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ede:	b480      	push	{r7}
 8005ee0:	b083      	sub	sp, #12
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ee6:	bf00      	nop
 8005ee8:	370c      	adds	r7, #12
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bc80      	pop	{r7}
 8005eee:	4770      	bx	lr

08005ef0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ef8:	bf00      	nop
 8005efa:	370c      	adds	r7, #12
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bc80      	pop	{r7}
 8005f00:	4770      	bx	lr

08005f02 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f02:	b480      	push	{r7}
 8005f04:	b083      	sub	sp, #12
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f0a:	bf00      	nop
 8005f0c:	370c      	adds	r7, #12
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bc80      	pop	{r7}
 8005f12:	4770      	bx	lr

08005f14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b083      	sub	sp, #12
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f1c:	bf00      	nop
 8005f1e:	370c      	adds	r7, #12
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bc80      	pop	{r7}
 8005f24:	4770      	bx	lr
	...

08005f28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b085      	sub	sp, #20
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	4a33      	ldr	r2, [pc, #204]	; (8006008 <TIM_Base_SetConfig+0xe0>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d013      	beq.n	8005f68 <TIM_Base_SetConfig+0x40>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	4a32      	ldr	r2, [pc, #200]	; (800600c <TIM_Base_SetConfig+0xe4>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d00f      	beq.n	8005f68 <TIM_Base_SetConfig+0x40>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f4e:	d00b      	beq.n	8005f68 <TIM_Base_SetConfig+0x40>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	4a2f      	ldr	r2, [pc, #188]	; (8006010 <TIM_Base_SetConfig+0xe8>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d007      	beq.n	8005f68 <TIM_Base_SetConfig+0x40>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	4a2e      	ldr	r2, [pc, #184]	; (8006014 <TIM_Base_SetConfig+0xec>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d003      	beq.n	8005f68 <TIM_Base_SetConfig+0x40>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	4a2d      	ldr	r2, [pc, #180]	; (8006018 <TIM_Base_SetConfig+0xf0>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d108      	bne.n	8005f7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4a22      	ldr	r2, [pc, #136]	; (8006008 <TIM_Base_SetConfig+0xe0>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d013      	beq.n	8005faa <TIM_Base_SetConfig+0x82>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4a21      	ldr	r2, [pc, #132]	; (800600c <TIM_Base_SetConfig+0xe4>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d00f      	beq.n	8005faa <TIM_Base_SetConfig+0x82>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f90:	d00b      	beq.n	8005faa <TIM_Base_SetConfig+0x82>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4a1e      	ldr	r2, [pc, #120]	; (8006010 <TIM_Base_SetConfig+0xe8>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d007      	beq.n	8005faa <TIM_Base_SetConfig+0x82>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4a1d      	ldr	r2, [pc, #116]	; (8006014 <TIM_Base_SetConfig+0xec>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d003      	beq.n	8005faa <TIM_Base_SetConfig+0x82>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4a1c      	ldr	r2, [pc, #112]	; (8006018 <TIM_Base_SetConfig+0xf0>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d108      	bne.n	8005fbc <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	68fa      	ldr	r2, [r7, #12]
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	695b      	ldr	r3, [r3, #20]
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	68fa      	ldr	r2, [r7, #12]
 8005fce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	689a      	ldr	r2, [r3, #8]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	4a09      	ldr	r2, [pc, #36]	; (8006008 <TIM_Base_SetConfig+0xe0>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d003      	beq.n	8005ff0 <TIM_Base_SetConfig+0xc8>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	4a08      	ldr	r2, [pc, #32]	; (800600c <TIM_Base_SetConfig+0xe4>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d103      	bne.n	8005ff8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	691a      	ldr	r2, [r3, #16]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	615a      	str	r2, [r3, #20]
}
 8005ffe:	bf00      	nop
 8006000:	3714      	adds	r7, #20
 8006002:	46bd      	mov	sp, r7
 8006004:	bc80      	pop	{r7}
 8006006:	4770      	bx	lr
 8006008:	40012c00 	.word	0x40012c00
 800600c:	40013400 	.word	0x40013400
 8006010:	40000400 	.word	0x40000400
 8006014:	40000800 	.word	0x40000800
 8006018:	40000c00 	.word	0x40000c00

0800601c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800601c:	b480      	push	{r7}
 800601e:	b087      	sub	sp, #28
 8006020:	af00      	add	r7, sp, #0
 8006022:	60f8      	str	r0, [r7, #12]
 8006024:	60b9      	str	r1, [r7, #8]
 8006026:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	f003 031f 	and.w	r3, r3, #31
 800602e:	2201      	movs	r2, #1
 8006030:	fa02 f303 	lsl.w	r3, r2, r3
 8006034:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	6a1a      	ldr	r2, [r3, #32]
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	43db      	mvns	r3, r3
 800603e:	401a      	ands	r2, r3
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6a1a      	ldr	r2, [r3, #32]
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	f003 031f 	and.w	r3, r3, #31
 800604e:	6879      	ldr	r1, [r7, #4]
 8006050:	fa01 f303 	lsl.w	r3, r1, r3
 8006054:	431a      	orrs	r2, r3
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	621a      	str	r2, [r3, #32]
}
 800605a:	bf00      	nop
 800605c:	371c      	adds	r7, #28
 800605e:	46bd      	mov	sp, r7
 8006060:	bc80      	pop	{r7}
 8006062:	4770      	bx	lr

08006064 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006064:	b480      	push	{r7}
 8006066:	b085      	sub	sp, #20
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006074:	2b01      	cmp	r3, #1
 8006076:	d101      	bne.n	800607c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006078:	2302      	movs	r3, #2
 800607a:	e050      	b.n	800611e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2202      	movs	r2, #2
 8006088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68fa      	ldr	r2, [r7, #12]
 80060aa:	4313      	orrs	r3, r2
 80060ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	68fa      	ldr	r2, [r7, #12]
 80060b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a1b      	ldr	r2, [pc, #108]	; (8006128 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d018      	beq.n	80060f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a19      	ldr	r2, [pc, #100]	; (800612c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d013      	beq.n	80060f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060d2:	d00e      	beq.n	80060f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a15      	ldr	r2, [pc, #84]	; (8006130 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d009      	beq.n	80060f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a14      	ldr	r2, [pc, #80]	; (8006134 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d004      	beq.n	80060f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a12      	ldr	r2, [pc, #72]	; (8006138 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d10c      	bne.n	800610c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	68ba      	ldr	r2, [r7, #8]
 8006100:	4313      	orrs	r3, r2
 8006102:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	68ba      	ldr	r2, [r7, #8]
 800610a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800611c:	2300      	movs	r3, #0
}
 800611e:	4618      	mov	r0, r3
 8006120:	3714      	adds	r7, #20
 8006122:	46bd      	mov	sp, r7
 8006124:	bc80      	pop	{r7}
 8006126:	4770      	bx	lr
 8006128:	40012c00 	.word	0x40012c00
 800612c:	40013400 	.word	0x40013400
 8006130:	40000400 	.word	0x40000400
 8006134:	40000800 	.word	0x40000800
 8006138:	40000c00 	.word	0x40000c00

0800613c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800613c:	b480      	push	{r7}
 800613e:	b083      	sub	sp, #12
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006144:	bf00      	nop
 8006146:	370c      	adds	r7, #12
 8006148:	46bd      	mov	sp, r7
 800614a:	bc80      	pop	{r7}
 800614c:	4770      	bx	lr

0800614e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800614e:	b480      	push	{r7}
 8006150:	b083      	sub	sp, #12
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006156:	bf00      	nop
 8006158:	370c      	adds	r7, #12
 800615a:	46bd      	mov	sp, r7
 800615c:	bc80      	pop	{r7}
 800615e:	4770      	bx	lr

08006160 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b082      	sub	sp, #8
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d101      	bne.n	8006172 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	e03f      	b.n	80061f2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006178:	b2db      	uxtb	r3, r3
 800617a:	2b00      	cmp	r3, #0
 800617c:	d106      	bne.n	800618c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2200      	movs	r2, #0
 8006182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f7fe fb5a 	bl	8004840 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2224      	movs	r2, #36	; 0x24
 8006190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	68da      	ldr	r2, [r3, #12]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80061a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f000 f829 	bl	80061fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	691a      	ldr	r2, [r3, #16]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80061b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	695a      	ldr	r2, [r3, #20]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80061c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	68da      	ldr	r2, [r3, #12]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80061d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2200      	movs	r2, #0
 80061de:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2220      	movs	r2, #32
 80061e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2220      	movs	r2, #32
 80061ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80061f0:	2300      	movs	r3, #0
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3708      	adds	r7, #8
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}
	...

080061fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	68da      	ldr	r2, [r3, #12]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	430a      	orrs	r2, r1
 8006218:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	689a      	ldr	r2, [r3, #8]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	691b      	ldr	r3, [r3, #16]
 8006222:	431a      	orrs	r2, r3
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	695b      	ldr	r3, [r3, #20]
 8006228:	4313      	orrs	r3, r2
 800622a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	68db      	ldr	r3, [r3, #12]
 8006232:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006236:	f023 030c 	bic.w	r3, r3, #12
 800623a:	687a      	ldr	r2, [r7, #4]
 800623c:	6812      	ldr	r2, [r2, #0]
 800623e:	68b9      	ldr	r1, [r7, #8]
 8006240:	430b      	orrs	r3, r1
 8006242:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	695b      	ldr	r3, [r3, #20]
 800624a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	699a      	ldr	r2, [r3, #24]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	430a      	orrs	r2, r1
 8006258:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a2c      	ldr	r2, [pc, #176]	; (8006310 <UART_SetConfig+0x114>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d103      	bne.n	800626c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006264:	f7ff fb24 	bl	80058b0 <HAL_RCC_GetPCLK2Freq>
 8006268:	60f8      	str	r0, [r7, #12]
 800626a:	e002      	b.n	8006272 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800626c:	f7ff fb0c 	bl	8005888 <HAL_RCC_GetPCLK1Freq>
 8006270:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006272:	68fa      	ldr	r2, [r7, #12]
 8006274:	4613      	mov	r3, r2
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	4413      	add	r3, r2
 800627a:	009a      	lsls	r2, r3, #2
 800627c:	441a      	add	r2, r3
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	009b      	lsls	r3, r3, #2
 8006284:	fbb2 f3f3 	udiv	r3, r2, r3
 8006288:	4a22      	ldr	r2, [pc, #136]	; (8006314 <UART_SetConfig+0x118>)
 800628a:	fba2 2303 	umull	r2, r3, r2, r3
 800628e:	095b      	lsrs	r3, r3, #5
 8006290:	0119      	lsls	r1, r3, #4
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	4613      	mov	r3, r2
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	4413      	add	r3, r2
 800629a:	009a      	lsls	r2, r3, #2
 800629c:	441a      	add	r2, r3
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80062a8:	4b1a      	ldr	r3, [pc, #104]	; (8006314 <UART_SetConfig+0x118>)
 80062aa:	fba3 0302 	umull	r0, r3, r3, r2
 80062ae:	095b      	lsrs	r3, r3, #5
 80062b0:	2064      	movs	r0, #100	; 0x64
 80062b2:	fb00 f303 	mul.w	r3, r0, r3
 80062b6:	1ad3      	subs	r3, r2, r3
 80062b8:	011b      	lsls	r3, r3, #4
 80062ba:	3332      	adds	r3, #50	; 0x32
 80062bc:	4a15      	ldr	r2, [pc, #84]	; (8006314 <UART_SetConfig+0x118>)
 80062be:	fba2 2303 	umull	r2, r3, r2, r3
 80062c2:	095b      	lsrs	r3, r3, #5
 80062c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80062c8:	4419      	add	r1, r3
 80062ca:	68fa      	ldr	r2, [r7, #12]
 80062cc:	4613      	mov	r3, r2
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	4413      	add	r3, r2
 80062d2:	009a      	lsls	r2, r3, #2
 80062d4:	441a      	add	r2, r3
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80062e0:	4b0c      	ldr	r3, [pc, #48]	; (8006314 <UART_SetConfig+0x118>)
 80062e2:	fba3 0302 	umull	r0, r3, r3, r2
 80062e6:	095b      	lsrs	r3, r3, #5
 80062e8:	2064      	movs	r0, #100	; 0x64
 80062ea:	fb00 f303 	mul.w	r3, r0, r3
 80062ee:	1ad3      	subs	r3, r2, r3
 80062f0:	011b      	lsls	r3, r3, #4
 80062f2:	3332      	adds	r3, #50	; 0x32
 80062f4:	4a07      	ldr	r2, [pc, #28]	; (8006314 <UART_SetConfig+0x118>)
 80062f6:	fba2 2303 	umull	r2, r3, r2, r3
 80062fa:	095b      	lsrs	r3, r3, #5
 80062fc:	f003 020f 	and.w	r2, r3, #15
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	440a      	add	r2, r1
 8006306:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006308:	bf00      	nop
 800630a:	3710      	adds	r7, #16
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}
 8006310:	40013800 	.word	0x40013800
 8006314:	51eb851f 	.word	0x51eb851f

08006318 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006318:	b480      	push	{r7}
 800631a:	b085      	sub	sp, #20
 800631c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800631e:	f3ef 8305 	mrs	r3, IPSR
 8006322:	60bb      	str	r3, [r7, #8]
  return(result);
 8006324:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006326:	2b00      	cmp	r3, #0
 8006328:	d10f      	bne.n	800634a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800632a:	f3ef 8310 	mrs	r3, PRIMASK
 800632e:	607b      	str	r3, [r7, #4]
  return(result);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d109      	bne.n	800634a <osKernelInitialize+0x32>
 8006336:	4b10      	ldr	r3, [pc, #64]	; (8006378 <osKernelInitialize+0x60>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	2b02      	cmp	r3, #2
 800633c:	d109      	bne.n	8006352 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800633e:	f3ef 8311 	mrs	r3, BASEPRI
 8006342:	603b      	str	r3, [r7, #0]
  return(result);
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d003      	beq.n	8006352 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800634a:	f06f 0305 	mvn.w	r3, #5
 800634e:	60fb      	str	r3, [r7, #12]
 8006350:	e00c      	b.n	800636c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006352:	4b09      	ldr	r3, [pc, #36]	; (8006378 <osKernelInitialize+0x60>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d105      	bne.n	8006366 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800635a:	4b07      	ldr	r3, [pc, #28]	; (8006378 <osKernelInitialize+0x60>)
 800635c:	2201      	movs	r2, #1
 800635e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006360:	2300      	movs	r3, #0
 8006362:	60fb      	str	r3, [r7, #12]
 8006364:	e002      	b.n	800636c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8006366:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800636a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800636c:	68fb      	ldr	r3, [r7, #12]
}
 800636e:	4618      	mov	r0, r3
 8006370:	3714      	adds	r7, #20
 8006372:	46bd      	mov	sp, r7
 8006374:	bc80      	pop	{r7}
 8006376:	4770      	bx	lr
 8006378:	200003a4 	.word	0x200003a4

0800637c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800637c:	b580      	push	{r7, lr}
 800637e:	b084      	sub	sp, #16
 8006380:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006382:	f3ef 8305 	mrs	r3, IPSR
 8006386:	60bb      	str	r3, [r7, #8]
  return(result);
 8006388:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800638a:	2b00      	cmp	r3, #0
 800638c:	d10f      	bne.n	80063ae <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800638e:	f3ef 8310 	mrs	r3, PRIMASK
 8006392:	607b      	str	r3, [r7, #4]
  return(result);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d109      	bne.n	80063ae <osKernelStart+0x32>
 800639a:	4b11      	ldr	r3, [pc, #68]	; (80063e0 <osKernelStart+0x64>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	2b02      	cmp	r3, #2
 80063a0:	d109      	bne.n	80063b6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80063a2:	f3ef 8311 	mrs	r3, BASEPRI
 80063a6:	603b      	str	r3, [r7, #0]
  return(result);
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d003      	beq.n	80063b6 <osKernelStart+0x3a>
    stat = osErrorISR;
 80063ae:	f06f 0305 	mvn.w	r3, #5
 80063b2:	60fb      	str	r3, [r7, #12]
 80063b4:	e00e      	b.n	80063d4 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80063b6:	4b0a      	ldr	r3, [pc, #40]	; (80063e0 <osKernelStart+0x64>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d107      	bne.n	80063ce <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80063be:	4b08      	ldr	r3, [pc, #32]	; (80063e0 <osKernelStart+0x64>)
 80063c0:	2202      	movs	r2, #2
 80063c2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80063c4:	f001 fbf6 	bl	8007bb4 <vTaskStartScheduler>
      stat = osOK;
 80063c8:	2300      	movs	r3, #0
 80063ca:	60fb      	str	r3, [r7, #12]
 80063cc:	e002      	b.n	80063d4 <osKernelStart+0x58>
    } else {
      stat = osError;
 80063ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80063d2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80063d4:	68fb      	ldr	r3, [r7, #12]
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3710      	adds	r7, #16
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop
 80063e0:	200003a4 	.word	0x200003a4

080063e4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b092      	sub	sp, #72	; 0x48
 80063e8:	af04      	add	r7, sp, #16
 80063ea:	60f8      	str	r0, [r7, #12]
 80063ec:	60b9      	str	r1, [r7, #8]
 80063ee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80063f0:	2300      	movs	r3, #0
 80063f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063f4:	f3ef 8305 	mrs	r3, IPSR
 80063f8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80063fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	f040 8095 	bne.w	800652c <osThreadNew+0x148>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006402:	f3ef 8310 	mrs	r3, PRIMASK
 8006406:	623b      	str	r3, [r7, #32]
  return(result);
 8006408:	6a3b      	ldr	r3, [r7, #32]
 800640a:	2b00      	cmp	r3, #0
 800640c:	f040 808e 	bne.w	800652c <osThreadNew+0x148>
 8006410:	4b49      	ldr	r3, [pc, #292]	; (8006538 <osThreadNew+0x154>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	2b02      	cmp	r3, #2
 8006416:	d106      	bne.n	8006426 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006418:	f3ef 8311 	mrs	r3, BASEPRI
 800641c:	61fb      	str	r3, [r7, #28]
  return(result);
 800641e:	69fb      	ldr	r3, [r7, #28]
 8006420:	2b00      	cmp	r3, #0
 8006422:	f040 8083 	bne.w	800652c <osThreadNew+0x148>
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d07f      	beq.n	800652c <osThreadNew+0x148>
    stack = configMINIMAL_STACK_SIZE;
 800642c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006430:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8006432:	2318      	movs	r3, #24
 8006434:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8006436:	2300      	movs	r3, #0
 8006438:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800643a:	f107 031b 	add.w	r3, r7, #27
 800643e:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8006440:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006444:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d045      	beq.n	80064d8 <osThreadNew+0xf4>
      if (attr->name != NULL) {
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d002      	beq.n	800645a <osThreadNew+0x76>
        name = attr->name;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	699b      	ldr	r3, [r3, #24]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d002      	beq.n	8006468 <osThreadNew+0x84>
        prio = (UBaseType_t)attr->priority;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	699b      	ldr	r3, [r3, #24]
 8006466:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800646a:	2b00      	cmp	r3, #0
 800646c:	d008      	beq.n	8006480 <osThreadNew+0x9c>
 800646e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006470:	2b38      	cmp	r3, #56	; 0x38
 8006472:	d805      	bhi.n	8006480 <osThreadNew+0x9c>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	f003 0301 	and.w	r3, r3, #1
 800647c:	2b00      	cmp	r3, #0
 800647e:	d001      	beq.n	8006484 <osThreadNew+0xa0>
        return (NULL);
 8006480:	2300      	movs	r3, #0
 8006482:	e054      	b.n	800652e <osThreadNew+0x14a>
      }

      if (attr->stack_size > 0U) {
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	695b      	ldr	r3, [r3, #20]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d003      	beq.n	8006494 <osThreadNew+0xb0>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	695b      	ldr	r3, [r3, #20]
 8006490:	089b      	lsrs	r3, r3, #2
 8006492:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d00e      	beq.n	80064ba <osThreadNew+0xd6>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	2bbb      	cmp	r3, #187	; 0xbb
 80064a2:	d90a      	bls.n	80064ba <osThreadNew+0xd6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d006      	beq.n	80064ba <osThreadNew+0xd6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	695b      	ldr	r3, [r3, #20]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d002      	beq.n	80064ba <osThreadNew+0xd6>
        mem = 1;
 80064b4:	2301      	movs	r3, #1
 80064b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80064b8:	e010      	b.n	80064dc <osThreadNew+0xf8>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d10c      	bne.n	80064dc <osThreadNew+0xf8>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	68db      	ldr	r3, [r3, #12]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d108      	bne.n	80064dc <osThreadNew+0xf8>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d104      	bne.n	80064dc <osThreadNew+0xf8>
          mem = 0;
 80064d2:	2300      	movs	r3, #0
 80064d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80064d6:	e001      	b.n	80064dc <osThreadNew+0xf8>
        }
      }
    }
    else {
      mem = 0;
 80064d8:	2300      	movs	r3, #0
 80064da:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80064dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064de:	2b01      	cmp	r3, #1
 80064e0:	d110      	bne.n	8006504 <osThreadNew+0x120>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80064ea:	9202      	str	r2, [sp, #8]
 80064ec:	9301      	str	r3, [sp, #4]
 80064ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064f0:	9300      	str	r3, [sp, #0]
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064f6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80064f8:	68f8      	ldr	r0, [r7, #12]
 80064fa:	f001 f977 	bl	80077ec <xTaskCreateStatic>
 80064fe:	4603      	mov	r3, r0
 8006500:	617b      	str	r3, [r7, #20]
 8006502:	e013      	b.n	800652c <osThreadNew+0x148>
    }
    else {
      if (mem == 0) {
 8006504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006506:	2b00      	cmp	r3, #0
 8006508:	d110      	bne.n	800652c <osThreadNew+0x148>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800650a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800650c:	b29a      	uxth	r2, r3
 800650e:	f107 0314 	add.w	r3, r7, #20
 8006512:	9301      	str	r3, [sp, #4]
 8006514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006516:	9300      	str	r3, [sp, #0]
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800651c:	68f8      	ldr	r0, [r7, #12]
 800651e:	f001 f9c1 	bl	80078a4 <xTaskCreate>
 8006522:	4603      	mov	r3, r0
 8006524:	2b01      	cmp	r3, #1
 8006526:	d001      	beq.n	800652c <osThreadNew+0x148>
          hTask = NULL;
 8006528:	2300      	movs	r3, #0
 800652a:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800652c:	697b      	ldr	r3, [r7, #20]
}
 800652e:	4618      	mov	r0, r3
 8006530:	3738      	adds	r7, #56	; 0x38
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop
 8006538:	200003a4 	.word	0x200003a4

0800653c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800653c:	b580      	push	{r7, lr}
 800653e:	b086      	sub	sp, #24
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006544:	f3ef 8305 	mrs	r3, IPSR
 8006548:	613b      	str	r3, [r7, #16]
  return(result);
 800654a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800654c:	2b00      	cmp	r3, #0
 800654e:	d10f      	bne.n	8006570 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006550:	f3ef 8310 	mrs	r3, PRIMASK
 8006554:	60fb      	str	r3, [r7, #12]
  return(result);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d109      	bne.n	8006570 <osDelay+0x34>
 800655c:	4b0d      	ldr	r3, [pc, #52]	; (8006594 <osDelay+0x58>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	2b02      	cmp	r3, #2
 8006562:	d109      	bne.n	8006578 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006564:	f3ef 8311 	mrs	r3, BASEPRI
 8006568:	60bb      	str	r3, [r7, #8]
  return(result);
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d003      	beq.n	8006578 <osDelay+0x3c>
    stat = osErrorISR;
 8006570:	f06f 0305 	mvn.w	r3, #5
 8006574:	617b      	str	r3, [r7, #20]
 8006576:	e007      	b.n	8006588 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006578:	2300      	movs	r3, #0
 800657a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d002      	beq.n	8006588 <osDelay+0x4c>
      vTaskDelay(ticks);
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f001 fae2 	bl	8007b4c <vTaskDelay>
    }
  }

  return (stat);
 8006588:	697b      	ldr	r3, [r7, #20]
}
 800658a:	4618      	mov	r0, r3
 800658c:	3718      	adds	r7, #24
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
 8006592:	bf00      	nop
 8006594:	200003a4 	.word	0x200003a4

08006598 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8006598:	b580      	push	{r7, lr}
 800659a:	b08a      	sub	sp, #40	; 0x28
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80065a0:	2300      	movs	r3, #0
 80065a2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065a4:	f3ef 8305 	mrs	r3, IPSR
 80065a8:	613b      	str	r3, [r7, #16]
  return(result);
 80065aa:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	f040 8085 	bne.w	80066bc <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065b2:	f3ef 8310 	mrs	r3, PRIMASK
 80065b6:	60fb      	str	r3, [r7, #12]
  return(result);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d17e      	bne.n	80066bc <osMutexNew+0x124>
 80065be:	4b42      	ldr	r3, [pc, #264]	; (80066c8 <osMutexNew+0x130>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	2b02      	cmp	r3, #2
 80065c4:	d105      	bne.n	80065d2 <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80065c6:	f3ef 8311 	mrs	r3, BASEPRI
 80065ca:	60bb      	str	r3, [r7, #8]
  return(result);
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d174      	bne.n	80066bc <osMutexNew+0x124>
    if (attr != NULL) {
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d003      	beq.n	80065e0 <osMutexNew+0x48>
      type = attr->attr_bits;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	623b      	str	r3, [r7, #32]
 80065de:	e001      	b.n	80065e4 <osMutexNew+0x4c>
    } else {
      type = 0U;
 80065e0:	2300      	movs	r3, #0
 80065e2:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80065e4:	6a3b      	ldr	r3, [r7, #32]
 80065e6:	f003 0301 	and.w	r3, r3, #1
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d002      	beq.n	80065f4 <osMutexNew+0x5c>
      rmtx = 1U;
 80065ee:	2301      	movs	r3, #1
 80065f0:	61fb      	str	r3, [r7, #28]
 80065f2:	e001      	b.n	80065f8 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 80065f4:	2300      	movs	r3, #0
 80065f6:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80065f8:	6a3b      	ldr	r3, [r7, #32]
 80065fa:	f003 0308 	and.w	r3, r3, #8
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d15c      	bne.n	80066bc <osMutexNew+0x124>
      mem = -1;
 8006602:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006606:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d015      	beq.n	800663a <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d006      	beq.n	8006624 <osMutexNew+0x8c>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	68db      	ldr	r3, [r3, #12]
 800661a:	2b4f      	cmp	r3, #79	; 0x4f
 800661c:	d902      	bls.n	8006624 <osMutexNew+0x8c>
          mem = 1;
 800661e:	2301      	movs	r3, #1
 8006620:	61bb      	str	r3, [r7, #24]
 8006622:	e00c      	b.n	800663e <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d108      	bne.n	800663e <osMutexNew+0xa6>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d104      	bne.n	800663e <osMutexNew+0xa6>
            mem = 0;
 8006634:	2300      	movs	r3, #0
 8006636:	61bb      	str	r3, [r7, #24]
 8006638:	e001      	b.n	800663e <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800663a:	2300      	movs	r3, #0
 800663c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800663e:	69bb      	ldr	r3, [r7, #24]
 8006640:	2b01      	cmp	r3, #1
 8006642:	d112      	bne.n	800666a <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8006644:	69fb      	ldr	r3, [r7, #28]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d007      	beq.n	800665a <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	4619      	mov	r1, r3
 8006650:	2004      	movs	r0, #4
 8006652:	f000 fb3f 	bl	8006cd4 <xQueueCreateMutexStatic>
 8006656:	6278      	str	r0, [r7, #36]	; 0x24
 8006658:	e016      	b.n	8006688 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	4619      	mov	r1, r3
 8006660:	2001      	movs	r0, #1
 8006662:	f000 fb37 	bl	8006cd4 <xQueueCreateMutexStatic>
 8006666:	6278      	str	r0, [r7, #36]	; 0x24
 8006668:	e00e      	b.n	8006688 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800666a:	69bb      	ldr	r3, [r7, #24]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d10b      	bne.n	8006688 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8006670:	69fb      	ldr	r3, [r7, #28]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d004      	beq.n	8006680 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8006676:	2004      	movs	r0, #4
 8006678:	f000 fb14 	bl	8006ca4 <xQueueCreateMutex>
 800667c:	6278      	str	r0, [r7, #36]	; 0x24
 800667e:	e003      	b.n	8006688 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8006680:	2001      	movs	r0, #1
 8006682:	f000 fb0f 	bl	8006ca4 <xQueueCreateMutex>
 8006686:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8006688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668a:	2b00      	cmp	r3, #0
 800668c:	d00c      	beq.n	80066a8 <osMutexNew+0x110>
        if (attr != NULL) {
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d003      	beq.n	800669c <osMutexNew+0x104>
          name = attr->name;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	617b      	str	r3, [r7, #20]
 800669a:	e001      	b.n	80066a0 <osMutexNew+0x108>
        } else {
          name = NULL;
 800669c:	2300      	movs	r3, #0
 800669e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 80066a0:	6979      	ldr	r1, [r7, #20]
 80066a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80066a4:	f001 f846 	bl	8007734 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80066a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d006      	beq.n	80066bc <osMutexNew+0x124>
 80066ae:	69fb      	ldr	r3, [r7, #28]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d003      	beq.n	80066bc <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80066b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b6:	f043 0301 	orr.w	r3, r3, #1
 80066ba:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80066bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3728      	adds	r7, #40	; 0x28
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	bf00      	nop
 80066c8:	200003a4 	.word	0x200003a4

080066cc <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b088      	sub	sp, #32
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f023 0301 	bic.w	r3, r3, #1
 80066dc:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f003 0301 	and.w	r3, r3, #1
 80066e4:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80066e6:	2300      	movs	r3, #0
 80066e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066ea:	f3ef 8305 	mrs	r3, IPSR
 80066ee:	613b      	str	r3, [r7, #16]
  return(result);
 80066f0:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d10f      	bne.n	8006716 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066f6:	f3ef 8310 	mrs	r3, PRIMASK
 80066fa:	60fb      	str	r3, [r7, #12]
  return(result);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d109      	bne.n	8006716 <osMutexAcquire+0x4a>
 8006702:	4b20      	ldr	r3, [pc, #128]	; (8006784 <osMutexAcquire+0xb8>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	2b02      	cmp	r3, #2
 8006708:	d109      	bne.n	800671e <osMutexAcquire+0x52>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800670a:	f3ef 8311 	mrs	r3, BASEPRI
 800670e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d003      	beq.n	800671e <osMutexAcquire+0x52>
    stat = osErrorISR;
 8006716:	f06f 0305 	mvn.w	r3, #5
 800671a:	61fb      	str	r3, [r7, #28]
 800671c:	e02c      	b.n	8006778 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800671e:	69bb      	ldr	r3, [r7, #24]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d103      	bne.n	800672c <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8006724:	f06f 0303 	mvn.w	r3, #3
 8006728:	61fb      	str	r3, [r7, #28]
 800672a:	e025      	b.n	8006778 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d011      	beq.n	8006756 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8006732:	6839      	ldr	r1, [r7, #0]
 8006734:	69b8      	ldr	r0, [r7, #24]
 8006736:	f000 fb1c 	bl	8006d72 <xQueueTakeMutexRecursive>
 800673a:	4603      	mov	r3, r0
 800673c:	2b01      	cmp	r3, #1
 800673e:	d01b      	beq.n	8006778 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d003      	beq.n	800674e <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8006746:	f06f 0301 	mvn.w	r3, #1
 800674a:	61fb      	str	r3, [r7, #28]
 800674c:	e014      	b.n	8006778 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800674e:	f06f 0302 	mvn.w	r3, #2
 8006752:	61fb      	str	r3, [r7, #28]
 8006754:	e010      	b.n	8006778 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8006756:	6839      	ldr	r1, [r7, #0]
 8006758:	69b8      	ldr	r0, [r7, #24]
 800675a:	f000 fdb7 	bl	80072cc <xQueueSemaphoreTake>
 800675e:	4603      	mov	r3, r0
 8006760:	2b01      	cmp	r3, #1
 8006762:	d009      	beq.n	8006778 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d003      	beq.n	8006772 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800676a:	f06f 0301 	mvn.w	r3, #1
 800676e:	61fb      	str	r3, [r7, #28]
 8006770:	e002      	b.n	8006778 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8006772:	f06f 0302 	mvn.w	r3, #2
 8006776:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006778:	69fb      	ldr	r3, [r7, #28]
}
 800677a:	4618      	mov	r0, r3
 800677c:	3720      	adds	r7, #32
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
 8006782:	bf00      	nop
 8006784:	200003a4 	.word	0x200003a4

08006788 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8006788:	b580      	push	{r7, lr}
 800678a:	b088      	sub	sp, #32
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f023 0301 	bic.w	r3, r3, #1
 8006796:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f003 0301 	and.w	r3, r3, #1
 800679e:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80067a0:	2300      	movs	r3, #0
 80067a2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80067a4:	f3ef 8305 	mrs	r3, IPSR
 80067a8:	613b      	str	r3, [r7, #16]
  return(result);
 80067aa:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d10f      	bne.n	80067d0 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067b0:	f3ef 8310 	mrs	r3, PRIMASK
 80067b4:	60fb      	str	r3, [r7, #12]
  return(result);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d109      	bne.n	80067d0 <osMutexRelease+0x48>
 80067bc:	4b19      	ldr	r3, [pc, #100]	; (8006824 <osMutexRelease+0x9c>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	2b02      	cmp	r3, #2
 80067c2:	d109      	bne.n	80067d8 <osMutexRelease+0x50>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80067c4:	f3ef 8311 	mrs	r3, BASEPRI
 80067c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d003      	beq.n	80067d8 <osMutexRelease+0x50>
    stat = osErrorISR;
 80067d0:	f06f 0305 	mvn.w	r3, #5
 80067d4:	61fb      	str	r3, [r7, #28]
 80067d6:	e01f      	b.n	8006818 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 80067d8:	69bb      	ldr	r3, [r7, #24]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d103      	bne.n	80067e6 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 80067de:	f06f 0303 	mvn.w	r3, #3
 80067e2:	61fb      	str	r3, [r7, #28]
 80067e4:	e018      	b.n	8006818 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d009      	beq.n	8006800 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80067ec:	69b8      	ldr	r0, [r7, #24]
 80067ee:	f000 fa8c 	bl	8006d0a <xQueueGiveMutexRecursive>
 80067f2:	4603      	mov	r3, r0
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d00f      	beq.n	8006818 <osMutexRelease+0x90>
        stat = osErrorResource;
 80067f8:	f06f 0302 	mvn.w	r3, #2
 80067fc:	61fb      	str	r3, [r7, #28]
 80067fe:	e00b      	b.n	8006818 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8006800:	2300      	movs	r3, #0
 8006802:	2200      	movs	r2, #0
 8006804:	2100      	movs	r1, #0
 8006806:	69b8      	ldr	r0, [r7, #24]
 8006808:	f000 faea 	bl	8006de0 <xQueueGenericSend>
 800680c:	4603      	mov	r3, r0
 800680e:	2b01      	cmp	r3, #1
 8006810:	d002      	beq.n	8006818 <osMutexRelease+0x90>
        stat = osErrorResource;
 8006812:	f06f 0302 	mvn.w	r3, #2
 8006816:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8006818:	69fb      	ldr	r3, [r7, #28]
}
 800681a:	4618      	mov	r0, r3
 800681c:	3720      	adds	r7, #32
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
 8006822:	bf00      	nop
 8006824:	200003a4 	.word	0x200003a4

08006828 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006828:	b480      	push	{r7}
 800682a:	b085      	sub	sp, #20
 800682c:	af00      	add	r7, sp, #0
 800682e:	60f8      	str	r0, [r7, #12]
 8006830:	60b9      	str	r1, [r7, #8]
 8006832:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	4a07      	ldr	r2, [pc, #28]	; (8006854 <vApplicationGetIdleTaskMemory+0x2c>)
 8006838:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	4a06      	ldr	r2, [pc, #24]	; (8006858 <vApplicationGetIdleTaskMemory+0x30>)
 800683e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006846:	601a      	str	r2, [r3, #0]
}
 8006848:	bf00      	nop
 800684a:	3714      	adds	r7, #20
 800684c:	46bd      	mov	sp, r7
 800684e:	bc80      	pop	{r7}
 8006850:	4770      	bx	lr
 8006852:	bf00      	nop
 8006854:	200003a8 	.word	0x200003a8
 8006858:	20000464 	.word	0x20000464

0800685c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800685c:	b480      	push	{r7}
 800685e:	b085      	sub	sp, #20
 8006860:	af00      	add	r7, sp, #0
 8006862:	60f8      	str	r0, [r7, #12]
 8006864:	60b9      	str	r1, [r7, #8]
 8006866:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	4a07      	ldr	r2, [pc, #28]	; (8006888 <vApplicationGetTimerTaskMemory+0x2c>)
 800686c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	4a06      	ldr	r2, [pc, #24]	; (800688c <vApplicationGetTimerTaskMemory+0x30>)
 8006872:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f44f 7200 	mov.w	r2, #512	; 0x200
 800687a:	601a      	str	r2, [r3, #0]
}
 800687c:	bf00      	nop
 800687e:	3714      	adds	r7, #20
 8006880:	46bd      	mov	sp, r7
 8006882:	bc80      	pop	{r7}
 8006884:	4770      	bx	lr
 8006886:	bf00      	nop
 8006888:	20000864 	.word	0x20000864
 800688c:	20000920 	.word	0x20000920

08006890 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006890:	b480      	push	{r7}
 8006892:	b083      	sub	sp, #12
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f103 0208 	add.w	r2, r3, #8
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80068a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f103 0208 	add.w	r2, r3, #8
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f103 0208 	add.w	r2, r3, #8
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2200      	movs	r2, #0
 80068c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80068c4:	bf00      	nop
 80068c6:	370c      	adds	r7, #12
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bc80      	pop	{r7}
 80068cc:	4770      	bx	lr

080068ce <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80068ce:	b480      	push	{r7}
 80068d0:	b083      	sub	sp, #12
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2200      	movs	r2, #0
 80068da:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80068dc:	bf00      	nop
 80068de:	370c      	adds	r7, #12
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bc80      	pop	{r7}
 80068e4:	4770      	bx	lr

080068e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80068e6:	b480      	push	{r7}
 80068e8:	b085      	sub	sp, #20
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
 80068ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	68fa      	ldr	r2, [r7, #12]
 80068fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	689a      	ldr	r2, [r3, #8]
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	683a      	ldr	r2, [r7, #0]
 800690a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	683a      	ldr	r2, [r7, #0]
 8006910:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	1c5a      	adds	r2, r3, #1
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	601a      	str	r2, [r3, #0]
}
 8006922:	bf00      	nop
 8006924:	3714      	adds	r7, #20
 8006926:	46bd      	mov	sp, r7
 8006928:	bc80      	pop	{r7}
 800692a:	4770      	bx	lr

0800692c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800692c:	b480      	push	{r7}
 800692e:	b085      	sub	sp, #20
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006942:	d103      	bne.n	800694c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	691b      	ldr	r3, [r3, #16]
 8006948:	60fb      	str	r3, [r7, #12]
 800694a:	e00c      	b.n	8006966 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	3308      	adds	r3, #8
 8006950:	60fb      	str	r3, [r7, #12]
 8006952:	e002      	b.n	800695a <vListInsert+0x2e>
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	60fb      	str	r3, [r7, #12]
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	68ba      	ldr	r2, [r7, #8]
 8006962:	429a      	cmp	r2, r3
 8006964:	d2f6      	bcs.n	8006954 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	685a      	ldr	r2, [r3, #4]
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	683a      	ldr	r2, [r7, #0]
 8006974:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	68fa      	ldr	r2, [r7, #12]
 800697a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	683a      	ldr	r2, [r7, #0]
 8006980:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	1c5a      	adds	r2, r3, #1
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	601a      	str	r2, [r3, #0]
}
 8006992:	bf00      	nop
 8006994:	3714      	adds	r7, #20
 8006996:	46bd      	mov	sp, r7
 8006998:	bc80      	pop	{r7}
 800699a:	4770      	bx	lr

0800699c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800699c:	b480      	push	{r7}
 800699e:	b085      	sub	sp, #20
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	691b      	ldr	r3, [r3, #16]
 80069a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	6892      	ldr	r2, [r2, #8]
 80069b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	6852      	ldr	r2, [r2, #4]
 80069bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d103      	bne.n	80069d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	689a      	ldr	r2, [r3, #8]
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	1e5a      	subs	r2, r3, #1
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3714      	adds	r7, #20
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bc80      	pop	{r7}
 80069ec:	4770      	bx	lr
	...

080069f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b084      	sub	sp, #16
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d10a      	bne.n	8006a1a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a08:	f383 8811 	msr	BASEPRI, r3
 8006a0c:	f3bf 8f6f 	isb	sy
 8006a10:	f3bf 8f4f 	dsb	sy
 8006a14:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006a16:	bf00      	nop
 8006a18:	e7fe      	b.n	8006a18 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006a1a:	f002 fb27 	bl	800906c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a26:	68f9      	ldr	r1, [r7, #12]
 8006a28:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006a2a:	fb01 f303 	mul.w	r3, r1, r3
 8006a2e:	441a      	add	r2, r3
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2200      	movs	r2, #0
 8006a38:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681a      	ldr	r2, [r3, #0]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a4a:	3b01      	subs	r3, #1
 8006a4c:	68f9      	ldr	r1, [r7, #12]
 8006a4e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006a50:	fb01 f303 	mul.w	r3, r1, r3
 8006a54:	441a      	add	r2, r3
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	22ff      	movs	r2, #255	; 0xff
 8006a5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	22ff      	movs	r2, #255	; 0xff
 8006a66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d114      	bne.n	8006a9a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	691b      	ldr	r3, [r3, #16]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d01a      	beq.n	8006aae <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	3310      	adds	r3, #16
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f001 fb35 	bl	80080ec <xTaskRemoveFromEventList>
 8006a82:	4603      	mov	r3, r0
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d012      	beq.n	8006aae <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006a88:	4b0c      	ldr	r3, [pc, #48]	; (8006abc <xQueueGenericReset+0xcc>)
 8006a8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a8e:	601a      	str	r2, [r3, #0]
 8006a90:	f3bf 8f4f 	dsb	sy
 8006a94:	f3bf 8f6f 	isb	sy
 8006a98:	e009      	b.n	8006aae <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	3310      	adds	r3, #16
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f7ff fef6 	bl	8006890 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	3324      	adds	r3, #36	; 0x24
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f7ff fef1 	bl	8006890 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006aae:	f002 fb0d 	bl	80090cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006ab2:	2301      	movs	r3, #1
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3710      	adds	r7, #16
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}
 8006abc:	e000ed04 	.word	0xe000ed04

08006ac0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b08e      	sub	sp, #56	; 0x38
 8006ac4:	af02      	add	r7, sp, #8
 8006ac6:	60f8      	str	r0, [r7, #12]
 8006ac8:	60b9      	str	r1, [r7, #8]
 8006aca:	607a      	str	r2, [r7, #4]
 8006acc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d10a      	bne.n	8006aea <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad8:	f383 8811 	msr	BASEPRI, r3
 8006adc:	f3bf 8f6f 	isb	sy
 8006ae0:	f3bf 8f4f 	dsb	sy
 8006ae4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006ae6:	bf00      	nop
 8006ae8:	e7fe      	b.n	8006ae8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d10a      	bne.n	8006b06 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af4:	f383 8811 	msr	BASEPRI, r3
 8006af8:	f3bf 8f6f 	isb	sy
 8006afc:	f3bf 8f4f 	dsb	sy
 8006b00:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006b02:	bf00      	nop
 8006b04:	e7fe      	b.n	8006b04 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d002      	beq.n	8006b12 <xQueueGenericCreateStatic+0x52>
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d001      	beq.n	8006b16 <xQueueGenericCreateStatic+0x56>
 8006b12:	2301      	movs	r3, #1
 8006b14:	e000      	b.n	8006b18 <xQueueGenericCreateStatic+0x58>
 8006b16:	2300      	movs	r3, #0
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d10a      	bne.n	8006b32 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b20:	f383 8811 	msr	BASEPRI, r3
 8006b24:	f3bf 8f6f 	isb	sy
 8006b28:	f3bf 8f4f 	dsb	sy
 8006b2c:	623b      	str	r3, [r7, #32]
}
 8006b2e:	bf00      	nop
 8006b30:	e7fe      	b.n	8006b30 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d102      	bne.n	8006b3e <xQueueGenericCreateStatic+0x7e>
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d101      	bne.n	8006b42 <xQueueGenericCreateStatic+0x82>
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e000      	b.n	8006b44 <xQueueGenericCreateStatic+0x84>
 8006b42:	2300      	movs	r3, #0
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d10a      	bne.n	8006b5e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b4c:	f383 8811 	msr	BASEPRI, r3
 8006b50:	f3bf 8f6f 	isb	sy
 8006b54:	f3bf 8f4f 	dsb	sy
 8006b58:	61fb      	str	r3, [r7, #28]
}
 8006b5a:	bf00      	nop
 8006b5c:	e7fe      	b.n	8006b5c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006b5e:	2350      	movs	r3, #80	; 0x50
 8006b60:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	2b50      	cmp	r3, #80	; 0x50
 8006b66:	d00a      	beq.n	8006b7e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b6c:	f383 8811 	msr	BASEPRI, r3
 8006b70:	f3bf 8f6f 	isb	sy
 8006b74:	f3bf 8f4f 	dsb	sy
 8006b78:	61bb      	str	r3, [r7, #24]
}
 8006b7a:	bf00      	nop
 8006b7c:	e7fe      	b.n	8006b7c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d00d      	beq.n	8006ba4 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006b90:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b96:	9300      	str	r3, [sp, #0]
 8006b98:	4613      	mov	r3, r2
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	68b9      	ldr	r1, [r7, #8]
 8006b9e:	68f8      	ldr	r0, [r7, #12]
 8006ba0:	f000 f843 	bl	8006c2a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3730      	adds	r7, #48	; 0x30
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}

08006bae <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006bae:	b580      	push	{r7, lr}
 8006bb0:	b08a      	sub	sp, #40	; 0x28
 8006bb2:	af02      	add	r7, sp, #8
 8006bb4:	60f8      	str	r0, [r7, #12]
 8006bb6:	60b9      	str	r1, [r7, #8]
 8006bb8:	4613      	mov	r3, r2
 8006bba:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d10a      	bne.n	8006bd8 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc6:	f383 8811 	msr	BASEPRI, r3
 8006bca:	f3bf 8f6f 	isb	sy
 8006bce:	f3bf 8f4f 	dsb	sy
 8006bd2:	613b      	str	r3, [r7, #16]
}
 8006bd4:	bf00      	nop
 8006bd6:	e7fe      	b.n	8006bd6 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d102      	bne.n	8006be4 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006bde:	2300      	movs	r3, #0
 8006be0:	61fb      	str	r3, [r7, #28]
 8006be2:	e004      	b.n	8006bee <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	68ba      	ldr	r2, [r7, #8]
 8006be8:	fb02 f303 	mul.w	r3, r2, r3
 8006bec:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8006bee:	69fb      	ldr	r3, [r7, #28]
 8006bf0:	3350      	adds	r3, #80	; 0x50
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f002 fb3a 	bl	800926c <pvPortMalloc>
 8006bf8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006bfa:	69bb      	ldr	r3, [r7, #24]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d00f      	beq.n	8006c20 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8006c00:	69bb      	ldr	r3, [r7, #24]
 8006c02:	3350      	adds	r3, #80	; 0x50
 8006c04:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006c06:	69bb      	ldr	r3, [r7, #24]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006c0e:	79fa      	ldrb	r2, [r7, #7]
 8006c10:	69bb      	ldr	r3, [r7, #24]
 8006c12:	9300      	str	r3, [sp, #0]
 8006c14:	4613      	mov	r3, r2
 8006c16:	697a      	ldr	r2, [r7, #20]
 8006c18:	68b9      	ldr	r1, [r7, #8]
 8006c1a:	68f8      	ldr	r0, [r7, #12]
 8006c1c:	f000 f805 	bl	8006c2a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006c20:	69bb      	ldr	r3, [r7, #24]
	}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3720      	adds	r7, #32
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}

08006c2a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006c2a:	b580      	push	{r7, lr}
 8006c2c:	b084      	sub	sp, #16
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	60f8      	str	r0, [r7, #12]
 8006c32:	60b9      	str	r1, [r7, #8]
 8006c34:	607a      	str	r2, [r7, #4]
 8006c36:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d103      	bne.n	8006c46 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006c3e:	69bb      	ldr	r3, [r7, #24]
 8006c40:	69ba      	ldr	r2, [r7, #24]
 8006c42:	601a      	str	r2, [r3, #0]
 8006c44:	e002      	b.n	8006c4c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006c46:	69bb      	ldr	r3, [r7, #24]
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006c4c:	69bb      	ldr	r3, [r7, #24]
 8006c4e:	68fa      	ldr	r2, [r7, #12]
 8006c50:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006c52:	69bb      	ldr	r3, [r7, #24]
 8006c54:	68ba      	ldr	r2, [r7, #8]
 8006c56:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006c58:	2101      	movs	r1, #1
 8006c5a:	69b8      	ldr	r0, [r7, #24]
 8006c5c:	f7ff fec8 	bl	80069f0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006c60:	69bb      	ldr	r3, [r7, #24]
 8006c62:	78fa      	ldrb	r2, [r7, #3]
 8006c64:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006c68:	bf00      	nop
 8006c6a:	3710      	adds	r7, #16
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b082      	sub	sp, #8
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d00e      	beq.n	8006c9c <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2200      	movs	r2, #0
 8006c82:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006c90:	2300      	movs	r3, #0
 8006c92:	2200      	movs	r2, #0
 8006c94:	2100      	movs	r1, #0
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 f8a2 	bl	8006de0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006c9c:	bf00      	nop
 8006c9e:	3708      	adds	r7, #8
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}

08006ca4 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b086      	sub	sp, #24
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	4603      	mov	r3, r0
 8006cac:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	617b      	str	r3, [r7, #20]
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006cb6:	79fb      	ldrb	r3, [r7, #7]
 8006cb8:	461a      	mov	r2, r3
 8006cba:	6939      	ldr	r1, [r7, #16]
 8006cbc:	6978      	ldr	r0, [r7, #20]
 8006cbe:	f7ff ff76 	bl	8006bae <xQueueGenericCreate>
 8006cc2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8006cc4:	68f8      	ldr	r0, [r7, #12]
 8006cc6:	f7ff ffd3 	bl	8006c70 <prvInitialiseMutex>

		return pxNewQueue;
 8006cca:	68fb      	ldr	r3, [r7, #12]
	}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3718      	adds	r7, #24
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}

08006cd4 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b088      	sub	sp, #32
 8006cd8:	af02      	add	r7, sp, #8
 8006cda:	4603      	mov	r3, r0
 8006cdc:	6039      	str	r1, [r7, #0]
 8006cde:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	617b      	str	r3, [r7, #20]
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006ce8:	79fb      	ldrb	r3, [r7, #7]
 8006cea:	9300      	str	r3, [sp, #0]
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	6939      	ldr	r1, [r7, #16]
 8006cf2:	6978      	ldr	r0, [r7, #20]
 8006cf4:	f7ff fee4 	bl	8006ac0 <xQueueGenericCreateStatic>
 8006cf8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8006cfa:	68f8      	ldr	r0, [r7, #12]
 8006cfc:	f7ff ffb8 	bl	8006c70 <prvInitialiseMutex>

		return pxNewQueue;
 8006d00:	68fb      	ldr	r3, [r7, #12]
	}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3718      	adds	r7, #24
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}

08006d0a <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8006d0a:	b590      	push	{r4, r7, lr}
 8006d0c:	b087      	sub	sp, #28
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d10a      	bne.n	8006d32 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8006d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d20:	f383 8811 	msr	BASEPRI, r3
 8006d24:	f3bf 8f6f 	isb	sy
 8006d28:	f3bf 8f4f 	dsb	sy
 8006d2c:	60fb      	str	r3, [r7, #12]
}
 8006d2e:	bf00      	nop
 8006d30:	e7fe      	b.n	8006d30 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	685c      	ldr	r4, [r3, #4]
 8006d36:	f001 fb9f 	bl	8008478 <xTaskGetCurrentTaskHandle>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	429c      	cmp	r4, r3
 8006d3e:	d111      	bne.n	8006d64 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	68db      	ldr	r3, [r3, #12]
 8006d44:	1e5a      	subs	r2, r3, #1
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	68db      	ldr	r3, [r3, #12]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d105      	bne.n	8006d5e <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8006d52:	2300      	movs	r3, #0
 8006d54:	2200      	movs	r2, #0
 8006d56:	2100      	movs	r1, #0
 8006d58:	6938      	ldr	r0, [r7, #16]
 8006d5a:	f000 f841 	bl	8006de0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	617b      	str	r3, [r7, #20]
 8006d62:	e001      	b.n	8006d68 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8006d64:	2300      	movs	r3, #0
 8006d66:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8006d68:	697b      	ldr	r3, [r7, #20]
	}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	371c      	adds	r7, #28
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd90      	pop	{r4, r7, pc}

08006d72 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8006d72:	b590      	push	{r4, r7, lr}
 8006d74:	b087      	sub	sp, #28
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
 8006d7a:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d10a      	bne.n	8006d9c <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8006d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d8a:	f383 8811 	msr	BASEPRI, r3
 8006d8e:	f3bf 8f6f 	isb	sy
 8006d92:	f3bf 8f4f 	dsb	sy
 8006d96:	60fb      	str	r3, [r7, #12]
}
 8006d98:	bf00      	nop
 8006d9a:	e7fe      	b.n	8006d9a <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	685c      	ldr	r4, [r3, #4]
 8006da0:	f001 fb6a 	bl	8008478 <xTaskGetCurrentTaskHandle>
 8006da4:	4603      	mov	r3, r0
 8006da6:	429c      	cmp	r4, r3
 8006da8:	d107      	bne.n	8006dba <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	68db      	ldr	r3, [r3, #12]
 8006dae:	1c5a      	adds	r2, r3, #1
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8006db4:	2301      	movs	r3, #1
 8006db6:	617b      	str	r3, [r7, #20]
 8006db8:	e00c      	b.n	8006dd4 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8006dba:	6839      	ldr	r1, [r7, #0]
 8006dbc:	6938      	ldr	r0, [r7, #16]
 8006dbe:	f000 fa85 	bl	80072cc <xQueueSemaphoreTake>
 8006dc2:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d004      	beq.n	8006dd4 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	68db      	ldr	r3, [r3, #12]
 8006dce:	1c5a      	adds	r2, r3, #1
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8006dd4:	697b      	ldr	r3, [r7, #20]
	}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	371c      	adds	r7, #28
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd90      	pop	{r4, r7, pc}
	...

08006de0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b08e      	sub	sp, #56	; 0x38
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	60f8      	str	r0, [r7, #12]
 8006de8:	60b9      	str	r1, [r7, #8]
 8006dea:	607a      	str	r2, [r7, #4]
 8006dec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006dee:	2300      	movs	r3, #0
 8006df0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d10a      	bne.n	8006e12 <xQueueGenericSend+0x32>
	__asm volatile
 8006dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e00:	f383 8811 	msr	BASEPRI, r3
 8006e04:	f3bf 8f6f 	isb	sy
 8006e08:	f3bf 8f4f 	dsb	sy
 8006e0c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006e0e:	bf00      	nop
 8006e10:	e7fe      	b.n	8006e10 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d103      	bne.n	8006e20 <xQueueGenericSend+0x40>
 8006e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d101      	bne.n	8006e24 <xQueueGenericSend+0x44>
 8006e20:	2301      	movs	r3, #1
 8006e22:	e000      	b.n	8006e26 <xQueueGenericSend+0x46>
 8006e24:	2300      	movs	r3, #0
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d10a      	bne.n	8006e40 <xQueueGenericSend+0x60>
	__asm volatile
 8006e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e2e:	f383 8811 	msr	BASEPRI, r3
 8006e32:	f3bf 8f6f 	isb	sy
 8006e36:	f3bf 8f4f 	dsb	sy
 8006e3a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006e3c:	bf00      	nop
 8006e3e:	e7fe      	b.n	8006e3e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	2b02      	cmp	r3, #2
 8006e44:	d103      	bne.n	8006e4e <xQueueGenericSend+0x6e>
 8006e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d101      	bne.n	8006e52 <xQueueGenericSend+0x72>
 8006e4e:	2301      	movs	r3, #1
 8006e50:	e000      	b.n	8006e54 <xQueueGenericSend+0x74>
 8006e52:	2300      	movs	r3, #0
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d10a      	bne.n	8006e6e <xQueueGenericSend+0x8e>
	__asm volatile
 8006e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e5c:	f383 8811 	msr	BASEPRI, r3
 8006e60:	f3bf 8f6f 	isb	sy
 8006e64:	f3bf 8f4f 	dsb	sy
 8006e68:	623b      	str	r3, [r7, #32]
}
 8006e6a:	bf00      	nop
 8006e6c:	e7fe      	b.n	8006e6c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006e6e:	f001 fb11 	bl	8008494 <xTaskGetSchedulerState>
 8006e72:	4603      	mov	r3, r0
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d102      	bne.n	8006e7e <xQueueGenericSend+0x9e>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d101      	bne.n	8006e82 <xQueueGenericSend+0xa2>
 8006e7e:	2301      	movs	r3, #1
 8006e80:	e000      	b.n	8006e84 <xQueueGenericSend+0xa4>
 8006e82:	2300      	movs	r3, #0
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d10a      	bne.n	8006e9e <xQueueGenericSend+0xbe>
	__asm volatile
 8006e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e8c:	f383 8811 	msr	BASEPRI, r3
 8006e90:	f3bf 8f6f 	isb	sy
 8006e94:	f3bf 8f4f 	dsb	sy
 8006e98:	61fb      	str	r3, [r7, #28]
}
 8006e9a:	bf00      	nop
 8006e9c:	e7fe      	b.n	8006e9c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006e9e:	f002 f8e5 	bl	800906c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d302      	bcc.n	8006eb4 <xQueueGenericSend+0xd4>
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	2b02      	cmp	r3, #2
 8006eb2:	d129      	bne.n	8006f08 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006eb4:	683a      	ldr	r2, [r7, #0]
 8006eb6:	68b9      	ldr	r1, [r7, #8]
 8006eb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006eba:	f000 fb2a 	bl	8007512 <prvCopyDataToQueue>
 8006ebe:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d010      	beq.n	8006eea <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eca:	3324      	adds	r3, #36	; 0x24
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f001 f90d 	bl	80080ec <xTaskRemoveFromEventList>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d013      	beq.n	8006f00 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006ed8:	4b3f      	ldr	r3, [pc, #252]	; (8006fd8 <xQueueGenericSend+0x1f8>)
 8006eda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ede:	601a      	str	r2, [r3, #0]
 8006ee0:	f3bf 8f4f 	dsb	sy
 8006ee4:	f3bf 8f6f 	isb	sy
 8006ee8:	e00a      	b.n	8006f00 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d007      	beq.n	8006f00 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006ef0:	4b39      	ldr	r3, [pc, #228]	; (8006fd8 <xQueueGenericSend+0x1f8>)
 8006ef2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ef6:	601a      	str	r2, [r3, #0]
 8006ef8:	f3bf 8f4f 	dsb	sy
 8006efc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006f00:	f002 f8e4 	bl	80090cc <vPortExitCritical>
				return pdPASS;
 8006f04:	2301      	movs	r3, #1
 8006f06:	e063      	b.n	8006fd0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d103      	bne.n	8006f16 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006f0e:	f002 f8dd 	bl	80090cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006f12:	2300      	movs	r3, #0
 8006f14:	e05c      	b.n	8006fd0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d106      	bne.n	8006f2a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006f1c:	f107 0314 	add.w	r3, r7, #20
 8006f20:	4618      	mov	r0, r3
 8006f22:	f001 f947 	bl	80081b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006f26:	2301      	movs	r3, #1
 8006f28:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006f2a:	f002 f8cf 	bl	80090cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006f2e:	f000 feb1 	bl	8007c94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006f32:	f002 f89b 	bl	800906c <vPortEnterCritical>
 8006f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f3c:	b25b      	sxtb	r3, r3
 8006f3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f42:	d103      	bne.n	8006f4c <xQueueGenericSend+0x16c>
 8006f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f46:	2200      	movs	r2, #0
 8006f48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f52:	b25b      	sxtb	r3, r3
 8006f54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f58:	d103      	bne.n	8006f62 <xQueueGenericSend+0x182>
 8006f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f62:	f002 f8b3 	bl	80090cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006f66:	1d3a      	adds	r2, r7, #4
 8006f68:	f107 0314 	add.w	r3, r7, #20
 8006f6c:	4611      	mov	r1, r2
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f001 f936 	bl	80081e0 <xTaskCheckForTimeOut>
 8006f74:	4603      	mov	r3, r0
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d124      	bne.n	8006fc4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006f7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f7c:	f000 fbc1 	bl	8007702 <prvIsQueueFull>
 8006f80:	4603      	mov	r3, r0
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d018      	beq.n	8006fb8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f88:	3310      	adds	r3, #16
 8006f8a:	687a      	ldr	r2, [r7, #4]
 8006f8c:	4611      	mov	r1, r2
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f001 f85c 	bl	800804c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006f94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f96:	f000 fb4c 	bl	8007632 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006f9a:	f000 fe89 	bl	8007cb0 <xTaskResumeAll>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	f47f af7c 	bne.w	8006e9e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006fa6:	4b0c      	ldr	r3, [pc, #48]	; (8006fd8 <xQueueGenericSend+0x1f8>)
 8006fa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fac:	601a      	str	r2, [r3, #0]
 8006fae:	f3bf 8f4f 	dsb	sy
 8006fb2:	f3bf 8f6f 	isb	sy
 8006fb6:	e772      	b.n	8006e9e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006fb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006fba:	f000 fb3a 	bl	8007632 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006fbe:	f000 fe77 	bl	8007cb0 <xTaskResumeAll>
 8006fc2:	e76c      	b.n	8006e9e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006fc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006fc6:	f000 fb34 	bl	8007632 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006fca:	f000 fe71 	bl	8007cb0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006fce:	2300      	movs	r3, #0
		}
	}
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3738      	adds	r7, #56	; 0x38
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}
 8006fd8:	e000ed04 	.word	0xe000ed04

08006fdc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b08e      	sub	sp, #56	; 0x38
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	60f8      	str	r0, [r7, #12]
 8006fe4:	60b9      	str	r1, [r7, #8]
 8006fe6:	607a      	str	r2, [r7, #4]
 8006fe8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d10a      	bne.n	800700a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff8:	f383 8811 	msr	BASEPRI, r3
 8006ffc:	f3bf 8f6f 	isb	sy
 8007000:	f3bf 8f4f 	dsb	sy
 8007004:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007006:	bf00      	nop
 8007008:	e7fe      	b.n	8007008 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d103      	bne.n	8007018 <xQueueGenericSendFromISR+0x3c>
 8007010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007014:	2b00      	cmp	r3, #0
 8007016:	d101      	bne.n	800701c <xQueueGenericSendFromISR+0x40>
 8007018:	2301      	movs	r3, #1
 800701a:	e000      	b.n	800701e <xQueueGenericSendFromISR+0x42>
 800701c:	2300      	movs	r3, #0
 800701e:	2b00      	cmp	r3, #0
 8007020:	d10a      	bne.n	8007038 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007026:	f383 8811 	msr	BASEPRI, r3
 800702a:	f3bf 8f6f 	isb	sy
 800702e:	f3bf 8f4f 	dsb	sy
 8007032:	623b      	str	r3, [r7, #32]
}
 8007034:	bf00      	nop
 8007036:	e7fe      	b.n	8007036 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	2b02      	cmp	r3, #2
 800703c:	d103      	bne.n	8007046 <xQueueGenericSendFromISR+0x6a>
 800703e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007042:	2b01      	cmp	r3, #1
 8007044:	d101      	bne.n	800704a <xQueueGenericSendFromISR+0x6e>
 8007046:	2301      	movs	r3, #1
 8007048:	e000      	b.n	800704c <xQueueGenericSendFromISR+0x70>
 800704a:	2300      	movs	r3, #0
 800704c:	2b00      	cmp	r3, #0
 800704e:	d10a      	bne.n	8007066 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007054:	f383 8811 	msr	BASEPRI, r3
 8007058:	f3bf 8f6f 	isb	sy
 800705c:	f3bf 8f4f 	dsb	sy
 8007060:	61fb      	str	r3, [r7, #28]
}
 8007062:	bf00      	nop
 8007064:	e7fe      	b.n	8007064 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007066:	f002 f8c3 	bl	80091f0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800706a:	f3ef 8211 	mrs	r2, BASEPRI
 800706e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007072:	f383 8811 	msr	BASEPRI, r3
 8007076:	f3bf 8f6f 	isb	sy
 800707a:	f3bf 8f4f 	dsb	sy
 800707e:	61ba      	str	r2, [r7, #24]
 8007080:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007082:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007084:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007088:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800708a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800708c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800708e:	429a      	cmp	r2, r3
 8007090:	d302      	bcc.n	8007098 <xQueueGenericSendFromISR+0xbc>
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	2b02      	cmp	r3, #2
 8007096:	d12c      	bne.n	80070f2 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800709a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800709e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80070a2:	683a      	ldr	r2, [r7, #0]
 80070a4:	68b9      	ldr	r1, [r7, #8]
 80070a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80070a8:	f000 fa33 	bl	8007512 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80070ac:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80070b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070b4:	d112      	bne.n	80070dc <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80070b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d016      	beq.n	80070ec <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80070be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070c0:	3324      	adds	r3, #36	; 0x24
 80070c2:	4618      	mov	r0, r3
 80070c4:	f001 f812 	bl	80080ec <xTaskRemoveFromEventList>
 80070c8:	4603      	mov	r3, r0
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d00e      	beq.n	80070ec <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d00b      	beq.n	80070ec <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2201      	movs	r2, #1
 80070d8:	601a      	str	r2, [r3, #0]
 80070da:	e007      	b.n	80070ec <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80070dc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80070e0:	3301      	adds	r3, #1
 80070e2:	b2db      	uxtb	r3, r3
 80070e4:	b25a      	sxtb	r2, r3
 80070e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80070ec:	2301      	movs	r3, #1
 80070ee:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80070f0:	e001      	b.n	80070f6 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80070f2:	2300      	movs	r3, #0
 80070f4:	637b      	str	r3, [r7, #52]	; 0x34
 80070f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007100:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007104:	4618      	mov	r0, r3
 8007106:	3738      	adds	r7, #56	; 0x38
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}

0800710c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b08c      	sub	sp, #48	; 0x30
 8007110:	af00      	add	r7, sp, #0
 8007112:	60f8      	str	r0, [r7, #12]
 8007114:	60b9      	str	r1, [r7, #8]
 8007116:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007118:	2300      	movs	r3, #0
 800711a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007122:	2b00      	cmp	r3, #0
 8007124:	d10a      	bne.n	800713c <xQueueReceive+0x30>
	__asm volatile
 8007126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800712a:	f383 8811 	msr	BASEPRI, r3
 800712e:	f3bf 8f6f 	isb	sy
 8007132:	f3bf 8f4f 	dsb	sy
 8007136:	623b      	str	r3, [r7, #32]
}
 8007138:	bf00      	nop
 800713a:	e7fe      	b.n	800713a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d103      	bne.n	800714a <xQueueReceive+0x3e>
 8007142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007146:	2b00      	cmp	r3, #0
 8007148:	d101      	bne.n	800714e <xQueueReceive+0x42>
 800714a:	2301      	movs	r3, #1
 800714c:	e000      	b.n	8007150 <xQueueReceive+0x44>
 800714e:	2300      	movs	r3, #0
 8007150:	2b00      	cmp	r3, #0
 8007152:	d10a      	bne.n	800716a <xQueueReceive+0x5e>
	__asm volatile
 8007154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007158:	f383 8811 	msr	BASEPRI, r3
 800715c:	f3bf 8f6f 	isb	sy
 8007160:	f3bf 8f4f 	dsb	sy
 8007164:	61fb      	str	r3, [r7, #28]
}
 8007166:	bf00      	nop
 8007168:	e7fe      	b.n	8007168 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800716a:	f001 f993 	bl	8008494 <xTaskGetSchedulerState>
 800716e:	4603      	mov	r3, r0
 8007170:	2b00      	cmp	r3, #0
 8007172:	d102      	bne.n	800717a <xQueueReceive+0x6e>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d101      	bne.n	800717e <xQueueReceive+0x72>
 800717a:	2301      	movs	r3, #1
 800717c:	e000      	b.n	8007180 <xQueueReceive+0x74>
 800717e:	2300      	movs	r3, #0
 8007180:	2b00      	cmp	r3, #0
 8007182:	d10a      	bne.n	800719a <xQueueReceive+0x8e>
	__asm volatile
 8007184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007188:	f383 8811 	msr	BASEPRI, r3
 800718c:	f3bf 8f6f 	isb	sy
 8007190:	f3bf 8f4f 	dsb	sy
 8007194:	61bb      	str	r3, [r7, #24]
}
 8007196:	bf00      	nop
 8007198:	e7fe      	b.n	8007198 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800719a:	f001 ff67 	bl	800906c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800719e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071a2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80071a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d01f      	beq.n	80071ea <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80071aa:	68b9      	ldr	r1, [r7, #8]
 80071ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071ae:	f000 fa1a 	bl	80075e6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80071b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b4:	1e5a      	subs	r2, r3, #1
 80071b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80071ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071bc:	691b      	ldr	r3, [r3, #16]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d00f      	beq.n	80071e2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80071c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071c4:	3310      	adds	r3, #16
 80071c6:	4618      	mov	r0, r3
 80071c8:	f000 ff90 	bl	80080ec <xTaskRemoveFromEventList>
 80071cc:	4603      	mov	r3, r0
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d007      	beq.n	80071e2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80071d2:	4b3d      	ldr	r3, [pc, #244]	; (80072c8 <xQueueReceive+0x1bc>)
 80071d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071d8:	601a      	str	r2, [r3, #0]
 80071da:	f3bf 8f4f 	dsb	sy
 80071de:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80071e2:	f001 ff73 	bl	80090cc <vPortExitCritical>
				return pdPASS;
 80071e6:	2301      	movs	r3, #1
 80071e8:	e069      	b.n	80072be <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d103      	bne.n	80071f8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80071f0:	f001 ff6c 	bl	80090cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80071f4:	2300      	movs	r3, #0
 80071f6:	e062      	b.n	80072be <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80071f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d106      	bne.n	800720c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80071fe:	f107 0310 	add.w	r3, r7, #16
 8007202:	4618      	mov	r0, r3
 8007204:	f000 ffd6 	bl	80081b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007208:	2301      	movs	r3, #1
 800720a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800720c:	f001 ff5e 	bl	80090cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007210:	f000 fd40 	bl	8007c94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007214:	f001 ff2a 	bl	800906c <vPortEnterCritical>
 8007218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800721a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800721e:	b25b      	sxtb	r3, r3
 8007220:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007224:	d103      	bne.n	800722e <xQueueReceive+0x122>
 8007226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007228:	2200      	movs	r2, #0
 800722a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800722e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007230:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007234:	b25b      	sxtb	r3, r3
 8007236:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800723a:	d103      	bne.n	8007244 <xQueueReceive+0x138>
 800723c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800723e:	2200      	movs	r2, #0
 8007240:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007244:	f001 ff42 	bl	80090cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007248:	1d3a      	adds	r2, r7, #4
 800724a:	f107 0310 	add.w	r3, r7, #16
 800724e:	4611      	mov	r1, r2
 8007250:	4618      	mov	r0, r3
 8007252:	f000 ffc5 	bl	80081e0 <xTaskCheckForTimeOut>
 8007256:	4603      	mov	r3, r0
 8007258:	2b00      	cmp	r3, #0
 800725a:	d123      	bne.n	80072a4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800725c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800725e:	f000 fa3a 	bl	80076d6 <prvIsQueueEmpty>
 8007262:	4603      	mov	r3, r0
 8007264:	2b00      	cmp	r3, #0
 8007266:	d017      	beq.n	8007298 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800726a:	3324      	adds	r3, #36	; 0x24
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	4611      	mov	r1, r2
 8007270:	4618      	mov	r0, r3
 8007272:	f000 feeb 	bl	800804c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007276:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007278:	f000 f9db 	bl	8007632 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800727c:	f000 fd18 	bl	8007cb0 <xTaskResumeAll>
 8007280:	4603      	mov	r3, r0
 8007282:	2b00      	cmp	r3, #0
 8007284:	d189      	bne.n	800719a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007286:	4b10      	ldr	r3, [pc, #64]	; (80072c8 <xQueueReceive+0x1bc>)
 8007288:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800728c:	601a      	str	r2, [r3, #0]
 800728e:	f3bf 8f4f 	dsb	sy
 8007292:	f3bf 8f6f 	isb	sy
 8007296:	e780      	b.n	800719a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007298:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800729a:	f000 f9ca 	bl	8007632 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800729e:	f000 fd07 	bl	8007cb0 <xTaskResumeAll>
 80072a2:	e77a      	b.n	800719a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80072a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80072a6:	f000 f9c4 	bl	8007632 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80072aa:	f000 fd01 	bl	8007cb0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80072ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80072b0:	f000 fa11 	bl	80076d6 <prvIsQueueEmpty>
 80072b4:	4603      	mov	r3, r0
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	f43f af6f 	beq.w	800719a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80072bc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3730      	adds	r7, #48	; 0x30
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}
 80072c6:	bf00      	nop
 80072c8:	e000ed04 	.word	0xe000ed04

080072cc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b08e      	sub	sp, #56	; 0x38
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
 80072d4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80072d6:	2300      	movs	r3, #0
 80072d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80072de:	2300      	movs	r3, #0
 80072e0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80072e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d10a      	bne.n	80072fe <xQueueSemaphoreTake+0x32>
	__asm volatile
 80072e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ec:	f383 8811 	msr	BASEPRI, r3
 80072f0:	f3bf 8f6f 	isb	sy
 80072f4:	f3bf 8f4f 	dsb	sy
 80072f8:	623b      	str	r3, [r7, #32]
}
 80072fa:	bf00      	nop
 80072fc:	e7fe      	b.n	80072fc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80072fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007302:	2b00      	cmp	r3, #0
 8007304:	d00a      	beq.n	800731c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8007306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800730a:	f383 8811 	msr	BASEPRI, r3
 800730e:	f3bf 8f6f 	isb	sy
 8007312:	f3bf 8f4f 	dsb	sy
 8007316:	61fb      	str	r3, [r7, #28]
}
 8007318:	bf00      	nop
 800731a:	e7fe      	b.n	800731a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800731c:	f001 f8ba 	bl	8008494 <xTaskGetSchedulerState>
 8007320:	4603      	mov	r3, r0
 8007322:	2b00      	cmp	r3, #0
 8007324:	d102      	bne.n	800732c <xQueueSemaphoreTake+0x60>
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d101      	bne.n	8007330 <xQueueSemaphoreTake+0x64>
 800732c:	2301      	movs	r3, #1
 800732e:	e000      	b.n	8007332 <xQueueSemaphoreTake+0x66>
 8007330:	2300      	movs	r3, #0
 8007332:	2b00      	cmp	r3, #0
 8007334:	d10a      	bne.n	800734c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8007336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800733a:	f383 8811 	msr	BASEPRI, r3
 800733e:	f3bf 8f6f 	isb	sy
 8007342:	f3bf 8f4f 	dsb	sy
 8007346:	61bb      	str	r3, [r7, #24]
}
 8007348:	bf00      	nop
 800734a:	e7fe      	b.n	800734a <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800734c:	f001 fe8e 	bl	800906c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007354:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007358:	2b00      	cmp	r3, #0
 800735a:	d024      	beq.n	80073a6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800735c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800735e:	1e5a      	subs	r2, r3, #1
 8007360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007362:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d104      	bne.n	8007376 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800736c:	f001 fa12 	bl	8008794 <pvTaskIncrementMutexHeldCount>
 8007370:	4602      	mov	r2, r0
 8007372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007374:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007378:	691b      	ldr	r3, [r3, #16]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d00f      	beq.n	800739e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800737e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007380:	3310      	adds	r3, #16
 8007382:	4618      	mov	r0, r3
 8007384:	f000 feb2 	bl	80080ec <xTaskRemoveFromEventList>
 8007388:	4603      	mov	r3, r0
 800738a:	2b00      	cmp	r3, #0
 800738c:	d007      	beq.n	800739e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800738e:	4b54      	ldr	r3, [pc, #336]	; (80074e0 <xQueueSemaphoreTake+0x214>)
 8007390:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007394:	601a      	str	r2, [r3, #0]
 8007396:	f3bf 8f4f 	dsb	sy
 800739a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800739e:	f001 fe95 	bl	80090cc <vPortExitCritical>
				return pdPASS;
 80073a2:	2301      	movs	r3, #1
 80073a4:	e097      	b.n	80074d6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d111      	bne.n	80073d0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80073ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d00a      	beq.n	80073c8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80073b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b6:	f383 8811 	msr	BASEPRI, r3
 80073ba:	f3bf 8f6f 	isb	sy
 80073be:	f3bf 8f4f 	dsb	sy
 80073c2:	617b      	str	r3, [r7, #20]
}
 80073c4:	bf00      	nop
 80073c6:	e7fe      	b.n	80073c6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80073c8:	f001 fe80 	bl	80090cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80073cc:	2300      	movs	r3, #0
 80073ce:	e082      	b.n	80074d6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80073d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d106      	bne.n	80073e4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80073d6:	f107 030c 	add.w	r3, r7, #12
 80073da:	4618      	mov	r0, r3
 80073dc:	f000 feea 	bl	80081b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80073e0:	2301      	movs	r3, #1
 80073e2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80073e4:	f001 fe72 	bl	80090cc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80073e8:	f000 fc54 	bl	8007c94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80073ec:	f001 fe3e 	bl	800906c <vPortEnterCritical>
 80073f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80073f6:	b25b      	sxtb	r3, r3
 80073f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073fc:	d103      	bne.n	8007406 <xQueueSemaphoreTake+0x13a>
 80073fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007400:	2200      	movs	r2, #0
 8007402:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007408:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800740c:	b25b      	sxtb	r3, r3
 800740e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007412:	d103      	bne.n	800741c <xQueueSemaphoreTake+0x150>
 8007414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007416:	2200      	movs	r2, #0
 8007418:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800741c:	f001 fe56 	bl	80090cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007420:	463a      	mov	r2, r7
 8007422:	f107 030c 	add.w	r3, r7, #12
 8007426:	4611      	mov	r1, r2
 8007428:	4618      	mov	r0, r3
 800742a:	f000 fed9 	bl	80081e0 <xTaskCheckForTimeOut>
 800742e:	4603      	mov	r3, r0
 8007430:	2b00      	cmp	r3, #0
 8007432:	d132      	bne.n	800749a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007434:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007436:	f000 f94e 	bl	80076d6 <prvIsQueueEmpty>
 800743a:	4603      	mov	r3, r0
 800743c:	2b00      	cmp	r3, #0
 800743e:	d026      	beq.n	800748e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d109      	bne.n	800745c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007448:	f001 fe10 	bl	800906c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800744c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	4618      	mov	r0, r3
 8007452:	f001 f83d 	bl	80084d0 <xTaskPriorityInherit>
 8007456:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007458:	f001 fe38 	bl	80090cc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800745c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800745e:	3324      	adds	r3, #36	; 0x24
 8007460:	683a      	ldr	r2, [r7, #0]
 8007462:	4611      	mov	r1, r2
 8007464:	4618      	mov	r0, r3
 8007466:	f000 fdf1 	bl	800804c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800746a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800746c:	f000 f8e1 	bl	8007632 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007470:	f000 fc1e 	bl	8007cb0 <xTaskResumeAll>
 8007474:	4603      	mov	r3, r0
 8007476:	2b00      	cmp	r3, #0
 8007478:	f47f af68 	bne.w	800734c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800747c:	4b18      	ldr	r3, [pc, #96]	; (80074e0 <xQueueSemaphoreTake+0x214>)
 800747e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007482:	601a      	str	r2, [r3, #0]
 8007484:	f3bf 8f4f 	dsb	sy
 8007488:	f3bf 8f6f 	isb	sy
 800748c:	e75e      	b.n	800734c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800748e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007490:	f000 f8cf 	bl	8007632 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007494:	f000 fc0c 	bl	8007cb0 <xTaskResumeAll>
 8007498:	e758      	b.n	800734c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800749a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800749c:	f000 f8c9 	bl	8007632 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80074a0:	f000 fc06 	bl	8007cb0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80074a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80074a6:	f000 f916 	bl	80076d6 <prvIsQueueEmpty>
 80074aa:	4603      	mov	r3, r0
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	f43f af4d 	beq.w	800734c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80074b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d00d      	beq.n	80074d4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80074b8:	f001 fdd8 	bl	800906c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80074bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80074be:	f000 f811 	bl	80074e4 <prvGetDisinheritPriorityAfterTimeout>
 80074c2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80074c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80074ca:	4618      	mov	r0, r3
 80074cc:	f001 f8dc 	bl	8008688 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80074d0:	f001 fdfc 	bl	80090cc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80074d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3738      	adds	r7, #56	; 0x38
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}
 80074de:	bf00      	nop
 80074e0:	e000ed04 	.word	0xe000ed04

080074e4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80074e4:	b480      	push	{r7}
 80074e6:	b085      	sub	sp, #20
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d006      	beq.n	8007502 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80074fe:	60fb      	str	r3, [r7, #12]
 8007500:	e001      	b.n	8007506 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007502:	2300      	movs	r3, #0
 8007504:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007506:	68fb      	ldr	r3, [r7, #12]
	}
 8007508:	4618      	mov	r0, r3
 800750a:	3714      	adds	r7, #20
 800750c:	46bd      	mov	sp, r7
 800750e:	bc80      	pop	{r7}
 8007510:	4770      	bx	lr

08007512 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007512:	b580      	push	{r7, lr}
 8007514:	b086      	sub	sp, #24
 8007516:	af00      	add	r7, sp, #0
 8007518:	60f8      	str	r0, [r7, #12]
 800751a:	60b9      	str	r1, [r7, #8]
 800751c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800751e:	2300      	movs	r3, #0
 8007520:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007526:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800752c:	2b00      	cmp	r3, #0
 800752e:	d10d      	bne.n	800754c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d14d      	bne.n	80075d4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	4618      	mov	r0, r3
 800753e:	f001 f835 	bl	80085ac <xTaskPriorityDisinherit>
 8007542:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2200      	movs	r2, #0
 8007548:	605a      	str	r2, [r3, #4]
 800754a:	e043      	b.n	80075d4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d119      	bne.n	8007586 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	6898      	ldr	r0, [r3, #8]
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800755a:	461a      	mov	r2, r3
 800755c:	68b9      	ldr	r1, [r7, #8]
 800755e:	f002 fa0d 	bl	800997c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	689a      	ldr	r2, [r3, #8]
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800756a:	441a      	add	r2, r3
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	689a      	ldr	r2, [r3, #8]
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	429a      	cmp	r2, r3
 800757a:	d32b      	bcc.n	80075d4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681a      	ldr	r2, [r3, #0]
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	609a      	str	r2, [r3, #8]
 8007584:	e026      	b.n	80075d4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	68d8      	ldr	r0, [r3, #12]
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800758e:	461a      	mov	r2, r3
 8007590:	68b9      	ldr	r1, [r7, #8]
 8007592:	f002 f9f3 	bl	800997c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	68da      	ldr	r2, [r3, #12]
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800759e:	425b      	negs	r3, r3
 80075a0:	441a      	add	r2, r3
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	68da      	ldr	r2, [r3, #12]
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	429a      	cmp	r2, r3
 80075b0:	d207      	bcs.n	80075c2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	685a      	ldr	r2, [r3, #4]
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ba:	425b      	negs	r3, r3
 80075bc:	441a      	add	r2, r3
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2b02      	cmp	r3, #2
 80075c6:	d105      	bne.n	80075d4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d002      	beq.n	80075d4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	3b01      	subs	r3, #1
 80075d2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	1c5a      	adds	r2, r3, #1
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80075dc:	697b      	ldr	r3, [r7, #20]
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3718      	adds	r7, #24
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}

080075e6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80075e6:	b580      	push	{r7, lr}
 80075e8:	b082      	sub	sp, #8
 80075ea:	af00      	add	r7, sp, #0
 80075ec:	6078      	str	r0, [r7, #4]
 80075ee:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d018      	beq.n	800762a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	68da      	ldr	r2, [r3, #12]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007600:	441a      	add	r2, r3
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	68da      	ldr	r2, [r3, #12]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	429a      	cmp	r2, r3
 8007610:	d303      	bcc.n	800761a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681a      	ldr	r2, [r3, #0]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	68d9      	ldr	r1, [r3, #12]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007622:	461a      	mov	r2, r3
 8007624:	6838      	ldr	r0, [r7, #0]
 8007626:	f002 f9a9 	bl	800997c <memcpy>
	}
}
 800762a:	bf00      	nop
 800762c:	3708      	adds	r7, #8
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}

08007632 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007632:	b580      	push	{r7, lr}
 8007634:	b084      	sub	sp, #16
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800763a:	f001 fd17 	bl	800906c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007644:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007646:	e011      	b.n	800766c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800764c:	2b00      	cmp	r3, #0
 800764e:	d012      	beq.n	8007676 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	3324      	adds	r3, #36	; 0x24
 8007654:	4618      	mov	r0, r3
 8007656:	f000 fd49 	bl	80080ec <xTaskRemoveFromEventList>
 800765a:	4603      	mov	r3, r0
 800765c:	2b00      	cmp	r3, #0
 800765e:	d001      	beq.n	8007664 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007660:	f000 fe20 	bl	80082a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007664:	7bfb      	ldrb	r3, [r7, #15]
 8007666:	3b01      	subs	r3, #1
 8007668:	b2db      	uxtb	r3, r3
 800766a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800766c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007670:	2b00      	cmp	r3, #0
 8007672:	dce9      	bgt.n	8007648 <prvUnlockQueue+0x16>
 8007674:	e000      	b.n	8007678 <prvUnlockQueue+0x46>
					break;
 8007676:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	22ff      	movs	r2, #255	; 0xff
 800767c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007680:	f001 fd24 	bl	80090cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007684:	f001 fcf2 	bl	800906c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800768e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007690:	e011      	b.n	80076b6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	691b      	ldr	r3, [r3, #16]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d012      	beq.n	80076c0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	3310      	adds	r3, #16
 800769e:	4618      	mov	r0, r3
 80076a0:	f000 fd24 	bl	80080ec <xTaskRemoveFromEventList>
 80076a4:	4603      	mov	r3, r0
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d001      	beq.n	80076ae <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80076aa:	f000 fdfb 	bl	80082a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80076ae:	7bbb      	ldrb	r3, [r7, #14]
 80076b0:	3b01      	subs	r3, #1
 80076b2:	b2db      	uxtb	r3, r3
 80076b4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80076b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	dce9      	bgt.n	8007692 <prvUnlockQueue+0x60>
 80076be:	e000      	b.n	80076c2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80076c0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	22ff      	movs	r2, #255	; 0xff
 80076c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80076ca:	f001 fcff 	bl	80090cc <vPortExitCritical>
}
 80076ce:	bf00      	nop
 80076d0:	3710      	adds	r7, #16
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}

080076d6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80076d6:	b580      	push	{r7, lr}
 80076d8:	b084      	sub	sp, #16
 80076da:	af00      	add	r7, sp, #0
 80076dc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80076de:	f001 fcc5 	bl	800906c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d102      	bne.n	80076f0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80076ea:	2301      	movs	r3, #1
 80076ec:	60fb      	str	r3, [r7, #12]
 80076ee:	e001      	b.n	80076f4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80076f0:	2300      	movs	r3, #0
 80076f2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80076f4:	f001 fcea 	bl	80090cc <vPortExitCritical>

	return xReturn;
 80076f8:	68fb      	ldr	r3, [r7, #12]
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3710      	adds	r7, #16
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}

08007702 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007702:	b580      	push	{r7, lr}
 8007704:	b084      	sub	sp, #16
 8007706:	af00      	add	r7, sp, #0
 8007708:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800770a:	f001 fcaf 	bl	800906c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007716:	429a      	cmp	r2, r3
 8007718:	d102      	bne.n	8007720 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800771a:	2301      	movs	r3, #1
 800771c:	60fb      	str	r3, [r7, #12]
 800771e:	e001      	b.n	8007724 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007720:	2300      	movs	r3, #0
 8007722:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007724:	f001 fcd2 	bl	80090cc <vPortExitCritical>

	return xReturn;
 8007728:	68fb      	ldr	r3, [r7, #12]
}
 800772a:	4618      	mov	r0, r3
 800772c:	3710      	adds	r7, #16
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}
	...

08007734 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007734:	b480      	push	{r7}
 8007736:	b085      	sub	sp, #20
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800773e:	2300      	movs	r3, #0
 8007740:	60fb      	str	r3, [r7, #12]
 8007742:	e014      	b.n	800776e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007744:	4a0e      	ldr	r2, [pc, #56]	; (8007780 <vQueueAddToRegistry+0x4c>)
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d10b      	bne.n	8007768 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007750:	490b      	ldr	r1, [pc, #44]	; (8007780 <vQueueAddToRegistry+0x4c>)
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	683a      	ldr	r2, [r7, #0]
 8007756:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800775a:	4a09      	ldr	r2, [pc, #36]	; (8007780 <vQueueAddToRegistry+0x4c>)
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	00db      	lsls	r3, r3, #3
 8007760:	4413      	add	r3, r2
 8007762:	687a      	ldr	r2, [r7, #4]
 8007764:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007766:	e006      	b.n	8007776 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	3301      	adds	r3, #1
 800776c:	60fb      	str	r3, [r7, #12]
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2b07      	cmp	r3, #7
 8007772:	d9e7      	bls.n	8007744 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007774:	bf00      	nop
 8007776:	bf00      	nop
 8007778:	3714      	adds	r7, #20
 800777a:	46bd      	mov	sp, r7
 800777c:	bc80      	pop	{r7}
 800777e:	4770      	bx	lr
 8007780:	20001120 	.word	0x20001120

08007784 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007784:	b580      	push	{r7, lr}
 8007786:	b086      	sub	sp, #24
 8007788:	af00      	add	r7, sp, #0
 800778a:	60f8      	str	r0, [r7, #12]
 800778c:	60b9      	str	r1, [r7, #8]
 800778e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007794:	f001 fc6a 	bl	800906c <vPortEnterCritical>
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800779e:	b25b      	sxtb	r3, r3
 80077a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077a4:	d103      	bne.n	80077ae <vQueueWaitForMessageRestricted+0x2a>
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	2200      	movs	r2, #0
 80077aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80077b4:	b25b      	sxtb	r3, r3
 80077b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077ba:	d103      	bne.n	80077c4 <vQueueWaitForMessageRestricted+0x40>
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	2200      	movs	r2, #0
 80077c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80077c4:	f001 fc82 	bl	80090cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d106      	bne.n	80077de <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	3324      	adds	r3, #36	; 0x24
 80077d4:	687a      	ldr	r2, [r7, #4]
 80077d6:	68b9      	ldr	r1, [r7, #8]
 80077d8:	4618      	mov	r0, r3
 80077da:	f000 fc5b 	bl	8008094 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80077de:	6978      	ldr	r0, [r7, #20]
 80077e0:	f7ff ff27 	bl	8007632 <prvUnlockQueue>
	}
 80077e4:	bf00      	nop
 80077e6:	3718      	adds	r7, #24
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b08e      	sub	sp, #56	; 0x38
 80077f0:	af04      	add	r7, sp, #16
 80077f2:	60f8      	str	r0, [r7, #12]
 80077f4:	60b9      	str	r1, [r7, #8]
 80077f6:	607a      	str	r2, [r7, #4]
 80077f8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80077fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d10a      	bne.n	8007816 <xTaskCreateStatic+0x2a>
	__asm volatile
 8007800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007804:	f383 8811 	msr	BASEPRI, r3
 8007808:	f3bf 8f6f 	isb	sy
 800780c:	f3bf 8f4f 	dsb	sy
 8007810:	623b      	str	r3, [r7, #32]
}
 8007812:	bf00      	nop
 8007814:	e7fe      	b.n	8007814 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007818:	2b00      	cmp	r3, #0
 800781a:	d10a      	bne.n	8007832 <xTaskCreateStatic+0x46>
	__asm volatile
 800781c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007820:	f383 8811 	msr	BASEPRI, r3
 8007824:	f3bf 8f6f 	isb	sy
 8007828:	f3bf 8f4f 	dsb	sy
 800782c:	61fb      	str	r3, [r7, #28]
}
 800782e:	bf00      	nop
 8007830:	e7fe      	b.n	8007830 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007832:	23bc      	movs	r3, #188	; 0xbc
 8007834:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	2bbc      	cmp	r3, #188	; 0xbc
 800783a:	d00a      	beq.n	8007852 <xTaskCreateStatic+0x66>
	__asm volatile
 800783c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007840:	f383 8811 	msr	BASEPRI, r3
 8007844:	f3bf 8f6f 	isb	sy
 8007848:	f3bf 8f4f 	dsb	sy
 800784c:	61bb      	str	r3, [r7, #24]
}
 800784e:	bf00      	nop
 8007850:	e7fe      	b.n	8007850 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007854:	2b00      	cmp	r3, #0
 8007856:	d01e      	beq.n	8007896 <xTaskCreateStatic+0xaa>
 8007858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800785a:	2b00      	cmp	r3, #0
 800785c:	d01b      	beq.n	8007896 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800785e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007860:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007864:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007866:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786a:	2202      	movs	r2, #2
 800786c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007870:	2300      	movs	r3, #0
 8007872:	9303      	str	r3, [sp, #12]
 8007874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007876:	9302      	str	r3, [sp, #8]
 8007878:	f107 0314 	add.w	r3, r7, #20
 800787c:	9301      	str	r3, [sp, #4]
 800787e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007880:	9300      	str	r3, [sp, #0]
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	687a      	ldr	r2, [r7, #4]
 8007886:	68b9      	ldr	r1, [r7, #8]
 8007888:	68f8      	ldr	r0, [r7, #12]
 800788a:	f000 f851 	bl	8007930 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800788e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007890:	f000 f8ec 	bl	8007a6c <prvAddNewTaskToReadyList>
 8007894:	e001      	b.n	800789a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8007896:	2300      	movs	r3, #0
 8007898:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800789a:	697b      	ldr	r3, [r7, #20]
	}
 800789c:	4618      	mov	r0, r3
 800789e:	3728      	adds	r7, #40	; 0x28
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b08c      	sub	sp, #48	; 0x30
 80078a8:	af04      	add	r7, sp, #16
 80078aa:	60f8      	str	r0, [r7, #12]
 80078ac:	60b9      	str	r1, [r7, #8]
 80078ae:	603b      	str	r3, [r7, #0]
 80078b0:	4613      	mov	r3, r2
 80078b2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078b4:	88fb      	ldrh	r3, [r7, #6]
 80078b6:	009b      	lsls	r3, r3, #2
 80078b8:	4618      	mov	r0, r3
 80078ba:	f001 fcd7 	bl	800926c <pvPortMalloc>
 80078be:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d00e      	beq.n	80078e4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80078c6:	20bc      	movs	r0, #188	; 0xbc
 80078c8:	f001 fcd0 	bl	800926c <pvPortMalloc>
 80078cc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80078ce:	69fb      	ldr	r3, [r7, #28]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d003      	beq.n	80078dc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80078d4:	69fb      	ldr	r3, [r7, #28]
 80078d6:	697a      	ldr	r2, [r7, #20]
 80078d8:	631a      	str	r2, [r3, #48]	; 0x30
 80078da:	e005      	b.n	80078e8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80078dc:	6978      	ldr	r0, [r7, #20]
 80078de:	f001 fd89 	bl	80093f4 <vPortFree>
 80078e2:	e001      	b.n	80078e8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80078e4:	2300      	movs	r3, #0
 80078e6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80078e8:	69fb      	ldr	r3, [r7, #28]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d017      	beq.n	800791e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80078ee:	69fb      	ldr	r3, [r7, #28]
 80078f0:	2200      	movs	r2, #0
 80078f2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80078f6:	88fa      	ldrh	r2, [r7, #6]
 80078f8:	2300      	movs	r3, #0
 80078fa:	9303      	str	r3, [sp, #12]
 80078fc:	69fb      	ldr	r3, [r7, #28]
 80078fe:	9302      	str	r3, [sp, #8]
 8007900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007902:	9301      	str	r3, [sp, #4]
 8007904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007906:	9300      	str	r3, [sp, #0]
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	68b9      	ldr	r1, [r7, #8]
 800790c:	68f8      	ldr	r0, [r7, #12]
 800790e:	f000 f80f 	bl	8007930 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007912:	69f8      	ldr	r0, [r7, #28]
 8007914:	f000 f8aa 	bl	8007a6c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007918:	2301      	movs	r3, #1
 800791a:	61bb      	str	r3, [r7, #24]
 800791c:	e002      	b.n	8007924 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800791e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007922:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007924:	69bb      	ldr	r3, [r7, #24]
	}
 8007926:	4618      	mov	r0, r3
 8007928:	3720      	adds	r7, #32
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}
	...

08007930 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b088      	sub	sp, #32
 8007934:	af00      	add	r7, sp, #0
 8007936:	60f8      	str	r0, [r7, #12]
 8007938:	60b9      	str	r1, [r7, #8]
 800793a:	607a      	str	r2, [r7, #4]
 800793c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800793e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007940:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	009b      	lsls	r3, r3, #2
 8007946:	461a      	mov	r2, r3
 8007948:	21a5      	movs	r1, #165	; 0xa5
 800794a:	f002 f83f 	bl	80099cc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800794e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007950:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007958:	3b01      	subs	r3, #1
 800795a:	009b      	lsls	r3, r3, #2
 800795c:	4413      	add	r3, r2
 800795e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007960:	69bb      	ldr	r3, [r7, #24]
 8007962:	f023 0307 	bic.w	r3, r3, #7
 8007966:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007968:	69bb      	ldr	r3, [r7, #24]
 800796a:	f003 0307 	and.w	r3, r3, #7
 800796e:	2b00      	cmp	r3, #0
 8007970:	d00a      	beq.n	8007988 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007976:	f383 8811 	msr	BASEPRI, r3
 800797a:	f3bf 8f6f 	isb	sy
 800797e:	f3bf 8f4f 	dsb	sy
 8007982:	617b      	str	r3, [r7, #20]
}
 8007984:	bf00      	nop
 8007986:	e7fe      	b.n	8007986 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007988:	2300      	movs	r3, #0
 800798a:	61fb      	str	r3, [r7, #28]
 800798c:	e012      	b.n	80079b4 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800798e:	68ba      	ldr	r2, [r7, #8]
 8007990:	69fb      	ldr	r3, [r7, #28]
 8007992:	4413      	add	r3, r2
 8007994:	7819      	ldrb	r1, [r3, #0]
 8007996:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007998:	69fb      	ldr	r3, [r7, #28]
 800799a:	4413      	add	r3, r2
 800799c:	3334      	adds	r3, #52	; 0x34
 800799e:	460a      	mov	r2, r1
 80079a0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80079a2:	68ba      	ldr	r2, [r7, #8]
 80079a4:	69fb      	ldr	r3, [r7, #28]
 80079a6:	4413      	add	r3, r2
 80079a8:	781b      	ldrb	r3, [r3, #0]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d006      	beq.n	80079bc <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80079ae:	69fb      	ldr	r3, [r7, #28]
 80079b0:	3301      	adds	r3, #1
 80079b2:	61fb      	str	r3, [r7, #28]
 80079b4:	69fb      	ldr	r3, [r7, #28]
 80079b6:	2b0f      	cmp	r3, #15
 80079b8:	d9e9      	bls.n	800798e <prvInitialiseNewTask+0x5e>
 80079ba:	e000      	b.n	80079be <prvInitialiseNewTask+0x8e>
		{
			break;
 80079bc:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80079be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c0:	2200      	movs	r2, #0
 80079c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80079c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079c8:	2b37      	cmp	r3, #55	; 0x37
 80079ca:	d901      	bls.n	80079d0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80079cc:	2337      	movs	r3, #55	; 0x37
 80079ce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80079d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079d4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80079d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079da:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80079dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079de:	2200      	movs	r2, #0
 80079e0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80079e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e4:	3304      	adds	r3, #4
 80079e6:	4618      	mov	r0, r3
 80079e8:	f7fe ff71 	bl	80068ce <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80079ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ee:	3318      	adds	r3, #24
 80079f0:	4618      	mov	r0, r3
 80079f2:	f7fe ff6c 	bl	80068ce <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80079f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079fa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079fe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a04:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a0a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a0e:	2200      	movs	r2, #0
 8007a10:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a16:	2200      	movs	r2, #0
 8007a18:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a1e:	3354      	adds	r3, #84	; 0x54
 8007a20:	2260      	movs	r2, #96	; 0x60
 8007a22:	2100      	movs	r1, #0
 8007a24:	4618      	mov	r0, r3
 8007a26:	f001 ffd1 	bl	80099cc <memset>
 8007a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a2c:	4a0c      	ldr	r2, [pc, #48]	; (8007a60 <prvInitialiseNewTask+0x130>)
 8007a2e:	659a      	str	r2, [r3, #88]	; 0x58
 8007a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a32:	4a0c      	ldr	r2, [pc, #48]	; (8007a64 <prvInitialiseNewTask+0x134>)
 8007a34:	65da      	str	r2, [r3, #92]	; 0x5c
 8007a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a38:	4a0b      	ldr	r2, [pc, #44]	; (8007a68 <prvInitialiseNewTask+0x138>)
 8007a3a:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007a3c:	683a      	ldr	r2, [r7, #0]
 8007a3e:	68f9      	ldr	r1, [r7, #12]
 8007a40:	69b8      	ldr	r0, [r7, #24]
 8007a42:	f001 fa21 	bl	8008e88 <pxPortInitialiseStack>
 8007a46:	4602      	mov	r2, r0
 8007a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a4a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d002      	beq.n	8007a58 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a56:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a58:	bf00      	nop
 8007a5a:	3720      	adds	r7, #32
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}
 8007a60:	0800a80c 	.word	0x0800a80c
 8007a64:	0800a82c 	.word	0x0800a82c
 8007a68:	0800a7ec 	.word	0x0800a7ec

08007a6c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b082      	sub	sp, #8
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007a74:	f001 fafa 	bl	800906c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007a78:	4b2d      	ldr	r3, [pc, #180]	; (8007b30 <prvAddNewTaskToReadyList+0xc4>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	3301      	adds	r3, #1
 8007a7e:	4a2c      	ldr	r2, [pc, #176]	; (8007b30 <prvAddNewTaskToReadyList+0xc4>)
 8007a80:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007a82:	4b2c      	ldr	r3, [pc, #176]	; (8007b34 <prvAddNewTaskToReadyList+0xc8>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d109      	bne.n	8007a9e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007a8a:	4a2a      	ldr	r2, [pc, #168]	; (8007b34 <prvAddNewTaskToReadyList+0xc8>)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007a90:	4b27      	ldr	r3, [pc, #156]	; (8007b30 <prvAddNewTaskToReadyList+0xc4>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	2b01      	cmp	r3, #1
 8007a96:	d110      	bne.n	8007aba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007a98:	f000 fc28 	bl	80082ec <prvInitialiseTaskLists>
 8007a9c:	e00d      	b.n	8007aba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007a9e:	4b26      	ldr	r3, [pc, #152]	; (8007b38 <prvAddNewTaskToReadyList+0xcc>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d109      	bne.n	8007aba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007aa6:	4b23      	ldr	r3, [pc, #140]	; (8007b34 <prvAddNewTaskToReadyList+0xc8>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d802      	bhi.n	8007aba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007ab4:	4a1f      	ldr	r2, [pc, #124]	; (8007b34 <prvAddNewTaskToReadyList+0xc8>)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007aba:	4b20      	ldr	r3, [pc, #128]	; (8007b3c <prvAddNewTaskToReadyList+0xd0>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	3301      	adds	r3, #1
 8007ac0:	4a1e      	ldr	r2, [pc, #120]	; (8007b3c <prvAddNewTaskToReadyList+0xd0>)
 8007ac2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007ac4:	4b1d      	ldr	r3, [pc, #116]	; (8007b3c <prvAddNewTaskToReadyList+0xd0>)
 8007ac6:	681a      	ldr	r2, [r3, #0]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ad0:	4b1b      	ldr	r3, [pc, #108]	; (8007b40 <prvAddNewTaskToReadyList+0xd4>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d903      	bls.n	8007ae0 <prvAddNewTaskToReadyList+0x74>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007adc:	4a18      	ldr	r2, [pc, #96]	; (8007b40 <prvAddNewTaskToReadyList+0xd4>)
 8007ade:	6013      	str	r3, [r2, #0]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ae4:	4613      	mov	r3, r2
 8007ae6:	009b      	lsls	r3, r3, #2
 8007ae8:	4413      	add	r3, r2
 8007aea:	009b      	lsls	r3, r3, #2
 8007aec:	4a15      	ldr	r2, [pc, #84]	; (8007b44 <prvAddNewTaskToReadyList+0xd8>)
 8007aee:	441a      	add	r2, r3
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	3304      	adds	r3, #4
 8007af4:	4619      	mov	r1, r3
 8007af6:	4610      	mov	r0, r2
 8007af8:	f7fe fef5 	bl	80068e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007afc:	f001 fae6 	bl	80090cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007b00:	4b0d      	ldr	r3, [pc, #52]	; (8007b38 <prvAddNewTaskToReadyList+0xcc>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d00e      	beq.n	8007b26 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007b08:	4b0a      	ldr	r3, [pc, #40]	; (8007b34 <prvAddNewTaskToReadyList+0xc8>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b12:	429a      	cmp	r2, r3
 8007b14:	d207      	bcs.n	8007b26 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007b16:	4b0c      	ldr	r3, [pc, #48]	; (8007b48 <prvAddNewTaskToReadyList+0xdc>)
 8007b18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b1c:	601a      	str	r2, [r3, #0]
 8007b1e:	f3bf 8f4f 	dsb	sy
 8007b22:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b26:	bf00      	nop
 8007b28:	3708      	adds	r7, #8
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}
 8007b2e:	bf00      	nop
 8007b30:	20001634 	.word	0x20001634
 8007b34:	20001160 	.word	0x20001160
 8007b38:	20001640 	.word	0x20001640
 8007b3c:	20001650 	.word	0x20001650
 8007b40:	2000163c 	.word	0x2000163c
 8007b44:	20001164 	.word	0x20001164
 8007b48:	e000ed04 	.word	0xe000ed04

08007b4c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b084      	sub	sp, #16
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007b54:	2300      	movs	r3, #0
 8007b56:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d017      	beq.n	8007b8e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007b5e:	4b13      	ldr	r3, [pc, #76]	; (8007bac <vTaskDelay+0x60>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d00a      	beq.n	8007b7c <vTaskDelay+0x30>
	__asm volatile
 8007b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b6a:	f383 8811 	msr	BASEPRI, r3
 8007b6e:	f3bf 8f6f 	isb	sy
 8007b72:	f3bf 8f4f 	dsb	sy
 8007b76:	60bb      	str	r3, [r7, #8]
}
 8007b78:	bf00      	nop
 8007b7a:	e7fe      	b.n	8007b7a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007b7c:	f000 f88a 	bl	8007c94 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007b80:	2100      	movs	r1, #0
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 fe1a 	bl	80087bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007b88:	f000 f892 	bl	8007cb0 <xTaskResumeAll>
 8007b8c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d107      	bne.n	8007ba4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007b94:	4b06      	ldr	r3, [pc, #24]	; (8007bb0 <vTaskDelay+0x64>)
 8007b96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b9a:	601a      	str	r2, [r3, #0]
 8007b9c:	f3bf 8f4f 	dsb	sy
 8007ba0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007ba4:	bf00      	nop
 8007ba6:	3710      	adds	r7, #16
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}
 8007bac:	2000165c 	.word	0x2000165c
 8007bb0:	e000ed04 	.word	0xe000ed04

08007bb4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b08a      	sub	sp, #40	; 0x28
 8007bb8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007bc2:	463a      	mov	r2, r7
 8007bc4:	1d39      	adds	r1, r7, #4
 8007bc6:	f107 0308 	add.w	r3, r7, #8
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f7fe fe2c 	bl	8006828 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007bd0:	6839      	ldr	r1, [r7, #0]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	68ba      	ldr	r2, [r7, #8]
 8007bd6:	9202      	str	r2, [sp, #8]
 8007bd8:	9301      	str	r3, [sp, #4]
 8007bda:	2300      	movs	r3, #0
 8007bdc:	9300      	str	r3, [sp, #0]
 8007bde:	2300      	movs	r3, #0
 8007be0:	460a      	mov	r2, r1
 8007be2:	4924      	ldr	r1, [pc, #144]	; (8007c74 <vTaskStartScheduler+0xc0>)
 8007be4:	4824      	ldr	r0, [pc, #144]	; (8007c78 <vTaskStartScheduler+0xc4>)
 8007be6:	f7ff fe01 	bl	80077ec <xTaskCreateStatic>
 8007bea:	4603      	mov	r3, r0
 8007bec:	4a23      	ldr	r2, [pc, #140]	; (8007c7c <vTaskStartScheduler+0xc8>)
 8007bee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007bf0:	4b22      	ldr	r3, [pc, #136]	; (8007c7c <vTaskStartScheduler+0xc8>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d002      	beq.n	8007bfe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	617b      	str	r3, [r7, #20]
 8007bfc:	e001      	b.n	8007c02 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	d102      	bne.n	8007c0e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007c08:	f000 fe2c 	bl	8008864 <xTimerCreateTimerTask>
 8007c0c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	d11b      	bne.n	8007c4c <vTaskStartScheduler+0x98>
	__asm volatile
 8007c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c18:	f383 8811 	msr	BASEPRI, r3
 8007c1c:	f3bf 8f6f 	isb	sy
 8007c20:	f3bf 8f4f 	dsb	sy
 8007c24:	613b      	str	r3, [r7, #16]
}
 8007c26:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007c28:	4b15      	ldr	r3, [pc, #84]	; (8007c80 <vTaskStartScheduler+0xcc>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	3354      	adds	r3, #84	; 0x54
 8007c2e:	4a15      	ldr	r2, [pc, #84]	; (8007c84 <vTaskStartScheduler+0xd0>)
 8007c30:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007c32:	4b15      	ldr	r3, [pc, #84]	; (8007c88 <vTaskStartScheduler+0xd4>)
 8007c34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007c38:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007c3a:	4b14      	ldr	r3, [pc, #80]	; (8007c8c <vTaskStartScheduler+0xd8>)
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007c40:	4b13      	ldr	r3, [pc, #76]	; (8007c90 <vTaskStartScheduler+0xdc>)
 8007c42:	2200      	movs	r2, #0
 8007c44:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007c46:	f001 f99f 	bl	8008f88 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007c4a:	e00e      	b.n	8007c6a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c52:	d10a      	bne.n	8007c6a <vTaskStartScheduler+0xb6>
	__asm volatile
 8007c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c58:	f383 8811 	msr	BASEPRI, r3
 8007c5c:	f3bf 8f6f 	isb	sy
 8007c60:	f3bf 8f4f 	dsb	sy
 8007c64:	60fb      	str	r3, [r7, #12]
}
 8007c66:	bf00      	nop
 8007c68:	e7fe      	b.n	8007c68 <vTaskStartScheduler+0xb4>
}
 8007c6a:	bf00      	nop
 8007c6c:	3718      	adds	r7, #24
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}
 8007c72:	bf00      	nop
 8007c74:	0800a4f0 	.word	0x0800a4f0
 8007c78:	080082bd 	.word	0x080082bd
 8007c7c:	20001658 	.word	0x20001658
 8007c80:	20001160 	.word	0x20001160
 8007c84:	20000018 	.word	0x20000018
 8007c88:	20001654 	.word	0x20001654
 8007c8c:	20001640 	.word	0x20001640
 8007c90:	20001638 	.word	0x20001638

08007c94 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007c94:	b480      	push	{r7}
 8007c96:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007c98:	4b04      	ldr	r3, [pc, #16]	; (8007cac <vTaskSuspendAll+0x18>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	3301      	adds	r3, #1
 8007c9e:	4a03      	ldr	r2, [pc, #12]	; (8007cac <vTaskSuspendAll+0x18>)
 8007ca0:	6013      	str	r3, [r2, #0]
}
 8007ca2:	bf00      	nop
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bc80      	pop	{r7}
 8007ca8:	4770      	bx	lr
 8007caa:	bf00      	nop
 8007cac:	2000165c 	.word	0x2000165c

08007cb0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b084      	sub	sp, #16
 8007cb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007cbe:	4b42      	ldr	r3, [pc, #264]	; (8007dc8 <xTaskResumeAll+0x118>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d10a      	bne.n	8007cdc <xTaskResumeAll+0x2c>
	__asm volatile
 8007cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cca:	f383 8811 	msr	BASEPRI, r3
 8007cce:	f3bf 8f6f 	isb	sy
 8007cd2:	f3bf 8f4f 	dsb	sy
 8007cd6:	603b      	str	r3, [r7, #0]
}
 8007cd8:	bf00      	nop
 8007cda:	e7fe      	b.n	8007cda <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007cdc:	f001 f9c6 	bl	800906c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007ce0:	4b39      	ldr	r3, [pc, #228]	; (8007dc8 <xTaskResumeAll+0x118>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	3b01      	subs	r3, #1
 8007ce6:	4a38      	ldr	r2, [pc, #224]	; (8007dc8 <xTaskResumeAll+0x118>)
 8007ce8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007cea:	4b37      	ldr	r3, [pc, #220]	; (8007dc8 <xTaskResumeAll+0x118>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d162      	bne.n	8007db8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007cf2:	4b36      	ldr	r3, [pc, #216]	; (8007dcc <xTaskResumeAll+0x11c>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d05e      	beq.n	8007db8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007cfa:	e02f      	b.n	8007d5c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007cfc:	4b34      	ldr	r3, [pc, #208]	; (8007dd0 <xTaskResumeAll+0x120>)
 8007cfe:	68db      	ldr	r3, [r3, #12]
 8007d00:	68db      	ldr	r3, [r3, #12]
 8007d02:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	3318      	adds	r3, #24
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f7fe fe47 	bl	800699c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	3304      	adds	r3, #4
 8007d12:	4618      	mov	r0, r3
 8007d14:	f7fe fe42 	bl	800699c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d1c:	4b2d      	ldr	r3, [pc, #180]	; (8007dd4 <xTaskResumeAll+0x124>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d903      	bls.n	8007d2c <xTaskResumeAll+0x7c>
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d28:	4a2a      	ldr	r2, [pc, #168]	; (8007dd4 <xTaskResumeAll+0x124>)
 8007d2a:	6013      	str	r3, [r2, #0]
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d30:	4613      	mov	r3, r2
 8007d32:	009b      	lsls	r3, r3, #2
 8007d34:	4413      	add	r3, r2
 8007d36:	009b      	lsls	r3, r3, #2
 8007d38:	4a27      	ldr	r2, [pc, #156]	; (8007dd8 <xTaskResumeAll+0x128>)
 8007d3a:	441a      	add	r2, r3
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	3304      	adds	r3, #4
 8007d40:	4619      	mov	r1, r3
 8007d42:	4610      	mov	r0, r2
 8007d44:	f7fe fdcf 	bl	80068e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d4c:	4b23      	ldr	r3, [pc, #140]	; (8007ddc <xTaskResumeAll+0x12c>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d52:	429a      	cmp	r2, r3
 8007d54:	d302      	bcc.n	8007d5c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007d56:	4b22      	ldr	r3, [pc, #136]	; (8007de0 <xTaskResumeAll+0x130>)
 8007d58:	2201      	movs	r2, #1
 8007d5a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007d5c:	4b1c      	ldr	r3, [pc, #112]	; (8007dd0 <xTaskResumeAll+0x120>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d1cb      	bne.n	8007cfc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d001      	beq.n	8007d6e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007d6a:	f000 fb61 	bl	8008430 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007d6e:	4b1d      	ldr	r3, [pc, #116]	; (8007de4 <xTaskResumeAll+0x134>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d010      	beq.n	8007d9c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007d7a:	f000 f845 	bl	8007e08 <xTaskIncrementTick>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d002      	beq.n	8007d8a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007d84:	4b16      	ldr	r3, [pc, #88]	; (8007de0 <xTaskResumeAll+0x130>)
 8007d86:	2201      	movs	r2, #1
 8007d88:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	3b01      	subs	r3, #1
 8007d8e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d1f1      	bne.n	8007d7a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8007d96:	4b13      	ldr	r3, [pc, #76]	; (8007de4 <xTaskResumeAll+0x134>)
 8007d98:	2200      	movs	r2, #0
 8007d9a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007d9c:	4b10      	ldr	r3, [pc, #64]	; (8007de0 <xTaskResumeAll+0x130>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d009      	beq.n	8007db8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007da4:	2301      	movs	r3, #1
 8007da6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007da8:	4b0f      	ldr	r3, [pc, #60]	; (8007de8 <xTaskResumeAll+0x138>)
 8007daa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dae:	601a      	str	r2, [r3, #0]
 8007db0:	f3bf 8f4f 	dsb	sy
 8007db4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007db8:	f001 f988 	bl	80090cc <vPortExitCritical>

	return xAlreadyYielded;
 8007dbc:	68bb      	ldr	r3, [r7, #8]
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3710      	adds	r7, #16
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}
 8007dc6:	bf00      	nop
 8007dc8:	2000165c 	.word	0x2000165c
 8007dcc:	20001634 	.word	0x20001634
 8007dd0:	200015f4 	.word	0x200015f4
 8007dd4:	2000163c 	.word	0x2000163c
 8007dd8:	20001164 	.word	0x20001164
 8007ddc:	20001160 	.word	0x20001160
 8007de0:	20001648 	.word	0x20001648
 8007de4:	20001644 	.word	0x20001644
 8007de8:	e000ed04 	.word	0xe000ed04

08007dec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007dec:	b480      	push	{r7}
 8007dee:	b083      	sub	sp, #12
 8007df0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007df2:	4b04      	ldr	r3, [pc, #16]	; (8007e04 <xTaskGetTickCount+0x18>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007df8:	687b      	ldr	r3, [r7, #4]
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	370c      	adds	r7, #12
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bc80      	pop	{r7}
 8007e02:	4770      	bx	lr
 8007e04:	20001638 	.word	0x20001638

08007e08 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b086      	sub	sp, #24
 8007e0c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e12:	4b51      	ldr	r3, [pc, #324]	; (8007f58 <xTaskIncrementTick+0x150>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	f040 808e 	bne.w	8007f38 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007e1c:	4b4f      	ldr	r3, [pc, #316]	; (8007f5c <xTaskIncrementTick+0x154>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	3301      	adds	r3, #1
 8007e22:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007e24:	4a4d      	ldr	r2, [pc, #308]	; (8007f5c <xTaskIncrementTick+0x154>)
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d120      	bne.n	8007e72 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007e30:	4b4b      	ldr	r3, [pc, #300]	; (8007f60 <xTaskIncrementTick+0x158>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d00a      	beq.n	8007e50 <xTaskIncrementTick+0x48>
	__asm volatile
 8007e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e3e:	f383 8811 	msr	BASEPRI, r3
 8007e42:	f3bf 8f6f 	isb	sy
 8007e46:	f3bf 8f4f 	dsb	sy
 8007e4a:	603b      	str	r3, [r7, #0]
}
 8007e4c:	bf00      	nop
 8007e4e:	e7fe      	b.n	8007e4e <xTaskIncrementTick+0x46>
 8007e50:	4b43      	ldr	r3, [pc, #268]	; (8007f60 <xTaskIncrementTick+0x158>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	60fb      	str	r3, [r7, #12]
 8007e56:	4b43      	ldr	r3, [pc, #268]	; (8007f64 <xTaskIncrementTick+0x15c>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a41      	ldr	r2, [pc, #260]	; (8007f60 <xTaskIncrementTick+0x158>)
 8007e5c:	6013      	str	r3, [r2, #0]
 8007e5e:	4a41      	ldr	r2, [pc, #260]	; (8007f64 <xTaskIncrementTick+0x15c>)
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	6013      	str	r3, [r2, #0]
 8007e64:	4b40      	ldr	r3, [pc, #256]	; (8007f68 <xTaskIncrementTick+0x160>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	3301      	adds	r3, #1
 8007e6a:	4a3f      	ldr	r2, [pc, #252]	; (8007f68 <xTaskIncrementTick+0x160>)
 8007e6c:	6013      	str	r3, [r2, #0]
 8007e6e:	f000 fadf 	bl	8008430 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007e72:	4b3e      	ldr	r3, [pc, #248]	; (8007f6c <xTaskIncrementTick+0x164>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	693a      	ldr	r2, [r7, #16]
 8007e78:	429a      	cmp	r2, r3
 8007e7a:	d34e      	bcc.n	8007f1a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e7c:	4b38      	ldr	r3, [pc, #224]	; (8007f60 <xTaskIncrementTick+0x158>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d101      	bne.n	8007e8a <xTaskIncrementTick+0x82>
 8007e86:	2301      	movs	r3, #1
 8007e88:	e000      	b.n	8007e8c <xTaskIncrementTick+0x84>
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d004      	beq.n	8007e9a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e90:	4b36      	ldr	r3, [pc, #216]	; (8007f6c <xTaskIncrementTick+0x164>)
 8007e92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007e96:	601a      	str	r2, [r3, #0]
					break;
 8007e98:	e03f      	b.n	8007f1a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007e9a:	4b31      	ldr	r3, [pc, #196]	; (8007f60 <xTaskIncrementTick+0x158>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	68db      	ldr	r3, [r3, #12]
 8007ea0:	68db      	ldr	r3, [r3, #12]
 8007ea2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007eaa:	693a      	ldr	r2, [r7, #16]
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d203      	bcs.n	8007eba <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007eb2:	4a2e      	ldr	r2, [pc, #184]	; (8007f6c <xTaskIncrementTick+0x164>)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6013      	str	r3, [r2, #0]
						break;
 8007eb8:	e02f      	b.n	8007f1a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	3304      	adds	r3, #4
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f7fe fd6c 	bl	800699c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d004      	beq.n	8007ed6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	3318      	adds	r3, #24
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f7fe fd63 	bl	800699c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eda:	4b25      	ldr	r3, [pc, #148]	; (8007f70 <xTaskIncrementTick+0x168>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	429a      	cmp	r2, r3
 8007ee0:	d903      	bls.n	8007eea <xTaskIncrementTick+0xe2>
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ee6:	4a22      	ldr	r2, [pc, #136]	; (8007f70 <xTaskIncrementTick+0x168>)
 8007ee8:	6013      	str	r3, [r2, #0]
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eee:	4613      	mov	r3, r2
 8007ef0:	009b      	lsls	r3, r3, #2
 8007ef2:	4413      	add	r3, r2
 8007ef4:	009b      	lsls	r3, r3, #2
 8007ef6:	4a1f      	ldr	r2, [pc, #124]	; (8007f74 <xTaskIncrementTick+0x16c>)
 8007ef8:	441a      	add	r2, r3
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	3304      	adds	r3, #4
 8007efe:	4619      	mov	r1, r3
 8007f00:	4610      	mov	r0, r2
 8007f02:	f7fe fcf0 	bl	80068e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f0a:	4b1b      	ldr	r3, [pc, #108]	; (8007f78 <xTaskIncrementTick+0x170>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f10:	429a      	cmp	r2, r3
 8007f12:	d3b3      	bcc.n	8007e7c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007f14:	2301      	movs	r3, #1
 8007f16:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f18:	e7b0      	b.n	8007e7c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007f1a:	4b17      	ldr	r3, [pc, #92]	; (8007f78 <xTaskIncrementTick+0x170>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f20:	4914      	ldr	r1, [pc, #80]	; (8007f74 <xTaskIncrementTick+0x16c>)
 8007f22:	4613      	mov	r3, r2
 8007f24:	009b      	lsls	r3, r3, #2
 8007f26:	4413      	add	r3, r2
 8007f28:	009b      	lsls	r3, r3, #2
 8007f2a:	440b      	add	r3, r1
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	d907      	bls.n	8007f42 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007f32:	2301      	movs	r3, #1
 8007f34:	617b      	str	r3, [r7, #20]
 8007f36:	e004      	b.n	8007f42 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007f38:	4b10      	ldr	r3, [pc, #64]	; (8007f7c <xTaskIncrementTick+0x174>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	3301      	adds	r3, #1
 8007f3e:	4a0f      	ldr	r2, [pc, #60]	; (8007f7c <xTaskIncrementTick+0x174>)
 8007f40:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007f42:	4b0f      	ldr	r3, [pc, #60]	; (8007f80 <xTaskIncrementTick+0x178>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d001      	beq.n	8007f4e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007f4e:	697b      	ldr	r3, [r7, #20]
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	3718      	adds	r7, #24
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}
 8007f58:	2000165c 	.word	0x2000165c
 8007f5c:	20001638 	.word	0x20001638
 8007f60:	200015ec 	.word	0x200015ec
 8007f64:	200015f0 	.word	0x200015f0
 8007f68:	2000164c 	.word	0x2000164c
 8007f6c:	20001654 	.word	0x20001654
 8007f70:	2000163c 	.word	0x2000163c
 8007f74:	20001164 	.word	0x20001164
 8007f78:	20001160 	.word	0x20001160
 8007f7c:	20001644 	.word	0x20001644
 8007f80:	20001648 	.word	0x20001648

08007f84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007f84:	b480      	push	{r7}
 8007f86:	b085      	sub	sp, #20
 8007f88:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007f8a:	4b2a      	ldr	r3, [pc, #168]	; (8008034 <vTaskSwitchContext+0xb0>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d003      	beq.n	8007f9a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007f92:	4b29      	ldr	r3, [pc, #164]	; (8008038 <vTaskSwitchContext+0xb4>)
 8007f94:	2201      	movs	r2, #1
 8007f96:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007f98:	e046      	b.n	8008028 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8007f9a:	4b27      	ldr	r3, [pc, #156]	; (8008038 <vTaskSwitchContext+0xb4>)
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007fa0:	4b26      	ldr	r3, [pc, #152]	; (800803c <vTaskSwitchContext+0xb8>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	60fb      	str	r3, [r7, #12]
 8007fa6:	e010      	b.n	8007fca <vTaskSwitchContext+0x46>
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d10a      	bne.n	8007fc4 <vTaskSwitchContext+0x40>
	__asm volatile
 8007fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb2:	f383 8811 	msr	BASEPRI, r3
 8007fb6:	f3bf 8f6f 	isb	sy
 8007fba:	f3bf 8f4f 	dsb	sy
 8007fbe:	607b      	str	r3, [r7, #4]
}
 8007fc0:	bf00      	nop
 8007fc2:	e7fe      	b.n	8007fc2 <vTaskSwitchContext+0x3e>
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	3b01      	subs	r3, #1
 8007fc8:	60fb      	str	r3, [r7, #12]
 8007fca:	491d      	ldr	r1, [pc, #116]	; (8008040 <vTaskSwitchContext+0xbc>)
 8007fcc:	68fa      	ldr	r2, [r7, #12]
 8007fce:	4613      	mov	r3, r2
 8007fd0:	009b      	lsls	r3, r3, #2
 8007fd2:	4413      	add	r3, r2
 8007fd4:	009b      	lsls	r3, r3, #2
 8007fd6:	440b      	add	r3, r1
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d0e4      	beq.n	8007fa8 <vTaskSwitchContext+0x24>
 8007fde:	68fa      	ldr	r2, [r7, #12]
 8007fe0:	4613      	mov	r3, r2
 8007fe2:	009b      	lsls	r3, r3, #2
 8007fe4:	4413      	add	r3, r2
 8007fe6:	009b      	lsls	r3, r3, #2
 8007fe8:	4a15      	ldr	r2, [pc, #84]	; (8008040 <vTaskSwitchContext+0xbc>)
 8007fea:	4413      	add	r3, r2
 8007fec:	60bb      	str	r3, [r7, #8]
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	685a      	ldr	r2, [r3, #4]
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	605a      	str	r2, [r3, #4]
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	685a      	ldr	r2, [r3, #4]
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	3308      	adds	r3, #8
 8008000:	429a      	cmp	r2, r3
 8008002:	d104      	bne.n	800800e <vTaskSwitchContext+0x8a>
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	685a      	ldr	r2, [r3, #4]
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	605a      	str	r2, [r3, #4]
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	68db      	ldr	r3, [r3, #12]
 8008014:	4a0b      	ldr	r2, [pc, #44]	; (8008044 <vTaskSwitchContext+0xc0>)
 8008016:	6013      	str	r3, [r2, #0]
 8008018:	4a08      	ldr	r2, [pc, #32]	; (800803c <vTaskSwitchContext+0xb8>)
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800801e:	4b09      	ldr	r3, [pc, #36]	; (8008044 <vTaskSwitchContext+0xc0>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	3354      	adds	r3, #84	; 0x54
 8008024:	4a08      	ldr	r2, [pc, #32]	; (8008048 <vTaskSwitchContext+0xc4>)
 8008026:	6013      	str	r3, [r2, #0]
}
 8008028:	bf00      	nop
 800802a:	3714      	adds	r7, #20
 800802c:	46bd      	mov	sp, r7
 800802e:	bc80      	pop	{r7}
 8008030:	4770      	bx	lr
 8008032:	bf00      	nop
 8008034:	2000165c 	.word	0x2000165c
 8008038:	20001648 	.word	0x20001648
 800803c:	2000163c 	.word	0x2000163c
 8008040:	20001164 	.word	0x20001164
 8008044:	20001160 	.word	0x20001160
 8008048:	20000018 	.word	0x20000018

0800804c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b084      	sub	sp, #16
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d10a      	bne.n	8008072 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800805c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008060:	f383 8811 	msr	BASEPRI, r3
 8008064:	f3bf 8f6f 	isb	sy
 8008068:	f3bf 8f4f 	dsb	sy
 800806c:	60fb      	str	r3, [r7, #12]
}
 800806e:	bf00      	nop
 8008070:	e7fe      	b.n	8008070 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008072:	4b07      	ldr	r3, [pc, #28]	; (8008090 <vTaskPlaceOnEventList+0x44>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	3318      	adds	r3, #24
 8008078:	4619      	mov	r1, r3
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f7fe fc56 	bl	800692c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008080:	2101      	movs	r1, #1
 8008082:	6838      	ldr	r0, [r7, #0]
 8008084:	f000 fb9a 	bl	80087bc <prvAddCurrentTaskToDelayedList>
}
 8008088:	bf00      	nop
 800808a:	3710      	adds	r7, #16
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}
 8008090:	20001160 	.word	0x20001160

08008094 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008094:	b580      	push	{r7, lr}
 8008096:	b086      	sub	sp, #24
 8008098:	af00      	add	r7, sp, #0
 800809a:	60f8      	str	r0, [r7, #12]
 800809c:	60b9      	str	r1, [r7, #8]
 800809e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d10a      	bne.n	80080bc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80080a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080aa:	f383 8811 	msr	BASEPRI, r3
 80080ae:	f3bf 8f6f 	isb	sy
 80080b2:	f3bf 8f4f 	dsb	sy
 80080b6:	617b      	str	r3, [r7, #20]
}
 80080b8:	bf00      	nop
 80080ba:	e7fe      	b.n	80080ba <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80080bc:	4b0a      	ldr	r3, [pc, #40]	; (80080e8 <vTaskPlaceOnEventListRestricted+0x54>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	3318      	adds	r3, #24
 80080c2:	4619      	mov	r1, r3
 80080c4:	68f8      	ldr	r0, [r7, #12]
 80080c6:	f7fe fc0e 	bl	80068e6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d002      	beq.n	80080d6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80080d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80080d4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80080d6:	6879      	ldr	r1, [r7, #4]
 80080d8:	68b8      	ldr	r0, [r7, #8]
 80080da:	f000 fb6f 	bl	80087bc <prvAddCurrentTaskToDelayedList>
	}
 80080de:	bf00      	nop
 80080e0:	3718      	adds	r7, #24
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}
 80080e6:	bf00      	nop
 80080e8:	20001160 	.word	0x20001160

080080ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b086      	sub	sp, #24
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	68db      	ldr	r3, [r3, #12]
 80080f8:	68db      	ldr	r3, [r3, #12]
 80080fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d10a      	bne.n	8008118 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008106:	f383 8811 	msr	BASEPRI, r3
 800810a:	f3bf 8f6f 	isb	sy
 800810e:	f3bf 8f4f 	dsb	sy
 8008112:	60fb      	str	r3, [r7, #12]
}
 8008114:	bf00      	nop
 8008116:	e7fe      	b.n	8008116 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	3318      	adds	r3, #24
 800811c:	4618      	mov	r0, r3
 800811e:	f7fe fc3d 	bl	800699c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008122:	4b1e      	ldr	r3, [pc, #120]	; (800819c <xTaskRemoveFromEventList+0xb0>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d11d      	bne.n	8008166 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	3304      	adds	r3, #4
 800812e:	4618      	mov	r0, r3
 8008130:	f7fe fc34 	bl	800699c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008134:	693b      	ldr	r3, [r7, #16]
 8008136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008138:	4b19      	ldr	r3, [pc, #100]	; (80081a0 <xTaskRemoveFromEventList+0xb4>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	429a      	cmp	r2, r3
 800813e:	d903      	bls.n	8008148 <xTaskRemoveFromEventList+0x5c>
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008144:	4a16      	ldr	r2, [pc, #88]	; (80081a0 <xTaskRemoveFromEventList+0xb4>)
 8008146:	6013      	str	r3, [r2, #0]
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800814c:	4613      	mov	r3, r2
 800814e:	009b      	lsls	r3, r3, #2
 8008150:	4413      	add	r3, r2
 8008152:	009b      	lsls	r3, r3, #2
 8008154:	4a13      	ldr	r2, [pc, #76]	; (80081a4 <xTaskRemoveFromEventList+0xb8>)
 8008156:	441a      	add	r2, r3
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	3304      	adds	r3, #4
 800815c:	4619      	mov	r1, r3
 800815e:	4610      	mov	r0, r2
 8008160:	f7fe fbc1 	bl	80068e6 <vListInsertEnd>
 8008164:	e005      	b.n	8008172 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	3318      	adds	r3, #24
 800816a:	4619      	mov	r1, r3
 800816c:	480e      	ldr	r0, [pc, #56]	; (80081a8 <xTaskRemoveFromEventList+0xbc>)
 800816e:	f7fe fbba 	bl	80068e6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008176:	4b0d      	ldr	r3, [pc, #52]	; (80081ac <xTaskRemoveFromEventList+0xc0>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800817c:	429a      	cmp	r2, r3
 800817e:	d905      	bls.n	800818c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008180:	2301      	movs	r3, #1
 8008182:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008184:	4b0a      	ldr	r3, [pc, #40]	; (80081b0 <xTaskRemoveFromEventList+0xc4>)
 8008186:	2201      	movs	r2, #1
 8008188:	601a      	str	r2, [r3, #0]
 800818a:	e001      	b.n	8008190 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800818c:	2300      	movs	r3, #0
 800818e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8008190:	697b      	ldr	r3, [r7, #20]
}
 8008192:	4618      	mov	r0, r3
 8008194:	3718      	adds	r7, #24
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}
 800819a:	bf00      	nop
 800819c:	2000165c 	.word	0x2000165c
 80081a0:	2000163c 	.word	0x2000163c
 80081a4:	20001164 	.word	0x20001164
 80081a8:	200015f4 	.word	0x200015f4
 80081ac:	20001160 	.word	0x20001160
 80081b0:	20001648 	.word	0x20001648

080081b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80081b4:	b480      	push	{r7}
 80081b6:	b083      	sub	sp, #12
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80081bc:	4b06      	ldr	r3, [pc, #24]	; (80081d8 <vTaskInternalSetTimeOutState+0x24>)
 80081be:	681a      	ldr	r2, [r3, #0]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80081c4:	4b05      	ldr	r3, [pc, #20]	; (80081dc <vTaskInternalSetTimeOutState+0x28>)
 80081c6:	681a      	ldr	r2, [r3, #0]
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	605a      	str	r2, [r3, #4]
}
 80081cc:	bf00      	nop
 80081ce:	370c      	adds	r7, #12
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bc80      	pop	{r7}
 80081d4:	4770      	bx	lr
 80081d6:	bf00      	nop
 80081d8:	2000164c 	.word	0x2000164c
 80081dc:	20001638 	.word	0x20001638

080081e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b088      	sub	sp, #32
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d10a      	bne.n	8008206 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80081f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f4:	f383 8811 	msr	BASEPRI, r3
 80081f8:	f3bf 8f6f 	isb	sy
 80081fc:	f3bf 8f4f 	dsb	sy
 8008200:	613b      	str	r3, [r7, #16]
}
 8008202:	bf00      	nop
 8008204:	e7fe      	b.n	8008204 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d10a      	bne.n	8008222 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800820c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008210:	f383 8811 	msr	BASEPRI, r3
 8008214:	f3bf 8f6f 	isb	sy
 8008218:	f3bf 8f4f 	dsb	sy
 800821c:	60fb      	str	r3, [r7, #12]
}
 800821e:	bf00      	nop
 8008220:	e7fe      	b.n	8008220 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008222:	f000 ff23 	bl	800906c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008226:	4b1d      	ldr	r3, [pc, #116]	; (800829c <xTaskCheckForTimeOut+0xbc>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	685b      	ldr	r3, [r3, #4]
 8008230:	69ba      	ldr	r2, [r7, #24]
 8008232:	1ad3      	subs	r3, r2, r3
 8008234:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800823e:	d102      	bne.n	8008246 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008240:	2300      	movs	r3, #0
 8008242:	61fb      	str	r3, [r7, #28]
 8008244:	e023      	b.n	800828e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681a      	ldr	r2, [r3, #0]
 800824a:	4b15      	ldr	r3, [pc, #84]	; (80082a0 <xTaskCheckForTimeOut+0xc0>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	429a      	cmp	r2, r3
 8008250:	d007      	beq.n	8008262 <xTaskCheckForTimeOut+0x82>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	685b      	ldr	r3, [r3, #4]
 8008256:	69ba      	ldr	r2, [r7, #24]
 8008258:	429a      	cmp	r2, r3
 800825a:	d302      	bcc.n	8008262 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800825c:	2301      	movs	r3, #1
 800825e:	61fb      	str	r3, [r7, #28]
 8008260:	e015      	b.n	800828e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	697a      	ldr	r2, [r7, #20]
 8008268:	429a      	cmp	r2, r3
 800826a:	d20b      	bcs.n	8008284 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	681a      	ldr	r2, [r3, #0]
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	1ad2      	subs	r2, r2, r3
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f7ff ff9b 	bl	80081b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800827e:	2300      	movs	r3, #0
 8008280:	61fb      	str	r3, [r7, #28]
 8008282:	e004      	b.n	800828e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	2200      	movs	r2, #0
 8008288:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800828a:	2301      	movs	r3, #1
 800828c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800828e:	f000 ff1d 	bl	80090cc <vPortExitCritical>

	return xReturn;
 8008292:	69fb      	ldr	r3, [r7, #28]
}
 8008294:	4618      	mov	r0, r3
 8008296:	3720      	adds	r7, #32
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}
 800829c:	20001638 	.word	0x20001638
 80082a0:	2000164c 	.word	0x2000164c

080082a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80082a4:	b480      	push	{r7}
 80082a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80082a8:	4b03      	ldr	r3, [pc, #12]	; (80082b8 <vTaskMissedYield+0x14>)
 80082aa:	2201      	movs	r2, #1
 80082ac:	601a      	str	r2, [r3, #0]
}
 80082ae:	bf00      	nop
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bc80      	pop	{r7}
 80082b4:	4770      	bx	lr
 80082b6:	bf00      	nop
 80082b8:	20001648 	.word	0x20001648

080082bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b082      	sub	sp, #8
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80082c4:	f000 f852 	bl	800836c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80082c8:	4b06      	ldr	r3, [pc, #24]	; (80082e4 <prvIdleTask+0x28>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	d9f9      	bls.n	80082c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80082d0:	4b05      	ldr	r3, [pc, #20]	; (80082e8 <prvIdleTask+0x2c>)
 80082d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082d6:	601a      	str	r2, [r3, #0]
 80082d8:	f3bf 8f4f 	dsb	sy
 80082dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80082e0:	e7f0      	b.n	80082c4 <prvIdleTask+0x8>
 80082e2:	bf00      	nop
 80082e4:	20001164 	.word	0x20001164
 80082e8:	e000ed04 	.word	0xe000ed04

080082ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b082      	sub	sp, #8
 80082f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80082f2:	2300      	movs	r3, #0
 80082f4:	607b      	str	r3, [r7, #4]
 80082f6:	e00c      	b.n	8008312 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80082f8:	687a      	ldr	r2, [r7, #4]
 80082fa:	4613      	mov	r3, r2
 80082fc:	009b      	lsls	r3, r3, #2
 80082fe:	4413      	add	r3, r2
 8008300:	009b      	lsls	r3, r3, #2
 8008302:	4a12      	ldr	r2, [pc, #72]	; (800834c <prvInitialiseTaskLists+0x60>)
 8008304:	4413      	add	r3, r2
 8008306:	4618      	mov	r0, r3
 8008308:	f7fe fac2 	bl	8006890 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	3301      	adds	r3, #1
 8008310:	607b      	str	r3, [r7, #4]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2b37      	cmp	r3, #55	; 0x37
 8008316:	d9ef      	bls.n	80082f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008318:	480d      	ldr	r0, [pc, #52]	; (8008350 <prvInitialiseTaskLists+0x64>)
 800831a:	f7fe fab9 	bl	8006890 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800831e:	480d      	ldr	r0, [pc, #52]	; (8008354 <prvInitialiseTaskLists+0x68>)
 8008320:	f7fe fab6 	bl	8006890 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008324:	480c      	ldr	r0, [pc, #48]	; (8008358 <prvInitialiseTaskLists+0x6c>)
 8008326:	f7fe fab3 	bl	8006890 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800832a:	480c      	ldr	r0, [pc, #48]	; (800835c <prvInitialiseTaskLists+0x70>)
 800832c:	f7fe fab0 	bl	8006890 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008330:	480b      	ldr	r0, [pc, #44]	; (8008360 <prvInitialiseTaskLists+0x74>)
 8008332:	f7fe faad 	bl	8006890 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008336:	4b0b      	ldr	r3, [pc, #44]	; (8008364 <prvInitialiseTaskLists+0x78>)
 8008338:	4a05      	ldr	r2, [pc, #20]	; (8008350 <prvInitialiseTaskLists+0x64>)
 800833a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800833c:	4b0a      	ldr	r3, [pc, #40]	; (8008368 <prvInitialiseTaskLists+0x7c>)
 800833e:	4a05      	ldr	r2, [pc, #20]	; (8008354 <prvInitialiseTaskLists+0x68>)
 8008340:	601a      	str	r2, [r3, #0]
}
 8008342:	bf00      	nop
 8008344:	3708      	adds	r7, #8
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}
 800834a:	bf00      	nop
 800834c:	20001164 	.word	0x20001164
 8008350:	200015c4 	.word	0x200015c4
 8008354:	200015d8 	.word	0x200015d8
 8008358:	200015f4 	.word	0x200015f4
 800835c:	20001608 	.word	0x20001608
 8008360:	20001620 	.word	0x20001620
 8008364:	200015ec 	.word	0x200015ec
 8008368:	200015f0 	.word	0x200015f0

0800836c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b082      	sub	sp, #8
 8008370:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008372:	e019      	b.n	80083a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008374:	f000 fe7a 	bl	800906c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008378:	4b10      	ldr	r3, [pc, #64]	; (80083bc <prvCheckTasksWaitingTermination+0x50>)
 800837a:	68db      	ldr	r3, [r3, #12]
 800837c:	68db      	ldr	r3, [r3, #12]
 800837e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	3304      	adds	r3, #4
 8008384:	4618      	mov	r0, r3
 8008386:	f7fe fb09 	bl	800699c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800838a:	4b0d      	ldr	r3, [pc, #52]	; (80083c0 <prvCheckTasksWaitingTermination+0x54>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	3b01      	subs	r3, #1
 8008390:	4a0b      	ldr	r2, [pc, #44]	; (80083c0 <prvCheckTasksWaitingTermination+0x54>)
 8008392:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008394:	4b0b      	ldr	r3, [pc, #44]	; (80083c4 <prvCheckTasksWaitingTermination+0x58>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	3b01      	subs	r3, #1
 800839a:	4a0a      	ldr	r2, [pc, #40]	; (80083c4 <prvCheckTasksWaitingTermination+0x58>)
 800839c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800839e:	f000 fe95 	bl	80090cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f000 f810 	bl	80083c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80083a8:	4b06      	ldr	r3, [pc, #24]	; (80083c4 <prvCheckTasksWaitingTermination+0x58>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d1e1      	bne.n	8008374 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80083b0:	bf00      	nop
 80083b2:	bf00      	nop
 80083b4:	3708      	adds	r7, #8
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}
 80083ba:	bf00      	nop
 80083bc:	20001608 	.word	0x20001608
 80083c0:	20001634 	.word	0x20001634
 80083c4:	2000161c 	.word	0x2000161c

080083c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b084      	sub	sp, #16
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	3354      	adds	r3, #84	; 0x54
 80083d4:	4618      	mov	r0, r3
 80083d6:	f001 fbeb 	bl	8009bb0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d108      	bne.n	80083f6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083e8:	4618      	mov	r0, r3
 80083ea:	f001 f803 	bl	80093f4 <vPortFree>
				vPortFree( pxTCB );
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f001 f800 	bl	80093f4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80083f4:	e018      	b.n	8008428 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80083fc:	2b01      	cmp	r3, #1
 80083fe:	d103      	bne.n	8008408 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f000 fff7 	bl	80093f4 <vPortFree>
	}
 8008406:	e00f      	b.n	8008428 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800840e:	2b02      	cmp	r3, #2
 8008410:	d00a      	beq.n	8008428 <prvDeleteTCB+0x60>
	__asm volatile
 8008412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008416:	f383 8811 	msr	BASEPRI, r3
 800841a:	f3bf 8f6f 	isb	sy
 800841e:	f3bf 8f4f 	dsb	sy
 8008422:	60fb      	str	r3, [r7, #12]
}
 8008424:	bf00      	nop
 8008426:	e7fe      	b.n	8008426 <prvDeleteTCB+0x5e>
	}
 8008428:	bf00      	nop
 800842a:	3710      	adds	r7, #16
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}

08008430 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008430:	b480      	push	{r7}
 8008432:	b083      	sub	sp, #12
 8008434:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008436:	4b0e      	ldr	r3, [pc, #56]	; (8008470 <prvResetNextTaskUnblockTime+0x40>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d101      	bne.n	8008444 <prvResetNextTaskUnblockTime+0x14>
 8008440:	2301      	movs	r3, #1
 8008442:	e000      	b.n	8008446 <prvResetNextTaskUnblockTime+0x16>
 8008444:	2300      	movs	r3, #0
 8008446:	2b00      	cmp	r3, #0
 8008448:	d004      	beq.n	8008454 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800844a:	4b0a      	ldr	r3, [pc, #40]	; (8008474 <prvResetNextTaskUnblockTime+0x44>)
 800844c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008450:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008452:	e008      	b.n	8008466 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008454:	4b06      	ldr	r3, [pc, #24]	; (8008470 <prvResetNextTaskUnblockTime+0x40>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	68db      	ldr	r3, [r3, #12]
 800845a:	68db      	ldr	r3, [r3, #12]
 800845c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	4a04      	ldr	r2, [pc, #16]	; (8008474 <prvResetNextTaskUnblockTime+0x44>)
 8008464:	6013      	str	r3, [r2, #0]
}
 8008466:	bf00      	nop
 8008468:	370c      	adds	r7, #12
 800846a:	46bd      	mov	sp, r7
 800846c:	bc80      	pop	{r7}
 800846e:	4770      	bx	lr
 8008470:	200015ec 	.word	0x200015ec
 8008474:	20001654 	.word	0x20001654

08008478 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8008478:	b480      	push	{r7}
 800847a:	b083      	sub	sp, #12
 800847c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800847e:	4b04      	ldr	r3, [pc, #16]	; (8008490 <xTaskGetCurrentTaskHandle+0x18>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	607b      	str	r3, [r7, #4]

		return xReturn;
 8008484:	687b      	ldr	r3, [r7, #4]
	}
 8008486:	4618      	mov	r0, r3
 8008488:	370c      	adds	r7, #12
 800848a:	46bd      	mov	sp, r7
 800848c:	bc80      	pop	{r7}
 800848e:	4770      	bx	lr
 8008490:	20001160 	.word	0x20001160

08008494 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008494:	b480      	push	{r7}
 8008496:	b083      	sub	sp, #12
 8008498:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800849a:	4b0b      	ldr	r3, [pc, #44]	; (80084c8 <xTaskGetSchedulerState+0x34>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d102      	bne.n	80084a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80084a2:	2301      	movs	r3, #1
 80084a4:	607b      	str	r3, [r7, #4]
 80084a6:	e008      	b.n	80084ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80084a8:	4b08      	ldr	r3, [pc, #32]	; (80084cc <xTaskGetSchedulerState+0x38>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d102      	bne.n	80084b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80084b0:	2302      	movs	r3, #2
 80084b2:	607b      	str	r3, [r7, #4]
 80084b4:	e001      	b.n	80084ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80084b6:	2300      	movs	r3, #0
 80084b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80084ba:	687b      	ldr	r3, [r7, #4]
	}
 80084bc:	4618      	mov	r0, r3
 80084be:	370c      	adds	r7, #12
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bc80      	pop	{r7}
 80084c4:	4770      	bx	lr
 80084c6:	bf00      	nop
 80084c8:	20001640 	.word	0x20001640
 80084cc:	2000165c 	.word	0x2000165c

080084d0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b084      	sub	sp, #16
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80084dc:	2300      	movs	r3, #0
 80084de:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d056      	beq.n	8008594 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084ea:	4b2d      	ldr	r3, [pc, #180]	; (80085a0 <xTaskPriorityInherit+0xd0>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d246      	bcs.n	8008582 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	699b      	ldr	r3, [r3, #24]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	db06      	blt.n	800850a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084fc:	4b28      	ldr	r3, [pc, #160]	; (80085a0 <xTaskPriorityInherit+0xd0>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008502:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	6959      	ldr	r1, [r3, #20]
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008512:	4613      	mov	r3, r2
 8008514:	009b      	lsls	r3, r3, #2
 8008516:	4413      	add	r3, r2
 8008518:	009b      	lsls	r3, r3, #2
 800851a:	4a22      	ldr	r2, [pc, #136]	; (80085a4 <xTaskPriorityInherit+0xd4>)
 800851c:	4413      	add	r3, r2
 800851e:	4299      	cmp	r1, r3
 8008520:	d101      	bne.n	8008526 <xTaskPriorityInherit+0x56>
 8008522:	2301      	movs	r3, #1
 8008524:	e000      	b.n	8008528 <xTaskPriorityInherit+0x58>
 8008526:	2300      	movs	r3, #0
 8008528:	2b00      	cmp	r3, #0
 800852a:	d022      	beq.n	8008572 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	3304      	adds	r3, #4
 8008530:	4618      	mov	r0, r3
 8008532:	f7fe fa33 	bl	800699c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008536:	4b1a      	ldr	r3, [pc, #104]	; (80085a0 <xTaskPriorityInherit+0xd0>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008544:	4b18      	ldr	r3, [pc, #96]	; (80085a8 <xTaskPriorityInherit+0xd8>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	429a      	cmp	r2, r3
 800854a:	d903      	bls.n	8008554 <xTaskPriorityInherit+0x84>
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008550:	4a15      	ldr	r2, [pc, #84]	; (80085a8 <xTaskPriorityInherit+0xd8>)
 8008552:	6013      	str	r3, [r2, #0]
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008558:	4613      	mov	r3, r2
 800855a:	009b      	lsls	r3, r3, #2
 800855c:	4413      	add	r3, r2
 800855e:	009b      	lsls	r3, r3, #2
 8008560:	4a10      	ldr	r2, [pc, #64]	; (80085a4 <xTaskPriorityInherit+0xd4>)
 8008562:	441a      	add	r2, r3
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	3304      	adds	r3, #4
 8008568:	4619      	mov	r1, r3
 800856a:	4610      	mov	r0, r2
 800856c:	f7fe f9bb 	bl	80068e6 <vListInsertEnd>
 8008570:	e004      	b.n	800857c <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008572:	4b0b      	ldr	r3, [pc, #44]	; (80085a0 <xTaskPriorityInherit+0xd0>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800857c:	2301      	movs	r3, #1
 800857e:	60fb      	str	r3, [r7, #12]
 8008580:	e008      	b.n	8008594 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008586:	4b06      	ldr	r3, [pc, #24]	; (80085a0 <xTaskPriorityInherit+0xd0>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800858c:	429a      	cmp	r2, r3
 800858e:	d201      	bcs.n	8008594 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008590:	2301      	movs	r3, #1
 8008592:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008594:	68fb      	ldr	r3, [r7, #12]
	}
 8008596:	4618      	mov	r0, r3
 8008598:	3710      	adds	r7, #16
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}
 800859e:	bf00      	nop
 80085a0:	20001160 	.word	0x20001160
 80085a4:	20001164 	.word	0x20001164
 80085a8:	2000163c 	.word	0x2000163c

080085ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b086      	sub	sp, #24
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80085b8:	2300      	movs	r3, #0
 80085ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d056      	beq.n	8008670 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80085c2:	4b2e      	ldr	r3, [pc, #184]	; (800867c <xTaskPriorityDisinherit+0xd0>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	693a      	ldr	r2, [r7, #16]
 80085c8:	429a      	cmp	r2, r3
 80085ca:	d00a      	beq.n	80085e2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80085cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d0:	f383 8811 	msr	BASEPRI, r3
 80085d4:	f3bf 8f6f 	isb	sy
 80085d8:	f3bf 8f4f 	dsb	sy
 80085dc:	60fb      	str	r3, [r7, #12]
}
 80085de:	bf00      	nop
 80085e0:	e7fe      	b.n	80085e0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80085e2:	693b      	ldr	r3, [r7, #16]
 80085e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d10a      	bne.n	8008600 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80085ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ee:	f383 8811 	msr	BASEPRI, r3
 80085f2:	f3bf 8f6f 	isb	sy
 80085f6:	f3bf 8f4f 	dsb	sy
 80085fa:	60bb      	str	r3, [r7, #8]
}
 80085fc:	bf00      	nop
 80085fe:	e7fe      	b.n	80085fe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008600:	693b      	ldr	r3, [r7, #16]
 8008602:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008604:	1e5a      	subs	r2, r3, #1
 8008606:	693b      	ldr	r3, [r7, #16]
 8008608:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800860e:	693b      	ldr	r3, [r7, #16]
 8008610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008612:	429a      	cmp	r2, r3
 8008614:	d02c      	beq.n	8008670 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800861a:	2b00      	cmp	r3, #0
 800861c:	d128      	bne.n	8008670 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	3304      	adds	r3, #4
 8008622:	4618      	mov	r0, r3
 8008624:	f7fe f9ba 	bl	800699c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800862c:	693b      	ldr	r3, [r7, #16]
 800862e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008634:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008638:	693b      	ldr	r3, [r7, #16]
 800863a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008640:	4b0f      	ldr	r3, [pc, #60]	; (8008680 <xTaskPriorityDisinherit+0xd4>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	429a      	cmp	r2, r3
 8008646:	d903      	bls.n	8008650 <xTaskPriorityDisinherit+0xa4>
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800864c:	4a0c      	ldr	r2, [pc, #48]	; (8008680 <xTaskPriorityDisinherit+0xd4>)
 800864e:	6013      	str	r3, [r2, #0]
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008654:	4613      	mov	r3, r2
 8008656:	009b      	lsls	r3, r3, #2
 8008658:	4413      	add	r3, r2
 800865a:	009b      	lsls	r3, r3, #2
 800865c:	4a09      	ldr	r2, [pc, #36]	; (8008684 <xTaskPriorityDisinherit+0xd8>)
 800865e:	441a      	add	r2, r3
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	3304      	adds	r3, #4
 8008664:	4619      	mov	r1, r3
 8008666:	4610      	mov	r0, r2
 8008668:	f7fe f93d 	bl	80068e6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800866c:	2301      	movs	r3, #1
 800866e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008670:	697b      	ldr	r3, [r7, #20]
	}
 8008672:	4618      	mov	r0, r3
 8008674:	3718      	adds	r7, #24
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}
 800867a:	bf00      	nop
 800867c:	20001160 	.word	0x20001160
 8008680:	2000163c 	.word	0x2000163c
 8008684:	20001164 	.word	0x20001164

08008688 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008688:	b580      	push	{r7, lr}
 800868a:	b088      	sub	sp, #32
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
 8008690:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008696:	2301      	movs	r3, #1
 8008698:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d06f      	beq.n	8008780 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80086a0:	69bb      	ldr	r3, [r7, #24]
 80086a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d10a      	bne.n	80086be <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80086a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ac:	f383 8811 	msr	BASEPRI, r3
 80086b0:	f3bf 8f6f 	isb	sy
 80086b4:	f3bf 8f4f 	dsb	sy
 80086b8:	60fb      	str	r3, [r7, #12]
}
 80086ba:	bf00      	nop
 80086bc:	e7fe      	b.n	80086bc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80086be:	69bb      	ldr	r3, [r7, #24]
 80086c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086c2:	683a      	ldr	r2, [r7, #0]
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d902      	bls.n	80086ce <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	61fb      	str	r3, [r7, #28]
 80086cc:	e002      	b.n	80086d4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80086ce:	69bb      	ldr	r3, [r7, #24]
 80086d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086d2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80086d4:	69bb      	ldr	r3, [r7, #24]
 80086d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086d8:	69fa      	ldr	r2, [r7, #28]
 80086da:	429a      	cmp	r2, r3
 80086dc:	d050      	beq.n	8008780 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80086de:	69bb      	ldr	r3, [r7, #24]
 80086e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086e2:	697a      	ldr	r2, [r7, #20]
 80086e4:	429a      	cmp	r2, r3
 80086e6:	d14b      	bne.n	8008780 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80086e8:	4b27      	ldr	r3, [pc, #156]	; (8008788 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	69ba      	ldr	r2, [r7, #24]
 80086ee:	429a      	cmp	r2, r3
 80086f0:	d10a      	bne.n	8008708 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80086f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f6:	f383 8811 	msr	BASEPRI, r3
 80086fa:	f3bf 8f6f 	isb	sy
 80086fe:	f3bf 8f4f 	dsb	sy
 8008702:	60bb      	str	r3, [r7, #8]
}
 8008704:	bf00      	nop
 8008706:	e7fe      	b.n	8008706 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008708:	69bb      	ldr	r3, [r7, #24]
 800870a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800870c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800870e:	69bb      	ldr	r3, [r7, #24]
 8008710:	69fa      	ldr	r2, [r7, #28]
 8008712:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008714:	69bb      	ldr	r3, [r7, #24]
 8008716:	699b      	ldr	r3, [r3, #24]
 8008718:	2b00      	cmp	r3, #0
 800871a:	db04      	blt.n	8008726 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800871c:	69fb      	ldr	r3, [r7, #28]
 800871e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008722:	69bb      	ldr	r3, [r7, #24]
 8008724:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008726:	69bb      	ldr	r3, [r7, #24]
 8008728:	6959      	ldr	r1, [r3, #20]
 800872a:	693a      	ldr	r2, [r7, #16]
 800872c:	4613      	mov	r3, r2
 800872e:	009b      	lsls	r3, r3, #2
 8008730:	4413      	add	r3, r2
 8008732:	009b      	lsls	r3, r3, #2
 8008734:	4a15      	ldr	r2, [pc, #84]	; (800878c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008736:	4413      	add	r3, r2
 8008738:	4299      	cmp	r1, r3
 800873a:	d101      	bne.n	8008740 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800873c:	2301      	movs	r3, #1
 800873e:	e000      	b.n	8008742 <vTaskPriorityDisinheritAfterTimeout+0xba>
 8008740:	2300      	movs	r3, #0
 8008742:	2b00      	cmp	r3, #0
 8008744:	d01c      	beq.n	8008780 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008746:	69bb      	ldr	r3, [r7, #24]
 8008748:	3304      	adds	r3, #4
 800874a:	4618      	mov	r0, r3
 800874c:	f7fe f926 	bl	800699c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008750:	69bb      	ldr	r3, [r7, #24]
 8008752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008754:	4b0e      	ldr	r3, [pc, #56]	; (8008790 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	429a      	cmp	r2, r3
 800875a:	d903      	bls.n	8008764 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 800875c:	69bb      	ldr	r3, [r7, #24]
 800875e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008760:	4a0b      	ldr	r2, [pc, #44]	; (8008790 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8008762:	6013      	str	r3, [r2, #0]
 8008764:	69bb      	ldr	r3, [r7, #24]
 8008766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008768:	4613      	mov	r3, r2
 800876a:	009b      	lsls	r3, r3, #2
 800876c:	4413      	add	r3, r2
 800876e:	009b      	lsls	r3, r3, #2
 8008770:	4a06      	ldr	r2, [pc, #24]	; (800878c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008772:	441a      	add	r2, r3
 8008774:	69bb      	ldr	r3, [r7, #24]
 8008776:	3304      	adds	r3, #4
 8008778:	4619      	mov	r1, r3
 800877a:	4610      	mov	r0, r2
 800877c:	f7fe f8b3 	bl	80068e6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008780:	bf00      	nop
 8008782:	3720      	adds	r7, #32
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}
 8008788:	20001160 	.word	0x20001160
 800878c:	20001164 	.word	0x20001164
 8008790:	2000163c 	.word	0x2000163c

08008794 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8008794:	b480      	push	{r7}
 8008796:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008798:	4b07      	ldr	r3, [pc, #28]	; (80087b8 <pvTaskIncrementMutexHeldCount+0x24>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d004      	beq.n	80087aa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80087a0:	4b05      	ldr	r3, [pc, #20]	; (80087b8 <pvTaskIncrementMutexHeldCount+0x24>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80087a6:	3201      	adds	r2, #1
 80087a8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80087aa:	4b03      	ldr	r3, [pc, #12]	; (80087b8 <pvTaskIncrementMutexHeldCount+0x24>)
 80087ac:	681b      	ldr	r3, [r3, #0]
	}
 80087ae:	4618      	mov	r0, r3
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bc80      	pop	{r7}
 80087b4:	4770      	bx	lr
 80087b6:	bf00      	nop
 80087b8:	20001160 	.word	0x20001160

080087bc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b084      	sub	sp, #16
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80087c6:	4b21      	ldr	r3, [pc, #132]	; (800884c <prvAddCurrentTaskToDelayedList+0x90>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80087cc:	4b20      	ldr	r3, [pc, #128]	; (8008850 <prvAddCurrentTaskToDelayedList+0x94>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	3304      	adds	r3, #4
 80087d2:	4618      	mov	r0, r3
 80087d4:	f7fe f8e2 	bl	800699c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80087de:	d10a      	bne.n	80087f6 <prvAddCurrentTaskToDelayedList+0x3a>
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d007      	beq.n	80087f6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80087e6:	4b1a      	ldr	r3, [pc, #104]	; (8008850 <prvAddCurrentTaskToDelayedList+0x94>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	3304      	adds	r3, #4
 80087ec:	4619      	mov	r1, r3
 80087ee:	4819      	ldr	r0, [pc, #100]	; (8008854 <prvAddCurrentTaskToDelayedList+0x98>)
 80087f0:	f7fe f879 	bl	80068e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80087f4:	e026      	b.n	8008844 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80087f6:	68fa      	ldr	r2, [r7, #12]
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	4413      	add	r3, r2
 80087fc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80087fe:	4b14      	ldr	r3, [pc, #80]	; (8008850 <prvAddCurrentTaskToDelayedList+0x94>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	68ba      	ldr	r2, [r7, #8]
 8008804:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008806:	68ba      	ldr	r2, [r7, #8]
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	429a      	cmp	r2, r3
 800880c:	d209      	bcs.n	8008822 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800880e:	4b12      	ldr	r3, [pc, #72]	; (8008858 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008810:	681a      	ldr	r2, [r3, #0]
 8008812:	4b0f      	ldr	r3, [pc, #60]	; (8008850 <prvAddCurrentTaskToDelayedList+0x94>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	3304      	adds	r3, #4
 8008818:	4619      	mov	r1, r3
 800881a:	4610      	mov	r0, r2
 800881c:	f7fe f886 	bl	800692c <vListInsert>
}
 8008820:	e010      	b.n	8008844 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008822:	4b0e      	ldr	r3, [pc, #56]	; (800885c <prvAddCurrentTaskToDelayedList+0xa0>)
 8008824:	681a      	ldr	r2, [r3, #0]
 8008826:	4b0a      	ldr	r3, [pc, #40]	; (8008850 <prvAddCurrentTaskToDelayedList+0x94>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	3304      	adds	r3, #4
 800882c:	4619      	mov	r1, r3
 800882e:	4610      	mov	r0, r2
 8008830:	f7fe f87c 	bl	800692c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008834:	4b0a      	ldr	r3, [pc, #40]	; (8008860 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	68ba      	ldr	r2, [r7, #8]
 800883a:	429a      	cmp	r2, r3
 800883c:	d202      	bcs.n	8008844 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800883e:	4a08      	ldr	r2, [pc, #32]	; (8008860 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	6013      	str	r3, [r2, #0]
}
 8008844:	bf00      	nop
 8008846:	3710      	adds	r7, #16
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}
 800884c:	20001638 	.word	0x20001638
 8008850:	20001160 	.word	0x20001160
 8008854:	20001620 	.word	0x20001620
 8008858:	200015f0 	.word	0x200015f0
 800885c:	200015ec 	.word	0x200015ec
 8008860:	20001654 	.word	0x20001654

08008864 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b08a      	sub	sp, #40	; 0x28
 8008868:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800886a:	2300      	movs	r3, #0
 800886c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800886e:	f000 facb 	bl	8008e08 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008872:	4b1c      	ldr	r3, [pc, #112]	; (80088e4 <xTimerCreateTimerTask+0x80>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d021      	beq.n	80088be <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800887a:	2300      	movs	r3, #0
 800887c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800887e:	2300      	movs	r3, #0
 8008880:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008882:	1d3a      	adds	r2, r7, #4
 8008884:	f107 0108 	add.w	r1, r7, #8
 8008888:	f107 030c 	add.w	r3, r7, #12
 800888c:	4618      	mov	r0, r3
 800888e:	f7fd ffe5 	bl	800685c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008892:	6879      	ldr	r1, [r7, #4]
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	68fa      	ldr	r2, [r7, #12]
 8008898:	9202      	str	r2, [sp, #8]
 800889a:	9301      	str	r3, [sp, #4]
 800889c:	2302      	movs	r3, #2
 800889e:	9300      	str	r3, [sp, #0]
 80088a0:	2300      	movs	r3, #0
 80088a2:	460a      	mov	r2, r1
 80088a4:	4910      	ldr	r1, [pc, #64]	; (80088e8 <xTimerCreateTimerTask+0x84>)
 80088a6:	4811      	ldr	r0, [pc, #68]	; (80088ec <xTimerCreateTimerTask+0x88>)
 80088a8:	f7fe ffa0 	bl	80077ec <xTaskCreateStatic>
 80088ac:	4603      	mov	r3, r0
 80088ae:	4a10      	ldr	r2, [pc, #64]	; (80088f0 <xTimerCreateTimerTask+0x8c>)
 80088b0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80088b2:	4b0f      	ldr	r3, [pc, #60]	; (80088f0 <xTimerCreateTimerTask+0x8c>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d001      	beq.n	80088be <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80088ba:	2301      	movs	r3, #1
 80088bc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d10a      	bne.n	80088da <xTimerCreateTimerTask+0x76>
	__asm volatile
 80088c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c8:	f383 8811 	msr	BASEPRI, r3
 80088cc:	f3bf 8f6f 	isb	sy
 80088d0:	f3bf 8f4f 	dsb	sy
 80088d4:	613b      	str	r3, [r7, #16]
}
 80088d6:	bf00      	nop
 80088d8:	e7fe      	b.n	80088d8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80088da:	697b      	ldr	r3, [r7, #20]
}
 80088dc:	4618      	mov	r0, r3
 80088de:	3718      	adds	r7, #24
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}
 80088e4:	20001690 	.word	0x20001690
 80088e8:	0800a4f8 	.word	0x0800a4f8
 80088ec:	08008a11 	.word	0x08008a11
 80088f0:	20001694 	.word	0x20001694

080088f4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b08a      	sub	sp, #40	; 0x28
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	60f8      	str	r0, [r7, #12]
 80088fc:	60b9      	str	r1, [r7, #8]
 80088fe:	607a      	str	r2, [r7, #4]
 8008900:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008902:	2300      	movs	r3, #0
 8008904:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d10a      	bne.n	8008922 <xTimerGenericCommand+0x2e>
	__asm volatile
 800890c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008910:	f383 8811 	msr	BASEPRI, r3
 8008914:	f3bf 8f6f 	isb	sy
 8008918:	f3bf 8f4f 	dsb	sy
 800891c:	623b      	str	r3, [r7, #32]
}
 800891e:	bf00      	nop
 8008920:	e7fe      	b.n	8008920 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008922:	4b1a      	ldr	r3, [pc, #104]	; (800898c <xTimerGenericCommand+0x98>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d02a      	beq.n	8008980 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	2b05      	cmp	r3, #5
 800893a:	dc18      	bgt.n	800896e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800893c:	f7ff fdaa 	bl	8008494 <xTaskGetSchedulerState>
 8008940:	4603      	mov	r3, r0
 8008942:	2b02      	cmp	r3, #2
 8008944:	d109      	bne.n	800895a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008946:	4b11      	ldr	r3, [pc, #68]	; (800898c <xTimerGenericCommand+0x98>)
 8008948:	6818      	ldr	r0, [r3, #0]
 800894a:	f107 0110 	add.w	r1, r7, #16
 800894e:	2300      	movs	r3, #0
 8008950:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008952:	f7fe fa45 	bl	8006de0 <xQueueGenericSend>
 8008956:	6278      	str	r0, [r7, #36]	; 0x24
 8008958:	e012      	b.n	8008980 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800895a:	4b0c      	ldr	r3, [pc, #48]	; (800898c <xTimerGenericCommand+0x98>)
 800895c:	6818      	ldr	r0, [r3, #0]
 800895e:	f107 0110 	add.w	r1, r7, #16
 8008962:	2300      	movs	r3, #0
 8008964:	2200      	movs	r2, #0
 8008966:	f7fe fa3b 	bl	8006de0 <xQueueGenericSend>
 800896a:	6278      	str	r0, [r7, #36]	; 0x24
 800896c:	e008      	b.n	8008980 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800896e:	4b07      	ldr	r3, [pc, #28]	; (800898c <xTimerGenericCommand+0x98>)
 8008970:	6818      	ldr	r0, [r3, #0]
 8008972:	f107 0110 	add.w	r1, r7, #16
 8008976:	2300      	movs	r3, #0
 8008978:	683a      	ldr	r2, [r7, #0]
 800897a:	f7fe fb2f 	bl	8006fdc <xQueueGenericSendFromISR>
 800897e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008982:	4618      	mov	r0, r3
 8008984:	3728      	adds	r7, #40	; 0x28
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}
 800898a:	bf00      	nop
 800898c:	20001690 	.word	0x20001690

08008990 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b088      	sub	sp, #32
 8008994:	af02      	add	r7, sp, #8
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800899a:	4b1c      	ldr	r3, [pc, #112]	; (8008a0c <prvProcessExpiredTimer+0x7c>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	68db      	ldr	r3, [r3, #12]
 80089a0:	68db      	ldr	r3, [r3, #12]
 80089a2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80089a4:	697b      	ldr	r3, [r7, #20]
 80089a6:	3304      	adds	r3, #4
 80089a8:	4618      	mov	r0, r3
 80089aa:	f7fd fff7 	bl	800699c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	69db      	ldr	r3, [r3, #28]
 80089b2:	2b01      	cmp	r3, #1
 80089b4:	d122      	bne.n	80089fc <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	699a      	ldr	r2, [r3, #24]
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	18d1      	adds	r1, r2, r3
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	683a      	ldr	r2, [r7, #0]
 80089c2:	6978      	ldr	r0, [r7, #20]
 80089c4:	f000 f8c8 	bl	8008b58 <prvInsertTimerInActiveList>
 80089c8:	4603      	mov	r3, r0
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d016      	beq.n	80089fc <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80089ce:	2300      	movs	r3, #0
 80089d0:	9300      	str	r3, [sp, #0]
 80089d2:	2300      	movs	r3, #0
 80089d4:	687a      	ldr	r2, [r7, #4]
 80089d6:	2100      	movs	r1, #0
 80089d8:	6978      	ldr	r0, [r7, #20]
 80089da:	f7ff ff8b 	bl	80088f4 <xTimerGenericCommand>
 80089de:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d10a      	bne.n	80089fc <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80089e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ea:	f383 8811 	msr	BASEPRI, r3
 80089ee:	f3bf 8f6f 	isb	sy
 80089f2:	f3bf 8f4f 	dsb	sy
 80089f6:	60fb      	str	r3, [r7, #12]
}
 80089f8:	bf00      	nop
 80089fa:	e7fe      	b.n	80089fa <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a00:	6978      	ldr	r0, [r7, #20]
 8008a02:	4798      	blx	r3
}
 8008a04:	bf00      	nop
 8008a06:	3718      	adds	r7, #24
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}
 8008a0c:	20001688 	.word	0x20001688

08008a10 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b084      	sub	sp, #16
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008a18:	f107 0308 	add.w	r3, r7, #8
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f000 f857 	bl	8008ad0 <prvGetNextExpireTime>
 8008a22:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	4619      	mov	r1, r3
 8008a28:	68f8      	ldr	r0, [r7, #12]
 8008a2a:	f000 f803 	bl	8008a34 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008a2e:	f000 f8d5 	bl	8008bdc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008a32:	e7f1      	b.n	8008a18 <prvTimerTask+0x8>

08008a34 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b084      	sub	sp, #16
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
 8008a3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008a3e:	f7ff f929 	bl	8007c94 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008a42:	f107 0308 	add.w	r3, r7, #8
 8008a46:	4618      	mov	r0, r3
 8008a48:	f000 f866 	bl	8008b18 <prvSampleTimeNow>
 8008a4c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d130      	bne.n	8008ab6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d10a      	bne.n	8008a70 <prvProcessTimerOrBlockTask+0x3c>
 8008a5a:	687a      	ldr	r2, [r7, #4]
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	429a      	cmp	r2, r3
 8008a60:	d806      	bhi.n	8008a70 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008a62:	f7ff f925 	bl	8007cb0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008a66:	68f9      	ldr	r1, [r7, #12]
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f7ff ff91 	bl	8008990 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008a6e:	e024      	b.n	8008aba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d008      	beq.n	8008a88 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008a76:	4b13      	ldr	r3, [pc, #76]	; (8008ac4 <prvProcessTimerOrBlockTask+0x90>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	bf0c      	ite	eq
 8008a80:	2301      	moveq	r3, #1
 8008a82:	2300      	movne	r3, #0
 8008a84:	b2db      	uxtb	r3, r3
 8008a86:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008a88:	4b0f      	ldr	r3, [pc, #60]	; (8008ac8 <prvProcessTimerOrBlockTask+0x94>)
 8008a8a:	6818      	ldr	r0, [r3, #0]
 8008a8c:	687a      	ldr	r2, [r7, #4]
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	1ad3      	subs	r3, r2, r3
 8008a92:	683a      	ldr	r2, [r7, #0]
 8008a94:	4619      	mov	r1, r3
 8008a96:	f7fe fe75 	bl	8007784 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008a9a:	f7ff f909 	bl	8007cb0 <xTaskResumeAll>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d10a      	bne.n	8008aba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008aa4:	4b09      	ldr	r3, [pc, #36]	; (8008acc <prvProcessTimerOrBlockTask+0x98>)
 8008aa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008aaa:	601a      	str	r2, [r3, #0]
 8008aac:	f3bf 8f4f 	dsb	sy
 8008ab0:	f3bf 8f6f 	isb	sy
}
 8008ab4:	e001      	b.n	8008aba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008ab6:	f7ff f8fb 	bl	8007cb0 <xTaskResumeAll>
}
 8008aba:	bf00      	nop
 8008abc:	3710      	adds	r7, #16
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}
 8008ac2:	bf00      	nop
 8008ac4:	2000168c 	.word	0x2000168c
 8008ac8:	20001690 	.word	0x20001690
 8008acc:	e000ed04 	.word	0xe000ed04

08008ad0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b085      	sub	sp, #20
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008ad8:	4b0e      	ldr	r3, [pc, #56]	; (8008b14 <prvGetNextExpireTime+0x44>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	bf0c      	ite	eq
 8008ae2:	2301      	moveq	r3, #1
 8008ae4:	2300      	movne	r3, #0
 8008ae6:	b2db      	uxtb	r3, r3
 8008ae8:	461a      	mov	r2, r3
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d105      	bne.n	8008b02 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008af6:	4b07      	ldr	r3, [pc, #28]	; (8008b14 <prvGetNextExpireTime+0x44>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	68db      	ldr	r3, [r3, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	60fb      	str	r3, [r7, #12]
 8008b00:	e001      	b.n	8008b06 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008b02:	2300      	movs	r3, #0
 8008b04:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008b06:	68fb      	ldr	r3, [r7, #12]
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3714      	adds	r7, #20
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bc80      	pop	{r7}
 8008b10:	4770      	bx	lr
 8008b12:	bf00      	nop
 8008b14:	20001688 	.word	0x20001688

08008b18 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b084      	sub	sp, #16
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008b20:	f7ff f964 	bl	8007dec <xTaskGetTickCount>
 8008b24:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008b26:	4b0b      	ldr	r3, [pc, #44]	; (8008b54 <prvSampleTimeNow+0x3c>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	68fa      	ldr	r2, [r7, #12]
 8008b2c:	429a      	cmp	r2, r3
 8008b2e:	d205      	bcs.n	8008b3c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008b30:	f000 f908 	bl	8008d44 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2201      	movs	r2, #1
 8008b38:	601a      	str	r2, [r3, #0]
 8008b3a:	e002      	b.n	8008b42 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008b42:	4a04      	ldr	r2, [pc, #16]	; (8008b54 <prvSampleTimeNow+0x3c>)
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008b48:	68fb      	ldr	r3, [r7, #12]
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3710      	adds	r7, #16
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}
 8008b52:	bf00      	nop
 8008b54:	20001698 	.word	0x20001698

08008b58 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b086      	sub	sp, #24
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	60f8      	str	r0, [r7, #12]
 8008b60:	60b9      	str	r1, [r7, #8]
 8008b62:	607a      	str	r2, [r7, #4]
 8008b64:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008b66:	2300      	movs	r3, #0
 8008b68:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	68ba      	ldr	r2, [r7, #8]
 8008b6e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	68fa      	ldr	r2, [r7, #12]
 8008b74:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008b76:	68ba      	ldr	r2, [r7, #8]
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	429a      	cmp	r2, r3
 8008b7c:	d812      	bhi.n	8008ba4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b7e:	687a      	ldr	r2, [r7, #4]
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	1ad2      	subs	r2, r2, r3
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	699b      	ldr	r3, [r3, #24]
 8008b88:	429a      	cmp	r2, r3
 8008b8a:	d302      	bcc.n	8008b92 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	617b      	str	r3, [r7, #20]
 8008b90:	e01b      	b.n	8008bca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008b92:	4b10      	ldr	r3, [pc, #64]	; (8008bd4 <prvInsertTimerInActiveList+0x7c>)
 8008b94:	681a      	ldr	r2, [r3, #0]
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	3304      	adds	r3, #4
 8008b9a:	4619      	mov	r1, r3
 8008b9c:	4610      	mov	r0, r2
 8008b9e:	f7fd fec5 	bl	800692c <vListInsert>
 8008ba2:	e012      	b.n	8008bca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008ba4:	687a      	ldr	r2, [r7, #4]
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	429a      	cmp	r2, r3
 8008baa:	d206      	bcs.n	8008bba <prvInsertTimerInActiveList+0x62>
 8008bac:	68ba      	ldr	r2, [r7, #8]
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	429a      	cmp	r2, r3
 8008bb2:	d302      	bcc.n	8008bba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	617b      	str	r3, [r7, #20]
 8008bb8:	e007      	b.n	8008bca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008bba:	4b07      	ldr	r3, [pc, #28]	; (8008bd8 <prvInsertTimerInActiveList+0x80>)
 8008bbc:	681a      	ldr	r2, [r3, #0]
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	3304      	adds	r3, #4
 8008bc2:	4619      	mov	r1, r3
 8008bc4:	4610      	mov	r0, r2
 8008bc6:	f7fd feb1 	bl	800692c <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008bca:	697b      	ldr	r3, [r7, #20]
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3718      	adds	r7, #24
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}
 8008bd4:	2000168c 	.word	0x2000168c
 8008bd8:	20001688 	.word	0x20001688

08008bdc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b08e      	sub	sp, #56	; 0x38
 8008be0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008be2:	e09d      	b.n	8008d20 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	da18      	bge.n	8008c1c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008bea:	1d3b      	adds	r3, r7, #4
 8008bec:	3304      	adds	r3, #4
 8008bee:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d10a      	bne.n	8008c0c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bfa:	f383 8811 	msr	BASEPRI, r3
 8008bfe:	f3bf 8f6f 	isb	sy
 8008c02:	f3bf 8f4f 	dsb	sy
 8008c06:	61fb      	str	r3, [r7, #28]
}
 8008c08:	bf00      	nop
 8008c0a:	e7fe      	b.n	8008c0a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c12:	6850      	ldr	r0, [r2, #4]
 8008c14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c16:	6892      	ldr	r2, [r2, #8]
 8008c18:	4611      	mov	r1, r2
 8008c1a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	db7d      	blt.n	8008d1e <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c28:	695b      	ldr	r3, [r3, #20]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d004      	beq.n	8008c38 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c30:	3304      	adds	r3, #4
 8008c32:	4618      	mov	r0, r3
 8008c34:	f7fd feb2 	bl	800699c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008c38:	463b      	mov	r3, r7
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f7ff ff6c 	bl	8008b18 <prvSampleTimeNow>
 8008c40:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2b09      	cmp	r3, #9
 8008c46:	d86b      	bhi.n	8008d20 <prvProcessReceivedCommands+0x144>
 8008c48:	a201      	add	r2, pc, #4	; (adr r2, 8008c50 <prvProcessReceivedCommands+0x74>)
 8008c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c4e:	bf00      	nop
 8008c50:	08008c79 	.word	0x08008c79
 8008c54:	08008c79 	.word	0x08008c79
 8008c58:	08008c79 	.word	0x08008c79
 8008c5c:	08008d21 	.word	0x08008d21
 8008c60:	08008cd5 	.word	0x08008cd5
 8008c64:	08008d0d 	.word	0x08008d0d
 8008c68:	08008c79 	.word	0x08008c79
 8008c6c:	08008c79 	.word	0x08008c79
 8008c70:	08008d21 	.word	0x08008d21
 8008c74:	08008cd5 	.word	0x08008cd5
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008c78:	68ba      	ldr	r2, [r7, #8]
 8008c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c7c:	699b      	ldr	r3, [r3, #24]
 8008c7e:	18d1      	adds	r1, r2, r3
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c86:	f7ff ff67 	bl	8008b58 <prvInsertTimerInActiveList>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d047      	beq.n	8008d20 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c96:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c9a:	69db      	ldr	r3, [r3, #28]
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d13f      	bne.n	8008d20 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008ca0:	68ba      	ldr	r2, [r7, #8]
 8008ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ca4:	699b      	ldr	r3, [r3, #24]
 8008ca6:	441a      	add	r2, r3
 8008ca8:	2300      	movs	r3, #0
 8008caa:	9300      	str	r3, [sp, #0]
 8008cac:	2300      	movs	r3, #0
 8008cae:	2100      	movs	r1, #0
 8008cb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008cb2:	f7ff fe1f 	bl	80088f4 <xTimerGenericCommand>
 8008cb6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008cb8:	6a3b      	ldr	r3, [r7, #32]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d130      	bne.n	8008d20 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8008cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cc2:	f383 8811 	msr	BASEPRI, r3
 8008cc6:	f3bf 8f6f 	isb	sy
 8008cca:	f3bf 8f4f 	dsb	sy
 8008cce:	61bb      	str	r3, [r7, #24]
}
 8008cd0:	bf00      	nop
 8008cd2:	e7fe      	b.n	8008cd2 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008cd4:	68ba      	ldr	r2, [r7, #8]
 8008cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cd8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cdc:	699b      	ldr	r3, [r3, #24]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d10a      	bne.n	8008cf8 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8008ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce6:	f383 8811 	msr	BASEPRI, r3
 8008cea:	f3bf 8f6f 	isb	sy
 8008cee:	f3bf 8f4f 	dsb	sy
 8008cf2:	617b      	str	r3, [r7, #20]
}
 8008cf4:	bf00      	nop
 8008cf6:	e7fe      	b.n	8008cf6 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cfa:	699a      	ldr	r2, [r3, #24]
 8008cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cfe:	18d1      	adds	r1, r2, r3
 8008d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d06:	f7ff ff27 	bl	8008b58 <prvInsertTimerInActiveList>
					break;
 8008d0a:	e009      	b.n	8008d20 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d0e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d104      	bne.n	8008d20 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8008d16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d18:	f000 fb6c 	bl	80093f4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008d1c:	e000      	b.n	8008d20 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008d1e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008d20:	4b07      	ldr	r3, [pc, #28]	; (8008d40 <prvProcessReceivedCommands+0x164>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	1d39      	adds	r1, r7, #4
 8008d26:	2200      	movs	r2, #0
 8008d28:	4618      	mov	r0, r3
 8008d2a:	f7fe f9ef 	bl	800710c <xQueueReceive>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	f47f af57 	bne.w	8008be4 <prvProcessReceivedCommands+0x8>
	}
}
 8008d36:	bf00      	nop
 8008d38:	bf00      	nop
 8008d3a:	3730      	adds	r7, #48	; 0x30
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}
 8008d40:	20001690 	.word	0x20001690

08008d44 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b088      	sub	sp, #32
 8008d48:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008d4a:	e045      	b.n	8008dd8 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008d4c:	4b2c      	ldr	r3, [pc, #176]	; (8008e00 <prvSwitchTimerLists+0xbc>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	68db      	ldr	r3, [r3, #12]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008d56:	4b2a      	ldr	r3, [pc, #168]	; (8008e00 <prvSwitchTimerLists+0xbc>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	68db      	ldr	r3, [r3, #12]
 8008d5c:	68db      	ldr	r3, [r3, #12]
 8008d5e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	3304      	adds	r3, #4
 8008d64:	4618      	mov	r0, r3
 8008d66:	f7fd fe19 	bl	800699c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d6e:	68f8      	ldr	r0, [r7, #12]
 8008d70:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	69db      	ldr	r3, [r3, #28]
 8008d76:	2b01      	cmp	r3, #1
 8008d78:	d12e      	bne.n	8008dd8 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	699b      	ldr	r3, [r3, #24]
 8008d7e:	693a      	ldr	r2, [r7, #16]
 8008d80:	4413      	add	r3, r2
 8008d82:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008d84:	68ba      	ldr	r2, [r7, #8]
 8008d86:	693b      	ldr	r3, [r7, #16]
 8008d88:	429a      	cmp	r2, r3
 8008d8a:	d90e      	bls.n	8008daa <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	68ba      	ldr	r2, [r7, #8]
 8008d90:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	68fa      	ldr	r2, [r7, #12]
 8008d96:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008d98:	4b19      	ldr	r3, [pc, #100]	; (8008e00 <prvSwitchTimerLists+0xbc>)
 8008d9a:	681a      	ldr	r2, [r3, #0]
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	3304      	adds	r3, #4
 8008da0:	4619      	mov	r1, r3
 8008da2:	4610      	mov	r0, r2
 8008da4:	f7fd fdc2 	bl	800692c <vListInsert>
 8008da8:	e016      	b.n	8008dd8 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008daa:	2300      	movs	r3, #0
 8008dac:	9300      	str	r3, [sp, #0]
 8008dae:	2300      	movs	r3, #0
 8008db0:	693a      	ldr	r2, [r7, #16]
 8008db2:	2100      	movs	r1, #0
 8008db4:	68f8      	ldr	r0, [r7, #12]
 8008db6:	f7ff fd9d 	bl	80088f4 <xTimerGenericCommand>
 8008dba:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d10a      	bne.n	8008dd8 <prvSwitchTimerLists+0x94>
	__asm volatile
 8008dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dc6:	f383 8811 	msr	BASEPRI, r3
 8008dca:	f3bf 8f6f 	isb	sy
 8008dce:	f3bf 8f4f 	dsb	sy
 8008dd2:	603b      	str	r3, [r7, #0]
}
 8008dd4:	bf00      	nop
 8008dd6:	e7fe      	b.n	8008dd6 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008dd8:	4b09      	ldr	r3, [pc, #36]	; (8008e00 <prvSwitchTimerLists+0xbc>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d1b4      	bne.n	8008d4c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008de2:	4b07      	ldr	r3, [pc, #28]	; (8008e00 <prvSwitchTimerLists+0xbc>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008de8:	4b06      	ldr	r3, [pc, #24]	; (8008e04 <prvSwitchTimerLists+0xc0>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4a04      	ldr	r2, [pc, #16]	; (8008e00 <prvSwitchTimerLists+0xbc>)
 8008dee:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008df0:	4a04      	ldr	r2, [pc, #16]	; (8008e04 <prvSwitchTimerLists+0xc0>)
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	6013      	str	r3, [r2, #0]
}
 8008df6:	bf00      	nop
 8008df8:	3718      	adds	r7, #24
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}
 8008dfe:	bf00      	nop
 8008e00:	20001688 	.word	0x20001688
 8008e04:	2000168c 	.word	0x2000168c

08008e08 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b082      	sub	sp, #8
 8008e0c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008e0e:	f000 f92d 	bl	800906c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008e12:	4b15      	ldr	r3, [pc, #84]	; (8008e68 <prvCheckForValidListAndQueue+0x60>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d120      	bne.n	8008e5c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008e1a:	4814      	ldr	r0, [pc, #80]	; (8008e6c <prvCheckForValidListAndQueue+0x64>)
 8008e1c:	f7fd fd38 	bl	8006890 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008e20:	4813      	ldr	r0, [pc, #76]	; (8008e70 <prvCheckForValidListAndQueue+0x68>)
 8008e22:	f7fd fd35 	bl	8006890 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008e26:	4b13      	ldr	r3, [pc, #76]	; (8008e74 <prvCheckForValidListAndQueue+0x6c>)
 8008e28:	4a10      	ldr	r2, [pc, #64]	; (8008e6c <prvCheckForValidListAndQueue+0x64>)
 8008e2a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008e2c:	4b12      	ldr	r3, [pc, #72]	; (8008e78 <prvCheckForValidListAndQueue+0x70>)
 8008e2e:	4a10      	ldr	r2, [pc, #64]	; (8008e70 <prvCheckForValidListAndQueue+0x68>)
 8008e30:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008e32:	2300      	movs	r3, #0
 8008e34:	9300      	str	r3, [sp, #0]
 8008e36:	4b11      	ldr	r3, [pc, #68]	; (8008e7c <prvCheckForValidListAndQueue+0x74>)
 8008e38:	4a11      	ldr	r2, [pc, #68]	; (8008e80 <prvCheckForValidListAndQueue+0x78>)
 8008e3a:	2110      	movs	r1, #16
 8008e3c:	200a      	movs	r0, #10
 8008e3e:	f7fd fe3f 	bl	8006ac0 <xQueueGenericCreateStatic>
 8008e42:	4603      	mov	r3, r0
 8008e44:	4a08      	ldr	r2, [pc, #32]	; (8008e68 <prvCheckForValidListAndQueue+0x60>)
 8008e46:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008e48:	4b07      	ldr	r3, [pc, #28]	; (8008e68 <prvCheckForValidListAndQueue+0x60>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d005      	beq.n	8008e5c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008e50:	4b05      	ldr	r3, [pc, #20]	; (8008e68 <prvCheckForValidListAndQueue+0x60>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	490b      	ldr	r1, [pc, #44]	; (8008e84 <prvCheckForValidListAndQueue+0x7c>)
 8008e56:	4618      	mov	r0, r3
 8008e58:	f7fe fc6c 	bl	8007734 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008e5c:	f000 f936 	bl	80090cc <vPortExitCritical>
}
 8008e60:	bf00      	nop
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}
 8008e66:	bf00      	nop
 8008e68:	20001690 	.word	0x20001690
 8008e6c:	20001660 	.word	0x20001660
 8008e70:	20001674 	.word	0x20001674
 8008e74:	20001688 	.word	0x20001688
 8008e78:	2000168c 	.word	0x2000168c
 8008e7c:	2000173c 	.word	0x2000173c
 8008e80:	2000169c 	.word	0x2000169c
 8008e84:	0800a500 	.word	0x0800a500

08008e88 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008e88:	b480      	push	{r7}
 8008e8a:	b085      	sub	sp, #20
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	60f8      	str	r0, [r7, #12]
 8008e90:	60b9      	str	r1, [r7, #8]
 8008e92:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	3b04      	subs	r3, #4
 8008e98:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008ea0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	3b04      	subs	r3, #4
 8008ea6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	f023 0201 	bic.w	r2, r3, #1
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	3b04      	subs	r3, #4
 8008eb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008eb8:	4a08      	ldr	r2, [pc, #32]	; (8008edc <pxPortInitialiseStack+0x54>)
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	3b14      	subs	r3, #20
 8008ec2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008ec4:	687a      	ldr	r2, [r7, #4]
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	3b20      	subs	r3, #32
 8008ece:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3714      	adds	r7, #20
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bc80      	pop	{r7}
 8008eda:	4770      	bx	lr
 8008edc:	08008ee1 	.word	0x08008ee1

08008ee0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b085      	sub	sp, #20
 8008ee4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008eea:	4b12      	ldr	r3, [pc, #72]	; (8008f34 <prvTaskExitError+0x54>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ef2:	d00a      	beq.n	8008f0a <prvTaskExitError+0x2a>
	__asm volatile
 8008ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef8:	f383 8811 	msr	BASEPRI, r3
 8008efc:	f3bf 8f6f 	isb	sy
 8008f00:	f3bf 8f4f 	dsb	sy
 8008f04:	60fb      	str	r3, [r7, #12]
}
 8008f06:	bf00      	nop
 8008f08:	e7fe      	b.n	8008f08 <prvTaskExitError+0x28>
	__asm volatile
 8008f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f0e:	f383 8811 	msr	BASEPRI, r3
 8008f12:	f3bf 8f6f 	isb	sy
 8008f16:	f3bf 8f4f 	dsb	sy
 8008f1a:	60bb      	str	r3, [r7, #8]
}
 8008f1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008f1e:	bf00      	nop
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d0fc      	beq.n	8008f20 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008f26:	bf00      	nop
 8008f28:	bf00      	nop
 8008f2a:	3714      	adds	r7, #20
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bc80      	pop	{r7}
 8008f30:	4770      	bx	lr
 8008f32:	bf00      	nop
 8008f34:	20000010 	.word	0x20000010
	...

08008f40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008f40:	4b07      	ldr	r3, [pc, #28]	; (8008f60 <pxCurrentTCBConst2>)
 8008f42:	6819      	ldr	r1, [r3, #0]
 8008f44:	6808      	ldr	r0, [r1, #0]
 8008f46:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008f4a:	f380 8809 	msr	PSP, r0
 8008f4e:	f3bf 8f6f 	isb	sy
 8008f52:	f04f 0000 	mov.w	r0, #0
 8008f56:	f380 8811 	msr	BASEPRI, r0
 8008f5a:	f04e 0e0d 	orr.w	lr, lr, #13
 8008f5e:	4770      	bx	lr

08008f60 <pxCurrentTCBConst2>:
 8008f60:	20001160 	.word	0x20001160
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008f64:	bf00      	nop
 8008f66:	bf00      	nop

08008f68 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008f68:	4806      	ldr	r0, [pc, #24]	; (8008f84 <prvPortStartFirstTask+0x1c>)
 8008f6a:	6800      	ldr	r0, [r0, #0]
 8008f6c:	6800      	ldr	r0, [r0, #0]
 8008f6e:	f380 8808 	msr	MSP, r0
 8008f72:	b662      	cpsie	i
 8008f74:	b661      	cpsie	f
 8008f76:	f3bf 8f4f 	dsb	sy
 8008f7a:	f3bf 8f6f 	isb	sy
 8008f7e:	df00      	svc	0
 8008f80:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008f82:	bf00      	nop
 8008f84:	e000ed08 	.word	0xe000ed08

08008f88 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b084      	sub	sp, #16
 8008f8c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008f8e:	4b32      	ldr	r3, [pc, #200]	; (8009058 <xPortStartScheduler+0xd0>)
 8008f90:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	781b      	ldrb	r3, [r3, #0]
 8008f96:	b2db      	uxtb	r3, r3
 8008f98:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	22ff      	movs	r2, #255	; 0xff
 8008f9e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	781b      	ldrb	r3, [r3, #0]
 8008fa4:	b2db      	uxtb	r3, r3
 8008fa6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008fa8:	78fb      	ldrb	r3, [r7, #3]
 8008faa:	b2db      	uxtb	r3, r3
 8008fac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008fb0:	b2da      	uxtb	r2, r3
 8008fb2:	4b2a      	ldr	r3, [pc, #168]	; (800905c <xPortStartScheduler+0xd4>)
 8008fb4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008fb6:	4b2a      	ldr	r3, [pc, #168]	; (8009060 <xPortStartScheduler+0xd8>)
 8008fb8:	2207      	movs	r2, #7
 8008fba:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008fbc:	e009      	b.n	8008fd2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008fbe:	4b28      	ldr	r3, [pc, #160]	; (8009060 <xPortStartScheduler+0xd8>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	3b01      	subs	r3, #1
 8008fc4:	4a26      	ldr	r2, [pc, #152]	; (8009060 <xPortStartScheduler+0xd8>)
 8008fc6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008fc8:	78fb      	ldrb	r3, [r7, #3]
 8008fca:	b2db      	uxtb	r3, r3
 8008fcc:	005b      	lsls	r3, r3, #1
 8008fce:	b2db      	uxtb	r3, r3
 8008fd0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008fd2:	78fb      	ldrb	r3, [r7, #3]
 8008fd4:	b2db      	uxtb	r3, r3
 8008fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fda:	2b80      	cmp	r3, #128	; 0x80
 8008fdc:	d0ef      	beq.n	8008fbe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008fde:	4b20      	ldr	r3, [pc, #128]	; (8009060 <xPortStartScheduler+0xd8>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f1c3 0307 	rsb	r3, r3, #7
 8008fe6:	2b04      	cmp	r3, #4
 8008fe8:	d00a      	beq.n	8009000 <xPortStartScheduler+0x78>
	__asm volatile
 8008fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fee:	f383 8811 	msr	BASEPRI, r3
 8008ff2:	f3bf 8f6f 	isb	sy
 8008ff6:	f3bf 8f4f 	dsb	sy
 8008ffa:	60bb      	str	r3, [r7, #8]
}
 8008ffc:	bf00      	nop
 8008ffe:	e7fe      	b.n	8008ffe <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009000:	4b17      	ldr	r3, [pc, #92]	; (8009060 <xPortStartScheduler+0xd8>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	021b      	lsls	r3, r3, #8
 8009006:	4a16      	ldr	r2, [pc, #88]	; (8009060 <xPortStartScheduler+0xd8>)
 8009008:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800900a:	4b15      	ldr	r3, [pc, #84]	; (8009060 <xPortStartScheduler+0xd8>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009012:	4a13      	ldr	r2, [pc, #76]	; (8009060 <xPortStartScheduler+0xd8>)
 8009014:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	b2da      	uxtb	r2, r3
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800901e:	4b11      	ldr	r3, [pc, #68]	; (8009064 <xPortStartScheduler+0xdc>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	4a10      	ldr	r2, [pc, #64]	; (8009064 <xPortStartScheduler+0xdc>)
 8009024:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009028:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800902a:	4b0e      	ldr	r3, [pc, #56]	; (8009064 <xPortStartScheduler+0xdc>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	4a0d      	ldr	r2, [pc, #52]	; (8009064 <xPortStartScheduler+0xdc>)
 8009030:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009034:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009036:	f000 f8b9 	bl	80091ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800903a:	4b0b      	ldr	r3, [pc, #44]	; (8009068 <xPortStartScheduler+0xe0>)
 800903c:	2200      	movs	r2, #0
 800903e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009040:	f7ff ff92 	bl	8008f68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009044:	f7fe ff9e 	bl	8007f84 <vTaskSwitchContext>
	prvTaskExitError();
 8009048:	f7ff ff4a 	bl	8008ee0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800904c:	2300      	movs	r3, #0
}
 800904e:	4618      	mov	r0, r3
 8009050:	3710      	adds	r7, #16
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}
 8009056:	bf00      	nop
 8009058:	e000e400 	.word	0xe000e400
 800905c:	2000178c 	.word	0x2000178c
 8009060:	20001790 	.word	0x20001790
 8009064:	e000ed20 	.word	0xe000ed20
 8009068:	20000010 	.word	0x20000010

0800906c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800906c:	b480      	push	{r7}
 800906e:	b083      	sub	sp, #12
 8009070:	af00      	add	r7, sp, #0
	__asm volatile
 8009072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009076:	f383 8811 	msr	BASEPRI, r3
 800907a:	f3bf 8f6f 	isb	sy
 800907e:	f3bf 8f4f 	dsb	sy
 8009082:	607b      	str	r3, [r7, #4]
}
 8009084:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009086:	4b0f      	ldr	r3, [pc, #60]	; (80090c4 <vPortEnterCritical+0x58>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	3301      	adds	r3, #1
 800908c:	4a0d      	ldr	r2, [pc, #52]	; (80090c4 <vPortEnterCritical+0x58>)
 800908e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009090:	4b0c      	ldr	r3, [pc, #48]	; (80090c4 <vPortEnterCritical+0x58>)
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	2b01      	cmp	r3, #1
 8009096:	d10f      	bne.n	80090b8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009098:	4b0b      	ldr	r3, [pc, #44]	; (80090c8 <vPortEnterCritical+0x5c>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	b2db      	uxtb	r3, r3
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d00a      	beq.n	80090b8 <vPortEnterCritical+0x4c>
	__asm volatile
 80090a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a6:	f383 8811 	msr	BASEPRI, r3
 80090aa:	f3bf 8f6f 	isb	sy
 80090ae:	f3bf 8f4f 	dsb	sy
 80090b2:	603b      	str	r3, [r7, #0]
}
 80090b4:	bf00      	nop
 80090b6:	e7fe      	b.n	80090b6 <vPortEnterCritical+0x4a>
	}
}
 80090b8:	bf00      	nop
 80090ba:	370c      	adds	r7, #12
 80090bc:	46bd      	mov	sp, r7
 80090be:	bc80      	pop	{r7}
 80090c0:	4770      	bx	lr
 80090c2:	bf00      	nop
 80090c4:	20000010 	.word	0x20000010
 80090c8:	e000ed04 	.word	0xe000ed04

080090cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80090cc:	b480      	push	{r7}
 80090ce:	b083      	sub	sp, #12
 80090d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80090d2:	4b11      	ldr	r3, [pc, #68]	; (8009118 <vPortExitCritical+0x4c>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d10a      	bne.n	80090f0 <vPortExitCritical+0x24>
	__asm volatile
 80090da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090de:	f383 8811 	msr	BASEPRI, r3
 80090e2:	f3bf 8f6f 	isb	sy
 80090e6:	f3bf 8f4f 	dsb	sy
 80090ea:	607b      	str	r3, [r7, #4]
}
 80090ec:	bf00      	nop
 80090ee:	e7fe      	b.n	80090ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80090f0:	4b09      	ldr	r3, [pc, #36]	; (8009118 <vPortExitCritical+0x4c>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	3b01      	subs	r3, #1
 80090f6:	4a08      	ldr	r2, [pc, #32]	; (8009118 <vPortExitCritical+0x4c>)
 80090f8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80090fa:	4b07      	ldr	r3, [pc, #28]	; (8009118 <vPortExitCritical+0x4c>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d105      	bne.n	800910e <vPortExitCritical+0x42>
 8009102:	2300      	movs	r3, #0
 8009104:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	f383 8811 	msr	BASEPRI, r3
}
 800910c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800910e:	bf00      	nop
 8009110:	370c      	adds	r7, #12
 8009112:	46bd      	mov	sp, r7
 8009114:	bc80      	pop	{r7}
 8009116:	4770      	bx	lr
 8009118:	20000010 	.word	0x20000010
 800911c:	00000000 	.word	0x00000000

08009120 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009120:	f3ef 8009 	mrs	r0, PSP
 8009124:	f3bf 8f6f 	isb	sy
 8009128:	4b0d      	ldr	r3, [pc, #52]	; (8009160 <pxCurrentTCBConst>)
 800912a:	681a      	ldr	r2, [r3, #0]
 800912c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009130:	6010      	str	r0, [r2, #0]
 8009132:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009136:	f04f 0050 	mov.w	r0, #80	; 0x50
 800913a:	f380 8811 	msr	BASEPRI, r0
 800913e:	f7fe ff21 	bl	8007f84 <vTaskSwitchContext>
 8009142:	f04f 0000 	mov.w	r0, #0
 8009146:	f380 8811 	msr	BASEPRI, r0
 800914a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800914e:	6819      	ldr	r1, [r3, #0]
 8009150:	6808      	ldr	r0, [r1, #0]
 8009152:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009156:	f380 8809 	msr	PSP, r0
 800915a:	f3bf 8f6f 	isb	sy
 800915e:	4770      	bx	lr

08009160 <pxCurrentTCBConst>:
 8009160:	20001160 	.word	0x20001160
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009164:	bf00      	nop
 8009166:	bf00      	nop

08009168 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b082      	sub	sp, #8
 800916c:	af00      	add	r7, sp, #0
	__asm volatile
 800916e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009172:	f383 8811 	msr	BASEPRI, r3
 8009176:	f3bf 8f6f 	isb	sy
 800917a:	f3bf 8f4f 	dsb	sy
 800917e:	607b      	str	r3, [r7, #4]
}
 8009180:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009182:	f7fe fe41 	bl	8007e08 <xTaskIncrementTick>
 8009186:	4603      	mov	r3, r0
 8009188:	2b00      	cmp	r3, #0
 800918a:	d003      	beq.n	8009194 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800918c:	4b06      	ldr	r3, [pc, #24]	; (80091a8 <xPortSysTickHandler+0x40>)
 800918e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009192:	601a      	str	r2, [r3, #0]
 8009194:	2300      	movs	r3, #0
 8009196:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	f383 8811 	msr	BASEPRI, r3
}
 800919e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80091a0:	bf00      	nop
 80091a2:	3708      	adds	r7, #8
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}
 80091a8:	e000ed04 	.word	0xe000ed04

080091ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80091ac:	b480      	push	{r7}
 80091ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80091b0:	4b0a      	ldr	r3, [pc, #40]	; (80091dc <vPortSetupTimerInterrupt+0x30>)
 80091b2:	2200      	movs	r2, #0
 80091b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80091b6:	4b0a      	ldr	r3, [pc, #40]	; (80091e0 <vPortSetupTimerInterrupt+0x34>)
 80091b8:	2200      	movs	r2, #0
 80091ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80091bc:	4b09      	ldr	r3, [pc, #36]	; (80091e4 <vPortSetupTimerInterrupt+0x38>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4a09      	ldr	r2, [pc, #36]	; (80091e8 <vPortSetupTimerInterrupt+0x3c>)
 80091c2:	fba2 2303 	umull	r2, r3, r2, r3
 80091c6:	099b      	lsrs	r3, r3, #6
 80091c8:	4a08      	ldr	r2, [pc, #32]	; (80091ec <vPortSetupTimerInterrupt+0x40>)
 80091ca:	3b01      	subs	r3, #1
 80091cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80091ce:	4b03      	ldr	r3, [pc, #12]	; (80091dc <vPortSetupTimerInterrupt+0x30>)
 80091d0:	2207      	movs	r2, #7
 80091d2:	601a      	str	r2, [r3, #0]
}
 80091d4:	bf00      	nop
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bc80      	pop	{r7}
 80091da:	4770      	bx	lr
 80091dc:	e000e010 	.word	0xe000e010
 80091e0:	e000e018 	.word	0xe000e018
 80091e4:	20000004 	.word	0x20000004
 80091e8:	10624dd3 	.word	0x10624dd3
 80091ec:	e000e014 	.word	0xe000e014

080091f0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80091f0:	b480      	push	{r7}
 80091f2:	b085      	sub	sp, #20
 80091f4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80091f6:	f3ef 8305 	mrs	r3, IPSR
 80091fa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	2b0f      	cmp	r3, #15
 8009200:	d914      	bls.n	800922c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009202:	4a16      	ldr	r2, [pc, #88]	; (800925c <vPortValidateInterruptPriority+0x6c>)
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	4413      	add	r3, r2
 8009208:	781b      	ldrb	r3, [r3, #0]
 800920a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800920c:	4b14      	ldr	r3, [pc, #80]	; (8009260 <vPortValidateInterruptPriority+0x70>)
 800920e:	781b      	ldrb	r3, [r3, #0]
 8009210:	7afa      	ldrb	r2, [r7, #11]
 8009212:	429a      	cmp	r2, r3
 8009214:	d20a      	bcs.n	800922c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800921a:	f383 8811 	msr	BASEPRI, r3
 800921e:	f3bf 8f6f 	isb	sy
 8009222:	f3bf 8f4f 	dsb	sy
 8009226:	607b      	str	r3, [r7, #4]
}
 8009228:	bf00      	nop
 800922a:	e7fe      	b.n	800922a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800922c:	4b0d      	ldr	r3, [pc, #52]	; (8009264 <vPortValidateInterruptPriority+0x74>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009234:	4b0c      	ldr	r3, [pc, #48]	; (8009268 <vPortValidateInterruptPriority+0x78>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	429a      	cmp	r2, r3
 800923a:	d90a      	bls.n	8009252 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800923c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009240:	f383 8811 	msr	BASEPRI, r3
 8009244:	f3bf 8f6f 	isb	sy
 8009248:	f3bf 8f4f 	dsb	sy
 800924c:	603b      	str	r3, [r7, #0]
}
 800924e:	bf00      	nop
 8009250:	e7fe      	b.n	8009250 <vPortValidateInterruptPriority+0x60>
	}
 8009252:	bf00      	nop
 8009254:	3714      	adds	r7, #20
 8009256:	46bd      	mov	sp, r7
 8009258:	bc80      	pop	{r7}
 800925a:	4770      	bx	lr
 800925c:	e000e3f0 	.word	0xe000e3f0
 8009260:	2000178c 	.word	0x2000178c
 8009264:	e000ed0c 	.word	0xe000ed0c
 8009268:	20001790 	.word	0x20001790

0800926c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b08a      	sub	sp, #40	; 0x28
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009274:	2300      	movs	r3, #0
 8009276:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009278:	f7fe fd0c 	bl	8007c94 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800927c:	4b58      	ldr	r3, [pc, #352]	; (80093e0 <pvPortMalloc+0x174>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d101      	bne.n	8009288 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009284:	f000 f910 	bl	80094a8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009288:	4b56      	ldr	r3, [pc, #344]	; (80093e4 <pvPortMalloc+0x178>)
 800928a:	681a      	ldr	r2, [r3, #0]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	4013      	ands	r3, r2
 8009290:	2b00      	cmp	r3, #0
 8009292:	f040 808e 	bne.w	80093b2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d01d      	beq.n	80092d8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800929c:	2208      	movs	r2, #8
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	4413      	add	r3, r2
 80092a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f003 0307 	and.w	r3, r3, #7
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d014      	beq.n	80092d8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f023 0307 	bic.w	r3, r3, #7
 80092b4:	3308      	adds	r3, #8
 80092b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f003 0307 	and.w	r3, r3, #7
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d00a      	beq.n	80092d8 <pvPortMalloc+0x6c>
	__asm volatile
 80092c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c6:	f383 8811 	msr	BASEPRI, r3
 80092ca:	f3bf 8f6f 	isb	sy
 80092ce:	f3bf 8f4f 	dsb	sy
 80092d2:	617b      	str	r3, [r7, #20]
}
 80092d4:	bf00      	nop
 80092d6:	e7fe      	b.n	80092d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d069      	beq.n	80093b2 <pvPortMalloc+0x146>
 80092de:	4b42      	ldr	r3, [pc, #264]	; (80093e8 <pvPortMalloc+0x17c>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	687a      	ldr	r2, [r7, #4]
 80092e4:	429a      	cmp	r2, r3
 80092e6:	d864      	bhi.n	80093b2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80092e8:	4b40      	ldr	r3, [pc, #256]	; (80093ec <pvPortMalloc+0x180>)
 80092ea:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80092ec:	4b3f      	ldr	r3, [pc, #252]	; (80093ec <pvPortMalloc+0x180>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80092f2:	e004      	b.n	80092fe <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80092f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092f6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80092f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80092fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009300:	685b      	ldr	r3, [r3, #4]
 8009302:	687a      	ldr	r2, [r7, #4]
 8009304:	429a      	cmp	r2, r3
 8009306:	d903      	bls.n	8009310 <pvPortMalloc+0xa4>
 8009308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d1f1      	bne.n	80092f4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009310:	4b33      	ldr	r3, [pc, #204]	; (80093e0 <pvPortMalloc+0x174>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009316:	429a      	cmp	r2, r3
 8009318:	d04b      	beq.n	80093b2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800931a:	6a3b      	ldr	r3, [r7, #32]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	2208      	movs	r2, #8
 8009320:	4413      	add	r3, r2
 8009322:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009326:	681a      	ldr	r2, [r3, #0]
 8009328:	6a3b      	ldr	r3, [r7, #32]
 800932a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800932c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800932e:	685a      	ldr	r2, [r3, #4]
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	1ad2      	subs	r2, r2, r3
 8009334:	2308      	movs	r3, #8
 8009336:	005b      	lsls	r3, r3, #1
 8009338:	429a      	cmp	r2, r3
 800933a:	d91f      	bls.n	800937c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800933c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	4413      	add	r3, r2
 8009342:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009344:	69bb      	ldr	r3, [r7, #24]
 8009346:	f003 0307 	and.w	r3, r3, #7
 800934a:	2b00      	cmp	r3, #0
 800934c:	d00a      	beq.n	8009364 <pvPortMalloc+0xf8>
	__asm volatile
 800934e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009352:	f383 8811 	msr	BASEPRI, r3
 8009356:	f3bf 8f6f 	isb	sy
 800935a:	f3bf 8f4f 	dsb	sy
 800935e:	613b      	str	r3, [r7, #16]
}
 8009360:	bf00      	nop
 8009362:	e7fe      	b.n	8009362 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009366:	685a      	ldr	r2, [r3, #4]
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	1ad2      	subs	r2, r2, r3
 800936c:	69bb      	ldr	r3, [r7, #24]
 800936e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009372:	687a      	ldr	r2, [r7, #4]
 8009374:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009376:	69b8      	ldr	r0, [r7, #24]
 8009378:	f000 f8f8 	bl	800956c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800937c:	4b1a      	ldr	r3, [pc, #104]	; (80093e8 <pvPortMalloc+0x17c>)
 800937e:	681a      	ldr	r2, [r3, #0]
 8009380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009382:	685b      	ldr	r3, [r3, #4]
 8009384:	1ad3      	subs	r3, r2, r3
 8009386:	4a18      	ldr	r2, [pc, #96]	; (80093e8 <pvPortMalloc+0x17c>)
 8009388:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800938a:	4b17      	ldr	r3, [pc, #92]	; (80093e8 <pvPortMalloc+0x17c>)
 800938c:	681a      	ldr	r2, [r3, #0]
 800938e:	4b18      	ldr	r3, [pc, #96]	; (80093f0 <pvPortMalloc+0x184>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	429a      	cmp	r2, r3
 8009394:	d203      	bcs.n	800939e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009396:	4b14      	ldr	r3, [pc, #80]	; (80093e8 <pvPortMalloc+0x17c>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	4a15      	ldr	r2, [pc, #84]	; (80093f0 <pvPortMalloc+0x184>)
 800939c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800939e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a0:	685a      	ldr	r2, [r3, #4]
 80093a2:	4b10      	ldr	r3, [pc, #64]	; (80093e4 <pvPortMalloc+0x178>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	431a      	orrs	r2, r3
 80093a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093aa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80093ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ae:	2200      	movs	r2, #0
 80093b0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80093b2:	f7fe fc7d 	bl	8007cb0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80093b6:	69fb      	ldr	r3, [r7, #28]
 80093b8:	f003 0307 	and.w	r3, r3, #7
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d00a      	beq.n	80093d6 <pvPortMalloc+0x16a>
	__asm volatile
 80093c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c4:	f383 8811 	msr	BASEPRI, r3
 80093c8:	f3bf 8f6f 	isb	sy
 80093cc:	f3bf 8f4f 	dsb	sy
 80093d0:	60fb      	str	r3, [r7, #12]
}
 80093d2:	bf00      	nop
 80093d4:	e7fe      	b.n	80093d4 <pvPortMalloc+0x168>
	return pvReturn;
 80093d6:	69fb      	ldr	r3, [r7, #28]
}
 80093d8:	4618      	mov	r0, r3
 80093da:	3728      	adds	r7, #40	; 0x28
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}
 80093e0:	2000279c 	.word	0x2000279c
 80093e4:	200027a8 	.word	0x200027a8
 80093e8:	200027a0 	.word	0x200027a0
 80093ec:	20002794 	.word	0x20002794
 80093f0:	200027a4 	.word	0x200027a4

080093f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b086      	sub	sp, #24
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d048      	beq.n	8009498 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009406:	2308      	movs	r3, #8
 8009408:	425b      	negs	r3, r3
 800940a:	697a      	ldr	r2, [r7, #20]
 800940c:	4413      	add	r3, r2
 800940e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	685a      	ldr	r2, [r3, #4]
 8009418:	4b21      	ldr	r3, [pc, #132]	; (80094a0 <vPortFree+0xac>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	4013      	ands	r3, r2
 800941e:	2b00      	cmp	r3, #0
 8009420:	d10a      	bne.n	8009438 <vPortFree+0x44>
	__asm volatile
 8009422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009426:	f383 8811 	msr	BASEPRI, r3
 800942a:	f3bf 8f6f 	isb	sy
 800942e:	f3bf 8f4f 	dsb	sy
 8009432:	60fb      	str	r3, [r7, #12]
}
 8009434:	bf00      	nop
 8009436:	e7fe      	b.n	8009436 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009438:	693b      	ldr	r3, [r7, #16]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d00a      	beq.n	8009456 <vPortFree+0x62>
	__asm volatile
 8009440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009444:	f383 8811 	msr	BASEPRI, r3
 8009448:	f3bf 8f6f 	isb	sy
 800944c:	f3bf 8f4f 	dsb	sy
 8009450:	60bb      	str	r3, [r7, #8]
}
 8009452:	bf00      	nop
 8009454:	e7fe      	b.n	8009454 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	685a      	ldr	r2, [r3, #4]
 800945a:	4b11      	ldr	r3, [pc, #68]	; (80094a0 <vPortFree+0xac>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	4013      	ands	r3, r2
 8009460:	2b00      	cmp	r3, #0
 8009462:	d019      	beq.n	8009498 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009464:	693b      	ldr	r3, [r7, #16]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d115      	bne.n	8009498 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800946c:	693b      	ldr	r3, [r7, #16]
 800946e:	685a      	ldr	r2, [r3, #4]
 8009470:	4b0b      	ldr	r3, [pc, #44]	; (80094a0 <vPortFree+0xac>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	43db      	mvns	r3, r3
 8009476:	401a      	ands	r2, r3
 8009478:	693b      	ldr	r3, [r7, #16]
 800947a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800947c:	f7fe fc0a 	bl	8007c94 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009480:	693b      	ldr	r3, [r7, #16]
 8009482:	685a      	ldr	r2, [r3, #4]
 8009484:	4b07      	ldr	r3, [pc, #28]	; (80094a4 <vPortFree+0xb0>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	4413      	add	r3, r2
 800948a:	4a06      	ldr	r2, [pc, #24]	; (80094a4 <vPortFree+0xb0>)
 800948c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800948e:	6938      	ldr	r0, [r7, #16]
 8009490:	f000 f86c 	bl	800956c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009494:	f7fe fc0c 	bl	8007cb0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009498:	bf00      	nop
 800949a:	3718      	adds	r7, #24
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}
 80094a0:	200027a8 	.word	0x200027a8
 80094a4:	200027a0 	.word	0x200027a0

080094a8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80094a8:	b480      	push	{r7}
 80094aa:	b085      	sub	sp, #20
 80094ac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80094ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80094b2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80094b4:	4b27      	ldr	r3, [pc, #156]	; (8009554 <prvHeapInit+0xac>)
 80094b6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	f003 0307 	and.w	r3, r3, #7
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d00c      	beq.n	80094dc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	3307      	adds	r3, #7
 80094c6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	f023 0307 	bic.w	r3, r3, #7
 80094ce:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80094d0:	68ba      	ldr	r2, [r7, #8]
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	1ad3      	subs	r3, r2, r3
 80094d6:	4a1f      	ldr	r2, [pc, #124]	; (8009554 <prvHeapInit+0xac>)
 80094d8:	4413      	add	r3, r2
 80094da:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80094e0:	4a1d      	ldr	r2, [pc, #116]	; (8009558 <prvHeapInit+0xb0>)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80094e6:	4b1c      	ldr	r3, [pc, #112]	; (8009558 <prvHeapInit+0xb0>)
 80094e8:	2200      	movs	r2, #0
 80094ea:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	68ba      	ldr	r2, [r7, #8]
 80094f0:	4413      	add	r3, r2
 80094f2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80094f4:	2208      	movs	r2, #8
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	1a9b      	subs	r3, r3, r2
 80094fa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	f023 0307 	bic.w	r3, r3, #7
 8009502:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	4a15      	ldr	r2, [pc, #84]	; (800955c <prvHeapInit+0xb4>)
 8009508:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800950a:	4b14      	ldr	r3, [pc, #80]	; (800955c <prvHeapInit+0xb4>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	2200      	movs	r2, #0
 8009510:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009512:	4b12      	ldr	r3, [pc, #72]	; (800955c <prvHeapInit+0xb4>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	2200      	movs	r2, #0
 8009518:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	68fa      	ldr	r2, [r7, #12]
 8009522:	1ad2      	subs	r2, r2, r3
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009528:	4b0c      	ldr	r3, [pc, #48]	; (800955c <prvHeapInit+0xb4>)
 800952a:	681a      	ldr	r2, [r3, #0]
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	685b      	ldr	r3, [r3, #4]
 8009534:	4a0a      	ldr	r2, [pc, #40]	; (8009560 <prvHeapInit+0xb8>)
 8009536:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	685b      	ldr	r3, [r3, #4]
 800953c:	4a09      	ldr	r2, [pc, #36]	; (8009564 <prvHeapInit+0xbc>)
 800953e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009540:	4b09      	ldr	r3, [pc, #36]	; (8009568 <prvHeapInit+0xc0>)
 8009542:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009546:	601a      	str	r2, [r3, #0]
}
 8009548:	bf00      	nop
 800954a:	3714      	adds	r7, #20
 800954c:	46bd      	mov	sp, r7
 800954e:	bc80      	pop	{r7}
 8009550:	4770      	bx	lr
 8009552:	bf00      	nop
 8009554:	20001794 	.word	0x20001794
 8009558:	20002794 	.word	0x20002794
 800955c:	2000279c 	.word	0x2000279c
 8009560:	200027a4 	.word	0x200027a4
 8009564:	200027a0 	.word	0x200027a0
 8009568:	200027a8 	.word	0x200027a8

0800956c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800956c:	b480      	push	{r7}
 800956e:	b085      	sub	sp, #20
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009574:	4b27      	ldr	r3, [pc, #156]	; (8009614 <prvInsertBlockIntoFreeList+0xa8>)
 8009576:	60fb      	str	r3, [r7, #12]
 8009578:	e002      	b.n	8009580 <prvInsertBlockIntoFreeList+0x14>
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	60fb      	str	r3, [r7, #12]
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	687a      	ldr	r2, [r7, #4]
 8009586:	429a      	cmp	r2, r3
 8009588:	d8f7      	bhi.n	800957a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	685b      	ldr	r3, [r3, #4]
 8009592:	68ba      	ldr	r2, [r7, #8]
 8009594:	4413      	add	r3, r2
 8009596:	687a      	ldr	r2, [r7, #4]
 8009598:	429a      	cmp	r2, r3
 800959a:	d108      	bne.n	80095ae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	685a      	ldr	r2, [r3, #4]
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	441a      	add	r2, r3
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	685b      	ldr	r3, [r3, #4]
 80095b6:	68ba      	ldr	r2, [r7, #8]
 80095b8:	441a      	add	r2, r3
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	429a      	cmp	r2, r3
 80095c0:	d118      	bne.n	80095f4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	681a      	ldr	r2, [r3, #0]
 80095c6:	4b14      	ldr	r3, [pc, #80]	; (8009618 <prvInsertBlockIntoFreeList+0xac>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	429a      	cmp	r2, r3
 80095cc:	d00d      	beq.n	80095ea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	685a      	ldr	r2, [r3, #4]
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	685b      	ldr	r3, [r3, #4]
 80095d8:	441a      	add	r2, r3
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	681a      	ldr	r2, [r3, #0]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	601a      	str	r2, [r3, #0]
 80095e8:	e008      	b.n	80095fc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80095ea:	4b0b      	ldr	r3, [pc, #44]	; (8009618 <prvInsertBlockIntoFreeList+0xac>)
 80095ec:	681a      	ldr	r2, [r3, #0]
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	601a      	str	r2, [r3, #0]
 80095f2:	e003      	b.n	80095fc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681a      	ldr	r2, [r3, #0]
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80095fc:	68fa      	ldr	r2, [r7, #12]
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	429a      	cmp	r2, r3
 8009602:	d002      	beq.n	800960a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	687a      	ldr	r2, [r7, #4]
 8009608:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800960a:	bf00      	nop
 800960c:	3714      	adds	r7, #20
 800960e:	46bd      	mov	sp, r7
 8009610:	bc80      	pop	{r7}
 8009612:	4770      	bx	lr
 8009614:	20002794 	.word	0x20002794
 8009618:	2000279c 	.word	0x2000279c

0800961c <__aeabi_atexit>:
 800961c:	460b      	mov	r3, r1
 800961e:	4601      	mov	r1, r0
 8009620:	4618      	mov	r0, r3
 8009622:	f000 b943 	b.w	80098ac <__cxa_atexit>

08009626 <_ZdlPvj>:
 8009626:	f000 b914 	b.w	8009852 <_ZdlPv>

0800962a <_Znwj>:
 800962a:	2801      	cmp	r0, #1
 800962c:	bf38      	it	cc
 800962e:	2001      	movcc	r0, #1
 8009630:	b510      	push	{r4, lr}
 8009632:	4604      	mov	r4, r0
 8009634:	4620      	mov	r0, r4
 8009636:	f000 f973 	bl	8009920 <malloc>
 800963a:	b930      	cbnz	r0, 800964a <_Znwj+0x20>
 800963c:	f000 f91e 	bl	800987c <_ZSt15get_new_handlerv>
 8009640:	b908      	cbnz	r0, 8009646 <_Znwj+0x1c>
 8009642:	f000 f92c 	bl	800989e <abort>
 8009646:	4780      	blx	r0
 8009648:	e7f4      	b.n	8009634 <_Znwj+0xa>
 800964a:	bd10      	pop	{r4, pc}

0800964c <__cxa_pure_virtual>:
 800964c:	b508      	push	{r3, lr}
 800964e:	f000 f90f 	bl	8009870 <_ZSt9terminatev>

08009652 <_ZNSaIcEC1Ev>:
 8009652:	4770      	bx	lr

08009654 <_ZNSaIcED1Ev>:
 8009654:	4770      	bx	lr

08009656 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 8009656:	b10a      	cbz	r2, 800965c <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 8009658:	f000 b990 	b.w	800997c <memcpy>
 800965c:	4770      	bx	lr

0800965e <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
 800965e:	b10a      	cbz	r2, 8009664 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
 8009660:	f000 b97c 	b.w	800995c <memcmp>
 8009664:	4610      	mov	r0, r2
 8009666:	4770      	bx	lr

08009668 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8009668:	b508      	push	{r3, lr}
 800966a:	680b      	ldr	r3, [r1, #0]
 800966c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009670:	d302      	bcc.n	8009678 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8009672:	480d      	ldr	r0, [pc, #52]	; (80096a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8009674:	f000 f910 	bl	8009898 <_ZSt20__throw_length_errorPKc>
 8009678:	4293      	cmp	r3, r2
 800967a:	d90b      	bls.n	8009694 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800967c:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8009680:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8009684:	d206      	bcs.n	8009694 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8009686:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800968a:	bf2a      	itet	cs
 800968c:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 8009690:	6008      	strcc	r0, [r1, #0]
 8009692:	600b      	strcs	r3, [r1, #0]
 8009694:	6808      	ldr	r0, [r1, #0]
 8009696:	3001      	adds	r0, #1
 8009698:	d501      	bpl.n	800969e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 800969a:	f000 f8f7 	bl	800988c <_ZSt17__throw_bad_allocv>
 800969e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80096a2:	f7ff bfc2 	b.w	800962a <_Znwj>
 80096a6:	bf00      	nop
 80096a8:	0800a7a8 	.word	0x0800a7a8

080096ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 80096ac:	4603      	mov	r3, r0
 80096ae:	f853 0b08 	ldr.w	r0, [r3], #8
 80096b2:	4298      	cmp	r0, r3
 80096b4:	d001      	beq.n	80096ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 80096b6:	f000 b8cc 	b.w	8009852 <_ZdlPv>
 80096ba:	4770      	bx	lr

080096bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 80096bc:	2a01      	cmp	r2, #1
 80096be:	b410      	push	{r4}
 80096c0:	d103      	bne.n	80096ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xe>
 80096c2:	780a      	ldrb	r2, [r1, #0]
 80096c4:	bc10      	pop	{r4}
 80096c6:	7002      	strb	r2, [r0, #0]
 80096c8:	4770      	bx	lr
 80096ca:	bc10      	pop	{r4}
 80096cc:	f7ff bfc3 	b.w	8009656 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

080096d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 80096d0:	b508      	push	{r3, lr}
 80096d2:	1a52      	subs	r2, r2, r1
 80096d4:	f7ff fff2 	bl	80096bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80096d8:	bd08      	pop	{r3, pc}

080096da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 80096da:	b508      	push	{r3, lr}
 80096dc:	1a52      	subs	r2, r2, r1
 80096de:	f7ff ffed 	bl	80096bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80096e2:	bd08      	pop	{r3, pc}

080096e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 80096e4:	4288      	cmp	r0, r1
 80096e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80096e8:	4604      	mov	r4, r0
 80096ea:	460e      	mov	r6, r1
 80096ec:	d01e      	beq.n	800972c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x48>
 80096ee:	4603      	mov	r3, r0
 80096f0:	f853 2b08 	ldr.w	r2, [r3], #8
 80096f4:	684d      	ldr	r5, [r1, #4]
 80096f6:	429a      	cmp	r2, r3
 80096f8:	bf0c      	ite	eq
 80096fa:	220f      	moveq	r2, #15
 80096fc:	6882      	ldrne	r2, [r0, #8]
 80096fe:	42aa      	cmp	r2, r5
 8009700:	d20a      	bcs.n	8009718 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x34>
 8009702:	a901      	add	r1, sp, #4
 8009704:	9501      	str	r5, [sp, #4]
 8009706:	f7ff ffaf 	bl	8009668 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800970a:	4607      	mov	r7, r0
 800970c:	4620      	mov	r0, r4
 800970e:	f7ff ffcd 	bl	80096ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8009712:	9b01      	ldr	r3, [sp, #4]
 8009714:	6027      	str	r7, [r4, #0]
 8009716:	60a3      	str	r3, [r4, #8]
 8009718:	b125      	cbz	r5, 8009724 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x40>
 800971a:	462a      	mov	r2, r5
 800971c:	6831      	ldr	r1, [r6, #0]
 800971e:	6820      	ldr	r0, [r4, #0]
 8009720:	f7ff ffcc 	bl	80096bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8009724:	2200      	movs	r2, #0
 8009726:	6823      	ldr	r3, [r4, #0]
 8009728:	6065      	str	r5, [r4, #4]
 800972a:	555a      	strb	r2, [r3, r5]
 800972c:	b003      	add	sp, #12
 800972e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009730 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 8009730:	f100 0208 	add.w	r2, r0, #8
 8009734:	6002      	str	r2, [r0, #0]
 8009736:	2200      	movs	r2, #0
 8009738:	6042      	str	r2, [r0, #4]
 800973a:	7202      	strb	r2, [r0, #8]
 800973c:	4770      	bx	lr

0800973e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 800973e:	b510      	push	{r4, lr}
 8009740:	4604      	mov	r4, r0
 8009742:	f7ff ffb3 	bl	80096ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8009746:	4620      	mov	r0, r4
 8009748:	bd10      	pop	{r4, pc}

0800974a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>:
 800974a:	b510      	push	{r4, lr}
 800974c:	4604      	mov	r4, r0
 800974e:	f7ff ffc9 	bl	80096e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 8009752:	4620      	mov	r0, r4
 8009754:	bd10      	pop	{r4, pc}

08009756 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
 8009756:	6840      	ldr	r0, [r0, #4]
 8009758:	4770      	bx	lr

0800975a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 800975a:	6800      	ldr	r0, [r0, #0]
 800975c:	4770      	bx	lr

0800975e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_>:
 800975e:	b538      	push	{r3, r4, r5, lr}
 8009760:	6845      	ldr	r5, [r0, #4]
 8009762:	684c      	ldr	r4, [r1, #4]
 8009764:	462a      	mov	r2, r5
 8009766:	42a5      	cmp	r5, r4
 8009768:	bf28      	it	cs
 800976a:	4622      	movcs	r2, r4
 800976c:	6809      	ldr	r1, [r1, #0]
 800976e:	6800      	ldr	r0, [r0, #0]
 8009770:	f7ff ff75 	bl	800965e <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 8009774:	b900      	cbnz	r0, 8009778 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_+0x1a>
 8009776:	1b28      	subs	r0, r5, r4
 8009778:	bd38      	pop	{r3, r4, r5, pc}
	...

0800977c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 800977c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800977e:	4604      	mov	r4, r0
 8009780:	4616      	mov	r6, r2
 8009782:	460d      	mov	r5, r1
 8009784:	b919      	cbnz	r1, 800978e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 8009786:	b112      	cbz	r2, 800978e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 8009788:	480d      	ldr	r0, [pc, #52]	; (80097c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x44>)
 800978a:	f000 f882 	bl	8009892 <_ZSt19__throw_logic_errorPKc>
 800978e:	1b73      	subs	r3, r6, r5
 8009790:	2b0f      	cmp	r3, #15
 8009792:	9301      	str	r3, [sp, #4]
 8009794:	d907      	bls.n	80097a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x2a>
 8009796:	2200      	movs	r2, #0
 8009798:	4620      	mov	r0, r4
 800979a:	a901      	add	r1, sp, #4
 800979c:	f7ff ff64 	bl	8009668 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80097a0:	9b01      	ldr	r3, [sp, #4]
 80097a2:	6020      	str	r0, [r4, #0]
 80097a4:	60a3      	str	r3, [r4, #8]
 80097a6:	4632      	mov	r2, r6
 80097a8:	4629      	mov	r1, r5
 80097aa:	6820      	ldr	r0, [r4, #0]
 80097ac:	f7ff ff90 	bl	80096d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 80097b0:	2100      	movs	r1, #0
 80097b2:	9b01      	ldr	r3, [sp, #4]
 80097b4:	6822      	ldr	r2, [r4, #0]
 80097b6:	6063      	str	r3, [r4, #4]
 80097b8:	54d1      	strb	r1, [r2, r3]
 80097ba:	b002      	add	sp, #8
 80097bc:	bd70      	pop	{r4, r5, r6, pc}
 80097be:	bf00      	nop
 80097c0:	0800a7c0 	.word	0x0800a7c0

080097c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 80097c4:	b510      	push	{r4, lr}
 80097c6:	4604      	mov	r4, r0
 80097c8:	f100 0208 	add.w	r2, r0, #8
 80097cc:	6002      	str	r2, [r0, #0]
 80097ce:	e9d1 1200 	ldrd	r1, r2, [r1]
 80097d2:	f04f 0300 	mov.w	r3, #0
 80097d6:	440a      	add	r2, r1
 80097d8:	f7ff ffd0 	bl	800977c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 80097dc:	4620      	mov	r0, r4
 80097de:	bd10      	pop	{r4, pc}

080097e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 80097e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80097e2:	4604      	mov	r4, r0
 80097e4:	4616      	mov	r6, r2
 80097e6:	460d      	mov	r5, r1
 80097e8:	b919      	cbnz	r1, 80097f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 80097ea:	b112      	cbz	r2, 80097f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 80097ec:	480d      	ldr	r0, [pc, #52]	; (8009824 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 80097ee:	f000 f850 	bl	8009892 <_ZSt19__throw_logic_errorPKc>
 80097f2:	1b73      	subs	r3, r6, r5
 80097f4:	2b0f      	cmp	r3, #15
 80097f6:	9301      	str	r3, [sp, #4]
 80097f8:	d907      	bls.n	800980a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 80097fa:	2200      	movs	r2, #0
 80097fc:	4620      	mov	r0, r4
 80097fe:	a901      	add	r1, sp, #4
 8009800:	f7ff ff32 	bl	8009668 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8009804:	9b01      	ldr	r3, [sp, #4]
 8009806:	6020      	str	r0, [r4, #0]
 8009808:	60a3      	str	r3, [r4, #8]
 800980a:	4632      	mov	r2, r6
 800980c:	4629      	mov	r1, r5
 800980e:	6820      	ldr	r0, [r4, #0]
 8009810:	f7ff ff63 	bl	80096da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8009814:	2100      	movs	r1, #0
 8009816:	9b01      	ldr	r3, [sp, #4]
 8009818:	6822      	ldr	r2, [r4, #0]
 800981a:	6063      	str	r3, [r4, #4]
 800981c:	54d1      	strb	r1, [r2, r3]
 800981e:	b002      	add	sp, #8
 8009820:	bd70      	pop	{r4, r5, r6, pc}
 8009822:	bf00      	nop
 8009824:	0800a7c0 	.word	0x0800a7c0

08009828 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8009828:	b538      	push	{r3, r4, r5, lr}
 800982a:	f100 0308 	add.w	r3, r0, #8
 800982e:	4604      	mov	r4, r0
 8009830:	460d      	mov	r5, r1
 8009832:	6003      	str	r3, [r0, #0]
 8009834:	b159      	cbz	r1, 800984e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 8009836:	4608      	mov	r0, r1
 8009838:	f7f6 fcfa 	bl	8000230 <strlen>
 800983c:	182a      	adds	r2, r5, r0
 800983e:	4620      	mov	r0, r4
 8009840:	f04f 0300 	mov.w	r3, #0
 8009844:	4629      	mov	r1, r5
 8009846:	f7ff ffcb 	bl	80097e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 800984a:	4620      	mov	r0, r4
 800984c:	bd38      	pop	{r3, r4, r5, pc}
 800984e:	2201      	movs	r2, #1
 8009850:	e7f5      	b.n	800983e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

08009852 <_ZdlPv>:
 8009852:	f000 b86d 	b.w	8009930 <free>

08009856 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8009856:	b508      	push	{r3, lr}
 8009858:	4780      	blx	r0
 800985a:	f000 f820 	bl	800989e <abort>
	...

08009860 <_ZSt13get_terminatev>:
 8009860:	4b02      	ldr	r3, [pc, #8]	; (800986c <_ZSt13get_terminatev+0xc>)
 8009862:	6818      	ldr	r0, [r3, #0]
 8009864:	f3bf 8f5b 	dmb	ish
 8009868:	4770      	bx	lr
 800986a:	bf00      	nop
 800986c:	20000014 	.word	0x20000014

08009870 <_ZSt9terminatev>:
 8009870:	b508      	push	{r3, lr}
 8009872:	f7ff fff5 	bl	8009860 <_ZSt13get_terminatev>
 8009876:	f7ff ffee 	bl	8009856 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0800987c <_ZSt15get_new_handlerv>:
 800987c:	4b02      	ldr	r3, [pc, #8]	; (8009888 <_ZSt15get_new_handlerv+0xc>)
 800987e:	6818      	ldr	r0, [r3, #0]
 8009880:	f3bf 8f5b 	dmb	ish
 8009884:	4770      	bx	lr
 8009886:	bf00      	nop
 8009888:	200027ac 	.word	0x200027ac

0800988c <_ZSt17__throw_bad_allocv>:
 800988c:	b508      	push	{r3, lr}
 800988e:	f000 f806 	bl	800989e <abort>

08009892 <_ZSt19__throw_logic_errorPKc>:
 8009892:	b508      	push	{r3, lr}
 8009894:	f000 f803 	bl	800989e <abort>

08009898 <_ZSt20__throw_length_errorPKc>:
 8009898:	b508      	push	{r3, lr}
 800989a:	f000 f800 	bl	800989e <abort>

0800989e <abort>:
 800989e:	2006      	movs	r0, #6
 80098a0:	b508      	push	{r3, lr}
 80098a2:	f000 fa19 	bl	8009cd8 <raise>
 80098a6:	2001      	movs	r0, #1
 80098a8:	f7fb f877 	bl	800499a <_exit>

080098ac <__cxa_atexit>:
 80098ac:	b510      	push	{r4, lr}
 80098ae:	4604      	mov	r4, r0
 80098b0:	4804      	ldr	r0, [pc, #16]	; (80098c4 <__cxa_atexit+0x18>)
 80098b2:	4613      	mov	r3, r2
 80098b4:	b120      	cbz	r0, 80098c0 <__cxa_atexit+0x14>
 80098b6:	460a      	mov	r2, r1
 80098b8:	2002      	movs	r0, #2
 80098ba:	4621      	mov	r1, r4
 80098bc:	f3af 8000 	nop.w
 80098c0:	bd10      	pop	{r4, pc}
 80098c2:	bf00      	nop
 80098c4:	00000000 	.word	0x00000000

080098c8 <__errno>:
 80098c8:	4b01      	ldr	r3, [pc, #4]	; (80098d0 <__errno+0x8>)
 80098ca:	6818      	ldr	r0, [r3, #0]
 80098cc:	4770      	bx	lr
 80098ce:	bf00      	nop
 80098d0:	20000018 	.word	0x20000018

080098d4 <__libc_init_array>:
 80098d4:	b570      	push	{r4, r5, r6, lr}
 80098d6:	2600      	movs	r6, #0
 80098d8:	4d0c      	ldr	r5, [pc, #48]	; (800990c <__libc_init_array+0x38>)
 80098da:	4c0d      	ldr	r4, [pc, #52]	; (8009910 <__libc_init_array+0x3c>)
 80098dc:	1b64      	subs	r4, r4, r5
 80098de:	10a4      	asrs	r4, r4, #2
 80098e0:	42a6      	cmp	r6, r4
 80098e2:	d109      	bne.n	80098f8 <__libc_init_array+0x24>
 80098e4:	f000 fd6a 	bl	800a3bc <_init>
 80098e8:	2600      	movs	r6, #0
 80098ea:	4d0a      	ldr	r5, [pc, #40]	; (8009914 <__libc_init_array+0x40>)
 80098ec:	4c0a      	ldr	r4, [pc, #40]	; (8009918 <__libc_init_array+0x44>)
 80098ee:	1b64      	subs	r4, r4, r5
 80098f0:	10a4      	asrs	r4, r4, #2
 80098f2:	42a6      	cmp	r6, r4
 80098f4:	d105      	bne.n	8009902 <__libc_init_array+0x2e>
 80098f6:	bd70      	pop	{r4, r5, r6, pc}
 80098f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80098fc:	4798      	blx	r3
 80098fe:	3601      	adds	r6, #1
 8009900:	e7ee      	b.n	80098e0 <__libc_init_array+0xc>
 8009902:	f855 3b04 	ldr.w	r3, [r5], #4
 8009906:	4798      	blx	r3
 8009908:	3601      	adds	r6, #1
 800990a:	e7f2      	b.n	80098f2 <__libc_init_array+0x1e>
 800990c:	0800a9e8 	.word	0x0800a9e8
 8009910:	0800a9e8 	.word	0x0800a9e8
 8009914:	0800a9e8 	.word	0x0800a9e8
 8009918:	0800a9f0 	.word	0x0800a9f0

0800991c <__retarget_lock_acquire_recursive>:
 800991c:	4770      	bx	lr

0800991e <__retarget_lock_release_recursive>:
 800991e:	4770      	bx	lr

08009920 <malloc>:
 8009920:	4b02      	ldr	r3, [pc, #8]	; (800992c <malloc+0xc>)
 8009922:	4601      	mov	r1, r0
 8009924:	6818      	ldr	r0, [r3, #0]
 8009926:	f000 b8c1 	b.w	8009aac <_malloc_r>
 800992a:	bf00      	nop
 800992c:	20000018 	.word	0x20000018

08009930 <free>:
 8009930:	4b02      	ldr	r3, [pc, #8]	; (800993c <free+0xc>)
 8009932:	4601      	mov	r1, r0
 8009934:	6818      	ldr	r0, [r3, #0]
 8009936:	f000 b851 	b.w	80099dc <_free_r>
 800993a:	bf00      	nop
 800993c:	20000018 	.word	0x20000018

08009940 <memchr>:
 8009940:	4603      	mov	r3, r0
 8009942:	b510      	push	{r4, lr}
 8009944:	b2c9      	uxtb	r1, r1
 8009946:	4402      	add	r2, r0
 8009948:	4293      	cmp	r3, r2
 800994a:	4618      	mov	r0, r3
 800994c:	d101      	bne.n	8009952 <memchr+0x12>
 800994e:	2000      	movs	r0, #0
 8009950:	e003      	b.n	800995a <memchr+0x1a>
 8009952:	7804      	ldrb	r4, [r0, #0]
 8009954:	3301      	adds	r3, #1
 8009956:	428c      	cmp	r4, r1
 8009958:	d1f6      	bne.n	8009948 <memchr+0x8>
 800995a:	bd10      	pop	{r4, pc}

0800995c <memcmp>:
 800995c:	b510      	push	{r4, lr}
 800995e:	3901      	subs	r1, #1
 8009960:	4402      	add	r2, r0
 8009962:	4290      	cmp	r0, r2
 8009964:	d101      	bne.n	800996a <memcmp+0xe>
 8009966:	2000      	movs	r0, #0
 8009968:	e005      	b.n	8009976 <memcmp+0x1a>
 800996a:	7803      	ldrb	r3, [r0, #0]
 800996c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009970:	42a3      	cmp	r3, r4
 8009972:	d001      	beq.n	8009978 <memcmp+0x1c>
 8009974:	1b18      	subs	r0, r3, r4
 8009976:	bd10      	pop	{r4, pc}
 8009978:	3001      	adds	r0, #1
 800997a:	e7f2      	b.n	8009962 <memcmp+0x6>

0800997c <memcpy>:
 800997c:	440a      	add	r2, r1
 800997e:	4291      	cmp	r1, r2
 8009980:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009984:	d100      	bne.n	8009988 <memcpy+0xc>
 8009986:	4770      	bx	lr
 8009988:	b510      	push	{r4, lr}
 800998a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800998e:	4291      	cmp	r1, r2
 8009990:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009994:	d1f9      	bne.n	800998a <memcpy+0xe>
 8009996:	bd10      	pop	{r4, pc}

08009998 <memmove>:
 8009998:	4288      	cmp	r0, r1
 800999a:	b510      	push	{r4, lr}
 800999c:	eb01 0402 	add.w	r4, r1, r2
 80099a0:	d902      	bls.n	80099a8 <memmove+0x10>
 80099a2:	4284      	cmp	r4, r0
 80099a4:	4623      	mov	r3, r4
 80099a6:	d807      	bhi.n	80099b8 <memmove+0x20>
 80099a8:	1e43      	subs	r3, r0, #1
 80099aa:	42a1      	cmp	r1, r4
 80099ac:	d008      	beq.n	80099c0 <memmove+0x28>
 80099ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80099b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80099b6:	e7f8      	b.n	80099aa <memmove+0x12>
 80099b8:	4601      	mov	r1, r0
 80099ba:	4402      	add	r2, r0
 80099bc:	428a      	cmp	r2, r1
 80099be:	d100      	bne.n	80099c2 <memmove+0x2a>
 80099c0:	bd10      	pop	{r4, pc}
 80099c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80099c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80099ca:	e7f7      	b.n	80099bc <memmove+0x24>

080099cc <memset>:
 80099cc:	4603      	mov	r3, r0
 80099ce:	4402      	add	r2, r0
 80099d0:	4293      	cmp	r3, r2
 80099d2:	d100      	bne.n	80099d6 <memset+0xa>
 80099d4:	4770      	bx	lr
 80099d6:	f803 1b01 	strb.w	r1, [r3], #1
 80099da:	e7f9      	b.n	80099d0 <memset+0x4>

080099dc <_free_r>:
 80099dc:	b538      	push	{r3, r4, r5, lr}
 80099de:	4605      	mov	r5, r0
 80099e0:	2900      	cmp	r1, #0
 80099e2:	d040      	beq.n	8009a66 <_free_r+0x8a>
 80099e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099e8:	1f0c      	subs	r4, r1, #4
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	bfb8      	it	lt
 80099ee:	18e4      	addlt	r4, r4, r3
 80099f0:	f000 f9ae 	bl	8009d50 <__malloc_lock>
 80099f4:	4a1c      	ldr	r2, [pc, #112]	; (8009a68 <_free_r+0x8c>)
 80099f6:	6813      	ldr	r3, [r2, #0]
 80099f8:	b933      	cbnz	r3, 8009a08 <_free_r+0x2c>
 80099fa:	6063      	str	r3, [r4, #4]
 80099fc:	6014      	str	r4, [r2, #0]
 80099fe:	4628      	mov	r0, r5
 8009a00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a04:	f000 b9aa 	b.w	8009d5c <__malloc_unlock>
 8009a08:	42a3      	cmp	r3, r4
 8009a0a:	d908      	bls.n	8009a1e <_free_r+0x42>
 8009a0c:	6820      	ldr	r0, [r4, #0]
 8009a0e:	1821      	adds	r1, r4, r0
 8009a10:	428b      	cmp	r3, r1
 8009a12:	bf01      	itttt	eq
 8009a14:	6819      	ldreq	r1, [r3, #0]
 8009a16:	685b      	ldreq	r3, [r3, #4]
 8009a18:	1809      	addeq	r1, r1, r0
 8009a1a:	6021      	streq	r1, [r4, #0]
 8009a1c:	e7ed      	b.n	80099fa <_free_r+0x1e>
 8009a1e:	461a      	mov	r2, r3
 8009a20:	685b      	ldr	r3, [r3, #4]
 8009a22:	b10b      	cbz	r3, 8009a28 <_free_r+0x4c>
 8009a24:	42a3      	cmp	r3, r4
 8009a26:	d9fa      	bls.n	8009a1e <_free_r+0x42>
 8009a28:	6811      	ldr	r1, [r2, #0]
 8009a2a:	1850      	adds	r0, r2, r1
 8009a2c:	42a0      	cmp	r0, r4
 8009a2e:	d10b      	bne.n	8009a48 <_free_r+0x6c>
 8009a30:	6820      	ldr	r0, [r4, #0]
 8009a32:	4401      	add	r1, r0
 8009a34:	1850      	adds	r0, r2, r1
 8009a36:	4283      	cmp	r3, r0
 8009a38:	6011      	str	r1, [r2, #0]
 8009a3a:	d1e0      	bne.n	80099fe <_free_r+0x22>
 8009a3c:	6818      	ldr	r0, [r3, #0]
 8009a3e:	685b      	ldr	r3, [r3, #4]
 8009a40:	4401      	add	r1, r0
 8009a42:	6011      	str	r1, [r2, #0]
 8009a44:	6053      	str	r3, [r2, #4]
 8009a46:	e7da      	b.n	80099fe <_free_r+0x22>
 8009a48:	d902      	bls.n	8009a50 <_free_r+0x74>
 8009a4a:	230c      	movs	r3, #12
 8009a4c:	602b      	str	r3, [r5, #0]
 8009a4e:	e7d6      	b.n	80099fe <_free_r+0x22>
 8009a50:	6820      	ldr	r0, [r4, #0]
 8009a52:	1821      	adds	r1, r4, r0
 8009a54:	428b      	cmp	r3, r1
 8009a56:	bf01      	itttt	eq
 8009a58:	6819      	ldreq	r1, [r3, #0]
 8009a5a:	685b      	ldreq	r3, [r3, #4]
 8009a5c:	1809      	addeq	r1, r1, r0
 8009a5e:	6021      	streq	r1, [r4, #0]
 8009a60:	6063      	str	r3, [r4, #4]
 8009a62:	6054      	str	r4, [r2, #4]
 8009a64:	e7cb      	b.n	80099fe <_free_r+0x22>
 8009a66:	bd38      	pop	{r3, r4, r5, pc}
 8009a68:	200027b4 	.word	0x200027b4

08009a6c <sbrk_aligned>:
 8009a6c:	b570      	push	{r4, r5, r6, lr}
 8009a6e:	4e0e      	ldr	r6, [pc, #56]	; (8009aa8 <sbrk_aligned+0x3c>)
 8009a70:	460c      	mov	r4, r1
 8009a72:	6831      	ldr	r1, [r6, #0]
 8009a74:	4605      	mov	r5, r0
 8009a76:	b911      	cbnz	r1, 8009a7e <sbrk_aligned+0x12>
 8009a78:	f000 f8f6 	bl	8009c68 <_sbrk_r>
 8009a7c:	6030      	str	r0, [r6, #0]
 8009a7e:	4621      	mov	r1, r4
 8009a80:	4628      	mov	r0, r5
 8009a82:	f000 f8f1 	bl	8009c68 <_sbrk_r>
 8009a86:	1c43      	adds	r3, r0, #1
 8009a88:	d00a      	beq.n	8009aa0 <sbrk_aligned+0x34>
 8009a8a:	1cc4      	adds	r4, r0, #3
 8009a8c:	f024 0403 	bic.w	r4, r4, #3
 8009a90:	42a0      	cmp	r0, r4
 8009a92:	d007      	beq.n	8009aa4 <sbrk_aligned+0x38>
 8009a94:	1a21      	subs	r1, r4, r0
 8009a96:	4628      	mov	r0, r5
 8009a98:	f000 f8e6 	bl	8009c68 <_sbrk_r>
 8009a9c:	3001      	adds	r0, #1
 8009a9e:	d101      	bne.n	8009aa4 <sbrk_aligned+0x38>
 8009aa0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009aa4:	4620      	mov	r0, r4
 8009aa6:	bd70      	pop	{r4, r5, r6, pc}
 8009aa8:	200027b8 	.word	0x200027b8

08009aac <_malloc_r>:
 8009aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ab0:	1ccd      	adds	r5, r1, #3
 8009ab2:	f025 0503 	bic.w	r5, r5, #3
 8009ab6:	3508      	adds	r5, #8
 8009ab8:	2d0c      	cmp	r5, #12
 8009aba:	bf38      	it	cc
 8009abc:	250c      	movcc	r5, #12
 8009abe:	2d00      	cmp	r5, #0
 8009ac0:	4607      	mov	r7, r0
 8009ac2:	db01      	blt.n	8009ac8 <_malloc_r+0x1c>
 8009ac4:	42a9      	cmp	r1, r5
 8009ac6:	d905      	bls.n	8009ad4 <_malloc_r+0x28>
 8009ac8:	230c      	movs	r3, #12
 8009aca:	2600      	movs	r6, #0
 8009acc:	603b      	str	r3, [r7, #0]
 8009ace:	4630      	mov	r0, r6
 8009ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ad4:	4e2e      	ldr	r6, [pc, #184]	; (8009b90 <_malloc_r+0xe4>)
 8009ad6:	f000 f93b 	bl	8009d50 <__malloc_lock>
 8009ada:	6833      	ldr	r3, [r6, #0]
 8009adc:	461c      	mov	r4, r3
 8009ade:	bb34      	cbnz	r4, 8009b2e <_malloc_r+0x82>
 8009ae0:	4629      	mov	r1, r5
 8009ae2:	4638      	mov	r0, r7
 8009ae4:	f7ff ffc2 	bl	8009a6c <sbrk_aligned>
 8009ae8:	1c43      	adds	r3, r0, #1
 8009aea:	4604      	mov	r4, r0
 8009aec:	d14d      	bne.n	8009b8a <_malloc_r+0xde>
 8009aee:	6834      	ldr	r4, [r6, #0]
 8009af0:	4626      	mov	r6, r4
 8009af2:	2e00      	cmp	r6, #0
 8009af4:	d140      	bne.n	8009b78 <_malloc_r+0xcc>
 8009af6:	6823      	ldr	r3, [r4, #0]
 8009af8:	4631      	mov	r1, r6
 8009afa:	4638      	mov	r0, r7
 8009afc:	eb04 0803 	add.w	r8, r4, r3
 8009b00:	f000 f8b2 	bl	8009c68 <_sbrk_r>
 8009b04:	4580      	cmp	r8, r0
 8009b06:	d13a      	bne.n	8009b7e <_malloc_r+0xd2>
 8009b08:	6821      	ldr	r1, [r4, #0]
 8009b0a:	3503      	adds	r5, #3
 8009b0c:	1a6d      	subs	r5, r5, r1
 8009b0e:	f025 0503 	bic.w	r5, r5, #3
 8009b12:	3508      	adds	r5, #8
 8009b14:	2d0c      	cmp	r5, #12
 8009b16:	bf38      	it	cc
 8009b18:	250c      	movcc	r5, #12
 8009b1a:	4638      	mov	r0, r7
 8009b1c:	4629      	mov	r1, r5
 8009b1e:	f7ff ffa5 	bl	8009a6c <sbrk_aligned>
 8009b22:	3001      	adds	r0, #1
 8009b24:	d02b      	beq.n	8009b7e <_malloc_r+0xd2>
 8009b26:	6823      	ldr	r3, [r4, #0]
 8009b28:	442b      	add	r3, r5
 8009b2a:	6023      	str	r3, [r4, #0]
 8009b2c:	e00e      	b.n	8009b4c <_malloc_r+0xa0>
 8009b2e:	6822      	ldr	r2, [r4, #0]
 8009b30:	1b52      	subs	r2, r2, r5
 8009b32:	d41e      	bmi.n	8009b72 <_malloc_r+0xc6>
 8009b34:	2a0b      	cmp	r2, #11
 8009b36:	d916      	bls.n	8009b66 <_malloc_r+0xba>
 8009b38:	1961      	adds	r1, r4, r5
 8009b3a:	42a3      	cmp	r3, r4
 8009b3c:	6025      	str	r5, [r4, #0]
 8009b3e:	bf18      	it	ne
 8009b40:	6059      	strne	r1, [r3, #4]
 8009b42:	6863      	ldr	r3, [r4, #4]
 8009b44:	bf08      	it	eq
 8009b46:	6031      	streq	r1, [r6, #0]
 8009b48:	5162      	str	r2, [r4, r5]
 8009b4a:	604b      	str	r3, [r1, #4]
 8009b4c:	4638      	mov	r0, r7
 8009b4e:	f104 060b 	add.w	r6, r4, #11
 8009b52:	f000 f903 	bl	8009d5c <__malloc_unlock>
 8009b56:	f026 0607 	bic.w	r6, r6, #7
 8009b5a:	1d23      	adds	r3, r4, #4
 8009b5c:	1af2      	subs	r2, r6, r3
 8009b5e:	d0b6      	beq.n	8009ace <_malloc_r+0x22>
 8009b60:	1b9b      	subs	r3, r3, r6
 8009b62:	50a3      	str	r3, [r4, r2]
 8009b64:	e7b3      	b.n	8009ace <_malloc_r+0x22>
 8009b66:	6862      	ldr	r2, [r4, #4]
 8009b68:	42a3      	cmp	r3, r4
 8009b6a:	bf0c      	ite	eq
 8009b6c:	6032      	streq	r2, [r6, #0]
 8009b6e:	605a      	strne	r2, [r3, #4]
 8009b70:	e7ec      	b.n	8009b4c <_malloc_r+0xa0>
 8009b72:	4623      	mov	r3, r4
 8009b74:	6864      	ldr	r4, [r4, #4]
 8009b76:	e7b2      	b.n	8009ade <_malloc_r+0x32>
 8009b78:	4634      	mov	r4, r6
 8009b7a:	6876      	ldr	r6, [r6, #4]
 8009b7c:	e7b9      	b.n	8009af2 <_malloc_r+0x46>
 8009b7e:	230c      	movs	r3, #12
 8009b80:	4638      	mov	r0, r7
 8009b82:	603b      	str	r3, [r7, #0]
 8009b84:	f000 f8ea 	bl	8009d5c <__malloc_unlock>
 8009b88:	e7a1      	b.n	8009ace <_malloc_r+0x22>
 8009b8a:	6025      	str	r5, [r4, #0]
 8009b8c:	e7de      	b.n	8009b4c <_malloc_r+0xa0>
 8009b8e:	bf00      	nop
 8009b90:	200027b4 	.word	0x200027b4

08009b94 <cleanup_glue>:
 8009b94:	b538      	push	{r3, r4, r5, lr}
 8009b96:	460c      	mov	r4, r1
 8009b98:	6809      	ldr	r1, [r1, #0]
 8009b9a:	4605      	mov	r5, r0
 8009b9c:	b109      	cbz	r1, 8009ba2 <cleanup_glue+0xe>
 8009b9e:	f7ff fff9 	bl	8009b94 <cleanup_glue>
 8009ba2:	4621      	mov	r1, r4
 8009ba4:	4628      	mov	r0, r5
 8009ba6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009baa:	f7ff bf17 	b.w	80099dc <_free_r>
	...

08009bb0 <_reclaim_reent>:
 8009bb0:	4b2c      	ldr	r3, [pc, #176]	; (8009c64 <_reclaim_reent+0xb4>)
 8009bb2:	b570      	push	{r4, r5, r6, lr}
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	4604      	mov	r4, r0
 8009bb8:	4283      	cmp	r3, r0
 8009bba:	d051      	beq.n	8009c60 <_reclaim_reent+0xb0>
 8009bbc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009bbe:	b143      	cbz	r3, 8009bd2 <_reclaim_reent+0x22>
 8009bc0:	68db      	ldr	r3, [r3, #12]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d14a      	bne.n	8009c5c <_reclaim_reent+0xac>
 8009bc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009bc8:	6819      	ldr	r1, [r3, #0]
 8009bca:	b111      	cbz	r1, 8009bd2 <_reclaim_reent+0x22>
 8009bcc:	4620      	mov	r0, r4
 8009bce:	f7ff ff05 	bl	80099dc <_free_r>
 8009bd2:	6961      	ldr	r1, [r4, #20]
 8009bd4:	b111      	cbz	r1, 8009bdc <_reclaim_reent+0x2c>
 8009bd6:	4620      	mov	r0, r4
 8009bd8:	f7ff ff00 	bl	80099dc <_free_r>
 8009bdc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009bde:	b111      	cbz	r1, 8009be6 <_reclaim_reent+0x36>
 8009be0:	4620      	mov	r0, r4
 8009be2:	f7ff fefb 	bl	80099dc <_free_r>
 8009be6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009be8:	b111      	cbz	r1, 8009bf0 <_reclaim_reent+0x40>
 8009bea:	4620      	mov	r0, r4
 8009bec:	f7ff fef6 	bl	80099dc <_free_r>
 8009bf0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009bf2:	b111      	cbz	r1, 8009bfa <_reclaim_reent+0x4a>
 8009bf4:	4620      	mov	r0, r4
 8009bf6:	f7ff fef1 	bl	80099dc <_free_r>
 8009bfa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009bfc:	b111      	cbz	r1, 8009c04 <_reclaim_reent+0x54>
 8009bfe:	4620      	mov	r0, r4
 8009c00:	f7ff feec 	bl	80099dc <_free_r>
 8009c04:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009c06:	b111      	cbz	r1, 8009c0e <_reclaim_reent+0x5e>
 8009c08:	4620      	mov	r0, r4
 8009c0a:	f7ff fee7 	bl	80099dc <_free_r>
 8009c0e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009c10:	b111      	cbz	r1, 8009c18 <_reclaim_reent+0x68>
 8009c12:	4620      	mov	r0, r4
 8009c14:	f7ff fee2 	bl	80099dc <_free_r>
 8009c18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c1a:	b111      	cbz	r1, 8009c22 <_reclaim_reent+0x72>
 8009c1c:	4620      	mov	r0, r4
 8009c1e:	f7ff fedd 	bl	80099dc <_free_r>
 8009c22:	69a3      	ldr	r3, [r4, #24]
 8009c24:	b1e3      	cbz	r3, 8009c60 <_reclaim_reent+0xb0>
 8009c26:	4620      	mov	r0, r4
 8009c28:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009c2a:	4798      	blx	r3
 8009c2c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009c2e:	b1b9      	cbz	r1, 8009c60 <_reclaim_reent+0xb0>
 8009c30:	4620      	mov	r0, r4
 8009c32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009c36:	f7ff bfad 	b.w	8009b94 <cleanup_glue>
 8009c3a:	5949      	ldr	r1, [r1, r5]
 8009c3c:	b941      	cbnz	r1, 8009c50 <_reclaim_reent+0xa0>
 8009c3e:	3504      	adds	r5, #4
 8009c40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c42:	2d80      	cmp	r5, #128	; 0x80
 8009c44:	68d9      	ldr	r1, [r3, #12]
 8009c46:	d1f8      	bne.n	8009c3a <_reclaim_reent+0x8a>
 8009c48:	4620      	mov	r0, r4
 8009c4a:	f7ff fec7 	bl	80099dc <_free_r>
 8009c4e:	e7ba      	b.n	8009bc6 <_reclaim_reent+0x16>
 8009c50:	680e      	ldr	r6, [r1, #0]
 8009c52:	4620      	mov	r0, r4
 8009c54:	f7ff fec2 	bl	80099dc <_free_r>
 8009c58:	4631      	mov	r1, r6
 8009c5a:	e7ef      	b.n	8009c3c <_reclaim_reent+0x8c>
 8009c5c:	2500      	movs	r5, #0
 8009c5e:	e7ef      	b.n	8009c40 <_reclaim_reent+0x90>
 8009c60:	bd70      	pop	{r4, r5, r6, pc}
 8009c62:	bf00      	nop
 8009c64:	20000018 	.word	0x20000018

08009c68 <_sbrk_r>:
 8009c68:	b538      	push	{r3, r4, r5, lr}
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	4d05      	ldr	r5, [pc, #20]	; (8009c84 <_sbrk_r+0x1c>)
 8009c6e:	4604      	mov	r4, r0
 8009c70:	4608      	mov	r0, r1
 8009c72:	602b      	str	r3, [r5, #0]
 8009c74:	f7fa fe9c 	bl	80049b0 <_sbrk>
 8009c78:	1c43      	adds	r3, r0, #1
 8009c7a:	d102      	bne.n	8009c82 <_sbrk_r+0x1a>
 8009c7c:	682b      	ldr	r3, [r5, #0]
 8009c7e:	b103      	cbz	r3, 8009c82 <_sbrk_r+0x1a>
 8009c80:	6023      	str	r3, [r4, #0]
 8009c82:	bd38      	pop	{r3, r4, r5, pc}
 8009c84:	200027bc 	.word	0x200027bc

08009c88 <_raise_r>:
 8009c88:	291f      	cmp	r1, #31
 8009c8a:	b538      	push	{r3, r4, r5, lr}
 8009c8c:	4604      	mov	r4, r0
 8009c8e:	460d      	mov	r5, r1
 8009c90:	d904      	bls.n	8009c9c <_raise_r+0x14>
 8009c92:	2316      	movs	r3, #22
 8009c94:	6003      	str	r3, [r0, #0]
 8009c96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c9a:	bd38      	pop	{r3, r4, r5, pc}
 8009c9c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009c9e:	b112      	cbz	r2, 8009ca6 <_raise_r+0x1e>
 8009ca0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009ca4:	b94b      	cbnz	r3, 8009cba <_raise_r+0x32>
 8009ca6:	4620      	mov	r0, r4
 8009ca8:	f000 f830 	bl	8009d0c <_getpid_r>
 8009cac:	462a      	mov	r2, r5
 8009cae:	4601      	mov	r1, r0
 8009cb0:	4620      	mov	r0, r4
 8009cb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009cb6:	f000 b817 	b.w	8009ce8 <_kill_r>
 8009cba:	2b01      	cmp	r3, #1
 8009cbc:	d00a      	beq.n	8009cd4 <_raise_r+0x4c>
 8009cbe:	1c59      	adds	r1, r3, #1
 8009cc0:	d103      	bne.n	8009cca <_raise_r+0x42>
 8009cc2:	2316      	movs	r3, #22
 8009cc4:	6003      	str	r3, [r0, #0]
 8009cc6:	2001      	movs	r0, #1
 8009cc8:	e7e7      	b.n	8009c9a <_raise_r+0x12>
 8009cca:	2400      	movs	r4, #0
 8009ccc:	4628      	mov	r0, r5
 8009cce:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009cd2:	4798      	blx	r3
 8009cd4:	2000      	movs	r0, #0
 8009cd6:	e7e0      	b.n	8009c9a <_raise_r+0x12>

08009cd8 <raise>:
 8009cd8:	4b02      	ldr	r3, [pc, #8]	; (8009ce4 <raise+0xc>)
 8009cda:	4601      	mov	r1, r0
 8009cdc:	6818      	ldr	r0, [r3, #0]
 8009cde:	f7ff bfd3 	b.w	8009c88 <_raise_r>
 8009ce2:	bf00      	nop
 8009ce4:	20000018 	.word	0x20000018

08009ce8 <_kill_r>:
 8009ce8:	b538      	push	{r3, r4, r5, lr}
 8009cea:	2300      	movs	r3, #0
 8009cec:	4d06      	ldr	r5, [pc, #24]	; (8009d08 <_kill_r+0x20>)
 8009cee:	4604      	mov	r4, r0
 8009cf0:	4608      	mov	r0, r1
 8009cf2:	4611      	mov	r1, r2
 8009cf4:	602b      	str	r3, [r5, #0]
 8009cf6:	f7fa fe40 	bl	800497a <_kill>
 8009cfa:	1c43      	adds	r3, r0, #1
 8009cfc:	d102      	bne.n	8009d04 <_kill_r+0x1c>
 8009cfe:	682b      	ldr	r3, [r5, #0]
 8009d00:	b103      	cbz	r3, 8009d04 <_kill_r+0x1c>
 8009d02:	6023      	str	r3, [r4, #0]
 8009d04:	bd38      	pop	{r3, r4, r5, pc}
 8009d06:	bf00      	nop
 8009d08:	200027bc 	.word	0x200027bc

08009d0c <_getpid_r>:
 8009d0c:	f7fa be2e 	b.w	800496c <_getpid>

08009d10 <siprintf>:
 8009d10:	b40e      	push	{r1, r2, r3}
 8009d12:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009d16:	b500      	push	{lr}
 8009d18:	b09c      	sub	sp, #112	; 0x70
 8009d1a:	ab1d      	add	r3, sp, #116	; 0x74
 8009d1c:	9002      	str	r0, [sp, #8]
 8009d1e:	9006      	str	r0, [sp, #24]
 8009d20:	9107      	str	r1, [sp, #28]
 8009d22:	9104      	str	r1, [sp, #16]
 8009d24:	4808      	ldr	r0, [pc, #32]	; (8009d48 <siprintf+0x38>)
 8009d26:	4909      	ldr	r1, [pc, #36]	; (8009d4c <siprintf+0x3c>)
 8009d28:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d2c:	9105      	str	r1, [sp, #20]
 8009d2e:	6800      	ldr	r0, [r0, #0]
 8009d30:	a902      	add	r1, sp, #8
 8009d32:	9301      	str	r3, [sp, #4]
 8009d34:	f000 f874 	bl	8009e20 <_svfiprintf_r>
 8009d38:	2200      	movs	r2, #0
 8009d3a:	9b02      	ldr	r3, [sp, #8]
 8009d3c:	701a      	strb	r2, [r3, #0]
 8009d3e:	b01c      	add	sp, #112	; 0x70
 8009d40:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d44:	b003      	add	sp, #12
 8009d46:	4770      	bx	lr
 8009d48:	20000018 	.word	0x20000018
 8009d4c:	ffff0208 	.word	0xffff0208

08009d50 <__malloc_lock>:
 8009d50:	4801      	ldr	r0, [pc, #4]	; (8009d58 <__malloc_lock+0x8>)
 8009d52:	f7ff bde3 	b.w	800991c <__retarget_lock_acquire_recursive>
 8009d56:	bf00      	nop
 8009d58:	200027b0 	.word	0x200027b0

08009d5c <__malloc_unlock>:
 8009d5c:	4801      	ldr	r0, [pc, #4]	; (8009d64 <__malloc_unlock+0x8>)
 8009d5e:	f7ff bdde 	b.w	800991e <__retarget_lock_release_recursive>
 8009d62:	bf00      	nop
 8009d64:	200027b0 	.word	0x200027b0

08009d68 <__ssputs_r>:
 8009d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d6c:	688e      	ldr	r6, [r1, #8]
 8009d6e:	4682      	mov	sl, r0
 8009d70:	429e      	cmp	r6, r3
 8009d72:	460c      	mov	r4, r1
 8009d74:	4690      	mov	r8, r2
 8009d76:	461f      	mov	r7, r3
 8009d78:	d838      	bhi.n	8009dec <__ssputs_r+0x84>
 8009d7a:	898a      	ldrh	r2, [r1, #12]
 8009d7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009d80:	d032      	beq.n	8009de8 <__ssputs_r+0x80>
 8009d82:	6825      	ldr	r5, [r4, #0]
 8009d84:	6909      	ldr	r1, [r1, #16]
 8009d86:	3301      	adds	r3, #1
 8009d88:	eba5 0901 	sub.w	r9, r5, r1
 8009d8c:	6965      	ldr	r5, [r4, #20]
 8009d8e:	444b      	add	r3, r9
 8009d90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009d94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009d98:	106d      	asrs	r5, r5, #1
 8009d9a:	429d      	cmp	r5, r3
 8009d9c:	bf38      	it	cc
 8009d9e:	461d      	movcc	r5, r3
 8009da0:	0553      	lsls	r3, r2, #21
 8009da2:	d531      	bpl.n	8009e08 <__ssputs_r+0xa0>
 8009da4:	4629      	mov	r1, r5
 8009da6:	f7ff fe81 	bl	8009aac <_malloc_r>
 8009daa:	4606      	mov	r6, r0
 8009dac:	b950      	cbnz	r0, 8009dc4 <__ssputs_r+0x5c>
 8009dae:	230c      	movs	r3, #12
 8009db0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009db4:	f8ca 3000 	str.w	r3, [sl]
 8009db8:	89a3      	ldrh	r3, [r4, #12]
 8009dba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009dbe:	81a3      	strh	r3, [r4, #12]
 8009dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dc4:	464a      	mov	r2, r9
 8009dc6:	6921      	ldr	r1, [r4, #16]
 8009dc8:	f7ff fdd8 	bl	800997c <memcpy>
 8009dcc:	89a3      	ldrh	r3, [r4, #12]
 8009dce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009dd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009dd6:	81a3      	strh	r3, [r4, #12]
 8009dd8:	6126      	str	r6, [r4, #16]
 8009dda:	444e      	add	r6, r9
 8009ddc:	6026      	str	r6, [r4, #0]
 8009dde:	463e      	mov	r6, r7
 8009de0:	6165      	str	r5, [r4, #20]
 8009de2:	eba5 0509 	sub.w	r5, r5, r9
 8009de6:	60a5      	str	r5, [r4, #8]
 8009de8:	42be      	cmp	r6, r7
 8009dea:	d900      	bls.n	8009dee <__ssputs_r+0x86>
 8009dec:	463e      	mov	r6, r7
 8009dee:	4632      	mov	r2, r6
 8009df0:	4641      	mov	r1, r8
 8009df2:	6820      	ldr	r0, [r4, #0]
 8009df4:	f7ff fdd0 	bl	8009998 <memmove>
 8009df8:	68a3      	ldr	r3, [r4, #8]
 8009dfa:	2000      	movs	r0, #0
 8009dfc:	1b9b      	subs	r3, r3, r6
 8009dfe:	60a3      	str	r3, [r4, #8]
 8009e00:	6823      	ldr	r3, [r4, #0]
 8009e02:	4433      	add	r3, r6
 8009e04:	6023      	str	r3, [r4, #0]
 8009e06:	e7db      	b.n	8009dc0 <__ssputs_r+0x58>
 8009e08:	462a      	mov	r2, r5
 8009e0a:	f000 fa9f 	bl	800a34c <_realloc_r>
 8009e0e:	4606      	mov	r6, r0
 8009e10:	2800      	cmp	r0, #0
 8009e12:	d1e1      	bne.n	8009dd8 <__ssputs_r+0x70>
 8009e14:	4650      	mov	r0, sl
 8009e16:	6921      	ldr	r1, [r4, #16]
 8009e18:	f7ff fde0 	bl	80099dc <_free_r>
 8009e1c:	e7c7      	b.n	8009dae <__ssputs_r+0x46>
	...

08009e20 <_svfiprintf_r>:
 8009e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e24:	4698      	mov	r8, r3
 8009e26:	898b      	ldrh	r3, [r1, #12]
 8009e28:	4607      	mov	r7, r0
 8009e2a:	061b      	lsls	r3, r3, #24
 8009e2c:	460d      	mov	r5, r1
 8009e2e:	4614      	mov	r4, r2
 8009e30:	b09d      	sub	sp, #116	; 0x74
 8009e32:	d50e      	bpl.n	8009e52 <_svfiprintf_r+0x32>
 8009e34:	690b      	ldr	r3, [r1, #16]
 8009e36:	b963      	cbnz	r3, 8009e52 <_svfiprintf_r+0x32>
 8009e38:	2140      	movs	r1, #64	; 0x40
 8009e3a:	f7ff fe37 	bl	8009aac <_malloc_r>
 8009e3e:	6028      	str	r0, [r5, #0]
 8009e40:	6128      	str	r0, [r5, #16]
 8009e42:	b920      	cbnz	r0, 8009e4e <_svfiprintf_r+0x2e>
 8009e44:	230c      	movs	r3, #12
 8009e46:	603b      	str	r3, [r7, #0]
 8009e48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e4c:	e0d1      	b.n	8009ff2 <_svfiprintf_r+0x1d2>
 8009e4e:	2340      	movs	r3, #64	; 0x40
 8009e50:	616b      	str	r3, [r5, #20]
 8009e52:	2300      	movs	r3, #0
 8009e54:	9309      	str	r3, [sp, #36]	; 0x24
 8009e56:	2320      	movs	r3, #32
 8009e58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009e5c:	2330      	movs	r3, #48	; 0x30
 8009e5e:	f04f 0901 	mov.w	r9, #1
 8009e62:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e66:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a00c <_svfiprintf_r+0x1ec>
 8009e6a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009e6e:	4623      	mov	r3, r4
 8009e70:	469a      	mov	sl, r3
 8009e72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e76:	b10a      	cbz	r2, 8009e7c <_svfiprintf_r+0x5c>
 8009e78:	2a25      	cmp	r2, #37	; 0x25
 8009e7a:	d1f9      	bne.n	8009e70 <_svfiprintf_r+0x50>
 8009e7c:	ebba 0b04 	subs.w	fp, sl, r4
 8009e80:	d00b      	beq.n	8009e9a <_svfiprintf_r+0x7a>
 8009e82:	465b      	mov	r3, fp
 8009e84:	4622      	mov	r2, r4
 8009e86:	4629      	mov	r1, r5
 8009e88:	4638      	mov	r0, r7
 8009e8a:	f7ff ff6d 	bl	8009d68 <__ssputs_r>
 8009e8e:	3001      	adds	r0, #1
 8009e90:	f000 80aa 	beq.w	8009fe8 <_svfiprintf_r+0x1c8>
 8009e94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e96:	445a      	add	r2, fp
 8009e98:	9209      	str	r2, [sp, #36]	; 0x24
 8009e9a:	f89a 3000 	ldrb.w	r3, [sl]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	f000 80a2 	beq.w	8009fe8 <_svfiprintf_r+0x1c8>
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009eaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009eae:	f10a 0a01 	add.w	sl, sl, #1
 8009eb2:	9304      	str	r3, [sp, #16]
 8009eb4:	9307      	str	r3, [sp, #28]
 8009eb6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009eba:	931a      	str	r3, [sp, #104]	; 0x68
 8009ebc:	4654      	mov	r4, sl
 8009ebe:	2205      	movs	r2, #5
 8009ec0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ec4:	4851      	ldr	r0, [pc, #324]	; (800a00c <_svfiprintf_r+0x1ec>)
 8009ec6:	f7ff fd3b 	bl	8009940 <memchr>
 8009eca:	9a04      	ldr	r2, [sp, #16]
 8009ecc:	b9d8      	cbnz	r0, 8009f06 <_svfiprintf_r+0xe6>
 8009ece:	06d0      	lsls	r0, r2, #27
 8009ed0:	bf44      	itt	mi
 8009ed2:	2320      	movmi	r3, #32
 8009ed4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ed8:	0711      	lsls	r1, r2, #28
 8009eda:	bf44      	itt	mi
 8009edc:	232b      	movmi	r3, #43	; 0x2b
 8009ede:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ee2:	f89a 3000 	ldrb.w	r3, [sl]
 8009ee6:	2b2a      	cmp	r3, #42	; 0x2a
 8009ee8:	d015      	beq.n	8009f16 <_svfiprintf_r+0xf6>
 8009eea:	4654      	mov	r4, sl
 8009eec:	2000      	movs	r0, #0
 8009eee:	f04f 0c0a 	mov.w	ip, #10
 8009ef2:	9a07      	ldr	r2, [sp, #28]
 8009ef4:	4621      	mov	r1, r4
 8009ef6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009efa:	3b30      	subs	r3, #48	; 0x30
 8009efc:	2b09      	cmp	r3, #9
 8009efe:	d94e      	bls.n	8009f9e <_svfiprintf_r+0x17e>
 8009f00:	b1b0      	cbz	r0, 8009f30 <_svfiprintf_r+0x110>
 8009f02:	9207      	str	r2, [sp, #28]
 8009f04:	e014      	b.n	8009f30 <_svfiprintf_r+0x110>
 8009f06:	eba0 0308 	sub.w	r3, r0, r8
 8009f0a:	fa09 f303 	lsl.w	r3, r9, r3
 8009f0e:	4313      	orrs	r3, r2
 8009f10:	46a2      	mov	sl, r4
 8009f12:	9304      	str	r3, [sp, #16]
 8009f14:	e7d2      	b.n	8009ebc <_svfiprintf_r+0x9c>
 8009f16:	9b03      	ldr	r3, [sp, #12]
 8009f18:	1d19      	adds	r1, r3, #4
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	9103      	str	r1, [sp, #12]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	bfbb      	ittet	lt
 8009f22:	425b      	neglt	r3, r3
 8009f24:	f042 0202 	orrlt.w	r2, r2, #2
 8009f28:	9307      	strge	r3, [sp, #28]
 8009f2a:	9307      	strlt	r3, [sp, #28]
 8009f2c:	bfb8      	it	lt
 8009f2e:	9204      	strlt	r2, [sp, #16]
 8009f30:	7823      	ldrb	r3, [r4, #0]
 8009f32:	2b2e      	cmp	r3, #46	; 0x2e
 8009f34:	d10c      	bne.n	8009f50 <_svfiprintf_r+0x130>
 8009f36:	7863      	ldrb	r3, [r4, #1]
 8009f38:	2b2a      	cmp	r3, #42	; 0x2a
 8009f3a:	d135      	bne.n	8009fa8 <_svfiprintf_r+0x188>
 8009f3c:	9b03      	ldr	r3, [sp, #12]
 8009f3e:	3402      	adds	r4, #2
 8009f40:	1d1a      	adds	r2, r3, #4
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	9203      	str	r2, [sp, #12]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	bfb8      	it	lt
 8009f4a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009f4e:	9305      	str	r3, [sp, #20]
 8009f50:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800a010 <_svfiprintf_r+0x1f0>
 8009f54:	2203      	movs	r2, #3
 8009f56:	4650      	mov	r0, sl
 8009f58:	7821      	ldrb	r1, [r4, #0]
 8009f5a:	f7ff fcf1 	bl	8009940 <memchr>
 8009f5e:	b140      	cbz	r0, 8009f72 <_svfiprintf_r+0x152>
 8009f60:	2340      	movs	r3, #64	; 0x40
 8009f62:	eba0 000a 	sub.w	r0, r0, sl
 8009f66:	fa03 f000 	lsl.w	r0, r3, r0
 8009f6a:	9b04      	ldr	r3, [sp, #16]
 8009f6c:	3401      	adds	r4, #1
 8009f6e:	4303      	orrs	r3, r0
 8009f70:	9304      	str	r3, [sp, #16]
 8009f72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f76:	2206      	movs	r2, #6
 8009f78:	4826      	ldr	r0, [pc, #152]	; (800a014 <_svfiprintf_r+0x1f4>)
 8009f7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009f7e:	f7ff fcdf 	bl	8009940 <memchr>
 8009f82:	2800      	cmp	r0, #0
 8009f84:	d038      	beq.n	8009ff8 <_svfiprintf_r+0x1d8>
 8009f86:	4b24      	ldr	r3, [pc, #144]	; (800a018 <_svfiprintf_r+0x1f8>)
 8009f88:	bb1b      	cbnz	r3, 8009fd2 <_svfiprintf_r+0x1b2>
 8009f8a:	9b03      	ldr	r3, [sp, #12]
 8009f8c:	3307      	adds	r3, #7
 8009f8e:	f023 0307 	bic.w	r3, r3, #7
 8009f92:	3308      	adds	r3, #8
 8009f94:	9303      	str	r3, [sp, #12]
 8009f96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f98:	4433      	add	r3, r6
 8009f9a:	9309      	str	r3, [sp, #36]	; 0x24
 8009f9c:	e767      	b.n	8009e6e <_svfiprintf_r+0x4e>
 8009f9e:	460c      	mov	r4, r1
 8009fa0:	2001      	movs	r0, #1
 8009fa2:	fb0c 3202 	mla	r2, ip, r2, r3
 8009fa6:	e7a5      	b.n	8009ef4 <_svfiprintf_r+0xd4>
 8009fa8:	2300      	movs	r3, #0
 8009faa:	f04f 0c0a 	mov.w	ip, #10
 8009fae:	4619      	mov	r1, r3
 8009fb0:	3401      	adds	r4, #1
 8009fb2:	9305      	str	r3, [sp, #20]
 8009fb4:	4620      	mov	r0, r4
 8009fb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009fba:	3a30      	subs	r2, #48	; 0x30
 8009fbc:	2a09      	cmp	r2, #9
 8009fbe:	d903      	bls.n	8009fc8 <_svfiprintf_r+0x1a8>
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d0c5      	beq.n	8009f50 <_svfiprintf_r+0x130>
 8009fc4:	9105      	str	r1, [sp, #20]
 8009fc6:	e7c3      	b.n	8009f50 <_svfiprintf_r+0x130>
 8009fc8:	4604      	mov	r4, r0
 8009fca:	2301      	movs	r3, #1
 8009fcc:	fb0c 2101 	mla	r1, ip, r1, r2
 8009fd0:	e7f0      	b.n	8009fb4 <_svfiprintf_r+0x194>
 8009fd2:	ab03      	add	r3, sp, #12
 8009fd4:	9300      	str	r3, [sp, #0]
 8009fd6:	462a      	mov	r2, r5
 8009fd8:	4638      	mov	r0, r7
 8009fda:	4b10      	ldr	r3, [pc, #64]	; (800a01c <_svfiprintf_r+0x1fc>)
 8009fdc:	a904      	add	r1, sp, #16
 8009fde:	f3af 8000 	nop.w
 8009fe2:	1c42      	adds	r2, r0, #1
 8009fe4:	4606      	mov	r6, r0
 8009fe6:	d1d6      	bne.n	8009f96 <_svfiprintf_r+0x176>
 8009fe8:	89ab      	ldrh	r3, [r5, #12]
 8009fea:	065b      	lsls	r3, r3, #25
 8009fec:	f53f af2c 	bmi.w	8009e48 <_svfiprintf_r+0x28>
 8009ff0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ff2:	b01d      	add	sp, #116	; 0x74
 8009ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ff8:	ab03      	add	r3, sp, #12
 8009ffa:	9300      	str	r3, [sp, #0]
 8009ffc:	462a      	mov	r2, r5
 8009ffe:	4638      	mov	r0, r7
 800a000:	4b06      	ldr	r3, [pc, #24]	; (800a01c <_svfiprintf_r+0x1fc>)
 800a002:	a904      	add	r1, sp, #16
 800a004:	f000 f87c 	bl	800a100 <_printf_i>
 800a008:	e7eb      	b.n	8009fe2 <_svfiprintf_r+0x1c2>
 800a00a:	bf00      	nop
 800a00c:	0800a84c 	.word	0x0800a84c
 800a010:	0800a852 	.word	0x0800a852
 800a014:	0800a856 	.word	0x0800a856
 800a018:	00000000 	.word	0x00000000
 800a01c:	08009d69 	.word	0x08009d69

0800a020 <_printf_common>:
 800a020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a024:	4616      	mov	r6, r2
 800a026:	4699      	mov	r9, r3
 800a028:	688a      	ldr	r2, [r1, #8]
 800a02a:	690b      	ldr	r3, [r1, #16]
 800a02c:	4607      	mov	r7, r0
 800a02e:	4293      	cmp	r3, r2
 800a030:	bfb8      	it	lt
 800a032:	4613      	movlt	r3, r2
 800a034:	6033      	str	r3, [r6, #0]
 800a036:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a03a:	460c      	mov	r4, r1
 800a03c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a040:	b10a      	cbz	r2, 800a046 <_printf_common+0x26>
 800a042:	3301      	adds	r3, #1
 800a044:	6033      	str	r3, [r6, #0]
 800a046:	6823      	ldr	r3, [r4, #0]
 800a048:	0699      	lsls	r1, r3, #26
 800a04a:	bf42      	ittt	mi
 800a04c:	6833      	ldrmi	r3, [r6, #0]
 800a04e:	3302      	addmi	r3, #2
 800a050:	6033      	strmi	r3, [r6, #0]
 800a052:	6825      	ldr	r5, [r4, #0]
 800a054:	f015 0506 	ands.w	r5, r5, #6
 800a058:	d106      	bne.n	800a068 <_printf_common+0x48>
 800a05a:	f104 0a19 	add.w	sl, r4, #25
 800a05e:	68e3      	ldr	r3, [r4, #12]
 800a060:	6832      	ldr	r2, [r6, #0]
 800a062:	1a9b      	subs	r3, r3, r2
 800a064:	42ab      	cmp	r3, r5
 800a066:	dc28      	bgt.n	800a0ba <_printf_common+0x9a>
 800a068:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a06c:	1e13      	subs	r3, r2, #0
 800a06e:	6822      	ldr	r2, [r4, #0]
 800a070:	bf18      	it	ne
 800a072:	2301      	movne	r3, #1
 800a074:	0692      	lsls	r2, r2, #26
 800a076:	d42d      	bmi.n	800a0d4 <_printf_common+0xb4>
 800a078:	4649      	mov	r1, r9
 800a07a:	4638      	mov	r0, r7
 800a07c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a080:	47c0      	blx	r8
 800a082:	3001      	adds	r0, #1
 800a084:	d020      	beq.n	800a0c8 <_printf_common+0xa8>
 800a086:	6823      	ldr	r3, [r4, #0]
 800a088:	68e5      	ldr	r5, [r4, #12]
 800a08a:	f003 0306 	and.w	r3, r3, #6
 800a08e:	2b04      	cmp	r3, #4
 800a090:	bf18      	it	ne
 800a092:	2500      	movne	r5, #0
 800a094:	6832      	ldr	r2, [r6, #0]
 800a096:	f04f 0600 	mov.w	r6, #0
 800a09a:	68a3      	ldr	r3, [r4, #8]
 800a09c:	bf08      	it	eq
 800a09e:	1aad      	subeq	r5, r5, r2
 800a0a0:	6922      	ldr	r2, [r4, #16]
 800a0a2:	bf08      	it	eq
 800a0a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a0a8:	4293      	cmp	r3, r2
 800a0aa:	bfc4      	itt	gt
 800a0ac:	1a9b      	subgt	r3, r3, r2
 800a0ae:	18ed      	addgt	r5, r5, r3
 800a0b0:	341a      	adds	r4, #26
 800a0b2:	42b5      	cmp	r5, r6
 800a0b4:	d11a      	bne.n	800a0ec <_printf_common+0xcc>
 800a0b6:	2000      	movs	r0, #0
 800a0b8:	e008      	b.n	800a0cc <_printf_common+0xac>
 800a0ba:	2301      	movs	r3, #1
 800a0bc:	4652      	mov	r2, sl
 800a0be:	4649      	mov	r1, r9
 800a0c0:	4638      	mov	r0, r7
 800a0c2:	47c0      	blx	r8
 800a0c4:	3001      	adds	r0, #1
 800a0c6:	d103      	bne.n	800a0d0 <_printf_common+0xb0>
 800a0c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a0cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0d0:	3501      	adds	r5, #1
 800a0d2:	e7c4      	b.n	800a05e <_printf_common+0x3e>
 800a0d4:	2030      	movs	r0, #48	; 0x30
 800a0d6:	18e1      	adds	r1, r4, r3
 800a0d8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a0dc:	1c5a      	adds	r2, r3, #1
 800a0de:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a0e2:	4422      	add	r2, r4
 800a0e4:	3302      	adds	r3, #2
 800a0e6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a0ea:	e7c5      	b.n	800a078 <_printf_common+0x58>
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	4622      	mov	r2, r4
 800a0f0:	4649      	mov	r1, r9
 800a0f2:	4638      	mov	r0, r7
 800a0f4:	47c0      	blx	r8
 800a0f6:	3001      	adds	r0, #1
 800a0f8:	d0e6      	beq.n	800a0c8 <_printf_common+0xa8>
 800a0fa:	3601      	adds	r6, #1
 800a0fc:	e7d9      	b.n	800a0b2 <_printf_common+0x92>
	...

0800a100 <_printf_i>:
 800a100:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a104:	7e0f      	ldrb	r7, [r1, #24]
 800a106:	4691      	mov	r9, r2
 800a108:	2f78      	cmp	r7, #120	; 0x78
 800a10a:	4680      	mov	r8, r0
 800a10c:	460c      	mov	r4, r1
 800a10e:	469a      	mov	sl, r3
 800a110:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a112:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a116:	d807      	bhi.n	800a128 <_printf_i+0x28>
 800a118:	2f62      	cmp	r7, #98	; 0x62
 800a11a:	d80a      	bhi.n	800a132 <_printf_i+0x32>
 800a11c:	2f00      	cmp	r7, #0
 800a11e:	f000 80d9 	beq.w	800a2d4 <_printf_i+0x1d4>
 800a122:	2f58      	cmp	r7, #88	; 0x58
 800a124:	f000 80a4 	beq.w	800a270 <_printf_i+0x170>
 800a128:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a12c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a130:	e03a      	b.n	800a1a8 <_printf_i+0xa8>
 800a132:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a136:	2b15      	cmp	r3, #21
 800a138:	d8f6      	bhi.n	800a128 <_printf_i+0x28>
 800a13a:	a101      	add	r1, pc, #4	; (adr r1, 800a140 <_printf_i+0x40>)
 800a13c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a140:	0800a199 	.word	0x0800a199
 800a144:	0800a1ad 	.word	0x0800a1ad
 800a148:	0800a129 	.word	0x0800a129
 800a14c:	0800a129 	.word	0x0800a129
 800a150:	0800a129 	.word	0x0800a129
 800a154:	0800a129 	.word	0x0800a129
 800a158:	0800a1ad 	.word	0x0800a1ad
 800a15c:	0800a129 	.word	0x0800a129
 800a160:	0800a129 	.word	0x0800a129
 800a164:	0800a129 	.word	0x0800a129
 800a168:	0800a129 	.word	0x0800a129
 800a16c:	0800a2bb 	.word	0x0800a2bb
 800a170:	0800a1dd 	.word	0x0800a1dd
 800a174:	0800a29d 	.word	0x0800a29d
 800a178:	0800a129 	.word	0x0800a129
 800a17c:	0800a129 	.word	0x0800a129
 800a180:	0800a2dd 	.word	0x0800a2dd
 800a184:	0800a129 	.word	0x0800a129
 800a188:	0800a1dd 	.word	0x0800a1dd
 800a18c:	0800a129 	.word	0x0800a129
 800a190:	0800a129 	.word	0x0800a129
 800a194:	0800a2a5 	.word	0x0800a2a5
 800a198:	682b      	ldr	r3, [r5, #0]
 800a19a:	1d1a      	adds	r2, r3, #4
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	602a      	str	r2, [r5, #0]
 800a1a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a1a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	e0a4      	b.n	800a2f6 <_printf_i+0x1f6>
 800a1ac:	6820      	ldr	r0, [r4, #0]
 800a1ae:	6829      	ldr	r1, [r5, #0]
 800a1b0:	0606      	lsls	r6, r0, #24
 800a1b2:	f101 0304 	add.w	r3, r1, #4
 800a1b6:	d50a      	bpl.n	800a1ce <_printf_i+0xce>
 800a1b8:	680e      	ldr	r6, [r1, #0]
 800a1ba:	602b      	str	r3, [r5, #0]
 800a1bc:	2e00      	cmp	r6, #0
 800a1be:	da03      	bge.n	800a1c8 <_printf_i+0xc8>
 800a1c0:	232d      	movs	r3, #45	; 0x2d
 800a1c2:	4276      	negs	r6, r6
 800a1c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1c8:	230a      	movs	r3, #10
 800a1ca:	485e      	ldr	r0, [pc, #376]	; (800a344 <_printf_i+0x244>)
 800a1cc:	e019      	b.n	800a202 <_printf_i+0x102>
 800a1ce:	680e      	ldr	r6, [r1, #0]
 800a1d0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a1d4:	602b      	str	r3, [r5, #0]
 800a1d6:	bf18      	it	ne
 800a1d8:	b236      	sxthne	r6, r6
 800a1da:	e7ef      	b.n	800a1bc <_printf_i+0xbc>
 800a1dc:	682b      	ldr	r3, [r5, #0]
 800a1de:	6820      	ldr	r0, [r4, #0]
 800a1e0:	1d19      	adds	r1, r3, #4
 800a1e2:	6029      	str	r1, [r5, #0]
 800a1e4:	0601      	lsls	r1, r0, #24
 800a1e6:	d501      	bpl.n	800a1ec <_printf_i+0xec>
 800a1e8:	681e      	ldr	r6, [r3, #0]
 800a1ea:	e002      	b.n	800a1f2 <_printf_i+0xf2>
 800a1ec:	0646      	lsls	r6, r0, #25
 800a1ee:	d5fb      	bpl.n	800a1e8 <_printf_i+0xe8>
 800a1f0:	881e      	ldrh	r6, [r3, #0]
 800a1f2:	2f6f      	cmp	r7, #111	; 0x6f
 800a1f4:	bf0c      	ite	eq
 800a1f6:	2308      	moveq	r3, #8
 800a1f8:	230a      	movne	r3, #10
 800a1fa:	4852      	ldr	r0, [pc, #328]	; (800a344 <_printf_i+0x244>)
 800a1fc:	2100      	movs	r1, #0
 800a1fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a202:	6865      	ldr	r5, [r4, #4]
 800a204:	2d00      	cmp	r5, #0
 800a206:	bfa8      	it	ge
 800a208:	6821      	ldrge	r1, [r4, #0]
 800a20a:	60a5      	str	r5, [r4, #8]
 800a20c:	bfa4      	itt	ge
 800a20e:	f021 0104 	bicge.w	r1, r1, #4
 800a212:	6021      	strge	r1, [r4, #0]
 800a214:	b90e      	cbnz	r6, 800a21a <_printf_i+0x11a>
 800a216:	2d00      	cmp	r5, #0
 800a218:	d04d      	beq.n	800a2b6 <_printf_i+0x1b6>
 800a21a:	4615      	mov	r5, r2
 800a21c:	fbb6 f1f3 	udiv	r1, r6, r3
 800a220:	fb03 6711 	mls	r7, r3, r1, r6
 800a224:	5dc7      	ldrb	r7, [r0, r7]
 800a226:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a22a:	4637      	mov	r7, r6
 800a22c:	42bb      	cmp	r3, r7
 800a22e:	460e      	mov	r6, r1
 800a230:	d9f4      	bls.n	800a21c <_printf_i+0x11c>
 800a232:	2b08      	cmp	r3, #8
 800a234:	d10b      	bne.n	800a24e <_printf_i+0x14e>
 800a236:	6823      	ldr	r3, [r4, #0]
 800a238:	07de      	lsls	r6, r3, #31
 800a23a:	d508      	bpl.n	800a24e <_printf_i+0x14e>
 800a23c:	6923      	ldr	r3, [r4, #16]
 800a23e:	6861      	ldr	r1, [r4, #4]
 800a240:	4299      	cmp	r1, r3
 800a242:	bfde      	ittt	le
 800a244:	2330      	movle	r3, #48	; 0x30
 800a246:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a24a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a24e:	1b52      	subs	r2, r2, r5
 800a250:	6122      	str	r2, [r4, #16]
 800a252:	464b      	mov	r3, r9
 800a254:	4621      	mov	r1, r4
 800a256:	4640      	mov	r0, r8
 800a258:	f8cd a000 	str.w	sl, [sp]
 800a25c:	aa03      	add	r2, sp, #12
 800a25e:	f7ff fedf 	bl	800a020 <_printf_common>
 800a262:	3001      	adds	r0, #1
 800a264:	d14c      	bne.n	800a300 <_printf_i+0x200>
 800a266:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a26a:	b004      	add	sp, #16
 800a26c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a270:	4834      	ldr	r0, [pc, #208]	; (800a344 <_printf_i+0x244>)
 800a272:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a276:	6829      	ldr	r1, [r5, #0]
 800a278:	6823      	ldr	r3, [r4, #0]
 800a27a:	f851 6b04 	ldr.w	r6, [r1], #4
 800a27e:	6029      	str	r1, [r5, #0]
 800a280:	061d      	lsls	r5, r3, #24
 800a282:	d514      	bpl.n	800a2ae <_printf_i+0x1ae>
 800a284:	07df      	lsls	r7, r3, #31
 800a286:	bf44      	itt	mi
 800a288:	f043 0320 	orrmi.w	r3, r3, #32
 800a28c:	6023      	strmi	r3, [r4, #0]
 800a28e:	b91e      	cbnz	r6, 800a298 <_printf_i+0x198>
 800a290:	6823      	ldr	r3, [r4, #0]
 800a292:	f023 0320 	bic.w	r3, r3, #32
 800a296:	6023      	str	r3, [r4, #0]
 800a298:	2310      	movs	r3, #16
 800a29a:	e7af      	b.n	800a1fc <_printf_i+0xfc>
 800a29c:	6823      	ldr	r3, [r4, #0]
 800a29e:	f043 0320 	orr.w	r3, r3, #32
 800a2a2:	6023      	str	r3, [r4, #0]
 800a2a4:	2378      	movs	r3, #120	; 0x78
 800a2a6:	4828      	ldr	r0, [pc, #160]	; (800a348 <_printf_i+0x248>)
 800a2a8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a2ac:	e7e3      	b.n	800a276 <_printf_i+0x176>
 800a2ae:	0659      	lsls	r1, r3, #25
 800a2b0:	bf48      	it	mi
 800a2b2:	b2b6      	uxthmi	r6, r6
 800a2b4:	e7e6      	b.n	800a284 <_printf_i+0x184>
 800a2b6:	4615      	mov	r5, r2
 800a2b8:	e7bb      	b.n	800a232 <_printf_i+0x132>
 800a2ba:	682b      	ldr	r3, [r5, #0]
 800a2bc:	6826      	ldr	r6, [r4, #0]
 800a2be:	1d18      	adds	r0, r3, #4
 800a2c0:	6961      	ldr	r1, [r4, #20]
 800a2c2:	6028      	str	r0, [r5, #0]
 800a2c4:	0635      	lsls	r5, r6, #24
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	d501      	bpl.n	800a2ce <_printf_i+0x1ce>
 800a2ca:	6019      	str	r1, [r3, #0]
 800a2cc:	e002      	b.n	800a2d4 <_printf_i+0x1d4>
 800a2ce:	0670      	lsls	r0, r6, #25
 800a2d0:	d5fb      	bpl.n	800a2ca <_printf_i+0x1ca>
 800a2d2:	8019      	strh	r1, [r3, #0]
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	4615      	mov	r5, r2
 800a2d8:	6123      	str	r3, [r4, #16]
 800a2da:	e7ba      	b.n	800a252 <_printf_i+0x152>
 800a2dc:	682b      	ldr	r3, [r5, #0]
 800a2de:	2100      	movs	r1, #0
 800a2e0:	1d1a      	adds	r2, r3, #4
 800a2e2:	602a      	str	r2, [r5, #0]
 800a2e4:	681d      	ldr	r5, [r3, #0]
 800a2e6:	6862      	ldr	r2, [r4, #4]
 800a2e8:	4628      	mov	r0, r5
 800a2ea:	f7ff fb29 	bl	8009940 <memchr>
 800a2ee:	b108      	cbz	r0, 800a2f4 <_printf_i+0x1f4>
 800a2f0:	1b40      	subs	r0, r0, r5
 800a2f2:	6060      	str	r0, [r4, #4]
 800a2f4:	6863      	ldr	r3, [r4, #4]
 800a2f6:	6123      	str	r3, [r4, #16]
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2fe:	e7a8      	b.n	800a252 <_printf_i+0x152>
 800a300:	462a      	mov	r2, r5
 800a302:	4649      	mov	r1, r9
 800a304:	4640      	mov	r0, r8
 800a306:	6923      	ldr	r3, [r4, #16]
 800a308:	47d0      	blx	sl
 800a30a:	3001      	adds	r0, #1
 800a30c:	d0ab      	beq.n	800a266 <_printf_i+0x166>
 800a30e:	6823      	ldr	r3, [r4, #0]
 800a310:	079b      	lsls	r3, r3, #30
 800a312:	d413      	bmi.n	800a33c <_printf_i+0x23c>
 800a314:	68e0      	ldr	r0, [r4, #12]
 800a316:	9b03      	ldr	r3, [sp, #12]
 800a318:	4298      	cmp	r0, r3
 800a31a:	bfb8      	it	lt
 800a31c:	4618      	movlt	r0, r3
 800a31e:	e7a4      	b.n	800a26a <_printf_i+0x16a>
 800a320:	2301      	movs	r3, #1
 800a322:	4632      	mov	r2, r6
 800a324:	4649      	mov	r1, r9
 800a326:	4640      	mov	r0, r8
 800a328:	47d0      	blx	sl
 800a32a:	3001      	adds	r0, #1
 800a32c:	d09b      	beq.n	800a266 <_printf_i+0x166>
 800a32e:	3501      	adds	r5, #1
 800a330:	68e3      	ldr	r3, [r4, #12]
 800a332:	9903      	ldr	r1, [sp, #12]
 800a334:	1a5b      	subs	r3, r3, r1
 800a336:	42ab      	cmp	r3, r5
 800a338:	dcf2      	bgt.n	800a320 <_printf_i+0x220>
 800a33a:	e7eb      	b.n	800a314 <_printf_i+0x214>
 800a33c:	2500      	movs	r5, #0
 800a33e:	f104 0619 	add.w	r6, r4, #25
 800a342:	e7f5      	b.n	800a330 <_printf_i+0x230>
 800a344:	0800a85d 	.word	0x0800a85d
 800a348:	0800a86e 	.word	0x0800a86e

0800a34c <_realloc_r>:
 800a34c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a350:	4680      	mov	r8, r0
 800a352:	4614      	mov	r4, r2
 800a354:	460e      	mov	r6, r1
 800a356:	b921      	cbnz	r1, 800a362 <_realloc_r+0x16>
 800a358:	4611      	mov	r1, r2
 800a35a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a35e:	f7ff bba5 	b.w	8009aac <_malloc_r>
 800a362:	b92a      	cbnz	r2, 800a370 <_realloc_r+0x24>
 800a364:	f7ff fb3a 	bl	80099dc <_free_r>
 800a368:	4625      	mov	r5, r4
 800a36a:	4628      	mov	r0, r5
 800a36c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a370:	f000 f81b 	bl	800a3aa <_malloc_usable_size_r>
 800a374:	4284      	cmp	r4, r0
 800a376:	4607      	mov	r7, r0
 800a378:	d802      	bhi.n	800a380 <_realloc_r+0x34>
 800a37a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a37e:	d812      	bhi.n	800a3a6 <_realloc_r+0x5a>
 800a380:	4621      	mov	r1, r4
 800a382:	4640      	mov	r0, r8
 800a384:	f7ff fb92 	bl	8009aac <_malloc_r>
 800a388:	4605      	mov	r5, r0
 800a38a:	2800      	cmp	r0, #0
 800a38c:	d0ed      	beq.n	800a36a <_realloc_r+0x1e>
 800a38e:	42bc      	cmp	r4, r7
 800a390:	4622      	mov	r2, r4
 800a392:	4631      	mov	r1, r6
 800a394:	bf28      	it	cs
 800a396:	463a      	movcs	r2, r7
 800a398:	f7ff faf0 	bl	800997c <memcpy>
 800a39c:	4631      	mov	r1, r6
 800a39e:	4640      	mov	r0, r8
 800a3a0:	f7ff fb1c 	bl	80099dc <_free_r>
 800a3a4:	e7e1      	b.n	800a36a <_realloc_r+0x1e>
 800a3a6:	4635      	mov	r5, r6
 800a3a8:	e7df      	b.n	800a36a <_realloc_r+0x1e>

0800a3aa <_malloc_usable_size_r>:
 800a3aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3ae:	1f18      	subs	r0, r3, #4
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	bfbc      	itt	lt
 800a3b4:	580b      	ldrlt	r3, [r1, r0]
 800a3b6:	18c0      	addlt	r0, r0, r3
 800a3b8:	4770      	bx	lr
	...

0800a3bc <_init>:
 800a3bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3be:	bf00      	nop
 800a3c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3c2:	bc08      	pop	{r3}
 800a3c4:	469e      	mov	lr, r3
 800a3c6:	4770      	bx	lr

0800a3c8 <_fini>:
 800a3c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3ca:	bf00      	nop
 800a3cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3ce:	bc08      	pop	{r3}
 800a3d0:	469e      	mov	lr, r3
 800a3d2:	4770      	bx	lr
